local bit = require("bit")
local bor = bit.bor
local band = bit.band
local bnot = bit.bnot
local E = require("entity_db")
local i18n = require("i18n")
local log = require("klua.log"):new("test_case")

require("constants")

local anchor_y = 0
local image_y = 0
local tt, b
local scripts = require("game_scripts")
local customScripts1 = require("custom_scripts_1")
local signal = require("hump.signal")

require("templates")

local H = require("helpers")
package.loaded["balance/balance"] = nil
local balance = require("balance/balance")
local IS_PHONE = KR_TARGET == "phone"
local IS_PHONE_OR_TABLET = KR_TARGET == "phone" or KR_TARGET == "tablet"
local IS_CONSOLE = KR_TARGET == "console"

local function v(v1, v2)
	return {
		x = v1,
		y = v2
	}
end

local function vv(v1)
	return {
		x = v1,
		y = v1
	}
end

local function r(x, y, w, h)
	return {
		pos = v(x, y),
		size = v(w, h)
	}
end

local function fts(v)
	return v / FPS
end

local function ady(v)
	return v - anchor_y * image_y
end

local function adx(v)
	return v - anchor_x * image_x
end

local function np(pi, spi, ni)
	return {
		dir = 1,
		pi = pi,
		spi = spi,
		ni = ni
	}
end

local function d2r(d)
	return d * math.pi / 180
end

local function RT(name, ref)
	return E:register_t(name, ref)
end

local function AC(tpl, ...)
	return E:add_comps(tpl, ...)
end

local function CC(comp_name)
	return E:clone_c(comp_name)
end

DO_ENEMY_BIG = 2
DO_SOLDIER_BIG = 3
DO_HEROES = 3
DO_MOD_FX = 4
DO_TOWER_MODS = 10

if H.command_line_has_arg("balance_override") then
	local balance_override_path = H.command_line_argv("balance_override")

	package.loaded[balance_override_path] = nil

	require(balance_override_path)
end

if game and game.store and game.store.level and game.store.level.test_case and game.store.level.test_case.patch_balance then
	local new_balance = game.store.level.test_case:patch_balance()

	if new_balance then
		balance = new_balance
	end
end

tt = E:register_t("pop_mage", "pop")
tt.render.sprites[1].name = "elven_pops_0001"
tt = E:register_t("pop_archer", "pop")
tt.render.sprites[1].name = "elven_pops_0002"
tt = E:register_t("pop_barrack1", "pop")
tt.render.sprites[1].name = "elven_pops_0003"
tt = E:register_t("pop_barrack2", "pop")
tt.render.sprites[1].name = "elven_pops_0004"
tt = E:register_t("pop_artillery", "pop")
tt.render.sprites[1].name = "elven_pops_0005"
tt = E:register_t("pop_wild_mage", "pop")
tt.render.sprites[1].name = "elven_pops_0006"
tt = E:register_t("pop_high_elven", "pop")
tt.render.sprites[1].name = "elven_pops_0007"
tt = E:register_t("pop_ewoks", "pop")
tt.render.sprites[1].name = "elven_pops_0008"
tt = E:register_t("pop_arcane", "pop")
tt.render.sprites[1].name = "elven_pops_0009"
tt = E:register_t("pop_golden", "pop")
tt.render.sprites[1].name = "elven_pops_0010"
tt = E:register_t("pop_death", "pop")
tt.render.sprites[1].name = "elven_pops_0011"
tt = E:register_t("pop_faerie_spell", "pop")
tt.render.sprites[1].name = "elven_pops_0012"
tt = E:register_t("pop_faerie_steal", "pop")
tt.render.sprites[1].name = "elven_pops_0013"
tt = E:register_t("pop_bladesinger", "pop")
tt.render.sprites[1].name = "elven_pops_0014"
tt = E:register_t("pop_forest_keeper", "pop")
tt.render.sprites[1].name = "elven_pops_0015"
tt = E:register_t("pop_druid_henge", "pop")
tt.render.sprites[1].name = "elven_pops_0016"
tt = E:register_t("pop_entwood", "pop")
tt.render.sprites[1].name = "elven_pops_0017"
tt = E:register_t("pop_lightning1", "pop")
tt.render.sprites[1].name = "elven_pops_0018"
tt = E:register_t("pop_lightning2", "pop")
tt.render.sprites[1].name = "elven_pops_0019"
tt = E:register_t("pop_lightning3", "pop")
tt.render.sprites[1].name = "elven_pops_0020"
tt = E:register_t("pop_crit", "pop")
tt.render.sprites[1].name = "elven_pops_0021"
tt = E:register_t("pop_headshot", "pop")
tt.render.sprites[1].name = "elven_pops_0022"
tt = E:register_t("pop_crit_mages", "pop")
tt.render.sprites[1].name = "elven_pops_0023"
tt = E:register_t("pop_crit_wild_magus", "pop")
tt.render.sprites[1].name = "elven_pops_0024"
tt = E:register_t("pop_crit_high_elven", "pop")
tt.render.sprites[1].name = "elven_pops_0025"
tt = E:register_t("pop_miss", "pop")
tt.render.sprites[1].name = "elven_pops_0026"
tt = E:register_t("pop_crit_heroes", "pop_crit")
tt.pop_over_target = true
tt = E:register_t("pop_mactans", "pop")
tt.render.sprites[1].name = "mactans_pop"
tt.render.sprites[1].z = Z_OBJECTS_SKY + 1
tt = E:register_t("ps_bolt_lumenir")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "hero_lumenir_attack_projectile_trail_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(120),
	fts(120)
}
tt.particle_system.emission_rate = 30
tt.particle_system.emit_rotation_spread = math.pi / 2
tt.particle_system.z = Z_FLYING_HEROES
tt = E:register_t("ps_bolt_lumenir_mini")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "hero_lumenir_light_companion_attack_projectile_trail_particle_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(12),
	fts(12)
}
tt.particle_system.emission_rate = 15
tt.particle_system.emit_rotation_spread = math.pi / 2
tt = E:register_t("ps_bolt_lumenir_wave")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "hero_lumenir_light_companion_attack_projectile_trail_particle_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(9),
	fts(15)
}
tt.particle_system.alphas = {
	255,
	0
}
tt.particle_system.emission_rate = 15
tt.particle_system.animation_fps = 30
tt.particle_system.scales_x = {
	1.5,
	2
}
tt.particle_system.scales_y = {
	1.5,
	2
}
tt.particle_system.z = Z_OBJECTS
tt.particle_system.emit_rotation_spread = math.pi / 4
tt = E:register_t("ps_bolt_lance_lumenir")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "bolt_lance_lumenir_particle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(10),
	fts(10)
}
tt.particle_system.emission_rate = 90
tt.particle_system.emit_rotation_spread = math.pi
tt = E:register_t("ps_soul_soldier_tower_ghost")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "ghost_tower_soul_skill_projectile_particle_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(13),
	fts(13)
}
tt.particle_system.emission_rate = 60
tt.particle_system.emit_rotation_spread = math.pi
tt = E:register_t("ps_bullet_liquid_fire_lumenir")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.emission_rate = 20
tt.particle_system.emit_duration = fts(10)
tt.particle_system.emit_speed = {
	250,
	250
}
tt.particle_system.emit_rotation_spread = math.pi / 4
tt.particle_system.animated = true
tt.particle_system.animation_fps = 18
tt.particle_system.loop = false
tt.particle_system.name = "bullet_liquid_fire_lumenir_particle"
tt.particle_system.particle_lifetime = {
	fts(9),
	fts(11)
}
tt.particle_system.alphas = {
	255,
	255,
	50
}
tt.particle_system.scales_x = {
	1,
	1,
	1.5
}
tt.particle_system.scales_y = {
	1,
	1,
	1.5
}
tt.particle_system.spin = {
	-math.pi / 2,
	math.pi / 2
}
tt.particle_system.sort_y_offsets = {
	-100,
	0
}
tt = E:register_t("ps_minidragon_lumenir_fire", "ps_bullet_liquid_fire_lumenir")
tt.particle_system.emit_duration = nil
tt.particle_system.emit_speed = {
	500,
	500
}
tt.particle_system.emit_rotation_spread = math.pi / 8
tt = E:register_t("ps_hero_lumenir_fire_ball")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.particle_lifetime = {
	fts(15),
	fts(25)
}
tt.particle_system.scales_x = {
	0.75,
	2.5
}
tt.particle_system.scales_y = {
	0.75,
	2.5
}
tt.particle_system.scale_var = {
	0.5,
	1
}
tt.particle_system.emission_rate = 10
tt.particle_system.sort_y_offset = -20
tt.particle_system.z = Z_OBJECTS
tt.particle_system.name = "bolt_lance_lumenir_particle"
tt.particle_system.animated = true
tt.particle_system.particle_lifetime = {
	0.4,
	2
}
tt.particle_system.alphas = {
	255,
	0
}
tt.particle_system.scales_x = {
	1,
	3.5
}
tt.particle_system.scales_y = {
	1,
	3.5
}
tt.particle_system.scale_var = {
	0.45,
	0.9
}
tt.particle_system.scale_same_aspect = false
tt.particle_system.emit_spread = math.pi
tt.particle_system.emission_rate = 30

tt = E:register_t("ps_hero_witch_ranged_basic_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "hero_witch_ranged_attack_particle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 60
tt.particle_system.particle_lifetime = {
	fts(5),
	fts(8)
}
tt.particle_system.emit_rotation_spread = math.pi / 2

tt = E:register_t("tower_tricannon_bomb_4_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "tricannon_tower_lvl4_particle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 70
tt.particle_system.animation_fps = 15
tt.particle_system.emit_rotation_spread = math.pi * 2
tt.particle_system.emit_area_spread = v(2, 2)
tt.particle_system.z = Z_BULLET_PARTICLES
tt = E:register_t("tower_tricannon_bomb_4_bombardment_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "tricannon_tower_lvl4_particle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 60
tt.particle_system.animation_fps = 25
tt.particle_system.emit_rotation_spread = math.pi * 2
tt.particle_system.emit_area_spread = v(2, 2)
tt.particle_system.z = Z_BULLET_PARTICLES
tt = E:register_t("tower_tricannon_bomb_4_overheated_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "tricannon_tower_lvl4_particle_overheat"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 70
tt.particle_system.emit_rotation_spread = math.pi * 2
tt.particle_system.emit_area_spread = v(3, 3)
tt.particle_system.z = Z_BULLET_PARTICLES
tt = E:register_t("tower_demon_pit_demon_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "demon_pit_tower_demon_projectile_particle_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 50
tt.particle_system.particle_lifetime = {
	0.2,
	0.4
}
tt.particle_system.emit_rotation_spread = math.pi * 2
tt.particle_system.emit_area_spread = v(10, 10)
tt.particle_system.z = Z_BULLET_PARTICLES
tt = E:register_t("ps_soldier_tower_ghost")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "ghost_tower_spawn_trail_particle_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 50
tt.particle_system.particle_lifetime = {
	0.2,
	0.4
}
tt.particle_system.emit_rotation_spread = math.pi * 2
tt.particle_system.emit_area_spread = v(10, 10)
tt.particle_system.z = Z_BULLET_PARTICLES
tt = E:register_t("royal_archer_tower_lvl4_arrow_armor_breaker_trail_particle")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "royal_archer_tower_lvl4_arrow_armor_piercer_trail_particle_idle_1"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 200
tt.particle_system.animation_fps = 20
tt.particle_system.track_rotation = true
tt = E:register_t("ps_bullet_dreadeye_viper")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "dreadeye_viper_ranged_attack_particle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 80
tt.particle_system.emit_rotation_spread = math.pi * 2
tt.particle_system.z = Z_BULLET_PARTICLES
tt.particle_system.anchor = v(0.5, 0.5)
tt.particle_system.scale_var = {
	1,
	1.1
}
tt.particle_system.particle_lifetime = {
	0.6,
	0.8
}
tt = E:register_t("ps_rapacious_hunter_eagle_royal_archers")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "royal_archer_tower_royal_archer_lvl4_rapacious_hunter_eagle_attack_particle"
tt.particle_system.animated = false
tt.particle_system.loop = false
tt.particle_system.emission_rate = 30
tt.particle_system.particle_lifetime = {
	fts(1),
	fts(1)
}
tt.particle_system.z = Z_BULLET_PARTICLES
tt = E:register_t("hero_muyrn_treewalk_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.animated = true
tt.particle_system.animation_fps = 15
tt.particle_system.name = "hero_nyru_walk2_roots_particle"
tt.particle_system.loop = false
tt.particle_system.emit_duration = nil
tt.particle_system.emission_rate = 10
tt.particle_system.source_lifetime = nil
tt.particle_system.z = Z_OBJECTS
tt.particle_system.emit_area_spread = v(0, 5)
tt = E:register_t("ps_tower_tricannon_bomb_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "tricannon_tower_lvl4_particle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 70
tt.particle_system.emit_rotation_spread = math.pi * 2
tt.particle_system.emit_area_spread = v(2, 2)
tt.particle_system.z = Z_BULLET_PARTICLES
tt = E:register_t("ps_stargazers_death_star_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "elven_stargazers_tower_rising_star_particle_trail_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 20
tt.particle_system.animation_fps = 30
tt.particle_system.emit_rotation_spread = math.pi * 2
tt.particle_system.emit_area_spread = v(2, 2)
tt.particle_system.z = Z_BULLET_PARTICLES
tt = E:register_t("ps_hero_vesper_arrow_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "hero_vesper_attack_particle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.animation_fps = 15
tt.particle_system.emission_rate = 100
tt.particle_system.track_rotation = true

tt = E:register_t("ps_hero_lava_double_trouble")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "hero_lava_skill_3_particle_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.animation_fps = 30
tt.particle_system.emission_rate = 20
tt.particle_system.emit_rotation_spread = math.pi * 2
tt.particle_system.emit_area_spread = v(2, 2)
tt = E:register_t("ps_ultimate_hero_lava")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "hero_lava_ultimate_particle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.animation_fps = 15
tt.particle_system.emission_rate = 25
tt.particle_system.emit_rotation_spread = math.pi * 2
tt.particle_system.emit_area_spread = v(2, 2)

tt = E:register_t("ps_hero_vesper_arrow_to_the_knee_bullet_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "hero_vesper_arrow_to_the_knee_particles"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 300
tt.particle_system.animation_fps = 15
tt.particle_system.track_rotation = true
tt.particle_system.scales_y = {
	1.5,
	0.7
}
tt.particle_system.scales_x = {
	1.5,
	0.7
}
tt = E:register_t("ps_hero_vesper_ricochet_bullet_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "hero_vesper_ricochet_particle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.animation_fps = 35
tt.particle_system.emission_rate = 180
tt.particle_system.track_rotation = true
tt.particle_system.scales_y = {
	1.5,
	0.7
}
tt.particle_system.scales_x = {
	1.5,
	0.7
}
tt = E:register_t("ps_hero_vesper_ricochet_bullet_trail_bounce")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "hero_vesper_ricochet_particle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.animation_fps = 30
tt.particle_system.emission_rate = 180
tt.particle_system.track_rotation = true
tt.particle_system.scales_y = {
	1,
	0.7
}
tt.particle_system.scales_x = {
	1,
	0.7
}
tt = E:register_t("ps_hero_muyrn_verdant_blast_bolt_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "hero_nyru_verdant_blast_particle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(10),
	fts(10)
}
tt.particle_system.emission_rate = 60
tt.particle_system.emit_rotation_spread = math.pi * 2
tt = E:register_t("ps_tower_arborean_emissary_bolt_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "arborean_emissary_particle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(15),
	fts(15)
}
tt.particle_system.emission_rate = 45
tt.particle_system.emit_area_spread = v(8, 8)
tt.particle_system.emit_rotation_spread = math.pi * 2
tt.particle_system.scales_y = {
	1,
	1.5
}
tt.particle_system.scales_x = {
	1,
	1.5
}
tt = E:register_t("ps_tower_arborean_emissary_gift_of_nature_wisps")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "arborean_emissary_gift_of_nature_pollen"
tt.particle_system.animated = true
tt.particle_system.loop = true
tt.particle_system.emission_rate = 8
tt.particle_system.emit_direction = -math.pi * 2
tt.particle_system.emit_rotation = 0
tt.particle_system.emit_area_spread = v(20, 20)
tt.particle_system.track_offset = v(0, -10)
tt = E:register_t("ps_enemy_rhino_charge_a")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "razing_rhino_razing_rhino_charge_dust_a"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 4
tt.particle_system.track_offset = v(0, 0)
tt.particle_system.z = Z_DECALS
tt = E:register_t("ps_enemy_rhino_charge_b")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "razing_rhino_razing_rhino_charge_dust_b"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 3
tt.particle_system.track_offset = v(0, 20)
tt.particle_system.animation_fps = 15
tt.particle_system.z = Z_DECALS
tt = E:register_t("ps_bullet_enemy_unblinded_priest")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "unblinded_priest_projectile_trail_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 30
tt.particle_system.emit_rotation_spread = math.pi * 2
tt.particle_system.z = Z_BULLET_PARTICLES
tt.particle_system.anchor = v(0.5, 0.5)
tt.particle_system.particle_lifetime = {
	fts(6),
	fts(6)
}

tt = E:register_t("ps_bullet_enemy_spider_priest")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "cultist_spider_projectile_trail"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 30
tt.particle_system.emit_rotation_spread = math.pi * 2
tt.particle_system.z = Z_BULLET_PARTICLES
tt.particle_system.anchor = v(0.5, 0.5)
tt.particle_system.particle_lifetime = {
	fts(6),
	fts(6)
}

tt = E:register_t("ps_hero_space_elf_basic_attack_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "hero_therien_ranged_particle_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 30
tt.particle_system.emit_rotation_spread = math.pi * 2
tt.particle_system.z = Z_BULLET_PARTICLES
tt.particle_system.anchor = v(0.5, 0.5)
tt.particle_system.emit_area_spread = v(5, 5)

tt = E:register_t("ps_hero_spider_basic_attack_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "hero_spider_05_trail_run"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 12
tt.particle_system.track_rotation = true
tt.particle_system.particle_lifetime = {
	fts(18),
	fts(18)
}

tt = E:register_t("ps_tower_rocket_gunners_sting_missiles_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "rocket_gunners_tower_sting_missiles_particles_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 50
tt.particle_system.emit_rotation_spread = math.pi * 2
tt.particle_system.emit_area_spread = v(2, 2)
tt.particle_system.anchor = v(0.5, 0.5)
tt.particle_system.emit_offset = v(0, 0)
tt.particle_system.z = Z_BULLET_PARTICLES
tt.particle_system.particle_lifetime = {
	fts(9),
	fts(9)
}
tt.emit_offset_relative = v(-15, 0)
tt = E:register_t("ps_bullet_stage_10_obelisk_priests")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "stage10_obelisk_particle_Idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 30
tt.particle_system.emit_rotation_spread = math.pi * 2
tt.particle_system.z = Z_BULLET_PARTICLES
tt.particle_system.anchor = v(0.5, 0.5)
tt.particle_system.emit_area_spread = v(8, 8)
tt.particle_system.scales_y = {
	1,
	1.5
}
tt.particle_system.scales_x = {
	1,
	1.5
}
tt.particle_system.animation_fps = 15
tt = E:register_t("ps_tower_necromancer_skull_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "necromancer_tower_skull_projectile_particle_trail_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 60
tt.particle_system.emit_rotation_spread = math.pi * 2
tt.particle_system.emit_area_spread = v(8, 8)
tt.particle_system.scales_y = {
	1,
	1.5
}
tt.particle_system.scales_x = {
	1,
	1.5
}
tt.particle_system.anchor = v(0.5, 0.5)
tt.particle_system.emit_offset = v(0, 0)
tt.particle_system.z = Z_BULLET_PARTICLES
tt.particle_system.particle_lifetime = {
	fts(11),
	fts(11)
}
tt.emit_offset_relative = v(-15, 0)
tt = E:register_t("ps_tower_necromancer_rider_trail_A")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "necromancer_tower_death_rider_trial_particle_A_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 6
tt.particle_system.emit_area_spread = v(15, 15)
tt.particle_system.anchor = v(0.5, 0.5)
tt.particle_system.z = Z_OBJECTS
tt.particle_system.particle_lifetime = {
	fts(13),
	fts(13)
}
tt.particle_system.emit_offset = v(0, 0)
tt.emit_offset_relative = v(-10, 0)
tt = E:register_t("ps_tower_necromancer_rider_trail_B")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "necromancer_tower_death_rider_trial_particle_B_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 8
tt.particle_system.emit_area_spread = v(15, 15)
tt.particle_system.anchor = v(0.5, 0.5)
tt.particle_system.z = Z_OBJECTS + 1
tt.particle_system.particle_lifetime = {
	fts(9),
	fts(9)
}
tt.particle_system.emit_offset = v(0, 0)
tt.emit_offset_relative = v(-10, 0)
tt = E:register_t("ps_bullet_tower_ballista_skill_bomb_trail_A")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "ballista_tower_junk_particle_projectile_1"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 15
tt.particle_system.animation_fps = 30
tt.particle_system.emit_area_spread = v(10, 10)
tt.particle_system.z = Z_BULLET_PARTICLES
tt = E:register_t("ps_bullet_tower_ballista_skill_bomb_trail_B")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "ballista_tower_junk_particle_projectile_2"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 10
tt.particle_system.animation_fps = 30
tt.particle_system.emit_area_spread = v(10, 10)
tt.particle_system.z = Z_BULLET_PARTICLES
tt = E:register_t("ps_hero_mecha_smoke_1")

E:add_comps(tt, "pos", "particle_system", "main_script")

tt.particle_system.name = "hero_onagro_back_smoke_particle_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 10
tt.particle_system.emit_rotation_spread = math.pi * 2
tt.particle_system.emit_area_spread = v(2, 2)
tt.particle_system.emit_direction = 2 * math.pi / 3
tt.particle_system.emit_speed = {
	20,
	25
}
tt.particle_system.anchor = v(0.5, 0.5)
tt.particle_system.emit_offset = v(-30, 45)
tt.particle_system.z = Z_OBJECTS
tt.particle_system.sort_y_offset = -40
tt.main_script.update = scripts.ps_hero_mecha_smoke.update
tt.emit_direction_sides = {
	2 * math.pi / 3,
	math.pi / 3
}
tt = E:register_t("ps_hero_mecha_smoke_2", "ps_hero_mecha_smoke_1")
tt.particle_system.emit_offset = v(-10, 50)
tt = E:register_t("ps_bullet_hero_mecha_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "hero_onagro_attack_particle_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 50
tt.particle_system.emit_rotation_spread = math.pi * 2
tt.particle_system.emit_area_spread = v(2, 2)
tt.particle_system.anchor = v(0.5, 0.5)
tt.particle_system.emit_offset = v(0, 0)
tt.particle_system.z = Z_BULLET_PARTICLES
tt.particle_system.particle_lifetime = {
	fts(9),
	fts(9)
}
tt.emit_offset_relative = v(-15, 0)

tt = E:register_t("ps_hero_witch_spark_1")

E:add_comps(tt, "pos", "particle_system", "main_script")

tt.particle_system.name = "hero_witch_walk_particle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 10
tt.particle_system.particle_lifetime = {
	fts(25),
	fts(30)
}
tt.particle_system.emit_rotation_spread = math.pi * 2
tt.particle_system.emit_area_spread = v(2, 1)
tt.particle_system.emit_direction = 2 * math.pi / 3
tt.particle_system.emit_speed = {
	10,
	10
}
tt.particle_system.anchor = v(0.5, 0.5)
tt.particle_system.emit_offset = v(-15, 0)
tt.particle_system.z = Z_OBJECTS
tt.particle_system.animation_fps = 15
tt.particle_system.sort_y_offset = -40
tt.main_script.update = scripts.ps_hero_mecha_smoke.update
tt.emit_direction_sides = {
	2 * math.pi / 3,
	math.pi / 3
}

tt = E:register_t("ps_bullet_stage_11_cult_leader")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "mydrias_proyectile_trail_run"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(10),
	fts(10)
}
tt.particle_system.anchor = v(0.6, 0.5)
tt.particle_system.emission_rate = 30
tt.particle_system.z = Z_BULLET_PARTICLES
tt.particle_system.scales_y = {
	0.8,
	0.5
}
tt.particle_system.emit_area_spread = v(5, 5)
tt = E:register_t("ps_bullet_stage_11_veznan_skill_1")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "stage11_veznan_export_proyectile_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(18),
	fts(18)
}
tt.particle_system.alphas = {
	200,
	0
}
tt.particle_system.emission_rate = 15
tt.particle_system.z = Z_BULLET_PARTICLES
tt.particle_system.scales_y = {
	0.8,
	0.8
}
tt = E:register_t("ps_bullet_boss_corrupted_denas_spawn_entities")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "glearling_trail_trail"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(10),
	fts(10)
}
tt.particle_system.emission_rate = 30
tt.particle_system.emit_area_spread = v(5, 5)
tt.particle_system.emit_rotation_spread = math.pi * 2
tt = E:register_t("ps_bullet_stage_03_heart_of_the_arborean")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "stage_3_HeartProy_trail"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(5),
	fts(5)
}
tt.particle_system.emission_rate = 30
tt.particle_system.emit_area_spread = vv(0)
tt.particle_system.scales_y = {
	1,
	0.5
}
tt.particle_system.scales_x = {
	1,
	0.5
}
tt = E:register_t("ps_bullet_tower_flamespitter_skill_bomb")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "dwarven_flamespitter_tower_blazing_trail_projectile_particle_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 50
tt.particle_system.animation_fps = 30
tt.particle_system.emit_area_spread = vv(5)
tt.particle_system.particle_lifetime = {
	fts(8),
	fts(8)
}
tt.particle_system.z = Z_BULLET_PARTICLES
tt = E:register_t("ps_bullet_vile_spawner_spawn")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "vile_spawner_projectile_fx_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(8),
	fts(8)
}
tt.particle_system.emission_rate = 30
tt.particle_system.emit_area_spread = v(0, 0)
tt.particle_system.emit_rotation_spread = math.pi * 2
tt = E:register_t("ps_terrain_3_spores_1")

E:add_comps(tt, "pos", "particle_system")

tt.pos = v(512, -20)
tt.particle_system.alphas = {
	200,
	150,
	200,
	0
}
tt.particle_system.emission_rate = 1.5
tt.particle_system.emit_area_spread = v(1300, 10)
tt.particle_system.emit_direction = math.pi * 3 / 8
tt.particle_system.emit_speed = {
	15,
	25
}
tt.particle_system.emit_spread = math.pi / 16
tt.particle_system.particle_lifetime = {
	35,
	45
}
tt.particle_system.scale_var = {
	0.6,
	0.9
}
tt.particle_system.ts_offset = -40
tt.particle_system.z = Z_OBJECTS_SKY
tt.particle_system.name = "T3_12_spore"
tt = E:register_t("ps_terrain_3_spores_2", "ps_terrain_3_spores_1")
tt.particle_system.emit_direction = math.pi * 5 / 8
tt = E:register_t("ps_bullet_enemy_noxious_horror")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "noxious_horror_projectile_vfx_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(8),
	fts(8)
}
tt.particle_system.emission_rate = 30
tt.particle_system.emit_area_spread = v(0, 0)
tt.particle_system.emit_rotation_spread = math.pi * 2
tt = E:register_t("ps_bullet_tower_barrel")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "barrel_tower_projectile_particle"
tt.particle_system.animated = false
tt.particle_system.loop = false
tt.particle_system.emission_rate = 45
tt.particle_system.animation_fps = 30
tt.particle_system.emit_area_spread = v(10, 10)
tt.particle_system.particle_lifetime = {
	fts(10),
	fts(10)
}
tt.particle_system.emit_direction = math.pi / 3
tt.particle_system.emit_speed = {
	20,
	20
}
tt.particle_system.z = Z_BULLET_PARTICLES
tt.particle_system.scale_var = {
	0.3,
	0.5
}
tt.particle_system.alphas = {
	255,
	255,
	255,
	0
}
tt = E:register_t("ps_bullet_tower_barrel_skill_barrel")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "barrel_tower_lvl4_bad_barrel_projectile_particle_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 150
tt.particle_system.animation_fps = 30
tt.particle_system.emit_area_spread = v(10, 0)
tt.particle_system.particle_lifetime = {
	fts(10),
	fts(10)
}
tt.particle_system.z = Z_BULLET_PARTICLES
tt = E:register_t("ps_bullet_tower_sand")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "tower_sand_lvl1_particle_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 150
tt.particle_system.animation_fps = 30
tt.particle_system.emit_area_spread = v(10, 0)
tt.particle_system.particle_lifetime = {
	fts(10),
	fts(10)
}
tt.particle_system.z = Z_BULLET_PARTICLES
tt = E:register_t("ps_bullet_tower_sand_skill_gold")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "tower_sand_lvl4_skill_1_particle_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 150
tt.particle_system.animation_fps = 30
tt.particle_system.emit_area_spread = v(10, 0)
tt.particle_system.particle_lifetime = {
	fts(10),
	fts(10)
}
tt.particle_system.z = Z_BULLET_PARTICLES
tt = E:register_t("ps_aura_tower_sand_skill_big_blade")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "tower_sand_lvl4_skill_2_particle_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 20
tt.particle_system.animation_fps = 30
tt.particle_system.emit_area_spread = vv(0)
tt.particle_system.particle_lifetime = {
	fts(10),
	fts(10)
}
tt.particle_system.z = Z_BULLET_PARTICLES
tt = E:register_t("ps_hero_robot_smoke_1")

E:add_comps(tt, "pos", "particle_system", "main_script")

tt.particle_system.name = "Blaze_humitodeatras_run"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 6
tt.particle_system.emit_rotation_spread = d2r(45)
tt.particle_system.emit_area_spread = v(2, 2)
tt.particle_system.emit_speed = {
	20,
	25
}
tt.particle_system.anchor = v(0.5, 0.5)
tt.particle_system.emit_offsets = {
	v(10, 46),
	v(20, 43)
}
tt.particle_system.z = Z_OBJECTS
tt.particle_system.sort_y_offset = -40
tt.particle_system.scale_var = {
	0.7,
	0.7
}
tt.main_script.update = scripts.ps_hero_robot_smoke.update
tt.emit_direction_sides = {
	d2r(95),
	d2r(40)
}
tt = E:register_t("ps_hero_robot_smoke_2", "ps_hero_robot_smoke_1")
tt.particle_system.emit_offsets = {
	v(-10, 44),
	v(0, 41)
}
tt = E:register_t("ps_bolt_hero_dragon_gem_attack")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "hero_evil_dragon_attack_projectile_trail_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(14),
	fts(14)
}
tt.particle_system.emission_rate = 20
tt.particle_system.emit_rotation_spread = math.pi / 2
tt.particle_system.z = Z_FLYING_HEROES

tt = E:register_t("ps_bullet_hero_dragon_arb_arborean_spawn")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "hero_dragon_arborean_leaf_projectile"
tt.particle_system.animated = false
tt.particle_system.loop = false
tt.particle_system.alphas = {
	255,
	0
}
tt.particle_system.particle_lifetime = {
	fts(4),
	fts(4)
}
tt.particle_system.emission_rate = 14
tt.particle_system.track_rotation = true
tt.particle_system.z = Z_BULLET_PARTICLES
tt = E:register_t("ps_bullet_hero_dragon_arb_rune")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "hero_dragon_arborean_rune_projectile"
tt.particle_system.animated = false
tt.particle_system.loop = false
tt.particle_system.alphas = {
	255,
	0
}
tt.particle_system.particle_lifetime = {
	fts(5),
	fts(5)
}
tt.particle_system.emission_rate = 14
tt.particle_system.z = Z_BULLET_PARTICLES
tt = E:register_t("ps_bullet_hero_dragon_arb_water")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "hero_dragon_arborean_water_projectile_trail_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(10),
	fts(10)
}
tt.particle_system.emission_rate = 14
tt.particle_system.track_rotation = true
tt.particle_system.z = Z_BULLET_PARTICLES
tt = E:register_t("ps_bullet_hero_dragon_arb_tower_plants")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "hero_dragon_arborean_flower_projectile_trail"
tt.particle_system.animated = false
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(10),
	fts(10)
}
tt.particle_system.alphas = {
	255,
	0
}
tt.particle_system.emission_rate = 300
tt.particle_system.track_rotation = true
tt.particle_system.z = Z_BULLET_PARTICLES

tt = E:register_t("ps_hero_hunter_walk_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "mist_run_trail_run"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 15
tt.particle_system.emit_rotation_spread = d2r(45)
tt.particle_system.emit_area_spread = v(2, 2)
tt.particle_system.emit_speed = {
	5,
	25
}
tt.particle_system.anchor = v(0.5, 0.5)
tt.particle_system.emit_offsets = {
	v(13, 12),
	v(-13, 12)
}
tt.particle_system.z = Z_OBJECTS
tt.particle_system.particle_lifetime = {
	fts(14),
	fts(14)
}
tt.emit_direction = d2r(90)

tt = E:register_t("ps_bullet_incendiary_soldier_dwarf_tower")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "tower_dwarf_skill_particle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(15),
	fts(15)
}
tt.particle_system.emission_rate = 20
tt.particle_system.emit_rotation_spread = math.pi / 2
tt.particle_system.z = Z_BULLET_PARTICLES

tt = E:register_t("ps_bullet_hero_bird_cluster_bomb")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "gryph_skillproy_trail_run"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(15),
	fts(15)
}
tt.particle_system.emission_rate = 20
tt.particle_system.emit_rotation_spread = math.pi / 2
tt.particle_system.z = Z_BULLET_PARTICLES
tt = E:register_t("ps_bullet_hero_bird_cluster_bomb_part")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "gryph_skillshot_part_trail_run"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(14),
	fts(14)
}
tt.particle_system.emission_rate = 20
tt.particle_system.emit_rotation_spread = math.pi / 2
tt.particle_system.z = Z_BULLET_PARTICLES
tt = E:register_t("ps_bullet_stage_16_overseer_tentacle_spawn")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "overseer_fx_overseer_proyectile_trail_run"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(10),
	fts(10)
}
tt.particle_system.emission_rate = 15
tt.particle_system.emit_rotation_spread = math.pi / 2
tt.particle_system.z = Z_BULLET_PARTICLES
tt = E:register_t("ps_bullet_tower_ray_sheep")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "channeler_tower_mutation_projectile_particle_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 60
tt.particle_system.emit_rotation_spread = math.pi * 2
tt.particle_system.emit_area_spread = v(8, 8)
tt.particle_system.scales_y = {
	1,
	1.5
}
tt.particle_system.scales_x = {
	1,
	1.5
}
tt.particle_system.anchor = v(0.5, 0.5)
tt.particle_system.emit_offset = v(0, 0)
tt.particle_system.z = Z_BULLET_PARTICLES
tt.particle_system.particle_lifetime = {
	fts(8),
	fts(8)
}
tt.emit_offset_relative = v(-15, 0)

tt = E:register_t("ps_bullet_enemy_corrupted_elf")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "corrupted_ranger_arrow_particle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(10),
	fts(10)
}
tt.particle_system.emission_rate = 30
tt.particle_system.emit_area_spread = v(5, 5)
tt.particle_system.emit_rotation_spread = math.pi * 2
tt = E:register_t("ps_bullet_enemy_revenant_soulcaller")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.anchor = v(0.5, 0.5)
tt.particle_system.name = "revenant_soulcaller_proy_copy_trail"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(6),
	fts(6)
}
tt.particle_system.emission_rate = 30
tt.particle_system.z = Z_BULLET_PARTICLES
tt.particle_system.scales_y = {
	1,
	0.75
}
tt = E:register_t("ps_bullet_stage_18_eridan_arrow")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.anchor = v(0.5, 0.5)
tt.particle_system.name = "eridan_s18_arrow_particle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(11),
	fts(11)
}
tt.particle_system.emission_rate = 100
tt.particle_system.z = Z_BULLET_PARTICLES
tt.particle_system.scales_y = {
	1,
	0.75
}
tt = E:register_t("ps_bolt_dragon_bone_basic_attack")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "hero_dragon_bone_projectile_trail_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(8),
	fts(8)
}
tt.particle_system.emission_rate = 20
tt.particle_system.emit_rotation_spread = math.pi / 2
tt.particle_system.z = Z_FLYING_HEROES
tt = E:register_t("ps_bolt_dragon_bone_burst")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "hero_dragon_bone_burst_projectile_trail_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(14),
	fts(14)
}
tt.particle_system.emission_rate = 50
tt.particle_system.emit_area_spread = v(5, 0)
tt.particle_system.scales_y = {
	1,
	0.5
}
tt.particle_system.scales_x = {
	1,
	0.5
}
tt = E:register_t("ps_bullet_hero_witch_skill_polymorph")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "hero_witch_skill_1_particle_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 60
tt.particle_system.emit_rotation_spread = math.pi * 2
tt.particle_system.emit_area_spread = v(8, 8)
tt.particle_system.scales_y = {
	1,
	1.5
}
tt.particle_system.scales_x = {
	1,
	1.5
}
tt.particle_system.anchor = v(0.5, 0.5)
tt.particle_system.emit_offset = v(0, 0)
tt.particle_system.z = Z_BULLET_PARTICLES
tt.particle_system.particle_lifetime = {
	fts(8),
	fts(8)
}
tt.emit_offset_relative = v(-15, 0)
tt = E:register_t("ps_enemy_specter_chase_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "spectre_specter_rush_particle_rush_particle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(29),
	fts(29)
}
tt.particle_system.emission_rate = 20
tt.particle_system.emit_area_spread = v(5, 5)
tt.particle_system.emit_rotation_spread = math.pi * 2
tt.particle_system.emit_offset = v(0, 16)
tt.particle_system.scales_y = {
	0.9,
	1.1
}
tt.particle_system.scales_x = {
	0.9,
	1.1
}

tt = E:register_t("ps_bullet_crocs_hydra_tower_debuff")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "hydra_projectile_trail"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 15
tt.particle_system.animation_fps = 30
tt.particle_system.emit_area_spread = v(10, 0)
tt.particle_system.particle_lifetime = {
	fts(10),
	fts(10)
}
tt.particle_system.z = Z_BULLET_PARTICLES
tt = E:register_t("ps_bullet_tower_hermit_toad_mage_basic_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "hermit_toad_tower_trail_run"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 12
tt.particle_system.track_rotation = true
tt.particle_system.particle_lifetime = {
	fts(18),
	fts(18)
}
tt = E:register_t("ps_bullet_tower_hermit_toad_engineer_basic_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "hermit_toad_tower_trail2_run"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.track_rotation = true
tt.particle_system.emission_rate = 10
tt.particle_system.particle_lifetime = {
	fts(19),
	fts(19)
}
tt = E:register_t("ps_tower_hermit_toad_engineer_bubbles")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "hermit_toad_tower_bubbles_run"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 2
tt.particle_system.emit_direction = math.pi / 2
tt.particle_system.emit_spread = math.pi / 4
tt.particle_system.emit_speed = {
	3,
	11
}
tt.particle_system.scale_var = {
	0.5,
	1.1
}
tt.particle_system.emit_rotation_spread = math.pi
tt.particle_system.particle_lifetime = {
	fts(26),
	fts(26)
}
tt.particle_system.emit_area_spread = v(3, 3)
tt = E:register_t("ps_tower_hermit_toad_mage_bubbles", "ps_tower_hermit_toad_engineer_bubbles")
tt.particle_system.name = "hermit_toad_tower_bubbles2_run"
tt.particle_system.emission_rate = 2
tt.particle_system.emit_rotation = 0
tt.particle_system.emit_rotation_spread = 0
tt.particle_system.emit_area_spread = v(10, 10)
tt = E:register_t("ps_tower_hermit_toad_mage_bubbles_area", "ps_tower_hermit_toad_mage_bubbles")
tt.particle_system.emission_rate = 1
tt.particle_system.emit_area_spread = v(70, 30)
tt.particle_system.scale_var = {
	0.5,
	1.4
}

tt = E:register_t("ps_tower_sparking_geode_sparks_1")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "sparking_geode_electric_decal_1_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 6
tt.particle_system.emit_direction = 0
tt.particle_system.emit_spread = 0
tt.particle_system.emit_speed = {
	0,
	0
}
tt.particle_system.scale_var = {
	0.5,
	1.1
}
tt.particle_system.emit_rotation_spread = 0
tt.particle_system.particle_lifetime = {
	fts(42),
	fts(42)
}
tt.particle_system.emit_area_spread = v(70, 70)
tt.particle_system.emit_offset = v(0, 20)
tt.particle_system.z = Z_OBJECTS
tt = E:register_t("ps_tower_sparking_geode_sparks_2", "ps_tower_sparking_geode_sparks_1")
tt.particle_system.name = "sparking_geode_electric_decal_2_idle"
tt.particle_system.particle_lifetime = {
	fts(34),
	fts(34)
}

tt = E:register_t("ps_bullet_tower_stage_22_mages_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "Stage_22_shaman_shaman_trail_run"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 12
tt.particle_system.track_rotation = true
tt.particle_system.particle_lifetime = {
	fts(18),
	fts(18)
}
tt = E:register_t("ps_enemy_crocs_water_trail", "ps_water_trail")

E:add_comps(tt, "main_script")

tt.main_script.update = scripts.ps_enemy_crocs_water_trail.update
tt.adjust_scale = true
tt = E:register_t("ps_enemy_crocs_water_bubbles_small", "particle_system")

E:add_comps(tt, "main_script")

tt.main_script.update = scripts.ps_enemy_crocs_water_trail.update
tt.particle_system.name = "fx_water_bubble_small"
tt.particle_system.animated = true
tt.particle_system.emit_area_spread = v(6, 6)
tt.particle_system.ts_offset = 0.1
tt.particle_system.emission_rate = 4
tt.particle_system.z = Z_OBJECTS
tt.adjust_scale = false
tt.particle_system.particle_lifetime = {
	fts(24),
	fts(24)
}
tt = E:register_t("ps_enemy_crocs_water_bubbles_big", "particle_system")

E:add_comps(tt, "main_script")

tt.main_script.update = scripts.ps_enemy_crocs_water_trail.update
tt.particle_system.name = "fx_water_bubble_big"
tt.particle_system.animated = true
tt.particle_system.loop = true
tt.particle_system.particle_lifetime = {
	fts(66),
	fts(66)
}
tt.particle_system.emit_area_spread = v(12, 12)
tt.particle_system.ts_offset = 1
tt.particle_system.emission_rate = 1
tt.particle_system.z = Z_OBJECTS
tt.adjust_scale = false
tt = E:register_t("ps_enemy_crocs_water_bubbles_projectile", "particle_system")

E:add_comps(tt, "main_script")

tt.main_script.update = scripts.ps_enemy_crocs_water_trail.update
tt.particle_system.name = "fx_water_bubble_big_projectile"
tt.particle_system.animated = true
tt.particle_system.emission_rate = 3
tt.particle_system.z = Z_OBJECTS + 1
tt.particle_system.loop = true
tt.particle_system.particle_lifetime = {
	fts(48),
	fts(48)
}
tt.particle_system.scales_x = {
	1,
	0.05
}
tt.particle_system.scales_y = {
	1,
	0.05
}
tt.particle_system.scale_var = {
	0.9,
	1.1
}
tt.adjust_scale = false
tt = E:register_t("ps_croc_shaman_bullet_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.anchor = v(0.5, 0.5)
tt.particle_system.name = "shaman_bolt_2"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(8),
	fts(8)
}
tt.particle_system.emission_rate = 70
tt.particle_system.z = Z_BULLET_PARTICLES
tt.particle_system.scales_x = {
	1,
	0.5
}
tt.particle_system.scales_y = {
	1,
	0.5
}
tt = E:register_t("ps_crocs_tank_charge")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "tank_trail_trail"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 12
tt.particle_system.track_offset = v(0, 0)
tt.particle_system.z = Z_DECALS
tt.particle_system.emit_area_spread = v(4, 4)
tt.particle_system.rotation_spread = 20

tt = E:register_t("ps_bullet_enemy_brute_welder_death_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "brute_welder_tank_particle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(23),
	fts(23)
}
tt.particle_system.emission_rate = 50
tt.particle_system.emit_area_spread = v(5, 5)
tt.particle_system.emit_rotation_spread = math.pi * 2
tt.particle_system.emit_offset = v(0, 0)
tt.particle_system.scales_y = {
	0.9,
	1.1
}
tt.particle_system.scales_x = {
	0.9,
	1.1
}
tt = E:register_t("ps_enemy_scrap_speedster_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "scrap_speedster_trail"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(10),
	fts(10)
}
tt.particle_system.emission_rate = 30
tt.particle_system.emit_area_spread = v(10, 10)
tt.particle_system.emit_rotation_spread = math.pi * 2
tt.particle_system.emit_offset = v(0, 100)
tt.particle_system.scales_y = {
	0.6,
	1
}
tt.particle_system.scales_x = {
	0.6,
	1
}
tt.particle_system.z = Z_OBJECTS
tt = E:register_t("ps_bullet_enemy_darksteel_guardian_death_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "darksteel_guardian_dwatf_particle_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(8),
	fts(8)
}
tt.particle_system.emission_rate = 50
tt.particle_system.emit_area_spread = v(5, 5)
tt.particle_system.emit_rotation_spread = math.pi * 2
tt.particle_system.emit_offset = v(0, 0)
tt.particle_system.scales_y = {
	0.9,
	1.1
}
tt.particle_system.scales_x = {
	0.9,
	1.1
}
tt = E:register_t("ps_enemy_darksteel_hulk_charge_a")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "darksteel_hulk_run_particle_a"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 4
tt.particle_system.track_offset = v(0, 0)
tt.particle_system.z = Z_DECALS
tt = E:register_t("ps_enemy_darksteel_hulk_charge_b")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "darksteel_hulk_run_particle_b"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 3
tt.particle_system.track_offset = v(0, 20)
tt.particle_system.animation_fps = 15
tt.particle_system.z = Z_DECALS
tt = E:register_t("ps_bullet_boss_machinist")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "dlc_dwarf_boss_operator_proytrail"
tt.particle_system.animated = false
tt.particle_system.emission_rate = 15
tt.particle_system.spin = {
	math.pi / 6,
	math.pi / 4
}
tt.particle_system.emit_area_spread = v(10, 10)
tt.particle_system.particle_lifetime = {
	fts(25),
	fts(25)
}
tt.particle_system.alphas = {
	255,
	0
}
tt.particle_system.scales_x = {
	0.9,
	1.2
}
tt.particle_system.scales_y = {
	0.9,
	1.2
}
tt.particle_system.z = Z_BULLET_PARTICLES
tt = E:register_t("ps_bullet_stage_25_torso_missile")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "DLC_stage_03_missile_particle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(15),
	fts(15)
}
tt.particle_system.emission_rate = 50
tt.particle_system.emit_area_spread = v(5, 5)
tt.particle_system.emit_rotation_spread = math.pi * 2
tt.particle_system.emit_offset = v(0, 0)
tt.particle_system.scales_y = {
	0.9,
	1.1
}
tt.particle_system.scales_x = {
	0.9,
	1.1
}
tt = E:register_t("ps_bullet_stage_27_scrap")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "dclenanos_stage05_ScrapProjectileTrail_asst_scrap_projectile_trail"
tt.particle_system.animated = false
tt.particle_system.emission_rate = 15
tt.particle_system.spin = {
	math.pi / 6,
	math.pi / 4
}
tt.particle_system.emit_area_spread = v(10, 10)
tt.particle_system.particle_lifetime = {
	fts(25),
	fts(25)
}
tt.particle_system.alphas = {
	255,
	0
}
tt.particle_system.scales_x = {
	0.9,
	1.2
}
tt.particle_system.scales_y = {
	0.9,
	1.2
}
tt.particle_system.z = Z_BULLET_PARTICLES
tt = E:register_t("ps_bullet_stage_27_tower_stun")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "boss_fx_scrap_particle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 60
tt.particle_system.emit_area_spread = v(10, 10)
tt.particle_system.particle_lifetime = {
	fts(6),
	fts(6)
}
tt.particle_system.scales_x = {
	0.9,
	1.1
}
tt.particle_system.scales_y = {
	0.9,
	1.1
}
tt.particle_system.z = Z_BULLET_PARTICLES
tt = E:register_t("ps_bullet_boss_grymbeard_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "grymbeardbossLAYERS_missiletrail_run"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(15),
	fts(15)
}
tt.particle_system.emission_rate = 50
tt.particle_system.emit_area_spread = v(5, 5)
tt.particle_system.emit_rotation_spread = math.pi * 2
tt.particle_system.emit_offset = v(0, 0)
tt.particle_system.scales_y = {
	0.9,
	1.1
}
tt.particle_system.scales_x = {
	0.9,
	1.1
}
tt.emit_offset_relative = v(0, 0)
tt = E:register_t("ps_bullet_boss_grymbeard_death_boss_trail", "ps_bullet_boss_grymbeard_trail")
tt.particle_system.name = "grymbeardbossLAYERS_flytrail_run"

tt = E:register_t("ps_bullet_hero_dragon_arb_breath_spikes")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "hero_dragon_arborean_spikes_projectile_trail_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(5),
	fts(10)
}
tt.particle_system.emission_rate = 50
tt.particle_system.emit_rotation_spread = math.pi
tt.particle_system.z = Z_BULLETS + 1
tt = E:register_t("ps_bullet_tower_arborean_oldtree_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "arborean_oldtree_trail_trail_run"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 10
tt.particle_system.z = Z_BULLET_PARTICLES
tt = E:register_t("ps_bullet_boss_crocs_poison_rain_lvl1")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "boss_gator_vfx_acid_trail"
tt.particle_system.anchor = v(0.7, 0.5)
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 30
tt.particle_system.track_rotation = true
tt.particle_system.z = Z_BULLET_PARTICLES
tt = E:register_t("ps_bullet_boss_crocs_poison_rain_lvl2")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "boss_gator_vfx_fire_trail"
tt.particle_system.anchor = v(0.7, 0.5)
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 30
tt.particle_system.track_rotation = true
tt.particle_system.z = Z_BULLET_PARTICLES

tt = E:register_t("ps_spider_sister_bolt_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.anchor = v(0.5, 0.45)
tt.particle_system.name = "spider_sister_fx_attack_1_projectile_trail"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(8),
	fts(8)
}
tt.particle_system.emission_rate = 30
tt.particle_system.z = Z_BULLET_PARTICLES
tt.particle_system.scales_y = {
	0.8,
	0.5
}
tt = E:register_t("ps_boss_spider_queen_bolt_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.anchor = v(0.5, 0.5)
tt.particle_system.name = "boss_effects_trail"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(5),
	fts(12)
}
tt.particle_system.emission_rate = 30
tt.particle_system.z = Z_BULLET_PARTICLES
tt.particle_system.scales_y = {
	0.8,
	0.5
}
tt.particle_system.alphas = {
	255,
	0
}
tt = E:register_t("ps_boss_spider_queen_lifesteal_trail_1")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.anchor = v(0.5, 0.5)
tt.particle_system.name = "spider_queen_boss_effects_trail_0001"
tt.particle_system.animated = false
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(10),
	fts(10)
}
tt.particle_system.emission_rate = 150
tt.particle_system.z = Z_BULLET_PARTICLES
tt.particle_system.scales_x = {
	1,
	0.1
}
tt.particle_system.scales_y = {
	1,
	0.1
}
tt.particle_system.alphas = {
	255,
	0
}
tt = E:register_t("ps_boss_spider_queen_lifesteal_trail_2")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.anchor = v(0.5, 0.5)
tt.particle_system.name = "spider_queen_boss_effects_trail2_0001"
tt.particle_system.animated = false
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(2),
	fts(5)
}
tt.particle_system.emission_rate = 150
tt.particle_system.z = Z_BULLET_PARTICLES + 1
tt.particle_system.scales_x = {
	1,
	0.8,
	0.1
}
tt.particle_system.scales_y = {
	1,
	0.8,
	0.1
}
tt.particle_system.alphas = {
	255,
	170,
	0
}
tt = E:register_t("ps_boss_spider_queen_bullet_tower_stun_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.anchor = v(0.5, 0.5)
tt.particle_system.name = "boss_effects_bolt_run"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(4),
	fts(4)
}
tt.particle_system.emission_rate = 30
tt.particle_system.z = Z_BULLET_PARTICLES
tt.particle_system.scales_x = {
	0.7,
	0.1
}
tt.particle_system.scales_y = {
	0.7,
	0.1
}
tt.particle_system.alphas = {
	255,
	0
}
tt = E:register_t("ps_boss_spider_queen_bullet_tower_stun_trail_2")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.anchor = v(0.5, 0.5)
tt.particle_system.name = "boss_effects_bolt_trail"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(10),
	fts(10)
}
tt.particle_system.emission_rate = 15
tt.particle_system.z = Z_BULLET_PARTICLES + 1
tt.particle_system.scales_x = {
	0.7,
	0.1
}
tt.particle_system.scales_y = {
	0.7,
	0.1
}
tt.particle_system.alphas = {
	255,
	0
}
tt = E:register_t("ps_bullet_soldier_priests_barrack_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "priest_particle_idle"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.emission_rate = 30
tt.particle_system.emit_rotation_spread = math.pi * 2
tt.particle_system.particle_lifetime = {
	fts(7),
	fts(7)
}
tt.particle_system.anchor = v(0.5, 0.5)
tt.particle_system.z = Z_BULLET_PARTICLES

tt = E:register_t("fx_tower_holder_unblock_terrain_4", "fx")
tt.render.sprites[1].prefix = "UpdateHalloween_terrain_anim"
tt.render.sprites[1].name = "out"
tt.render.sprites[1].offset = v(0, 13.5)
tt.render.sprites[1].z = Z_OBJECTS

tt = E:register_t("fx_bolt_lumenir_hit", "fx")
tt.render.sprites[1].name = "hero_lumenir_attack_hit_fx_air"
tt = E:register_t("fx_bolt_lumenir_hit_mini", "fx")
tt.render.sprites[1].name = "hero_lumenir_light_companion_attack_fx_idle"

tt = E:register_t("fx_ultimate_hero_lava", "fx")
tt.render.sprites[1].name = "hero_lava_ultimate_hit"
tt.render.sprites[1].z = Z_OBJECTS

tt = E:register_t("fx_arborean_sentinels_spearmen_spear_hit", "fx")
tt.render.sprites[1].name = "tower_arborean_sentinels_spearmen_hitFx"
tt.render.sprites[1].loop = false
tt.render.sprites[1].hide_after_runs = 1
tt = E:register_t("fx_hero_vesper_attack_hit", "fx")
tt.render.sprites[1].name = "hero_vesper_attack_hit"
tt.render.sprites[1].loop = false
tt.render.sprites[1].hide_after_runs = 1
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("fx_tower_royal_archer_rapacious_hunter_dust", "fx")
tt.render.sprites[1].name = "tower_build_dust"
tt.render.sprites[1].scale = v(0.5, 0.5)
tt = E:register_t("fx_tower_elven_stargazers_ray_hit_start", "fx")

E:add_comps(tt, "tween")

tt.render.sprites[1].name = "elven_stargazers_tower_rising_star_hit_fx_idle"
tt.render.sprites[1].loop = true
tt.render.sprites[1].scale = v(1.5, 1.5)
tt.render.sprites[1].z = Z_BULLETS + 1
tt.timed.duration = fts(10)
tt.timed.runs = 1e+99
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.1,
		255
	},
	{
		fts(5),
		255
	},
	{
		fts(10),
		0
	}
}
tt.tween.remove = false
tt = E:register_t("fx_tower_stargazers_teleport_middle", "fx")
tt.render.sprites[1].name = "elven_stargazers_tower_event_horizon_idle"
tt.render.sprites[1].loop = false
tt.render.sprites[1].z = Z_BULLETS + 1
tt.timed.duration = fts(32)
tt.timed.runs = 1e+99
tt = E:register_t("fx_tower_stargazers_teleport_enemy_small", "fx")
tt.render.sprites[1].name = "elven_stargazers_tower_event_horizon_decal_idle"
tt.render.sprites[1].loop = false
tt.render.sprites[1].z = Z_BULLETS + 1
tt.timed.duration = fts(32)
tt.timed.runs = 1e+99
tt = E:register_t("fx_tower_stargazers_teleport_enemy_big", "fx")
tt.render.sprites[1].name = "elven_stargazers_tower_event_horizon_decal_big_idle"
tt.render.sprites[1].loop = false
tt.render.sprites[1].z = Z_BULLETS + 1
tt.timed.duration = fts(32)
tt.timed.runs = 1e+99
tt = E:register_t("fx_tower_elven_stargazers_ray_hit", "fx")

E:add_comps(tt)

tt.render.sprites[1].name = "elven_stargazers_tower_ray_end_end"
tt.render.sprites[1].loop = false
tt.render.sprites[1].z = Z_BULLETS + 1
tt.timed.duration = fts(10)
tt.timed.runs = 1e+99
tt = E:register_t("fx_tower_arcane_wizard_ray_hit_start", "fx")

E:add_comps(tt, "tween")

tt.render.sprites[1].name = "arcane_wizard_tower_ray_start_idle"
tt.render.sprites[1].loop = true
tt.render.sprites[1].scale = v(1.5, 1.5)
tt.render.sprites[1].z = Z_BULLETS + 1
tt.timed.duration = fts(25)
tt.timed.runs = 1e+99
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.1,
		255
	},
	{
		fts(18),
		255
	},
	{
		fts(25),
		0
	}
}
tt.tween.remove = false
tt = E:register_t("fx_tower_arcane_wizard_ray_hit", "fx")

E:add_comps(tt)

tt.render.sprites[1].name = "arcane_wizard_tower_ray_end_idle"
tt.render.sprites[1].loop = true
tt.render.sprites[1].z = Z_BULLETS + 1
tt.timed.duration = fts(10)
tt.timed.runs = 1e+99
tt = E:register_t("fx_tower_arcane_wizard_disintegrate_ray_hit_start", "fx")
tt.render.sprites[1].name = "arcane_wizard_tower_lvl4_disintegration_ray_charge_origin"
tt.render.sprites[1].loop = true
tt.render.sprites[1].z = Z_BULLETS + 1
tt.timed.duration = fts(37)
tt.timed.runs = 1e+99
tt = E:register_t("fx_tower_arcane_wizard_ray_disintegrate_hit", "fx")
tt.render.sprites[1].name = "arcane_wizard_tower_lvl4_disintegration_hit_idle"
tt.render.sprites[1].loop = false
tt.render.sprites[1].z = Z_BULLETS + 1
tt.render.sprites[1].fps = 25
tt.timed.duration = fts(17)
tt.timed.runs = 1e+99
tt = E:register_t("fx_tower_arborean_emissary_bolt_hit", "fx")
tt.render.sprites[1].name = "arborean_emissary_hit"
tt = E:register_t("fx_hero_builder_overtime_work_raise", "fx")
tt.render.sprites[1].name = "hero_obdul_skill_5_soldier_spawn_decal"
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("fx_tower_stargazers_death_star_hit", "fx")
tt.render.sprites[1].prefix = "elven_stargazers_tower_rising_star_hit_fx"
tt = E:register_t("fx_hero_space_elf_ranged_hit", "fx")
tt.render.sprites[1].name = "hero_therien_ranged_hit_idle"

tt = E:register_t("fx_hero_spider_ranged_hit", "fx")
tt.render.sprites[1].name = "hero_spider_05_hitfx_run"
tt = E:register_t("fx_hero_spider_area_attack", "fx")
tt.render.sprites[1].name = "hero_spider_05_stomp_run"
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("fx_hero_spider_teleport_fx", "decal_timed")
tt.render.sprites[1].name = "hero_spider_05_hole_run"
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].loop = false
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].name = "hero_spider_05_dirt_explosion_teleport"
tt.render.sprites[2].z = Z_OBJECTS
tt.render.sprites[2].loop = false
tt.render.sprites[2].sort_y_offset = -10
tt.render.sprites[2].scale = vv(1.5)
tt = E:register_t("fx_hero_spider_teleport_approach", "fx")

E:add_comps(tt, "main_script")

tt.main_script.update = scripts.fx_hero_spider_teleport_approach.update
tt.render.sprites[1].prefix = "hero_spider_05_hole"
tt.render.sprites[1].name = "in"
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("fx_hero_spider_teleport_explosion", "decal_timed")
tt.render.sprites[1].name = "hero_spider_05_dirt_explosion_spawn"
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].loop = false
tt.render.sprites[1].sort_y_offset = -10
tt.render.sprites[1].scale = vv(1.5)
tt = E:register_t("fx_hero_spider_ultimate_spawn_decal", "decal_timed")
tt.render.sprites[1].name = "hero_spider_05_mancha_spider"
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].loop = false
tt = E:register_t("fx_hero_spider_ultimate_spawn", "decal_scripted")
tt.main_script.update = scripts.fx_hero_spider_ultimate_spawn.update
tt.spawn_fx_decal = "fx_hero_spider_ultimate_spawn_decal"
tt.spider = "soldier_hero_spider_ultimate"
tt.render.sprites[1].name = "in"
tt.render.sprites[1].prefix = "hero_spider_05_spider_in"
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].loop = false
tt.render.sprites[1].sort_y_offset = -5
tt.render.sprites[1].animated = true

tt = E:register_t("fx_soul_soldier_tower_ghost", "fx")
tt.render.sprites[1].name = "ghost_tower_soul_skill_hit_fx_idle"
tt = E:register_t("fx_hero_space_elf_melee_hit", "fx")
tt.render.sprites[1].name = "hero_therien_melee_hit_idle"
tt = E:register_t("fx_hero_space_elf_astral_reflection_spawn", "fx")
tt.render.sprites[1].name = "hero_therien_reflection_spawn_fx_idle"
tt = E:register_t("fx_bullet_soldier_tower_rocket_gunners_floor", "fx")
tt.render.sprites[1].name = "rocket_gunners_tower_hit_fx_floor_idle"
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("fx_bullet_soldier_tower_rocket_gunners_hit", "fx")
tt.render.sprites[1].name = "rocket_gunners_tower_hit_fx_idle"
tt = E:register_t("fx_bullet_soldier_tower_rocket_gunners_sting_missiles_hit_air", "fx")
tt.render.sprites[1].name = "rocket_gunners_tower_phosphoric_coating_explosion_air_idle"
tt = E:register_t("fx_bullet_soldier_tower_rocket_gunners_phosphoric_floor", "fx")
tt.render.sprites[1].name = "rocket_gunners_tower_phosphoric_coating_hit_fx_floor_idle"
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("fx_bullet_soldier_tower_rocket_gunners_phosphoric_hit", "fx")
tt.render.sprites[1].name = "rocket_gunners_tower_phosphoric_coating_hit_fx_idle"
tt = E:register_t("fx_bullet_soldier_tower_rocket_gunners_sting_missiles_hit", "fx")
tt.render.sprites[1].name = "rocket_gunners_tower_phosphoric_coating_explosion_idle"
tt = E:register_t("fx_tower_rocket_gunners_take_off", "fx")
tt.render.sprites[1].name = "rocket_gunners_tower_take_off_fx_idle"
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = -50
tt = E:register_t("fx_soldier_tower_rocket_gunners_land", "fx")
tt.render.sprites[1].name = "rocket_gunners_tower_landing_fx_idle"
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("fx_bullet_soldier_tower_rocket_gunners_sting_missiles_smoke", "fx")

E:add_comps(tt, "tween")

tt.render.sprites[1].name = "rocket_gunners_tower_sting_missiles_floor_decal_smoke_idle"
tt.render.sprites[1].loop = true
tt.timed.duration = 1e+99
tt.timed.runs = 1e+99
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		3,
		255
	},
	{
		3.5,
		0
	}
}
tt.tween.remove = true
tt = E:register_t("fx_soldier_tower_necromancer_skeleton_spawn", "fx")
tt.render.sprites[1].name = "necromancer_tower_revive_idle"
tt = E:register_t("fx_soldier_tower_necromancer_skeleton_golem_spawn", "fx")
tt.render.sprites[1].name = "necromancer_tower_revive_big_idle"
tt = E:register_t("fx_tower_necromancer_rider_hit", "fx")
tt.render.sprites[1].name = "necromancer_tower_skull_projectile_hit_FX_idle"
tt = E:register_t("fx_tower_necromancer_rider_spawn_side", "fx")
tt.render.sprites[1].name = "necromancer_tower_death_rider_start_walk_FX_side_idle"
tt = E:register_t("fx_tower_necromancer_rider_spawn_front", "fx")
tt.render.sprites[1].name = "necromancer_tower_death_rider_start_walk_FX_front_idle"
tt = E:register_t("fx_tower_necromancer_rider_spawn_back", "fx")
tt.render.sprites[1].name = "necromancer_tower_death_rider_start_walk_FX_back_idle"
tt = E:register_t("fx_tower_ballista_shot", "fx")
tt.render.sprites[1].name = "ballista_tower_arrow_fx_idle"
tt = E:register_t("fx_tower_ballista_final_shot", "fx")
tt.render.sprites[1].name = "ballista_tower_special_arrow_fx_idle"
tt = E:register_t("fx_bullet_tower_ballista_hit", "fx")
tt.render.sprites[1].name = "ballista_tower_hit_2"
tt = E:register_t("fx_bullet_tower_ballista_final_shot_hit", "fx")
tt.render.sprites[1].name = "ballista_tower_special_hit_idle"
tt = E:register_t("fx_bullet_tower_ballista_missed_arrow", "fx")

E:add_comps(tt, "tween")

tt.render.sprites[1].name = "ballista_tower_missed_arrow"
tt.render.sprites[1].z = Z_OBJECTS
tt.timed.duration = 6
tt.timed.runs = 1e+99
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		tt.timed.duration - 0.5,
		255
	},
	{
		tt.timed.duration,
		0
	}
}
tt = E:register_t("fx_bullet_tower_ballista_missed_arrow_dust", "fx")
tt.render.sprites[1].name = "ballista_tower_missed_arrow_dust"
tt = E:register_t("fx_bullet_tower_ballista_missed_arrow_decal", "fx")

E:add_comps(tt, "tween")

tt.render.sprites[1].name = "ballista_tower_missed_arrow_decal"
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].animated = false
tt.timed.duration = 6
tt.timed.runs = 1e+99
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		tt.timed.duration - 0.5,
		255
	},
	{
		tt.timed.duration,
		0
	}
}
tt = E:register_t("fx_bullet_tower_ballista_bomb_spawn", "fx")
tt.render.sprites[1].name = "ballista_tower_bomb_fx_idle"
tt = E:register_t("fx_bullet_tower_ballista_bomb_junk_floor", "fx")
tt.render.sprites[1].name = "ballista_tower_junk_particle_floor"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_OBJECTS
tt.timed.duration = fts(16)
tt.timed.runs = 1e+99
tt = E:register_t("fx_bullet_tower_ballista_bomb_explosion", "fx")
tt.render.sprites[1].name = "ballista_tower_bomb_explotion_idle"
tt = E:register_t("fx_tower_flamespitter_flame", "fx")
tt.render.sprites[1].animated = true
tt.render.sprites[1].prefix = "dwarven_flamespitter_tower_flamethrower_fx"
tt.render.sprites[1].name = "in"
tt.render.sprites[1].z = Z_BULLETS
tt.timed.runs = 1e+99
tt = E:register_t("fx_bullet_tower_flamespitter_bomb_explosion", "fx")
tt.render.sprites[1].name = "dwarven_flamespitter_tower_blazing_trail_explosion_idle"
tt = E:register_t("fx_bullet_tower_flamespitter_bomb_burn", "fx")
tt.render.sprites[1].animated = true
tt.render.sprites[1].prefix = "dwarven_flamespitter_tower_blazing_trail_path_fx"
tt.render.sprites[1].name = "idle"
tt = E:register_t("fx_tower_flamespitter_column", "fx")
tt.render.sprites[1].animated = true
tt.render.sprites[1].prefix = "dwarven_flamespitter_tower_scorching_torches_fx"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].scale = vv(0.75)
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("fx_bullet_tower_barrel", "fx")
tt.render.sprites[1].name = "barrel_tower_projectile_hit_fx_idle"
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("fx_soldier_tower_barrel_skill_warrior_hit", "fx")
tt.render.sprites[1].name = "barrel_tower_berserker_unit_hit_fx_idle"
tt = E:register_t("fx_soldier_tower_barrel_skill_warrior_spawn", "fx")
tt.render.sprites[1].name = "barrel_tower_lvl4_tower_berserker_spawn_fx_idle"
tt = E:register_t("fx_bullet_tower_sand_hit", "fx")
tt.render.sprites[1].name = "tower_sand_basic_hit"
tt = E:register_t("fx_bullet_tower_sand_skill_gold_hit", "fx")
tt.render.sprites[1].name = "tower_sand_lvl4_skill_1_hit"
tt = E:register_t("fx_bullet_tower_sand_skill_gold_hit_coins", "fx")
tt.render.sprites[1].name = "tower_sand_lvl4_skill_1_coins_hit"
tt = E:register_t("fx_aura_tower_sand_skill_big_blade", "fx")
tt.render.sprites[1].name = "tower_sand_lvl4_skill_2_hit_FX_loop"
tt = E:register_t("fx_tower_ray_hit_start", "fx")
tt.render.sprites[1].name = "channeler_tower_crystal_union_fx_run"
tt = E:register_t("fx_tower_ray_hit_source", "fx")
tt.render.sprites[1].name = "channeler_tower_ray_start_loop"
tt.render.sprites[1].loop = true
tt.timed.runs = 1e+99
tt = E:register_t("fx_tower_ray_crystal_union", "fx")
tt.render.sprites[1].name = "channeler_tower_crystal_union_fx_run"
tt = E:register_t("fx_tower_ray_lvl4_attack", "fx")
tt.render.sprites[1].name = "channeler_tower_lvl4_tower_attack_fx_idle"
tt = E:register_t("fx_tower_ray_lvl4_attack_sheep", "fx")
tt.render.sprites[1].name = "channeler_tower_mutation_tower_fx_idle"
tt = E:register_t("fx_tower_ray_lvl4_attack_sheep_hit", "fx")
tt.render.sprites[1].name = "channeler_tower_mutation_fx_idle"
tt = E:register_t("fx_tower_ray_lvl4_attack_sheep_hit_big", "fx")
tt.render.sprites[1].name = "channeler_tower_mutation_fx_big_idle"
tt = E:register_t("fx_tower_ray_lvl4_shock", "fx")

E:add_comps(tt, "main_script")

tt.render.sprites[1].prefix = "channeler_tower_lvl4_idle_shock_fx_"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].draw_order = 3
tt.render.sprites[1].z = Z_OBJECT
tt.main_script.update = scripts.fx_tower_ray_lvl4_shock.update
tt.timed.runs = 1e+99
tt = E:register_t("fx_bullet_decal_item_portable_coil", "fx")
tt.render.sprites[1].prefix = "item_portable_coil_hitDef"
tt.render.sprites[1].name = "hit"
tt.render.sprites[1].exo = true
tt = E:register_t("fx_item_scroll_of_spaceshift", "fx")
tt.render.sprites[1].name = "item_scroll_of_spaceshift_teleport_fx_in"
tt = E:register_t("fx_item_loot_box_dust", "fx")
tt.render.sprites[1].prefix = "item_loot_box_dust"
tt.render.sprites[1].name = "in"
tt.render.sprites[1].animated = true
tt = E:register_t("fx_item_second_breath_respawn", "fx")
tt.render.sprites[1].name = "item_second_breath_respawn_fx_idle"
tt = E:register_t("fx_item_second_breath_tap", "fx")
tt.render.sprites[1].name = "item_second_breath_tap_fx"

tt = E:register_t("fx_bullet_tower_dark_elf_hit", "fx")
tt.render.sprites[1].name = "shotexplosion_run"
tt = E:register_t("fx_bullet_tower_stage_17_weirdwood", "fx")
tt.render.sprites[1].prefix = "tower_tree_projectile_explosionDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].offset = v(0, 20)
tt = E:register_t("fx_tower_stage_17_weirdwood_leafless", "fx")
tt.render.sprites[1].prefix = "tower_tree_leaflessFXDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].offset = v(0, 50)
tt = E:register_t("fx_tower_stage_17_weirdwood_transformation", "fx")
tt.render.sprites[1].prefix = "tower_tree_transformationFXDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt = E:register_t("fx_bullet_enemy_deathwood", "fx")
tt.render.sprites[1].prefix = "deathwood_spirit_ball"
tt.render.sprites[1].name = "hit"
tt = E:register_t("fx_enemy_deathwood_hit", "fx")
tt.render.sprites[1].prefix = "deathwood_fx"
tt.render.sprites[1].name = "idle"
tt = E:register_t("fx_tower_stage_18_elven_barrrack_transformation", "fx")
tt.render.sprites[1].prefix = "elven_barracks_statechange"
tt.render.sprites[1].name = "idle"
tt = E:register_t("fx_tower_stage_18_elven_barrrack_state_change", "fx")
tt.render.sprites[1].prefix = "elven_barracks_specterattack"
tt.render.sprites[1].name = "idle"
tt = E:register_t("fx_bullet_enemy_revenant_soulcaller_tower", "fx")
tt.render.sprites[1].prefix = "revenant_soulcaller_proy"
tt.render.sprites[1].name = "hit"
tt = E:register_t("fx_bullet_enemy_revenant_soulcaller_tower_stun", "fx")
tt.render.sprites[1].prefix = "revenant_soulcaller_transform"
tt.render.sprites[1].name = "ItemSliderItemView"
tt = E:register_t("fx_tower_dark_elf_skill_buff", "fx")
tt.render.sprites[1].name = "souldrain_run"
tt.render.sprites[1].offset.y = 25

tt = E:register_t("fx_tower_hermit_toad_splash", "fx")
tt.render.sprites[1].name = "hermit_toad_tower_splash_run"
tt.render.sprites[1].anchor = v(0.712, 0.15)
tt.render.sprites[1].scale = vv(1.4)
tt = E:register_t("fx_tower_hermit_toad_decal", "decal")

E:add_comps(tt, "tween")

tt.render.sprites[1].name = "hermit_toad_tower_jumpdecal"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].anchor = v(0.7017543859649122, 0.31363636363636366)
tt.tween.props[1].keys = {
	{
		fts(0),
		255
	},
	{
		fts(46),
		255
	},
	{
		fts(63),
		0
	}
}
tt.tween.props[1].loop = false
tt.tween.props[1].sprite_id = 1
tt = E:register_t("fx_bullet_tower_hermit_toad_mage_basic_hit", "fx")
tt.render.sprites[1].name = "hermit_toad_tower_hitfx_run"
tt = E:register_t("fx_bullet_tower_hermit_toad_engineer_basic_hit", "fx")
tt.render.sprites[1].name = "hermit_toad_tower_hit2_run"
tt = E:register_t("fx_bullet_tower_arborean_honey_hit", "fx")
tt.render.sprites[1].prefix = "arborean_honey_tower_projectil_splash"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("fx_bullet_tower_arborean_mage_hit", "fx")
tt.render.sprites[1].name = "Stage_22_shaman_shaman_hitfx_run"

tt = E:register_t("fx_bullet_enemy_brute_welder_death_hit", "fx")
tt.render.sprites[1].prefix = "brute_welder_tower_hit_fx"
tt.render.sprites[1].name = "idle"
tt = E:register_t("fx_bullet_boss_machinist", "fx")
tt.render.sprites[1].prefix = "dlcdwarfbossstage02_particleDef"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].exo = true
tt = E:register_t("fx_bullet_stage_25_torso_missile_hit", "fx")
tt.render.sprites[1].prefix = "DLC_stage_03_missile_hit"
tt.render.sprites[1].name = "run"
tt = E:register_t("fx_soldier_tower_dwarf_melee_hit", "fx")
tt.render.sprites[1].name = "tower_dwarf_attack_2_hit"
tt = E:register_t("fx_bullet_soldier_tower_dwarf_hit", "fx")
tt.render.sprites[1].name = "tower_dwarf_attack_1_hit_hit"
tt = E:register_t("fx_stage_27_cannon_shot", "fx")
tt.render.sprites[1].prefix = "dlcenanos_stage05_cannon_explosionDef"
tt.render.sprites[1].name = "shoot"
tt.render.sprites[1].exo = true
tt = E:register_t("fx_stage_27_scrap", "fx")
tt.render.sprites[1].prefix = "dclenanos_stage05_ScrapProjectileFXDef"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].exo = true
tt = E:register_t("fx_bullet_stage_27_scrap", "fx")
tt.render.sprites[1].prefix = "dclenanos_stage05_ScrapProjectileHitFXDef"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].exo = true
tt = E:register_t("fx_bullet_stage_27_tower_stun", "fx")
tt.render.sprites[1].name = "boss_fx_scrap_hit"
tt = E:register_t("fx_bullet_boss_grymbeard_hit", "fx")
tt.render.sprites[1].prefix = "dclenanos_stage05_grymmissileDef"
tt.render.sprites[1].name = "explosion"
tt.render.sprites[1].exo = true

tt = E:register_t("fx_soldier_priests_barrack_melee_hit", "fx")
tt.render.sprites[1].name = "priest_melee_hit"
tt.render.sprites[1].sort_y_offset = -30
tt = E:register_t("fx_soldier_priests_barrack_abomination_melee_hit", "fx")
tt.render.sprites[1].name = "redemeed_cultist_barraca_unblinded_abomination_hit_fx_idle"
tt.render.sprites[1].sort_y_offset = -30
tt = E:register_t("fx_soldier_priests_barrack_abomination_eat", "fx")
tt.render.sprites[1].name = "redemeed_cultist_barraca_unblinded_abomination_eat_fx"
tt.render.sprites[1].sort_y_offset = -30
tt = E:register_t("fx_soldier_priests_barrack_bolt_hit", "fx")
tt.render.sprites[1].name = "priest_ranged_hit_idle"
tt = E:register_t("fx_tower_sparking_geode_evolve", "fx")
tt.render.sprites[1].name = "sparking_geode_evolve_run"
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].scale = vv(1)
tt = E:register_t("fx_mod_tower_sparking_geode_stun_death", "fx")
tt.render.sprites[1].prefix = "sparking_geode_cystal_fx"
tt.render.sprites[1].name = "death"
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("fx_tower_sparking_geode_up_ray", "fx")
tt.render.sprites[1].prefix = "sparking_geode_longray_ray"
tt.render.sprites[1].name = "up"
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].scale = vv(2)
tt.render.sprites[1].sort_y_offset = -80
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "sparking_geode_longray_decal_up"
tt.render.sprites[2].name = "run"
tt.render.sprites[2].z = Z_OBJECTS
tt.render.sprites[2].sort_y_offset = -80
tt = E:register_t("fx_tower_sparking_geode_hit", "fx")
tt.render.sprites[1].prefix = "sparking_geode_ray_rebote"
tt.render.sprites[1].name = "hit"
tt.render.sprites[1].z = Z_BULLETS
tt.render.sprites[1].scale = v(0.72, 1.08)

tt = E:register_t("fx_dreadeye_viper_hit", "fx")
tt.render.sprites[1].name = "dreadeye_viper_ranged_attack_hit"
tt.render.sprites[1].loop = false
tt.render.sprites[1].hide_after_runs = 1
tt = E:register_t("fx_bear_ground_hit", "fx")
tt.render.sprites[1].name = "bear_vanguard_decal_animation"
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].scale = v(1.5, 1.5)
tt.render.sprites[1].sort_y_offset = -2
tt = E:register_t("fx_enemy_desintegrate_KR5", "fx_enemy_desintegrate")
tt.render.sprites[1].size_names = {
	"small",
	"big",
	"big"
}
tt = E:register_t("fx_bullet_enemy_unblinded_priest_hit", "fx")
tt.render.sprites[1].name = "unblinded_priest_projectile_hit_fx_idle"
tt = E:register_t("fx_enemy_unblinded_priest_hit_melee", "fx")
tt.render.sprites[1].name = "unblinded_priest_melee_hit_fx"
tt = E:register_t("fx_enemy_unblinded_abomination_hit_melee", "fx")
tt.render.sprites[1].name = "unblinded_abomination_unblinded_abomination_hit_fx_idle"
tt = E:register_t("fx_enemy_unblinded_abomination_eat", "fx")
tt.render.sprites[1].name = "unblinded_abomination_unblinded_abomination_eat_fx"
tt = E:register_t("fx_enemy_armored_nightmare_hit", "fx")
tt.render.sprites[1].name = "armored_nightmare_fx_idle"
tt = E:register_t("fx_enemy_armored_nightmare_death_spawn", "fx")
tt.render.sprites[1].name = "armored_nightmare_explosion_idle"
tt = E:register_t("fx_enemy_crystal_golem_ground_decal", "decal")

E:add_comps(tt, "tween")

tt.render.sprites[1].name = "crystal_golem_decal"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].sort_y_offset = 2
tt.tween.props[1].keys = {
	{
		fts(10),
		255
	},
	{
		0.8,
		255
	},
	{
		1,
		0
	}
}
tt.tween.props[1].loop = false
tt.tween.props[1].sprite_id = 1
tt = E:register_t("fx_enemy_evolving_scourge_eat", "fx")
tt.render.sprites[1].name = "evolving_scourge_eat_FX"

tt = E:register_t("fx_bullet_enemy_corrupted_elf_hit", "fx")
tt.render.sprites[1].name = "fx_knife_satyr_hit"
tt.render.sprites[1].offset.y = 5

tt = E:register_t("fx_quickfeet_chicken_hit", "fx")
tt.render.sprites[1].name = "quickfeet_gator_hit_projectile_run"
tt = E:register_t("fx_quickfeet_bone_hit", "fx")
tt.render.sprites[1].name = "quickfeet_gator_attack_hit_run"
tt = E:register_t("fx_ranged_croc_hit", "fx")
tt.render.sprites[1].name = "ranged_croc_hit"
tt.render.sprites[1].loop = false
tt.render.sprites[1].hide_after_runs = 1
tt = E:register_t("fx_crocs_egg_spawner_melee_hit", "fx")
tt.render.sprites[1].name = "crokinder_mom_hit"
tt.render.sprites[1].loop = false
tt.render.sprites[1].hide_after_runs = 1
tt = E:register_t("fx_crocs_tank_melee_hit", "fx")
tt.render.sprites[1].name = "tank_hit_idle"
tt.render.sprites[1].loop = false
tt.render.sprites[1].hide_after_runs = 1
tt = E:register_t("fx_crocs_tank_spin_hit", "fx")
tt.render.sprites[1].name = "tank_hitspin"
tt.render.sprites[1].loop = false
tt.render.sprites[2] = table.deepclone(tt.render.sprites[1])
tt.render.sprites[2].name = "tank_hit_idle"
tt = E:register_t("fx_enemy_croc_shaman_hit", "fx")
tt.render.sprites[1].name = "shaman_hit_run"
tt.render.sprites[1].loop = false
tt.render.sprites[1].hide_after_runs = 1
tt = E:register_t("fx_crocs_hydra_melee_hit", "fx")
tt.render.sprites[1].name = "hydra_fx_hit"
tt.render.sprites[1].loop = false
tt = E:register_t("fx_crocs_hydra_heads_transform", "fx")

E:add_comps(tt, "tween")

tt.render.sprites[1].prefix = "hydra_death1_headsDef"
tt.render.sprites[1].name = "transform1"
tt.render.sprites[1].exo = true
tt.render.sprites[1].loop = false
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = -5
tt.tween.remove = true
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		fts(40),
		255
	},
	{
		fts(60),
		255
	},
	{
		fts(72),
		0
	}
}
tt = E:register_t("fx_crocs_hydra_heads_death", "fx_crocs_hydra_heads_transform")
tt.render.sprites[1].prefix = "hydra_death_threeheadsDef"
tt.render.sprites[1].name = "death2"
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		fts(50),
		255
	},
	{
		fts(70),
		255
	},
	{
		fts(82),
		0
	}
}
tt = E:register_t("fx_crocs_boss_melee_hit", "fx")
tt.render.sprites[1].exo = true
tt.render.sprites[1].prefix = "boss_gator_dirt_explosionDef"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].hide_after_runs = 1
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = -5
tt = E:register_t("fx_crocs_boss_melee_hit_1", "fx")
tt.render.sprites[1].exo = true
tt.render.sprites[1].prefix = "boss_gator_dirt_explosionDef"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].hide_after_runs = 1
tt.render.sprites[1].scale = vv(0.6)
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = -5
tt = E:register_t("fx_crocs_boss_melee_hit_2", "fx")
tt.render.sprites[1].exo = true
tt.render.sprites[1].prefix = "boss_gator_dirt_explosionDef"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].hide_after_runs = 1
tt.render.sprites[1].scale = vv(0.8)
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = -5
tt = E:register_t("decal_crocs_boss_melee_hit", "decal_timed")
tt.render.sprites[1].exo = true
tt.render.sprites[1].prefix = "boss_gator_groundcrack_lvl1Def"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].hide_after_runs = 1
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_crocs_boss_melee_hit_2", "decal_timed")
tt.render.sprites[1].exo = true
tt.render.sprites[1].prefix = "boss_gator_groundcrack_lvl2Def"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].hide_after_runs = 1
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_crocs_boss_melee_hit_3", "decal_timed")
tt.render.sprites[1].exo = true
tt.render.sprites[1].prefix = "boss_gator_groundcrack_lvl3Def"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].hide_after_runs = 1
tt.render.sprites[1].z = Z_DECALS

tt = E:register_t("fx_bullet_enemy_spider_priest_hit", "fx")
tt.render.sprites[1].name = "cultist_spider_spell_hit"
tt = E:register_t("spider_sister_bolt_hit_fx", "fx")
tt.render.sprites[1].name = "spider_sister_fx_attack_1_hit"
tt = E:register_t("fx_boss_spider_queen_bolt_hit", "fx")
tt.render.sprites[1].prefix = "boss_effects_hit"
tt.render.sprites[1].name = "run"
tt = E:register_t("fx_boss_spider_queen_lifesteal_healing", "fx")
tt.render.sprites[1].name = "boss_effects_healing"
tt = E:register_t("fx_boss_spider_queen_lifesteal_bleeding", "fx")
tt.render.sprites[1].prefix = "boss_effects_hit_drain"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].scale = vv(2)
tt = E:register_t("fx_boss_spider_queen_melee_hit", "fx")
tt.render.sprites[1].prefix = "boss_effects_hit"
tt.render.sprites[1].name = "run"
tt = E:register_t("fx_boss_spider_queen_melee_hit_decal", "fx")
tt.render.sprites[1].name = "boss_effects_decal_back"
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = 30
tt.render.sprites[1].offset = v(0, 20)
tt.render.sprites[2] = table.deepclone(tt.render.sprites[1])
tt.render.sprites[2].name = "boss_effects_decal_front_run"
tt.render.sprites[2].sort_y_offset = 0
tt = E:register_t("fx_glarenwarden_healing", "fx")
tt.render.sprites[1].name = "glarenwarden_healing_run"

tt = E:register_t("fx_hero_muyrn_faery_dust", "fx")
tt.render.sprites[1].name = "hero_nyru_fairy_dust_FX"
tt.render.sprites[1].loop = false
tt.render.sprites[1].hide_after_runs = 1
tt = E:register_t("fx_hero_muyrn_sentinel_wisps_attack", "fx")
tt.render.sprites[1].name = "hero_nyru_sentinel_wisps_attack_attack"
tt.render.sprites[1].loop = false
tt.render.sprites[1].hide_after_runs = 1
tt = E:register_t("hero_muyrn_sentinel_wisps_hit_fx", "fx")
tt.render.sprites[1].name = "hero_nyru_sentinel_wisps_hit"
tt = E:register_t("fx_hero_builder_melee_attack_hit", "fx")
tt.render.sprites[1].name = "hero_obdul_basic_attack_hit"
tt = E:register_t("fx_hero_builder_defensive_turret_hit", "fx")
tt.render.sprites[1].name = "hero_obdul_skill_4_tower_hit"
tt = E:register_t("fx_hero_builder_demolition_man", "fx")
tt.render.sprites[1].prefix = "hero_obdul_skill_3_fx"
tt.render.sprites[1].name = "start"
tt.render.sprites[1].loop = true
tt = E:register_t("fx_hero_space_elf_black_aegis_hit", "fx")
tt.render.sprites[1].name = "hero_therien_black_aegis_hit"
tt = E:register_t("fx_bullet_hero_mecha_spawn_1", "fx")
tt.render.sprites[1].name = "hero_onagro_attack_1_cannon_particle_idle"
tt = E:register_t("fx_bullet_hero_mecha_spawn_2", "fx")
tt.render.sprites[1].name = "hero_onagro_attack_2_cannon_particle_idle"
tt = E:register_t("fx_bullet_hero_mecha_hit", "fx")
tt.render.sprites[1].name = "hero_onagro_attack_1_hit_idle"
tt = E:register_t("fx_bullet_drone_hero_mecha", "fx")
tt.render.sprites[1].name = "hero_onagro_skill_1_drone_hit_fx_idle"
tt = E:register_t("fx_bullet_hero_mecha_tar_bomb", "fx")
tt.render.sprites[1].name = "hero_onagro_skill_2_hit"
tt = E:register_t("fx_hero_mecha_mine_explosion", "fx")
tt.render.sprites[1].name = "hero_onagro_skill_4_mine_explosion_idle"
tt = E:register_t("fx_bullet_zeppelin_hero_mecha", "fx")
tt.render.sprites[1].name = "hero_onagro_ultimate_hit_idle"
tt = E:register_t("fx_hero_venom_melee_attack_hit", "fx")
tt.render.sprites[1].name = "hero_venom_hit_fx_idle"
tt.render.sprites[1].z = Z_BULLETS + 1
tt = E:register_t("fx_hero_venom_beast_lvl_up", "fx")
tt.render.sprites[1].name = "hero_venom_lvlup_fx_idle"
tt = E:register_t("fx_hero_robot_skill_fire", "fx")
tt.render.sprites[1].name = "Blaze_skill2explosion_run"
tt = E:register_t("fx_hero_robot_ultimate_train_spawn", "fx")
tt.render.sprites[1].name = "Blaze_tren_box"
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("fx_hero_robot_ultimate_smoke", "decal_tween")
tt.render.sprites[1].name = "Blaze_skill2humo_loop"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_OBJECTS
tt.tween.props[1].keys = {
	{
		fts(0),
		0
	},
	{
		fts(10),
		255
	},
	{
		0.8,
		255
	},
	{
		1,
		0
	}
}
tt.tween.props[1].loop = false
tt = E:register_t("fx_hero_hunter_skill_heal_strike_hit", "fx")
tt.render.sprites[1].name = "mistystep_hit_run"
tt = E:register_t("fx_hero_hunter_ranged_attack", "fx")
tt.render.sprites[1].name = "shothit_run"
tt = E:register_t("fx_hero_hunter_skill_ricochet_hit", "fx")
tt.render.sprites[1].name = "mistystep_hit_run"
tt = E:register_t("fx_hero_hunter_skill_shoot_around_decal", "fx")
tt.render.sprites[1].name = "argent_storm_decal_run"
tt = E:register_t("fx_hero_hunter_ultimate_hit", "fx")
tt.render.sprites[1].name = "hit_dante_run"
tt = E:register_t("fx_hero_hunter_steal", "fx")
tt.render.sprites[1].name = "duskbeast_coin_run"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("fx_hero_dragon_gem_bolt_hit", "fx")
tt.render.sprites[1].name = "hero_evil_dragon_attack_fx_idle"
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].draw_order = DO_MOD_FX
tt = E:register_t("fx_hero_dragon_gem_bolt_hit_flying", "fx")
tt.render.sprites[1].name = "hero_evil_dragon_attack_fx_air_idle"
tt.render.sprites[1].z = Z_EFFECTS
tt.render.sprites[1].draw_order = DO_MOD_FX
tt = E:register_t("fx_hero_dragon_gem_skill_stun", "fx")
tt.render.sprites[1].name = "hero_evil_dragon_breath_cloud_idle"
tt.render.sprites[1].loop = true
tt = E:register_t("fx_hero_dragon_gem_ultimate_shard_arrival_1", "fx")
tt.render.sprites[1].name = "hero_evil_dragon_ultimate_fx_a_idle"
tt.render.sprites[1].loop = false
tt = E:register_t("fx_hero_dragon_gem_ultimate_shard_arrival_2", "fx")
tt.render.sprites[1].name = "hero_evil_dragon_ultimate_fx_b_idle"
tt.render.sprites[1].loop = false
tt = E:register_t("fx_bullet_hero_bird", "fx")
tt.render.sprites[1].name = "gryph_proy_explosion_run"
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("fx_bullet_hero_bird_cluster_bomb_air", "fx")
tt.render.sprites[1].name = "gryph_skillproy_explosion_run"
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt.render.sprites[1].anchor = v(0.43, 0.5)

tt = E:register_t("fx_explosion_tower_dwarf", "fx")
tt.render.sprites[1].name = "tower_dwarf_skill_main_explosion_idle"
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt.render.sprites[1].anchor = v(0.43, 0.5)

tt = E:register_t("fx_bullet_hero_bird_cluster_bomb", "fx")
tt.render.sprites[1].name = "gryph_skillproy_part_explosion_run"
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("fx_hero_bird_gattling", "fx")
tt.render.sprites[1].name = "gryph_bulletskill_enemyhitfx_run"
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("fx_hero_bird_cluster_bomb_ray", "fx")
tt.render.sprites[1].name = "gryph_skillshot_run"
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt.render.sprites[1].scale = vv(1)
tt = E:register_t("fx_hero_bird_ultimate", "fx")
tt.render.sprites[1].name = "gryph_child_hit_run"
tt.render.sprites[1].z = Z_OBJECTS_COVERS

tt = E:register_t("fx_hero_witch_basic_ranged_hit", "fx")
tt.render.sprites[1].name = "hero_witch_ranged_attack_hit"
tt = E:register_t("fx_hero_witch_ultimate", "fx")
tt.render.sprites[1].name = "hero_witch_ultimate_teleport_fx"
tt = E:register_t("fx_bolt_dragon_bone_basic_attack_hit", "fx")
tt.render.sprites[1].name = "hero_dragon_bone_hit_idle"
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].draw_order = DO_MOD_FX
tt.render.sprites[1].sort_y_offset = -5
tt = E:register_t("fx_bolt_dragon_bone_basic_attack_hit_flying", "fx")
tt.render.sprites[1].name = "hero_dragon_bone_hit_air_idle"
tt.render.sprites[1].z = Z_EFFECTS
tt.render.sprites[1].draw_order = DO_MOD_FX
tt = E:register_t("fx_dragon_bone_plague_explosion", "fx")
tt.render.sprites[1].name = "hero_dragon_bone_plague_explosion_idle"
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].draw_order = DO_MOD_FX
tt = E:register_t("fx_bullet_dragon_bone_rain", "fx")
tt.render.sprites[1].name = "hero_dragon_bone_bones_fx_idle"
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].draw_order = DO_MOD_FX
tt = E:register_t("fx_bullet_dragon_bone_rain_vanish", "fx")
tt.render.sprites[1].name = "hero_dragon_bone_bones_despawn_fx_idle"
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].draw_order = DO_MOD_FX
tt = E:register_t("fx_dragon_bone_dog_spawn", "fx")
tt.render.sprites[1].name = "hero_dragon_bone_drake_spawn_fx_idle"
tt.render.sprites[1].anchor = v(0.5, 0.4)
tt = E:register_t("fx_dragon_bone_dog_hit", "fx")
tt.render.sprites[1].name = "hero_dragon_bone_drake_hit_fx_idle"
tt = E:register_t("fx_hero_witch_skill_path_aoe_in", "fx")
tt.render.sprites[1].name = "hero_witch_skill_4_potion_in_layer1_in"
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].name = "hero_witch_skill_4_potion_in_layer2_in"
tt.render.sprites[2].loop = false
tt.render.sprites[2].z = Z_EFFECTS
tt = E:register_t("fx_hero_witch_skill_polymorph", "fx")
tt.render.sprites[1].name = "hero_witch_skill_1_hit_run"
tt.render.sprites[1].z = Z_OBJECTS_COVERS

tt = E:register_t("boss_gator_vfx_acid_explosion", "fx")
tt.render.sprites[1].prefix = "boss_gator_lvl2_bubbleDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt = E:register_t("boss_gator_vfx_fire_explosion", "fx")
tt.render.sprites[1].prefix = "boss_gator_lvl3_explosionDef"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].exo = true

tt = E:register_t("fx_werebeast_boss_cultist_smoke", "fx")
tt.render.sprites[1].name = "werebeast_boss_cultist_smoke_cultist_boss_smoke"
tt.render.sprites[1].loop = false
tt.render.sprites[1].hide_after_runs = 1
tt = E:register_t("fx_stage_09_portal_path_spawn_fx", "fx")
tt.render.sprites[1].prefix = "stage_9_portal_path_spawn_FXDef"
tt.render.sprites[1].name = "spawn"
tt.render.sprites[1].exo = true
tt = E:register_t("fx_stage_10_statue_click", "fx")
tt.render.sprites[1].prefix = "ymca_statue_dust"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].hide_after_runs = 1
tt = E:register_t("fx_stage_10_obelisk_teleport", "fx")
tt.render.sprites[1].prefix = "TeleportFxDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt = E:register_t("fx_stage_10_obelisk_stun_explosion", "fx")
tt.render.sprites[1].prefix = "StunFxDef"
tt.render.sprites[1].name = "Idle"
tt.render.sprites[1].exo = true
tt = E:register_t("fx_stage_10_obelisk_stun_explosion_white", "decal_tween")
tt.render.sprites[1].prefix = "StunWhiteDef"
tt.render.sprites[1].name = "Idle"
tt.render.sprites[1].z = Z_GUI - 2
tt.render.sprites[1].exo = true
tt.render.sprites[1].scale = vv(70)
tt.tween.remove = true
tt.tween.props[1].name = "scale"
tt.tween.props[1].keys = {
	{
		fts(0),
		vv(70)
	}
}
tt = E:register_t("fx_stage_10_obelisk_stun_circle", "fx")
tt.render.sprites[1].prefix = "StunCircleDef"
tt.render.sprites[1].name = "Idle"
tt.render.sprites[1].exo = true
tt = E:register_t("fx_stage_10_obelisk_teleport_crystal", "decal_tween")
b = balance.specials.stage10_obelisk
tt.render.sprites[1].prefix = "stage10_obelisk_teleport_fx_teleport"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].z = Z_DECALS - 1
tt.fx_duration = 1.6
tt.tween.props[1].keys = {
	{
		fts(0),
		0
	},
	{
		fts(5),
		255
	},
	{
		tt.fx_duration - fts(7),
		255
	},
	{
		tt.fx_duration,
		0
	}
}
tt = E:register_t("fx_stage_10_obelisk_priest_hit", "fx")
tt.render.sprites[1].name = "stage10_obelisk_hit"
tt = E:register_t("fx_soldier_reinforcement_special_linirea", "fx")
tt.render.sprites[1].name = "reinforcement_linirea_lvl_5_hit_vfx_idle"
tt.render.sprites[1].scale = vv(0.8)
tt = E:register_t("fx_soldier_reinforcement_special_dark_army", "fx")
tt.render.sprites[1].name = "reinforcement_darkarmy_lvl_5_unit_hit_vfx"
tt = E:register_t("fx_hit_crow_reinforcement_special_dark_army", "fx")
tt.render.sprites[1].name = "reinforcement_darkarmy_lvl_5_crow_hit_idle"
tt = E:register_t("fx_stage_11_cult_leader_attack_hit", "fx")
tt.render.sprites[1].name = "mydrias_proyectile_hit"
tt = E:register_t("fx_stage_11_cult_leader_spawn", "fx")
b = balance.specials.stage11_cult_leader.illusion

E:add_comps(tt, "tween")

tt.render.sprites[1].name = "mydrias_summoncircle_summoncircle_start"
tt.render.sprites[1].loop = true
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].name = "mydrias_summoncircle_summoncircle_summon"
tt.render.sprites[2].z = Z_DECALS
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].name = "mydrias_summoncircle_summoncircle_fadeout"
tt.render.sprites[3].z = Z_DECALS
tt.render.sprites[4] = E:clone_c("sprite")
tt.render.sprites[4].name = "mydrias_summoncircle_summoncircle_summon"
tt.render.sprites[4].z = Z_DECALS
tt.timed.duration = 1e+99
tt.prev_duration = b.spawn_charge_time + 1
tt.scale_timing = b.spawn_charge_time
tt.scale_duration = 1
tt.decal_duration = 2.5
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.8,
		255
	},
	{
		tt.prev_duration - 0.1,
		255
	},
	{
		tt.prev_duration + 1,
		0
	}
}
tt.tween.props[1].sprite_id = 1
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].keys = {
	{
		0,
		0
	},
	{
		tt.scale_timing - 0.1,
		0
	},
	{
		tt.scale_timing,
		255
	},
	{
		tt.scale_timing + tt.scale_duration,
		0
	}
}
tt.tween.props[2].sprite_id = 2
tt.tween.props[3] = E:clone_c("tween_prop")
tt.tween.props[3].keys = {
	{
		0,
		0
	},
	{
		tt.prev_duration - 0.1,
		0
	},
	{
		tt.prev_duration,
		255
	},
	{
		tt.prev_duration + tt.decal_duration - 1,
		255
	},
	{
		tt.prev_duration + tt.decal_duration,
		0
	}
}
tt.tween.props[3].sprite_id = 3
tt.tween.props[4] = E:clone_c("tween_prop")
tt.tween.props[4].name = "scale"
tt.tween.props[4].keys = {
	{
		fts(0),
		v(1, 1)
	},
	{
		tt.scale_timing - 0.1,
		v(1, 1)
	},
	{
		tt.scale_timing + tt.scale_duration,
		v(1.5, 1.5)
	}
}
tt.tween.props[4].sprite_id = 2
tt.tween.props[5] = E:clone_c("tween_prop")
tt.tween.props[5].keys = {
	{
		0,
		0
	},
	{
		tt.scale_timing - 0.1,
		0
	},
	{
		tt.scale_timing,
		255
	},
	{
		tt.scale_timing + tt.scale_duration + 1,
		0
	}
}
tt.tween.props[5].sprite_id = 4
tt = E:register_t("fx_bullet_stage_11_veznan_skill_1", "fx")

E:add_comps(tt, "tween")

tt.render.sprites[1].name = "stage11_veznan_export_skill1_decal_idle"
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].name = "stage11_veznan_export_skill1_hit_piso"
tt.render.sprites[2].z = Z_DECALS
tt.render.sprites[2].loop = false
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].name = "stage11_veznan_export_skill1_hit_idle"
tt.render.sprites[3].z = Z_BULLET_PARTICLES
tt.render.sprites[3].loop = false
tt.timed.duration = 1e+99
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		2,
		255
	},
	{
		4,
		0
	}
}
tt.tween.props[1].sprite_id = 1
tt = E:register_t("fx_stage_11_veznan_soldiers_spawn", "fx")
tt.render.sprites[1].name = "stage11_veznan_export_spawn_fire_idle"
tt.render.sprites[1].anchor = v(0.5, 0.3)
tt = E:register_t("fx_stage_11_veznan_soldiers_spawn_top", "fx")
tt.render.sprites[1].name = "stage11_veznan_export_spawn_top"
tt.render.sprites[1].anchor = v(0.5, 0.3)
tt = E:register_t("fx_stage_11_veznan_spawn", "decal")
tt.render.sprites[1].prefix = "stage11_veznan_export_rayo_spawn"
tt.render.sprites[1].name = "start"
tt.render.sprites[1].anchor = v(0.5, 0.3)
tt = E:register_t("fx_stage_11_veznan_spawn_base", "decal")
tt.render.sprites[1].prefix = "stage11_veznan_export_tierrita_spawn"
tt.render.sprites[1].name = "start"
tt.render.sprites[1].anchor = v(0.5, 0.3)
tt = E:register_t("fx_stage_11_portal_spawn", "fx")
tt.render.sprites[1].prefix = "stage_11_portal_fxDef"
tt.render.sprites[1].name = "Animations"
tt.render.sprites[1].exo = true
tt.render.sprites[1].fps = 30
tt = E:register_t("fx_upgrade_alliance_flux_altering_coils_teleport", "fx")
tt.render.sprites[1].prefix = "upgrade_flags_teleport_fx"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].size_names = {
	"idle",
	"big_idle",
	"big_idle"
}
tt.render.sprites[1].animated = true
tt = E:register_t("fx_item_veznan_wrath_explosion", "fx")
tt.render.sprites[1].prefix = "veznan_wrath_explosion_fx"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt = E:register_t("fx_item_veznan_wrath_instakill_ground", "fx")

E:add_comps(tt, "tween")

tt.render.sprites[1].prefix = "veznan_wrath_instakill_fx"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.timed.runs = 1e+99
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		fts(52),
		255
	},
	{
		fts(52) + fts(15),
		0
	}
}
tt.tween.props[1].sprite_id = 1
tt.tween.remove = true
tt = E:register_t("fx_item_veznan_wrath_instakill_air", "fx")
tt.render.sprites[1].prefix = "veznan_wrath_instakill_voladores_fx"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt = E:register_t("fx_terrain_3_spawner", "fx")
tt.render.sprites[1].name = "spawner_t3_spawnereffect"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_EFFECTS
tt = E:register_t("fx_enemy_noxious_horror_melee_hit", "fx")
tt.render.sprites[1].name = "noxious_horror_hit_fx_idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_EFFECTS
tt = E:register_t("fx_bullet_enemy_noxious_horror_explosion", "fx")
tt.render.sprites[1].name = "noxious_horror_projectile_splash"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_EFFECTS
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt = E:register_t("fx_bullet_enemy_noxious_horror_explosion_flying", "fx")
tt.render.sprites[1].name = "noxious_horror_projectile_splash_flying"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_EFFECTS
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt = E:register_t("fx_bullet_enemy_noxious_horror_hit", "fx")
tt.render.sprites[1].name = "noxious_horror_ranged_attack_hit_idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_EFFECTS
tt = E:register_t("fx_enemy_hardened_horror_hit", "fx")
tt.render.sprites[1].name = "hardened_horror_hit_vfx_attack_1_hit"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_EFFECTS
tt = E:register_t("fx_enemy_blinker_attack", "fx")
b = balance.enemies.void_beyond.blinker.ranged_attack
tt.render.sprites[1].name = "blinker_stun_fx_Idle"
tt.render.sprites[1].loop = true
tt.timed.duration = b.duration
tt.timed.runs = 1e+99
tt = E:register_t("fx_enemy_blinker_attack_glare", "fx_enemy_blinker_attack")
tt.render.sprites[1].name = "blinker_glare_fx_Idle"
tt = E:register_t("fx_soldier_reinforcement_stage_15_denas_hit", "fx")
tt.render.sprites[1].name = "denas_hit_fx_Idle"
tt = E:register_t("fx_soldier_reinforcement_stage_15_denas_floor", "decal_timed")
tt.render.sprites[1].name = "denas_decal_Idle"
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].name = "denas_explosion_fx_idle"
tt.render.sprites[2].z = Z_EFFECTS
tt.render.sprites[2].loop = false
tt = E:register_t("fx_stage_15_boss_cult_leader_ray", "fx")
tt.render.sprites[1].prefix = "mutamydrias_rayDef"
tt.render.sprites[1].name = "areaattack"
tt.render.sprites[1].exo = true
tt.render.sprites[1].flip_x = true
tt = E:register_t("fx_stage_16_overseer_tentacle_hit_decal", "fx")
tt.render.sprites[1].prefix = "overseer_fx_overseer_proyectile_explosion"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].loop = false
tt.render.sprites[1].animated = true

tt = E:register_t("fx_enemy_specter_hit", "fx")
tt.render.sprites[1].name = "spectre_fx_idle"
tt = E:register_t("fx_enemy_revenant_harvester_hit", "fx")
tt.render.sprites[1].name = "harvester_hit_fx"

tt = E:register_t("fx_enemy_mad_tinkerer_hit", "fx")
tt.render.sprites[1].name = "mad_tinkerer_hit"

tt = E:register_t("fx_stage_19_statue_hands_dust_1", "fx")
tt.render.sprites[1].prefix = "navira_hands_dust_01"
tt.render.sprites[1].name = "idle"
tt = E:register_t("fx_stage_19_statue_hands_dust_2", "fx")
tt.render.sprites[1].prefix = "navira_hands_dust_02"
tt.render.sprites[1].name = "idle"
tt = E:register_t("fx_stage_19_statue_hands_stones_1", "fx")
tt.render.sprites[1].prefix = "navira_hands_stones_01"
tt.render.sprites[1].name = "idle"
tt = E:register_t("fx_stage_19_statue_hands_stones_2", "fx")
tt.render.sprites[1].prefix = "navira_hands_stones_02"
tt.render.sprites[1].name = "idle"

tt = E:register_t("fx_stage_20_arborean_house_hit_1", "fx")
tt.render.sprites[1].prefix = "arborean_house_hit_1"
tt.render.sprites[1].name = "run"
tt = E:register_t("fx_stage_20_arborean_house_hit_2", "fx")
tt.render.sprites[1].prefix = "arborean_house_hit_2"
tt.render.sprites[1].name = "run"
tt = E:register_t("fx_stage_20_watchtower_explosion", "fx")
tt.render.sprites[1].prefix = "watchtower_arborean_tower_explosion"
tt.render.sprites[1].name = "run"
tt = E:register_t("fx_stage_20_arborean_barrack_explosion", "fx")
tt.render.sprites[1].prefix = "arborean_warrior_barraca_hit_1"
tt.render.sprites[1].name = "run"
tt = E:register_t("fx_stage_20_arborean_barrack_explosion_2", "fx")
tt.render.sprites[1].prefix = "arborean_warrior_barraca_hit_2"
tt.render.sprites[1].name = "run"
tt = E:register_t("fx_stage_22_rocks_paths_fall1", "fx")
tt.render.sprites[1].prefix = "Rocks_Paths1Def"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].exo = true
tt = E:register_t("fx_stage_22_rocks_paths_fall2", "fx_stage_22_rocks_paths_fall1")
tt.render.sprites[1].prefix = "Rocks_Paths2Def"
tt = E:register_t("fx_stage_22_rocks_paths_fall3", "fx_stage_22_rocks_paths_fall1")
tt.render.sprites[1].prefix = "Rocks_Paths3Def"
tt = E:register_t("fx_stage_22_rocks_paths_fall4", "fx_stage_22_rocks_paths_fall1")
tt.render.sprites[1].prefix = "Rocks_Paths4Def"

tt = E:register_t("fx_enemy_common_clone_hit", "fx")
tt.render.sprites[1].name = "common_clone_hit_fx_idle"
tt = E:register_t("fx_enemy_darksteel_fist_hit", "fx")
tt.render.sprites[1].name = "darksteel_fist_hit_fx_idle"
tt = E:register_t("fx_enemy_darksteel_fist_area", "fx")

E:add_comps(tt, "main_script")

tt.render.sprites[1].name = "darksteel_fist_stun_explosion"
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].name = "darksteel_fist_stun_stones"
tt.render.sprites[2].z = Z_EFFECTS - 1
tt.main_script.insert = scripts.fx_enemy_darksteel_fist_area.insert
tt = E:register_t("fx_enemy_darksteel_guardian_hit_1", "fx")
tt.render.sprites[1].name = "darksteel_guardian_attack_1_hit_idle"
tt = E:register_t("fx_enemy_darksteel_guardian_hit_2", "fx")
tt.render.sprites[1].name = "darksteel_guardian_attack_2_hit_idle"
tt = E:register_t("fx_enemy_darksteel_anvil_hit", "fx")
tt.render.sprites[1].name = "darksteel_anvil_attack_hit_idle"
tt = E:register_t("fx_enemy_deformed_grymbeard_clone_shield", "fx")
tt.render.sprites[1].prefix = "clone_boss_shield"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].loop = true
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].draw_order = 100
tt.render.sprites[1].scale = vv(0.9, 0.9)
tt.timed.runs = 1e+99

tt = E:register_t("fx_item_deaths_touch", "fx")
tt.render.sprites[1].name = "deaths_touch_fx_idle"
tt = E:register_t("fx_item_cluster_bomb", "fx")
tt.render.sprites[1].prefix = "cluster_bomb_main_explosion"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].draw_order = 100
tt = E:register_t("fx_item_cluster_bomb_small", "fx")
tt.render.sprites[1].prefix = "cluster_bomb_fragment_explosion"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].draw_order = 100
tt = E:register_t("fx_soldier_reinforcement_item_summon_blackburn_melee_attack_hit", "fx")
tt.render.sprites[1].name = "item_summon_blackburn_attack_1_hit_idle"
tt = E:register_t("fx_soldier_reinforcement_item_summon_blackburn_area_attack_hit", "fx")
tt.render.sprites[1].name = "item_summon_blackburn_attack_2_hit_idle"
tt = E:register_t("fx_soldier_reinforcement_item_summon_blackburn_area_attack", "fx")

tt = E:register_t("fx_bullet_enemy_rolling_sentry", "fx")
tt.render.sprites[1].name = "rolling_sentry_hit_fx_idle"
tt = E:register_t("fx_boss_machinist_death_smoke", "fx")
tt.render.sprites[1].prefix = "dlcdwarfbossstage02_smokeDef"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].exo = true
tt = E:register_t("fx_boss_machinist_death_particle", "fx")
tt.render.sprites[1].prefix = "dlcdwarfbossstage02_particleDef"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].exo = true

tt = E:register_t("fx_tower_arborean_oldtree_hit", "fx")
tt.render.sprites[1].prefix = "arborean_hitDef"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].exo = true

tt = E:register_t("decal_tower_arcane_wizard_empowerment_preview", "decal_tween")

E:add_comps(tt, "render", "tween")

tt.range_factor = 1
tt.render.sprites[1].name = "arcane_wizard_tower_empowerment_indicator"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt.render.sprites[1].offset.y = 5
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.1,
		255
	}
}
tt.tween.remove = false
tt = E:register_t("decal_tower_arborean_emissary_gift_of_nature_wisp", "decal_scripted")

E:add_comps(tt, "force_motion", "tween")

tt.render.sprites[1].name = "arborean_emissary_gift_of_nature_wisp"
tt.render.sprites[1].z = Z_BULLETS
tt.force_motion.a_step = 5
tt.force_motion.max_a = 1200
tt.force_motion.max_v = 300
tt.main_script.update = scripts.decal_tower_arborean_emissary_gift_of_nature_wisp.update
tt.standing_duration = fts(33)
tt.initial_impulse = 900
tt.initial_impulse_duration = fts(10)
tt.initial_impulse_angle = {
	math.pi,
	math.pi / 2,
	-math.pi
}
tt.initial_destination = {
	v(-20, 30),
	v(20, 30),
	v(0, 50)
}

local fly_strenght = 10
local fly_frequency = 30

tt.tween.disabled = true
tt.tween.props[1].name = "offset"
tt.tween.props[1].interp = "sine"
tt.tween.props[1].keys = {
	{
		0,
		v(0, 0)
	},
	{
		fts(fly_frequency),
		v(0, fly_strenght)
	},
	{
		fts(fly_frequency * 2),
		v(0, 0)
	},
	{
		fts(fly_frequency * 3),
		v(0, -fly_strenght)
	},
	{
		fts(fly_frequency * 4),
		v(0, 0)
	}
}
tt.tween.props[1].loop = true
tt.tween.props[1].disabled = true
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].name = "alpha"
tt.tween.props[2].keys = {
	{
		0,
		255
	},
	{
		fts(10),
		0
	}
}
tt.tween.props[2].disabled = true
tt.tween.remove = false
tt.particles_name = "ps_tower_arborean_emissary_gift_of_nature_wisps"
tt.positions = {
	{
		{
			0,
			v(100, 0)
		},
		{
			0.3,
			v(100, 50)
		},
		{
			0.5,
			v(50, 0)
		},
		{
			0.7,
			v(0, 20)
		},
		{
			0.8,
			v(10, -10)
		},
		{
			1,
			v(0, 0)
		}
	},
	{
		{
			0,
			v(0, 0)
		},
		{
			0.3,
			v(20, -20)
		},
		{
			0.7,
			v(-20, -20)
		},
		{
			1,
			v(0, 0)
		}
	},
	{
		{
			0,
			v(0, 0)
		},
		{
			0.1,
			v(-100, 0)
		},
		{
			0.2,
			v(-100, -50)
		},
		{
			0.5,
			v(-50, 0)
		},
		{
			0.6,
			v(-50, 0)
		},
		{
			0.7,
			v(0, 0)
		},
		{
			0.8,
			v(-20, -10)
		},
		{
			1,
			v(0, 0)
		}
	}
}
tt = E:register_t("decal_tower_demon_pit_reload", "decal_scripted")
tt.render.sprites[1].name = ""
tt.render.sprites[1].z = Z_TOWER_BASES + 1
tt.main_script.update = scripts.decal_tower_demon_pit_reload.update
tt = E:register_t("decal_tower_demon_pit_demon_explosion_decal", "decal_tween")

E:add_comps(tt, "render", "tween")

tt.render.sprites[1].name = "demon_pit_tower_demon_minion_explosion_decal"
tt.render.sprites[1].animated = false
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		1,
		255
	},
	{
		2.5,
		0
	}
}
tt.tween.remove = true
tt = E:register_t("decal_rally_range_KR5", "decal")
tt.actual_radius = 137
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "rally_circle_full"
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].scale = v(1, 1)
tt.render.sprites[1].z = Z_OBJECTS_SKY
tt = E:register_t("decal_hero_lumenir_sword", "decal_tween")
tt.render.sprites[1].name = "hero_lumenir_celestial_judgement_fx_decal"
tt.render.sprites[1].animated = false
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		2,
		255
	},
	{
		2.5,
		0
	}
}
tt.render.sprites[1].z = Z_DECALS
tt.tween.remove = false
tt = E:register_t("decal_tower_range_KR5", "decal_rally_range_KR5")
tt.render.sprites[1].name = "range_circle_full"
tt = E:register_t("decal_soldier_shadow", "decal_scripted")
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].animated = false
tt.main_script.update = scripts.decal_soldier_shadow.update
tt.max_height = 50
tt.shadow_shrink = 0.4
tt.entity = nil
tt.dissapear_time = 14
tt = E:register_t("decal_soldier_tower_rocket_gunners_shadow", "decal_soldier_shadow")
tt.render.sprites[1].name = "rocket_gunners_tower_gunner_shadow"
tt.shadow_shrink = 0.25
tt = E:register_t("decal_bullet_soldier_tower_rocket_gunners_sting_missiles", "decal_tween")
tt.render.sprites[1].name = "rocket_gunners_tower_sting_missiles_floor_decal"
tt.render.sprites[1].animated = false
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		3,
		255
	},
	{
		3.5,
		0
	}
}
tt.tween.remove = true
tt = E:register_t("decal_bullet_tower_flamespitter_bomb", "decal_tween")
tt.render.sprites[1].name = "dwarven_flamespitter_tower_blazing_trail_explosion_decal"
tt.render.sprites[1].animated = false
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		1,
		255
	},
	{
		2,
		0
	}
}
tt.tween.remove = true
tt = E:register_t("decal_tower_flamespitter_skill_columns", "decal_timed")
tt.render.sprites[1].prefix = "dwarven_flamespitter_tower_scorching_torches_particle"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.timed.duration = fts(10)

tt = E:register_t("decal_tower_dwarf_jump_explosion", "decal_timed")
tt.render.sprites[1].prefix = "tower_dwarf_jump_explosion_lvl4_jump_in"
tt.render.sprites[1].name = "fx"
tt.render.sprites[1].animated = true
tt.timed.duration = fts(20)

tt = E:register_t("decal_tower_stage_13_sunray", "decal_tween")
tt.render.sprites[1].name = "sunraytower_decal1_Asst_SunrayTower_Decal1"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].name = "sunraytower_decal2_Asst_sunraytower_decal2"
tt.render.sprites[2].animated = false
tt.render.sprites[2].z = Z_DECALS + 1
tt.render.sprites[2].offset = v(0, 10)
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		fts(20),
		255
	},
	{
		fts(40),
		0
	}
}
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].name = "alpha"
tt.tween.props[2].keys = {
	{
		0,
		255
	},
	{
		fts(10),
		255
	},
	{
		fts(20),
		0
	}
}
tt.tween.props[2].sprite_id = 2
tt.tween.remove = true
tt = E:register_t("decal_bullet_tower_barrel", "decal_timed")
tt.render.sprites[1].name = "barrel_tower_projectile_hit_fx_decal_idle"
tt.render.sprites[1].animated = true
tt.timed.duration = fts(22)
tt = E:register_t("decal_aura_bullet_tower_barrel_skill_barrel_explosion", "decal_tween")
tt.render.sprites[1].name = "barrel_tower_lvl4_bad_barrel_projectile_decal"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_DECALS
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		fts(20),
		255
	},
	{
		fts(40),
		0
	}
}
tt.tween.remove = true
tt = E:register_t("decal_soldier_tower_barrel_skill_warrior", "decal_tween")
tt.render.sprites[1].prefix = "barrel_tower_berserker_unit_decal"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_DECALS
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		fts(10),
		0
	}
}
tt.tween.remove = true
tt.tween.disabled = true

tt = E:register_t("decal_bullet_tower_stage_17_weirdwood", "decal_tween")
tt.render.sprites[1].name = "tower_tree_explosion_decal_asst_explosion_decal"
tt.render.sprites[1].animated = false
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		1,
		255
	},
	{
		2,
		0
	}
}
tt.tween.remove = true

tt = E:register_t("decal_enemy_darksteel_guardian_legs", "decal_tween")
tt.render.sprites[1].name = "darksteel_guardian_creep_grave_loop"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].z = Z_OBJECTS
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		2,
		255
	},
	{
		3,
		0
	}
}
tt.tween.remove = true
tt = E:register_t("decal_bullet_enemy_darksteel_guardian_death_clone", "decal_tween")
tt.render.sprites[1].name = "common_clone_creep_boss_fall"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = false
tt.render.sprites[1].z = Z_OBJECTS
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		2,
		255
	},
	{
		3,
		0
	}
}
tt.tween.remove = true

tt = E:register_t("hermit_toad_tower_shadow", "decal")
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "hermit_toad_tower_shadow"
tt.render.sprites[1].z = Z_DECALS

tt = E:register_t("decal_tower_sparking_geode_burst_crystal", "decal_scripted")
tt.render.sprites[1].animated = true
tt.render.sprites[1].prefix = "sparking_geode_crystal_small"
tt.render.sprites[1].name = "in"
tt.render.sprites[1].z = Z_OBJECTS
tt.main_script.update = scripts.decal_tower_sparking_geode_burst_crystal.update

tt = E:register_t("decal_hero_raelyn_onslaught_decal", "decal_tween")
tt.render.sprites[1].name = "hero_raelyn_onslaught_fx_idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].hide_after_runs = 1
tt.tween.props[1].keys = {
	{
		1,
		255
	},
	{
		2.5,
		0
	}
}
tt = E:register_t("decal_hero_muyrn_root_defender_root_1", "decal_scripted")
tt.render.sprites[1].prefix = "hero_nyru_root_defender_root1"
tt.render.sprites[1].loop = false
tt.render.sprites[1].name = "start"
tt.render.sprites[1].hidden = true
tt.main_script.update = scripts.hero_muyrn_root_defender_root_decal.update
tt.vis_flags = bor(F_RANGED)
tt.vis_bans = bor(F_FRIEND)
tt = E:register_t("decal_hero_muyrn_root_defender_root_2", "decal_hero_muyrn_root_defender_root_1")
tt.render.sprites[1].prefix = "hero_nyru_root_defender_root2"
tt = E:register_t("decal_hero_muyrn_root_defender_root_3", "decal_hero_muyrn_root_defender_root_1")
tt.render.sprites[1].prefix = "hero_nyru_root_defender_root3"
tt = E:register_t("decal_hero_muyrn_verdant_blast_hit", "decal")
tt.render.sprites[1].name = "hero_nyru_verdant_blast_explosion_decal"
tt.render.sprites[1].animated = true
tt.render.sprites[1].hide_after_runs = 1
tt = E:register_t("decal_path_hero_movement", "decal")

E:add_comps(tt, "main_script")

tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "unit_drag_discontinue_line"
tt.render.sprites[1].z = Z_OBJECTS_SKY + 10
tt = E:register_t("decal_hero_builder_defensive_turret", "decal_scripted")
b = balance.heroes.hero_builder.defensive_turret

E:add_comps(tt, "bullet_attack")

for i = 1, 3 do
	tt.render.sprites[i] = E:clone_c("sprite")
	tt.render.sprites[i].prefix = "hero_obdul_skill_4_tower_layer" .. i
	tt.render.sprites[i].name = "idle"
	tt.render.sprites[i].group = "layers"
end

tt.bullet_attack.max_range = b.attack.range
tt.bullet_attack.bullet = "arrow_hero_builder_defensive_turret"
tt.bullet_attack.shoot_time = fts(6)
tt.bullet_attack.cooldown = nil
tt.bullet_attack.bullet_start_offset = {
	v(10, 55),
	v(-10, 55)
}
tt.bullet_attack.animation = "attack"
tt.bullet_attack.vis_flags = bor(F_RANGED)
tt.bullet_attack.vis_bans = bor(F_FRIEND, F_NIGHTMARE)
tt.main_script.update = scripts.decal_hero_builder_defensive_turret.update
tt.duration = nil
tt = E:register_t("decal_hero_builder_ultimate_projectile", "decal_scripted")
b = balance.heroes.hero_builder.defensive_turret

E:add_comps(tt, "bullet")

tt.render.sprites[1].name = "hero_obdul_ultimate_projectile"
tt.render.sprites[1].animated = false
tt.render.sprites[1].anchor = v(0.2, 0.5)
tt.bullet.max_speed = 3000
tt.bullet.arrive_decal = "decal_hero_builder_ultimate_ball"
tt.bullet.aura = "aura_hero_builder_ultimate"
tt.main_script.update = scripts.decal_hero_builder_ultimate_projectile.update
tt = E:register_t("decal_hero_builder_ultimate_ball", "decal_scripted")

E:add_comps(tt, "tween")

tt.render.sprites[1].prefix = "hero_obdul_ultimate"
tt.render.sprites[1].name = "in"
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "hero_obdul_ultimate"
tt.render.sprites[2].name = "ball"
tt.render.sprites[2].loop = false

for i = 1, 4 do
	tt.render.sprites[i + 2] = E:clone_c("sprite")
	tt.render.sprites[i + 2].prefix = "hero_obdul_ultimate"
	tt.render.sprites[i + 2].name = "rock_0" .. i .. "_in"
	tt.render.sprites[i + 1].loop = false
end

tt.render.sprites[7] = E:clone_c("sprite")
tt.render.sprites[7].prefix = "hero_obdul_ultimate"
tt.render.sprites[7].name = "dust_over_ball_run"
tt.render.sprites[7].loop = false
tt.render.sprites[8] = E:clone_c("sprite")
tt.render.sprites[8].name = "hero_obdul_ultimate_decal"
tt.render.sprites[8].offset = v(0, 20)
tt.render.sprites[8].loop = false
tt.render.sprites[8].animated = false
tt.render.sprites[8].z = Z_DECALS
tt.render.sprites[8].scale = v(0.8, 0.8)
tt.render.sprites[9] = E:clone_c("sprite")
tt.render.sprites[9].name = "hero_obdul_ultimate_decal"
tt.render.sprites[9].offset = v(-20, -7)
tt.render.sprites[9].loop = false
tt.render.sprites[9].animated = false
tt.render.sprites[9].z = Z_DECALS
tt.render.sprites[9].scale = v(0.8, 0.8)
tt.render.sprites[10] = E:clone_c("sprite")
tt.render.sprites[10].name = "hero_obdul_ultimate_decal"
tt.render.sprites[10].offset = v(20, -7)
tt.render.sprites[10].loop = false
tt.render.sprites[10].animated = false
tt.render.sprites[10].z = Z_DECALS
tt.render.sprites[10].scale = v(0.8, 0.8)

local dust_scales = {
	v(0.8, 0.8),
	v(0.7, 0.7),
	v(0.7, 0.7),
	v(0.8, 0.8),
	v(0.7, 0.7),
	v(0.7, 0.7)
}
local dust_offset = {
	v(-30, 20),
	v(-35, 0),
	v(-20, -10),
	v(30, 20),
	v(35, 0),
	v(20, -10)
}

for i = 1, 6 do
	tt.render.sprites[10 + i] = E:clone_c("sprite")
	tt.render.sprites[10 + i].prefix = "hero_obdul_ultimate"
	tt.render.sprites[10 + i].name = "dust_cloud"
	tt.render.sprites[10 + i].loop = false
	tt.render.sprites[10 + i].scale = dust_scales[i]
	tt.render.sprites[10 + i].offset = dust_offset[i]
end

tt.main_script.update = scripts.decal_hero_builder_ultimate_ball.update
tt.tween.remove = true
tt.tween.disabled = true
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		fts(20),
		0
	}
}

for i = 2, 16 do
	tt.tween.props[i] = table.deepclone(tt.tween.props[1])
	tt.tween.props[i].sprite_id = i
end

tt.duration = 2.5
tt = E:register_t("decal_hero_space_elf_ultimate", "decal_timed")
tt.render.sprites[1].name = "hero_therien_void_prison_floor_fx_idle"
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].loop = false
tt.render.sprites[1].animated = true
tt = E:register_t("decal_hero_space_elf_ultimate_mod", "decal_tween")
tt.tween.remove = false
tt.tween.disabled = true
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		0.13,
		0
	}
}
tt = E:register_t("decal_hero_space_elf_void_rift_therien", "decal_tween")
tt.render.sprites[1].name = "hero_therien_rift_therien_fx_idle"
tt.render.sprites[1].z = Z_DECALS + 1
tt.render.sprites[1].loop = false
tt.render.sprites[1].animated = true
tt.tween.disabled = false
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.3,
		255
	},
	{
		1.5,
		255
	},
	{
		1.8,
		0
	}
}
tt.tween.remove = true
tt = E:register_t("decal_hero_venom_slimewalk", "decal_timed")
tt.render.sprites[1].prefix = "hero_venom_run_particle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = false
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].fps = 15
tt.timed.duration = fts(20)
tt = E:register_t("decal_hero_venom_spike_a", "decal_scripted")
b = balance.heroes.hero_venom.floor_spikes
tt.render.sprites[1].prefix = "hero_venom_spike_a"
tt.render.sprites[1].name = "in"
tt.render.sprites[1].animated = true
tt.main_script.update = scripts.decal_hero_venom_spike.update
tt.damage_type = b.damage_type
tt.damage_min = nil
tt.damage_max = nil
tt.damage_radius = b.damage_radius
tt.vis_flags = bor(F_AREA)
tt.vis_bans = bor(F_FLYING)
tt = E:register_t("decal_hero_venom_spike_b", "decal_hero_venom_spike_a")
tt.render.sprites[1].prefix = "hero_venom_spike_b"
tt = E:register_t("decal_hero_venom_death", "decal_scripted")

E:add_comps(tt, "tween")

tt.render.sprites[1].prefix = "hero_venom_death_decal"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].hidden = true
tt.render.sprites[1].z = Z_DECALS
tt.main_script.update = scripts.decal_hero_venom_death.update
tt.tween.disabled = true
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		1,
		255
	}
}
tt.tween.remove = false
tt = E:register_t("decal_hero_robot_skill_explode", "decal")

E:add_comps(tt, "tween")

tt.render.sprites[1].name = "Blaze_skill3decal"
tt.render.sprites[1].animated = false
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "Blaze_skill1y3decal"
tt.render.sprites[2].name = "run"
tt.render.sprites[2].animated = true
tt.render.sprites[2].z = Z_DECALS
tt.render.sprites[2].loop = false
tt.render.sprites[2].scale = v(1.1, 1.1)
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		fts(9),
		255
	},
	{
		fts(16),
		0
	}
}
tt.tween.props[1].sprite_id = 1
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].name = "scale"
tt.tween.props[2].keys = {
	{
		0,
		v(1, 1)
	},
	{
		fts(6),
		v(1.7, 1.7)
	},
	{
		fts(16),
		v(2, 2)
	}
}
tt.tween.props[2].sprite_id = 1
tt.tween.remove = true
tt = E:register_t("decal_hero_robot_skill_uppercut_clone", "decal")

E:add_comps(tt, "tween")

tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		0,
		255
	},
	{
		0,
		0
	}
}
tt.tween.props[1].sprite_id = 1
tt.tween.remove = true
tt = E:register_t("decal_hero_robot_ultimate_floor", "decal_tween")
tt.render.sprites[1].name = "Blaze_trendecal_run"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = false
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		1,
		0
	}
}

tt = E:register_t("decal_hero_dragon_gem_crystal_tomb", "decal_scripted")
b = balance.heroes.hero_dragon_gem
tt.render.sprites[1].prefix = "hero_evil_dragon_hero"
tt.render.sprites[1].name = "death_crystals"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = false
tt.main_script.update = scripts.decal_hero_dragon_gem_crystal_tomb.update

tt = E:register_t("decal_hero_dragon_gem_floor_impact_shard", "decal_scripted")

E:add_comps(tt, "sound_events")

b = balance.heroes.hero_dragon_gem.floor_impact
tt.render.sprites[1].prefix = "hero_evil_dragon_shards"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = false
tt.damage_min = nil
tt.damage_max = nil
tt.main_script.update = scripts.decal_hero_dragon_gem_floor_impact_shard.update
tt.damage_time = fts(5)
tt.duration_time = fts(10)
tt.damage_range = b.damage_range
tt.damage_type = b.damage_type
tt.mod = "mod_hero_dragon_gem_skill_stun"
tt.stun_duration = b.stun_duration
tt.sound_events.insert = "HeroDragonGemPrismaticShardRipple"

tt = E:register_t("decal_hero_dragon_gem_ultimate_shard", "decal_scripted")

E:add_comps(tt, "tween", "sound_events")

b = balance.heroes.hero_dragon_gem.ultimate
tt.render.sprites[1].name = "hero_evil_dragon_ultimate_crystal_b"
tt.render.sprites[1].animated = false
tt.render.sprites[1].loop = false
tt.damage_min = nil
tt.damage_max = nil
tt.main_script.update = scripts.decal_hero_dragon_gem_ultimate_shard.update
tt.damage_time = fts(1)
tt.damage_range = b.damage_range
tt.damage_type = b.damage_type
tt.bullet = "bullet_hero_dragon_gem_ultimate_shard"
tt.fx_on_arrival = {
	"fx_hero_dragon_gem_ultimate_shard_arrival_1",
	"fx_hero_dragon_gem_ultimate_shard_arrival_2"
}
tt.floor_decal = "decal_hero_dragon_gem_floor_decal"
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		3,
		0
	}
}
tt.tween.disabled = true
tt.tween_remove = false
tt.sound_events.insert = "HeroDragonGemUltimateCast"
tt = E:register_t("decal_bullet_hero_dragon_gem_ultimate_shard", "decal_tween")
tt.render.sprites[1].name = "hero_evil_dragon_ultimate_crystal_a_idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = false
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		3,
		0
	}
}
tt = E:register_t("decal_hero_dragon_gem_floor_decal", "decal_tween")
tt.render.sprites[1].name = "hero_evil_dragon_decal"
tt.render.sprites[1].animated = false
tt.render.sprites[1].loop = false
tt.render.sprites[1].z = Z_DECALS
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		1.5,
		255
	},
	{
		2,
		0
	}
}
tt = E:register_t("decal_hero_dragon_gem_floor_circle", "decal")

E:add_comps(tt, "tween")

tt.render.sprites[1].name = "hero_evil_dragon_area_damage_fx"
tt.render.sprites[1].animated = false
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		fts(6),
		255
	},
	{
		fts(13),
		0
	}
}
tt.tween.props[1].sprite_id = 1
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].name = "scale"
tt.tween.props[2].keys = {
	{
		0,
		v(0.35, 0.35)
	},
	{
		fts(6),
		v(0.55, 0.55)
	},
	{
		fts(13),
		v(0.6, 0.6)
	}
}
tt.tween.props[2].sprite_id = 1
tt.tween.remove = true
tt = E:register_t("decal_hero_dragon_gem_floor_circle_totem", "decal_hero_dragon_gem_floor_circle")
tt.tween.props[2].keys = {
	{
		0,
		v(0.25, 0.25)
	},
	{
		fts(6),
		v(0.45, 0.45)
	},
	{
		fts(13),
		v(0.5, 0.5)
	}
}
tt = E:register_t("decal_hero_bird_tomb", "decal_scripted")

E:add_comps(tt, "tween")

b = balance.heroes.hero_bird
tt.render.sprites[1].prefix = "gryph_deaththing"
tt.render.sprites[1].name = "death"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = false
tt.render.sprites[1].z = Z_DECALS
tt.main_script.update = scripts.decal_hero_bird_tomb.update
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		fts(10),
		0
	}
}
tt.tween.disabled = true
tt.tween.remove = true
tt = E:register_t("decal_bullet_hero_bird", "decal_tween")
tt.render.sprites[1].name = "gryph_proy_decal"
tt.render.sprites[1].animated = false
tt.render.sprites[1].anchor = v(0.5, 0.45)
tt.render.sprites[1].z = Z_DECALS
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		0.5,
		255
	},
	{
		1.25,
		0
	}
}
tt = E:register_t("decal_hero_bird_shout_stun", "decal_timed")
tt.render.sprites[1].name = "gryph_stunskill_decal_run"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_DECALS
tt.timed.duration = fts(23)
tt = E:register_t("decal_hero_bird_gattling", "decal_timed")
tt.render.sprites[1].name = "gryph_bulletskill_decal_run"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].scale = vv(0.7)
tt.timed.duration = fts(27)

tt = E:register_t("decal_dragon_bone_cloud", "decal_tween")
tt.render.sprites[1].name = "hero_dragon_bone_cloud_b"
tt.render.sprites[1].animated = false
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "hero_dragon_bone_cloud"
tt.render.sprites[2].name = "idle"
tt.render.sprites[2].z = Z_OBJECTS
tt.render.sprites[2].offset = v(0, 15)
tt.render.sprites[2].sort_y_offset = -25
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(18),
		255
	}
}
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].name = "alpha"
tt.tween.props[2].keys = {
	{
		0,
		0
	},
	{
		fts(18),
		255
	}
}
tt.tween.props[2].sprite_id = 2
tt.tween.disabled = false
tt.tween.remove = false
tt = E:register_t("decal_bullet_dragon_bone_rain", "decal_timed")
tt.render.sprites[1].name = "hero_dragon_bone_bones_decal"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_DECALS
tt.timed.duration = fts(27)
tt = E:register_t("decal_hero_witch_ultimate", "decal_timed")
tt.render.sprites[1].name = "hero_witch_ultimate_teleport_decal"
tt.render.sprites[1].z = Z_DECALS

tt = E:register_t("decal_dragon_arb_breath_splint_a", "decal_timed")
tt.render.sprites[1].prefix = "hero_dragon_arborean_splinter_ground_a"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].loop = false
tt.render.sprites[2].name = "hero_dragon_arborean_splinter_decal"
tt.render.sprites[2].z = Z_DECALS
tt = E:register_t("decal_dragon_arb_breath_splint_b", "decal_timed")
tt.render.sprites[1].prefix = "hero_dragon_arborean_splinter_ground_b"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].loop = false
tt.render.sprites[2].name = "hero_dragon_arborean_splinter_decal"
tt.render.sprites[2].z = Z_DECALS

tt = E:register_t("decal_ground_enemy_bear_vanguard", "decal")

E:add_comps(tt, "tween")

tt.render.sprites[1].name = "bear_vanguard_decal_ground_0001"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].sort_y_offset = 2
tt.tween.props[1].keys = {
	{
		fts(10),
		255
	},
	{
		0.8,
		255
	},
	{
		1,
		0
	}
}
tt.tween.props[1].loop = false
tt.tween.props[1].sprite_id = 1
tt = E:register_t("decal_werebeast_boss_shadow", "decal_tween")

E:add_comps(tt, "render", "tween")

tt.range_factor = 1
tt.render.sprites[1].name = "werebeast_boss_shadow"
tt.render.sprites[1].animated = false
tt.tween.props[1].name = "scale"
tt.tween.props[1].keys = {
	{
		0,
		v(1, 1)
	},
	{
		1.5,
		v(0, 0)
	}
}
tt = E:register_t("decal_enemy_amalgam_hit", "decal_scripted")
tt.main_script.update = scripts.decal_enemy_amalgam_hit.update
tt.spike_decals = {
	"decal_enemy_amalgam_hit_1",
	"decal_enemy_amalgam_hit_2"
}
tt.decal_spawn_range = 50
tt.distance_between = 20
tt = E:register_t("decal_enemy_amalgam_hit_1", "decal_timed")
tt.render.sprites[1].name = "Amalgam_Attack1_run"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("decal_enemy_amalgam_hit_2", "decal_enemy_amalgam_hit_1")
tt.render.sprites[1].name = "Amalgam_Attack2_run"
tt = E:register_t("decal_enemy_amalgam_death_explosion", "decal_enemy_amalgam_hit")

E:add_comps(tt, "tween")

tt.render.sprites[1].name = "Amalgam_Death_Decal"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_DECALS
tt.distance_between = 25
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		fts(34),
		255
	},
	{
		fts(40),
		0
	}
}
tt.tween.props[1].loop = false
tt.tween.remove = true
tt = E:register_t("decal_soldier_tower_ghost_hit", "fx")
tt.render.sprites[1].name = "ghost_tower_hit_fx_idle"

tt = E:register_t("decal_enemy_specter_chase_trail", "decal_tween")

E:add_comps(tt, "main_script")

tt.range_factor = 1
tt.render.sprites[1].prefix = "spectre_trail"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_OBJECT
tt.render.sprites[1].draw_order = -1
tt.render.sprites[1].loop = true
tt.render.sprites[1].offset = v(0, 8)
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	}
}
tt.tween.props[1].loop = false
tt.tween.remove = false
tt = E:register_t("decal_enemy_dust_cryptid_dust", "decal_tween")
tt.range_factor = 1
tt.render.sprites[1].prefix = "dust_cryptid_dust_fx"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_OBJECT
tt.render.sprites[1].loop = true
tt.render.sprites[1].offset = v(0, 10)
tt.render.sprites[1].fps = 30
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	}
}
tt.tween.props[1].loop = false
tt.tween.remove = false

tt = E:register_t("decal_scrap", "decal_scripted")

E:add_comps(tt, "tween")

b = balance.enemies.hammer_and_anvil.scrap
tt.render.sprites[1].prefix = "scrap_pile"
tt.render.sprites[1].name = "in"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].z = Z_OBJECT
tt.main_script.update = scripts.decal_scrap.update
tt.duration = b.duration
tt.tween.disabled = true
tt.tween.remove = false
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		1,
		0
	}
}
tt = E:register_t("decal_ray_mad_tinkerer", "decal")

E:add_comps(tt)

b = balance.enemies.hammer_and_anvil.scrap
tt.render.sprites[1].prefix = "mad_tinkerer_skill_ray"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = false
tt.render.sprites[1].z = Z_BULLETS
tt.duration = b.duration
tt = E:register_t("decal_scrap_bullet_mad_tinkerer", "decal")

E:add_comps(tt)

b = balance.enemies.hammer_and_anvil.scrap
tt.render.sprites[1].name = "mad_tinkerer_skill_projectile"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_BULLETS
tt.duration = b.duration
tt = E:register_t("decal_enemy_darksteel_fist_stun", "decal_tween")
tt.render.sprites[1].name = "darksteel_fist_stun_floor_decal"
tt.render.sprites[1].animated = false
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		1,
		0
	}
}
tt.tween.disabled = false
tt.tween.remove = true

tt = E:register_t("decal_boss_spider_queen_spiderweb", "decal_tween")
b = balance.enemies.arachnids.boss_spider_queen.spiderweb

E:add_comps(tt, "auras", "main_script")

tt.main_script.insert = scripts.decal_boss_spider_queen_spiderweb.insert
tt.auras.list[1] = E:clone_c("aura_attack")
tt.auras.list[1].name = "aura_spider_webs_slowness"
tt.auras.list[1].cooldown = 0
tt.auras.list[2] = E:clone_c("aura_attack")
tt.auras.list[2].name = "aura_spider_webs_sprint"
tt.auras.list[2].cooldown = 0
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].name = "spider_queen_boss_effects_web_decal"
tt.render.sprites[1].animated = false
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.3,
		255
	},
	{
		b.duration - 0.8,
		255
	},
	{
		b.duration,
		0
	}
}
tt.tween.props[2] = table.deepclone(tt.tween.props[1])
tt.tween.props[2].name = "scale"
tt.tween.props[2].keys = {
	{
		0,
		vv(0.8)
	},
	{
		0.3,
		vv(1.1)
	},
	{
		0.4,
		vv(1)
	}
}
tt.tween.disabled = false
tt.tween.remove = true
tt = E:register_t("decal_boss_spider_queen_webspit_screen", "decal_tween")
b = balance.enemies.arachnids.boss_spider_queen.webspit
tt.render.sprites[1].z = Z_SCREEN_FIXED
tt.render.sprites[1].name = "spider_queen_web_screen"
tt.render.sprites[1].animated = false
tt.render.sprites[1].anchor = vv(0.5)
tt.duration = b.duration
tt.opacity = 255
tt.tween.props[1].keys = nil
tt.tween.props[2] = table.deepclone(tt.tween.props[1])
tt.tween.props[2].name = "scale"
tt.tween.disabled = false
tt.tween.remove = true
tt = E:register_t("decal_boss_spider_queen_spawns", "decal_scripted")

E:add_comps(tt, "tween")

tt.main_script.update = scripts.decal_boss_spider_queen_spawns.update
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].prefix = "boss_effects_egg"
tt.render.sprites[1].name = "in"
tt.render.sprites[1].animated = true
tt.render.sprites[1].anchor = vv(0.5)
tt.render.sprites[1].sort_y_offset = -10
tt.render.sprites[2] = table.deepclone(tt.render.sprites[1])
tt.render.sprites[2].name = "effect_run"
tt.render.sprites[2].loop = true
tt.object = "enemy_drainbrood"
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		fts(8),
		0
	}
}
tt.tween.props[1].sprite_id = 2
tt.tween.disabled = true

tt = E:register_t("decal_item_cluster_bomb_crater", "decal_tween")
tt.tween.props[1].keys = {
	{
		1,
		255
	},
	{
		2.5,
		0
	}
}
tt.render.sprites[1].name = "cluster_bomb_explosion_decal"
tt.render.sprites[1].animated = false
tt = E:register_t("decal_defend_point5", "decal")

E:add_comps(tt, "main_script", "editor", "editor_script")

tt.main_script.insert = scripts.decal_defend_point5.insert
tt.render.sprites[1].name = "defense_point_decal"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].alpha = 100
tt.editor.exit_id = 1
tt.editor.orientation = 1
tt.editor.alpha = 10
tt.editor.flip = 0
tt.editor_script.update = scripts.decal_defend_point5.update_editor
tt.editor.props = {
	{
		"editor.exit_id",
		PT_NUMBER
	},
	{
		"editor.orientation",
		PT_NUMBER
	},
	{
		"editor.alpha",
		PT_NUMBER
	},
	{
		"editor.flip",
		PT_NUMBER
	}
}

tt = E:register_t("decal_defense_flag5", "decal_defense_flag")

E:add_comps(tt, "main_script", "editor", "editor_script")

tt.main_script.insert = scripts.decal_defense_flag5.insert
tt.render.sprites[1].name = "defense_flag"
tt.editor.flip = 0
tt.editor_script.update = scripts.decal_defense_flag5.update_editor
tt.editor.props = {
	{
		"editor.flip",
		PT_NUMBER
	}
}
tt = E:register_t("decal_upgrade_alliance_seal_of_punishment", "decal_scripted")
b = balance.upgrades.alliance_seal_of_punishment
tt.main_script.update = scripts.decal_upgrade_alliance_seal_of_punishment.update
tt.render.sprites[1].prefix = "seal_of_punishment_seal"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].draw_order = 2
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "seal_of_punishment_particles"
tt.render.sprites[2].name = "idle"
tt.render.sprites[2].animated = true
tt.render.sprites[2].z = Z_EFFECTS
tt.render.sprites[2].hidden = true
tt.vis_flags = bor(F_AREA)
tt.vis_bans = 0
tt.trigger_dist = b.radius
tt.cooldown = b.cooldown
tt.aura = "aura_upgrade_alliance_seal_of_punishment"
tt = E:register_t("decal_upgrade_alliance_flux_altering_coils", "decal_scripted")
b = balance.upgrades.alliance_flux_altering_coils
tt.main_script.update = scripts.decal_upgrade_alliance_flux_altering_coils.update
tt.render.sprites[1].prefix = "upgrade_flags_base"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "upgrade_flags_cristal"
tt.render.sprites[2].name = "idle"
tt.render.sprites[2].animated = true
tt.render.sprites[2].z = Z_OBJECTS
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].prefix = "upgrade_flags_particle_fx"
tt.render.sprites[3].name = "idle"
tt.render.sprites[3].animated = true
tt.render.sprites[3].z = Z_OBJECTS
tt.render.sprites[3].hidden = true
tt.render.sprites[4] = E:clone_c("sprite")
tt.render.sprites[4].prefix = "upgrade_flags_circle_fx"
tt.render.sprites[4].name = "idle"
tt.render.sprites[4].animated = true
tt.render.sprites[4].z = Z_OBJECTS - 1
tt.base_sid = 1
tt.cristal_sid = 2
tt.particle_sid = 3
tt.circle_sid = 4
tt.mod_teleport = "mod_upgrade_alliance_flux_altering_coils_teleport"
tt.mod_mark = "mod_upgrade_alliance_flux_altering_coils_mark"
tt.extra_trigger_dist = 0
tt.target_only_paths = nil
tt.trigger_dist = b.radius
tt.cooldown = b.cooldown
tt.nodes_teleport = b.nodes_teleport
tt = E:register_t("decal_upgrade_alliance_display_of_true_might_dark_army_overlay", "decal")

E:add_comps(tt, "tween")

tt.render.sprites[1].name = "display_of_true_might_slow_overlay"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS_SKY
tt.render.sprites[1].scale = vv(4096)
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(5),
		50
	},
	{
		fts(15),
		50
	},
	{
		fts(20),
		0
	}
}
tt.tween.remove = true
tt = E:register_t("decal_upgrade_alliance_display_of_true_might_linirea_overlay", "decal_upgrade_alliance_display_of_true_might_dark_army_overlay")
tt.render.sprites[1].name = "display_of_true_might_heal_overlay"
tt = E:register_t("decal_stage_01_wisps", "decal")
tt.render.sprites[1].prefix = "stage_1_wisps_1Def"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].exo = true
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "stage_1_wisps_2Def"
tt.render.sprites[2].name = "loop"
tt.render.sprites[2].exo = true
tt = E:register_t("decal_stage_01_butterfly_1", "decal_delayed_play")
tt.render.sprites[1].prefix = "stage_1_butterfly_1Def"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].exo = true
tt.render.sprites[1].loop = false
tt.delayed_play.idle_animation = nil
tt.delayed_play.play_animation = "loop"
tt.delayed_play.min_delay = 10
tt.delayed_play.max_delay = 30
tt = E:register_t("decal_stage_01_butterfly_2", "decal_delayed_play")
tt.render.sprites[1].prefix = "stage_1_butterfly_2Def"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].exo = true
tt.render.sprites[1].loop = false
tt.delayed_play.idle_animation = nil
tt.delayed_play.play_animation = "loop"
tt.delayed_play.min_delay = 15
tt.delayed_play.max_delay = 35
tt = E:register_t("decal_wisp_1", "decal_delayed_play")
tt.render.sprites[1].name = "props_wisp"
tt.delayed_play.min_delay = 2
tt.delayed_play.max_delay = 30
tt.delayed_play.idle_animation = nil
tt.delayed_play.play_animation = "props_wisp"
tt.editor.props = {
	{
		"render.sprites[1].r",
		PT_NUMBER,
		math.pi / 180
	},
	{
		"render.sprites[1].scale",
		PT_COORDS
	}
}
tt = E:register_t("decal_stage1_waterfall1", "decal_loop")
tt.render.sprites[1].name = "stage1_waterfall_1"
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("decal_stage1_waterfall2", "decal_loop")
tt.render.sprites[1].name = "stage1_waterfall_2"
tt = E:register_t("decal_stage1_waterfall_ripples", "decal_loop")
tt.render.sprites[1].name = "stage1_waterfall_ripples"
tt = E:register_t("decal_stage1_decos_waterfalltop", "decal")
tt.render.sprites[1].name = "Stage_1_decos_waterfalltop"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("decal_stage_01_decos_waterfall", "decal")
tt.render.sprites[1].name = "Stage_1_decos_waterfall_1"
tt.render.sprites[1].animated = false
tt = E:register_t("decal_stage_01_robin_hood", "decal_scripted")

E:add_comps(tt, "editor", "editor_script", "ui")

for i = 2, 6 do
	tt.render.sprites[i] = E:clone_c("sprite")
	tt.render.sprites[i].prefix = "robin_hood_easter_egg_layer" .. i - 1
	tt.render.sprites[i].name = "idle"
	tt.render.sprites[i].group = "layers"
end

tt.clicked_sound = "Stage01RobinHood"
tt.animation_idle = "idle"
tt.animation_click = "fall"
tt.animation_attack = "attack"
tt.attack_cooldown_min = 4
tt.attack_cooldown_max = 7
tt.ui.click_rect = r(-30, -10, 60, 60)
tt.main_script.update = scripts.decal_stage_01_robin_hood.update
tt.mask_to_spawn = "decal_stage_01_robin_hood_mask"
tt = E:register_t("decal_stage_01_robin_hood_mask", "decal_static")
tt.render.sprites[1].name = "robin_hood_mask"
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt.render.sprites[1].hidden = true
tt = E:register_t("decal_stage_01_campfire_guy_campfire", "decal_scripted")

E:add_comps(tt, "ui")

tt.render.sprites[1].name = "campfire_guy_tent_back"
tt.render.sprites[1].animated = false
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "campfire_guy_guy"
tt.render.sprites[2].offset = v(-36, 5)
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].prefix = "campfire_guy_campfire"
tt.render.sprites[4] = E:clone_c("sprite")
tt.render.sprites[4].prefix = "campfire_guy_tent_front"
tt.render.sprites[4].offset = v(-36, 5)
tt.render.sprites[4].draw_order = 11
tt.main_script.update = scripts.decal_stage_01_campfire_guy_campfire.update
tt.ui.click_rect = r(-30, -10, 60, 60)
tt.sound_fire_off = "Stage01FireOff"
tt.sound_fire_on = "Stage01FireOn"
tt.sound_fire_final = "Stage01FireFinal"
tt.guy_sprite_id = 2
tt.campfire_sprite_id = 3
tt.tent_front_sprite_id = 4
tt = E:register_t("decal_stage_01_elder_rune", "decal_click_play")

E:add_comps(tt, "main_script", "click_play", "ui", "editor")

tt.render.sprites[1].prefix = "Stage_1_rapido_elder_rune_1"
tt.render.sprites[1].loop = true
tt.main_script.update = scripts.decal_stage_01_rune.update
tt.click_play.idle_animation = "idle"
tt.click_play.click_animation = "activation"
tt.click_play.idle_on_animation = "idle_2"
tt.click_play.play_once = true
tt.click_play.clicked_sound = "Stage01Rune"
tt.ui.can_click = true
tt.ui.click_rect = r(-30, -30, 60, 60)
tt = E:register_t("decal_stage_02_elder_rune", "decal_click_play")

E:add_comps(tt, "main_script", "click_play", "ui", "editor")

tt.render.sprites[1].prefix = "stage_2_rapido_elder_rune_2_fx"
tt.render.sprites[1].loop = true
tt.main_script.insert = scripts.decal_stage_02_rune.insert
tt.main_script.update = scripts.decal_stage_02_rune.update
tt.click_play.idle_animation = "idle_2"
tt.click_play.click_animation = "activation"
tt.click_play.play_once = true
tt.click_play.clicked_sound = "Stage0203Rune"
tt.ui.can_click = true
tt.ui.click_rect = r(0, -30, 60, 60)
tt.base_rock_entity = "decal_stage_02_elder_rune_base"
tt = E:register_t("decal_stage_02_elder_rune_base", "decal")

E:add_comps(tt, "main_script")

tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "stage_2_rapido_elder_rune_2_base"
tt.render.sprites[1].sort_y_offset = 1
tt = E:register_t("decal_stage_02_elder_rune_static", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].name = "stage_2_rapido_elder_rune_2_0117"
tt.render.sprites[1].animated = false
tt.render.sprites[1].loop = false
tt = E:register_t("decal_stage_02_fishing_link", "decal_click_play")

E:add_comps(tt, "main_script", "click_play", "ui")

tt.render.sprites[1].prefix = "fishing_link"
tt.render.sprites[1].loop = true
tt.main_script.insert = scripts.decal_stage_02_fishing_link.insert
tt.main_script.update = scripts.decal_stage_02_fishing_link.update
tt.click_play.idle_animation = "idle_2"
tt.click_play.click_animation = "activation"
tt.click_play.play_once = true
tt.click_play.clicked_sound = "Stage02LinkFishing"
tt.ui.can_click = true
tt.ui.click_rect = r(-30, -30, 60, 60)
tt.entity_line = "decal_stage_02_fishing_link_line"
tt.entity_water_splash = "decal_stage_02_fishing_link_water_splash"
tt.min_water_move_cd = 3
tt.max_water_move_cd = 7
tt.min_line_move_cd = 60
tt.max_line_move_cd = 90
tt.min_window_duration = 3
tt.max_window_duration = 3
tt.animation_line_move = ""
tt.gold_pos_offset = v(-10, 40)
tt.gold_amount = 25
tt.fish_animations = {
	"fishing_nothing",
	"fishing_nothing",
	"fishing_fish_or_boot",
	"fishing_nothing",
	"fishing_nothing"
}
tt = E:register_t("decal_stage_02_fishing_link_line", "decal_scripted")
tt.render.sprites[1].prefix = "fishing_link_line"
tt.render.sprites[1].loop = true
tt.main_script.update = scripts.decal_stage_02_fishing_link_line.update
tt.fish_animations = {
	"fishing_nothing",
	"fishing_boot",
	"fishing_fish",
	"fishing_rupee",
	"fishing_nothing"
}
tt = E:register_t("decal_stage_02_fishing_link_water_splash", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].prefix = "water_splash"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].loop = true
tt = E:register_t("decal_stage_02_lion_king", "decal_scripted")

E:add_comps(tt, "main_script", "ui")

for i = 1, 4 do
	tt.render.sprites[i] = E:clone_c("sprite")
	tt.render.sprites[i].animated = true
	tt.render.sprites[i].prefix = "lion_king_easter_egg_layer" .. i
	tt.render.sprites[i].name = "idle"
	tt.render.sprites[i].group = "layers"
end

tt.main_script.insert = scripts.decal_stage_02_lion_king.insert
tt.main_script.update = scripts.decal_stage_02_lion_king.update
tt.ui.can_click = true
tt.ui.click_rect = r(-30, -30, 60, 60)
tt.clicked_sound = "Stage02LionKing"
tt.animation_idle = "idle"
tt.animation_idle2 = "stick"
tt.animation_click = "action"
tt.min_cooldown_idle = 4
tt.max_cooldown_idle = 7
tt.entity_light = "decal_stage_02_lion_king_light"
tt = E:register_t("decal_stage_02_lion_king_light", "decal_scripted")

E:add_comps(tt, "main_script", "ui", "tween")

tt.render.sprites[1] = E:clone_c("sprite")
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "light_copy"
tt.render.sprites[1].z = Z_EFFECTS
tt.render.sprites[1].hidden = true
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(29),
		255
	},
	{
		fts(77),
		255
	},
	{
		fts(102),
		0
	}
}
tt.tween.remove = false
tt.tween.disabled = true
tt = E:register_t("decal_stage_02_wisps", "decal")
tt.render.sprites[1].prefix = "stage_2_wisps_1Def"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].exo = true
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "stage_2_wisps_2Def"
tt.render.sprites[2].name = "loop"
tt.render.sprites[2].exo = true
tt = E:register_t("decal_stage_02_butterfly_1", "decal_delayed_play")
tt.render.sprites[1].prefix = "stage_2_butterfly_1Def"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].exo = true
tt.render.sprites[1].loop = false
tt.delayed_play.idle_animation = nil
tt.delayed_play.play_animation = "loop"
tt.delayed_play.min_delay = 10
tt.delayed_play.max_delay = 30
tt = E:register_t("decal_stage_02_butterfly_2", "decal_delayed_play")
tt.render.sprites[1].prefix = "stage_2_butterfly_2Def"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].exo = true
tt.render.sprites[1].loop = false
tt.delayed_play.idle_animation = nil
tt.delayed_play.play_animation = "loop"
tt.delayed_play.min_delay = 15
tt.delayed_play.max_delay = 35
tt = E:register_t("decal_stage_02_butterfly_3", "decal_delayed_play")
tt.render.sprites[1].prefix = "stage_2_butterfly_2Def"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].exo = true
tt.render.sprites[1].loop = false
tt.delayed_play.idle_animation = nil
tt.delayed_play.play_animation = "loop"
tt.delayed_play.min_delay = 12
tt.delayed_play.max_delay = 32
tt = E:register_t("taunts_s01_controller")

AC(tt, "main_script", "taunts", "editor")

tt.load_file = "level01_taunts"
tt.main_script.insert = scripts.taunts_controller.insert
tt.taunts.delay_min = 10
tt.taunts.delay_max = 20
tt.taunts.sets = {}
tt.taunts.sets.tutorial_arborean_build_barrack = CC("taunt_set")
tt.taunts.sets.tutorial_arborean_build_barrack.format = "TAUNT_TUTORIAL_ARBOREAN_BARRACK_%04i"
tt.taunts.sets.tutorial_arborean_build_barrack.decal_name = "decal_tutorial_arborean_shoutbox"
tt.taunts.sets.tutorial_arborean_build_barrack.pos = v(860, 650)
tt.taunts.sets.tutorial_arborean_build_all = CC("taunt_set")
tt.taunts.sets.tutorial_arborean_build_all.format = "TAUNT_TUTORIAL_ARBOREAN_ALL_%04i"
tt.taunts.sets.tutorial_arborean_build_all.decal_name = "decal_tutorial_arborean_shoutbox"
tt.taunts.sets.tutorial_arborean_build_all.pos = v(860, 650)
tt = E:register_t("decal_tutorial_arborean_shoutbox", "decal_tween")

E:add_comps(tt, "texts")

tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "arborean_taunt_0001"
tt.render.sprites[1].z = Z_BULLETS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "arborean_taunt_0004"
tt.render.sprites[2].z = Z_BULLETS
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].animated = false
tt.render.sprites[3].z = Z_BULLETS
tt.render.sprites[3].offset = v(0, 1)
tt.texts.list[1].text = "Hello world"
tt.texts.list[1].size = v(180, 58)
tt.texts.list[1].font_name = "taunts"
tt.texts.list[1].font_size = 20
tt.texts.list[1].color = {
	233,
	189,
	255
}
tt.texts.list[1].line_height = i18n:cjk(0.8, 0.9, 1.1, 0.7)
tt.texts.list[1].sprite_id = 3
tt.texts.list[1].fit_height = true
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.25,
		255
	},
	{
		"this.duration-0.25",
		255
	},
	{
		"this.duration",
		0
	}
}
tt.tween.props[1].sprite_id = 1
tt.tween.props[2] = table.deepclone(tt.tween.props[1])
tt.tween.props[2].sprite_id = 2
tt.tween.props[3] = table.deepclone(tt.tween.props[1])
tt.tween.props[3].sprite_id = 3
tt.tween.props[4] = E:clone_c("tween_prop")
tt.tween.props[4].name = "scale"
tt.tween.props[4].keys = {
	{
		0,
		v(1.01, 1.01)
	},
	{
		0.4,
		v(0.99, 0.99)
	},
	{
		0.8,
		v(1.01, 1.01)
	}
}
tt.tween.props[4].sprite_id = 1
tt.tween.props[4].loop = true
tt.tween.props[5] = table.deepclone(tt.tween.props[4])
tt.tween.props[5].sprite_id = 2
tt.tween.props[6] = table.deepclone(tt.tween.props[4])
tt.tween.props[6].sprite_id = 3
tt.tween.remove = true
tt = E:register_t("decal_water_shine", "decal_loop")
tt.render.sprites[1].name = "props_water_shine"
tt = E:register_t("decal_waterfall", "decal_loop")
tt.render.sprites[1].name = "stage_2_props_waterfall"
tt = E:register_t("decal_waterfall_splash", "decal_loop")
tt.render.sprites[1].name = "stage_2_props_waterfall_splash"
tt = E:register_t("decal_waterfall_waves", "decal_loop")
tt.render.sprites[1].name = "props_waterfall_waves"
tt.render.sprites[1].z = Z_DECALS + 1
tt.editor.props = {
	{
		"render.sprites[1].name",
		PT_STRING
	},
	{
		"render.sprites[1].scale",
		PT_COORDS
	},
	{
		"render.sprites[1].r",
		PT_NUMBER,
		math.pi / 180
	},
	{
		"render.sprites[1].z",
		PT_NUMBER
	}
}
tt = E:register_t("decal_waves", "decal_loop")
tt.render.sprites[1].name = "stage_2_props_waves"
tt = E:register_t("taunts_s02_controller")

E:add_comps(tt, "main_script", "taunts", "editor")

tt.load_file = "level01_taunts"
tt.main_script.insert = scripts.taunts_controller.insert
tt.taunts.delay_min = 10
tt.taunts.delay_max = 20
tt.taunts.sets = {}
tt.taunts.sets.stage_02_veznan = CC("taunt_set")
tt.taunts.sets.stage_02_veznan.format = "TAUNT_STAGE02_VEZNAN_%04i"
tt.taunts.sets.stage_02_veznan.decal_name = "decal_stage02_veznan_shoutbox"
tt.taunts.sets.stage_02_veznan.pos = v(740, 670)
tt.taunts.sets.stage_02_raelyn = CC("taunt_set")
tt.taunts.sets.stage_02_raelyn.format = "TAUNT_STAGE02_RAELYN_%04i"
tt.taunts.sets.stage_02_raelyn.decal_name = "decal_stage02_raelyn_shoutbox"
tt.taunts.sets.stage_02_raelyn.pos = v(460, 550)
tt = E:register_t("decal_stage02_veznan_shoutbox", "decal_tween")

E:add_comps(tt, "texts")

tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "cultist_taunt_0001"
tt.render.sprites[1].z = Z_BULLETS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "cultist_taunt_0003"
tt.render.sprites[2].z = Z_BULLETS
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].animated = false
tt.render.sprites[3].z = Z_BULLETS
tt.render.sprites[3].offset = v(13, -13)
tt.texts.list[1].text = "Hello world"
tt.texts.list[1].size = v(158, 56)
tt.texts.list[1].font_name = "taunts"
tt.texts.list[1].font_size = i18n:cjk(28, nil, 22, nil)
tt.texts.list[1].color = {
	107,
	255,
	10,
	255
}
tt.texts.list[1].line_height = i18n:cjk(0.8, 0.9, 1.1, 0.7)
tt.texts.list[1].sprite_id = 3
tt.texts.list[1].fit_height = true
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.25,
		255
	},
	{
		"this.duration-0.25",
		255
	},
	{
		"this.duration",
		0
	}
}
tt.tween.props[1].sprite_id = 1
tt.tween.props[2] = table.deepclone(tt.tween.props[1])
tt.tween.props[2].sprite_id = 2
tt.tween.props[3] = table.deepclone(tt.tween.props[1])
tt.tween.props[3].sprite_id = 3
tt.tween.props[4] = E:clone_c("tween_prop")
tt.tween.props[4].name = "scale"
tt.tween.props[4].keys = {
	{
		0,
		v(1.01, 1.01)
	},
	{
		0.4,
		v(0.99, 0.99)
	},
	{
		0.8,
		v(1.01, 1.01)
	}
}
tt.tween.props[4].sprite_id = 1
tt.tween.props[4].loop = true
tt.tween.props[5] = table.deepclone(tt.tween.props[4])
tt.tween.props[5].sprite_id = 2
tt.tween.props[6] = table.deepclone(tt.tween.props[4])
tt.tween.props[6].sprite_id = 3
tt.tween.remove = true
tt = E:register_t("decal_stage02_raelyn_shoutbox", "decal_tween")

E:add_comps(tt, "texts")

tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "cultist_taunt_0001"
tt.render.sprites[1].z = Z_BULLETS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "cultist_taunt_0003"
tt.render.sprites[2].z = Z_BULLETS
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].animated = false
tt.render.sprites[3].z = Z_BULLETS
tt.render.sprites[3].offset = v(13, -13)
tt.texts.list[1].text = "Hello world"
tt.texts.list[1].size = v(158, 56)
tt.texts.list[1].font_name = "taunts"
tt.texts.list[1].font_size = i18n:cjk(28, nil, 22, nil)
tt.texts.list[1].color = {
	233,
	189,
	255
}
tt.texts.list[1].line_height = i18n:cjk(0.8, 0.9, 1.1, 0.7)
tt.texts.list[1].sprite_id = 3
tt.texts.list[1].fit_height = true
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.25,
		255
	},
	{
		"this.duration-0.25",
		255
	},
	{
		"this.duration",
		0
	}
}
tt.tween.props[1].sprite_id = 1
tt.tween.props[2] = table.deepclone(tt.tween.props[1])
tt.tween.props[2].sprite_id = 2
tt.tween.props[3] = table.deepclone(tt.tween.props[1])
tt.tween.props[3].sprite_id = 3
tt.tween.props[4] = E:clone_c("tween_prop")
tt.tween.props[4].name = "scale"
tt.tween.props[4].keys = {
	{
		0,
		v(1.01, 1.01)
	},
	{
		0.4,
		v(0.99, 0.99)
	},
	{
		0.8,
		v(1.01, 1.01)
	}
}
tt.tween.props[4].sprite_id = 1
tt.tween.props[4].loop = true
tt.tween.props[5] = table.deepclone(tt.tween.props[4])
tt.tween.props[5].sprite_id = 2
tt.tween.props[6] = table.deepclone(tt.tween.props[4])
tt.tween.props[6].sprite_id = 3
tt.tween.remove = true
tt = E:register_t("decal_stage_02_veznan", "decal_scripted")

E:add_comps(tt, "editor", "editor_script")

tt.render.sprites[1].prefix = "veznan_cinematic_veznan"
tt.render.sprites[1].name = "idle"
tt = E:register_t("stage_02_arborean_old", "decal_scripted")

E:add_comps(tt, "editor", "editor_script")

tt.render.sprites[1].prefix = "stage2_decos_viejo"
tt.main_script.update = scripts.stage_02_arborean_old.update
tt = E:register_t("stage_02_arborean_baby1", "decal_scripted")

E:add_comps(tt, "editor", "editor_script")

tt.render.sprites[1].prefix = "stage2_decos_bebe1"
tt.main_script.update = scripts.stage_02_arborean_baby1.update
tt = E:register_t("controller_stage_03_arborean_babies")

E:add_comps(tt, "main_script")

tt.main_script.update = scripts.controller_stage_03_arborean_babies.update
tt = E:register_t("decal_arborean_baby_clickeable", "decal_scripted")

E:add_comps(tt, "editor", "editor_script", "ui")

tt.render.sprites[1].prefix = "arborean_baby"
tt.main_script.update = scripts.stage_02_arborean_baby2.update
tt.ui.can_click = true
tt.ui.click_rect = r(-15, -5, 30, 30)
tt.hidden_cd = 7
tt.change_anim_cd_min = 5
tt.change_anim_cd_max = 10
tt.sound_in = "Terrain1CommonArboreanTapIn"
tt.sound_out = "Terrain1CommonArboreanTapOut"
tt.is_hidden = false
tt = E:register_t("stage_3_treeTop", "decal")
tt.render.sprites[1].name = "stage_3_treeTop"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("decal_stage_03_fat_arborean", "decal_click_play")

E:add_comps(tt, "main_script", "click_play", "ui")

tt.render.sprites[1].prefix = "stage3_decos_gordito"
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].scale = vv(1.1)
tt.main_script.update = scripts.decal_stage_03_fat_arborean.update
tt.click_play.idle_animation = "idle"
tt.click_play.click_animation = "comer"
tt.click_play.end_animation = "muerte"
tt.click_play.required_clicks = 3
tt.click_play.play_once = true
tt.click_play.clicked_sound = "EasterEggCommonTap"
tt.ui.can_click = true
tt.ui.click_rect = r(-60, -10, 60, 60)
tt = E:register_t("stage3_decos_barriles2", "decal_scripted")

local time_between_animations = fts(30 * math.random(10, 30))

tt.render.sprites[1].prefix = "stage3_decos_barriles2"
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt.animations = {
	{
		"action",
		time_between_animations
	},
	{
		"idle",
		time_between_animations
	}
}
tt.main_script.update = scripts.decal_scripted_loop_play.update
tt = E:register_t("stage3_decos_barriles1", "decal_scripted")

local time_between_animations = fts(30 * math.random(10, 30))

tt.render.sprites[1].prefix = "stage3_decos_barriles1"
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt.animations = {
	{
		"action",
		time_between_animations
	},
	{
		"idle",
		time_between_animations
	}
}
tt.main_script.update = scripts.decal_scripted_loop_play.update
tt = E:register_t("decal_stage_03_elder_rune", "decal_click_play")

E:add_comps(tt, "main_script", "click_play", "ui", "editor")

tt.render.sprites[1].prefix = "stage_3_decos_REF_elder_rune_3"
tt.render.sprites[1].loop = true
tt.render.sprites[1].z = Z_OBJECTS_COVERS + 1
tt.main_script.update = scripts.decal_stage_03_elder_rune.update
tt.click_play.idle_animation = "idle_2"
tt.click_play.click_animation = "activation"
tt.click_play.play_once = true
tt.click_play.clicked_sound = "Stage0203Rune"
tt.ui.can_click = true
tt.ui.click_rect = r(-30, -30, 60, 60)
tt = E:register_t("decal_bullet_stage_03_heart_of_the_arborean", "decal")

E:add_comps(tt, "tween")

tt.render.sprites[1].name = "explosiondecal_asst_heart_decal"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_DECALS
tt.tween.disabled = false
tt.tween.remove = true
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		3,
		255
	},
	{
		4,
		0
	}
}
tt = E:register_t("decal_stage_03_wisps", "decal")
tt.render.sprites[1].prefix = "stage_3_wisps_1Def"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].exo = true
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "stage_3_wisps_2Def"
tt.render.sprites[2].name = "loop"
tt.render.sprites[2].exo = true
tt = E:register_t("decal_stage_03_butterfly_1", "decal_delayed_play")
tt.render.sprites[1].prefix = "stage_3_butterfly_1Def"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].exo = true
tt.render.sprites[1].loop = false
tt.delayed_play.idle_animation = nil
tt.delayed_play.play_animation = "loop"
tt.delayed_play.min_delay = 10
tt.delayed_play.max_delay = 30
tt = E:register_t("decal_stage_03_butterfly_2", "decal_delayed_play")
tt.render.sprites[1].prefix = "stage_3_butterfly_2Def"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].exo = true
tt.render.sprites[1].loop = false
tt.delayed_play.idle_animation = nil
tt.delayed_play.play_animation = "loop"
tt.delayed_play.min_delay = 15
tt.delayed_play.max_delay = 35
tt = E:register_t("decal_stage_03_butterfly_3", "decal_delayed_play")
tt.render.sprites[1].prefix = "stage_3_butterfly_3Def"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].exo = true
tt.render.sprites[1].loop = false
tt.delayed_play.idle_animation = nil
tt.delayed_play.play_animation = "loop"
tt.delayed_play.min_delay = 12
tt.delayed_play.max_delay = 32
tt = E:register_t("decal_stage_04_easteregg_sheepy_baby", "decal_scripted")

E:add_comps(tt, "force_motion")

tt.render.sprites[1].prefix = "sheepy_stage4_baby"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_DECALS + 1
tt.main_script.update = scripts.decal_stage_04_easteregg_sheepy_baby.update
tt.jump_distance = 20
tt.fall_to_y = 450
tt.force_motion.max_a = 600
tt.force_motion.max_v = 300
tt.force_motion.ramp_radius = 30
tt.force_motion.fr = 0.1
tt.force_motion.a_step = 15
tt = E:register_t("decal_stage_04_easteregg_sheepy_sheepy", "decal")
tt.render.sprites[1].prefix = "sheepy_stage4_sheepy"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_stage_04_easteregg_sheepy_old_man", "decal")
tt.render.sprites[1].prefix = "sheepy_stage4_old_arborean"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("stage_04_mask_top", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].name = "stage4_elevatormask1"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_BACKGROUND_COVERS - 2
tt = E:register_t("stage_04_mask_bottom", "stage_04_mask_top")
tt.render.sprites[1].name = "stage4_elevatormask2"
tt.render.sprites[1].z = Z_BACKGROUND_COVERS - 2
tt = E:register_t("stage_04_shadowtop", "decal")
tt.render.sprites[1].name = "stage4_shadowtop"
tt.render.sprites[1].animated = false
tt = E:register_t("stage_04_shadowside", "decal")
tt.render.sprites[1].name = "stage4_shadowside"
tt.render.sprites[1].animated = false
tt = E:register_t("stage_04_shadowbottom", "decal")
tt.render.sprites[1].name = "stage4_shadowbottom"
tt.render.sprites[1].animated = false
tt = E:register_t("controller_stage_04_arboreans")

E:add_comps(tt, "main_script")

tt.main_script.update = scripts.controller_stage_04_arboreans.update
tt = E:register_t("stage_04_mask_bridge_center_back", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].name = "Stage4_center_bridge_back_mask"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_BACKGROUND_COVERS - 3
tt.render.sprites[1].pos = v(512, 384)
tt = E:register_t("stage_04_mask_bridge_center_front", "stage_04_mask_bridge_center_back")
tt.render.sprites[1].name = "Stage4_center_bridge_front_mask"
tt.render.sprites[1].z = Z_BACKGROUND_COVERS - 2
tt = E:register_t("stage_04_mask_bridge_left_back", "stage_04_mask_bridge_center_back")
tt.render.sprites[1].name = "Stage4_left_bridge_back_mask"
tt.render.sprites[1].z = Z_BACKGROUND_COVERS - 1
tt = E:register_t("stage_04_mask_bridge_left_front", "stage_04_mask_bridge_center_back")
tt.render.sprites[1].name = "Stage4_left_bridge_front_mask"
tt.render.sprites[1].z = Z_BACKGROUND_COVERS - 1
tt = E:register_t("stage_04_mask_bridge_right_back", "stage_04_mask_bridge_center_back")
tt.render.sprites[1].name = "Stage4_right_bridge_back_mask"
tt.render.sprites[1].z = Z_BACKGROUND_COVERS - 3
tt = E:register_t("stage_04_mask_bridge_right_front", "stage_04_mask_bridge_center_back")
tt.render.sprites[1].name = "Stage4_right_bridge_front_mask"
tt.render.sprites[1].z = Z_BACKGROUND_COVERS - 2
tt = E:register_t("decal_stage_04_arborean_right", "decal_scripted")

E:add_comps(tt, "ui", "motion", "force_motion")

tt.render.sprites[1].prefix = "stage_4_arboreans_arborean_01"
tt.render.sprites[1].name = "walk"
tt.render.sprites[1].z = Z_BACKGROUND_COVERS - 4
tt.main_script.update = scripts.decal_stage_04_arborean.update
tt.walk_destination = {
	v(0, 0),
	v(100, -70),
	v(175, -100),
	v(100, -70)
}
tt.motion.speed = v(10, 10)
tt.motion.max_speed = 30
tt.ui.click_rect = r(-20, -10, 40, 40)
tt.jump_distance = 20
tt.fall_to_y = 440
tt.force_motion.max_a = 1200
tt.force_motion.max_v = 450
tt.force_motion.ramp_radius = 30
tt.force_motion.fr = 0.1
tt.force_motion.a_step = 20
tt.sound_fall = "Stage04ArboreanFall"
tt = E:register_t("decal_stage_04_arborean_left", "decal_stage_04_arborean_right")
tt.render.sprites[1].prefix = "stage_4_arboreans_arborean_02"
tt.main_script.update = scripts.decal_stage_04_arborean.update
tt.walk_destination = {
	v(0, 0),
	v(54, 8),
	v(151, 55),
	v(54, 8)
}
tt.fall_to_y = 580
tt = E:register_t("decal_stage_04_arborean_center", "decal_stage_04_arborean_right")
tt.render.sprites[1].prefix = "stage_4_arboreans_arborean_03"
tt.main_script.update = scripts.decal_stage_04_arborean.update
tt.walk_destination = {
	v(0, 0),
	v(142, -75)
}
tt.fall_to_y = 300
tt.sprite_change = {
	"stage_4_arboreans_arborean_04",
	"stage_4_arboreans_arborean_03"
}
tt = E:register_t("stage_4_leaf_anim", "decal_delayed_play")

E:add_comps(tt, "tween")

local duration = 2.8
local fade_time = 0.2

tt.render.sprites[1].name = "stage_4_leaf_anim_idle"
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt.delayed_play.min_delay = 5
tt.delayed_play.max_delay = 15
tt.delayed_play.idle_animation = nil
tt.delayed_play.play_animation = "stage_4_leaf_anim_idle"
tt.delayed_play.play_duration = duration
tt.tween.disabled = false
tt.tween.remove = false
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fade_time,
		255
	},
	{
		duration - fade_time,
		255
	},
	{
		duration,
		0
	}
}
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].name = "offset"
tt.tween.props[2].keys = {
	{
		0,
		v(0, 0)
	},
	{
		duration,
		v(0, -130)
	}
}
tt.editor.props = {
	{
		"render.sprites[1].r",
		PT_NUMBER,
		math.pi / 180
	},
	{
		"render.sprites[1].scale",
		PT_COORDS
	}
}
tt = E:register_t("stage_4_arborean_bridge_1", "decal_scripted")

E:add_comps(tt, "editor", "editor_script")

local time_between_animations = fts(30 * math.random(3, 5))

tt.render.sprites[1].prefix = "anim_puente1"
tt.render.sprites[1].z = Z_BACKGROUND_COVERS - 5
tt.animations = {
	{
		"action1",
		time_between_animations
	},
	{
		"idle",
		time_between_animations
	},
	{
		"action2",
		time_between_animations
	}
}
tt.main_script.update = scripts.decal_scripted_loop_play.update
tt = E:register_t("stage_4_arborean_bridge_2", "decal_scripted")

E:add_comps(tt, "editor", "editor_script")

local time_between_animations = fts(30 * math.random(3, 5))

tt.render.sprites[1].prefix = "anim_puente2"
tt.render.sprites[1].z = Z_BACKGROUND_COVERS - 5
tt.animations = {
	{
		"action1",
		time_between_animations
	},
	{
		"idle",
		time_between_animations
	},
	{
		"action2",
		time_between_animations
	}
}
tt.main_script.update = scripts.decal_scripted_loop_play.update
tt = E:register_t("stage_4_arborean_bridge_3", "decal_scripted")

E:add_comps(tt, "editor", "editor_script")

local time_between_animations = fts(30 * math.random(3, 5))

tt.render.sprites[1].prefix = "anim_puente3"
tt.render.sprites[1].z = Z_BACKGROUND_COVERS - 5
tt.render.sprites[1].name = "action1"
tt.animations = {
	{
		"action1",
		time_between_animations
	},
	{
		"idle",
		time_between_animations
	},
	{
		"action2",
		time_between_animations
	},
	{
		"action3",
		time_between_animations
	}
}
tt.main_script.update = scripts.decal_scripted_loop_play.update
tt = E:register_t("stage_4_arborean_vine", "decal_scripted")

E:add_comps(tt, "ui")

tt.render.sprites[1].prefix = "anim_liana"
tt.ui.can_click = true
tt.ui.click_rect = r(-30, -22, 60, 50)
tt.main_script.update = scripts.stage_4_arborean_vine.update
tt.animation_idle = "idle1"
tt.animation_down = "down"
tt.animation_down_idle = "idle2"
tt.animation_click = "no_tap"
tt.animation_up = "tap"
tt.down_cooldown = 14
tt.down_duration = 3
tt.sound_fall = "Stage04ArboreanFall"
tt = E:register_t("decal_stage_04_mask_tunnel", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].name = "Stage4_NEW_Topmask"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].name = "Stage4_NEW_Submask"
tt.render.sprites[2].animated = false
tt.render.sprites[2].z = Z_OBJECTS
tt.render.sprites[2].sort_y_offset = 35
tt = E:register_t("decal_stage_04_waterfall", "decal_scripted")

E:add_comps(tt, "editor")

tt.render.sprites[1].prefix = "anim_waterfall"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_BACKGROUND_COVERS - 5
tt = E:register_t("decal_stage_04_elder_rune", "decal_click_play")

E:add_comps(tt, "main_script", "click_play", "ui", "editor")

tt.render.sprites[1].prefix = "stage_4_elder_rune_4"
tt.render.sprites[1].loop = true
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "stage_4_elder_rune_4_fx"
tt.render.sprites[2].loop = true
tt.main_script.update = scripts.decal_stage_04_elder_rune.update
tt.click_play.idle_animation = "idle"
tt.click_play.click_animation = "activation"
tt.click_play.idle_on_animation = "idle_2"
tt.click_play.play_once = true
tt.click_play.clicked_sound = "Stage04Rune"
tt.ui.can_click = true
tt.ui.click_rect = r(-35, -100, 70, 70)
tt = E:register_t("decal_stage_04_elder_rune_static", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].name = "stage_4_elder_rune_4_0119"
tt.render.sprites[1].animated = false
tt.render.sprites[1].loop = false
tt = E:register_t("decal_stage_05_elder_rune_base", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].name = "stage_5_elder_rune_5_base"
tt.render.sprites[1].animated = false
tt.render.sprites[1].draw_order = 0
tt = E:register_t("decal_stage_05_elder_rune", "decal_click_play")

E:add_comps(tt, "main_script", "click_play", "ui", "editor")

tt.render.sprites[1].prefix = "stage_5_elder_rune_5"
tt.render.sprites[1].loop = true
tt.render.sprites[1].draw_order = 1
tt.main_script.update = scripts.decal_stage_05_elder_rune.update
tt.click_play.idle_animation = "idle_2"
tt.click_play.click_animation = "activation"
tt.click_play.play_once = true
tt.click_play.clicked_sound = "Stage0506Rune"
tt.ui.can_click = true
tt.ui.click_rect = r(-50, -10, 50, 50)
tt = E:register_t("decal_stage_05_elder_rune_static", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].name = "stage_5_elder_rune_5_0125"
tt.render.sprites[1].animated = false
tt.render.sprites[1].loop = false
tt = E:register_t("stage_05_bridge_mask_left", "decal")
tt.render.sprites[1].name = "stage_5_MaskBridge_left"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("stage_05_bridge_mask_right", "decal")
tt.render.sprites[1].name = "stage_5_MaskBridge_right"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("stage_05_trees_mask", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].name = "stage_5_MaskTree"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("stage_06_mask_1", "decal")
tt.render.sprites[1].name = "stage_6_mask1"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("stage_06_mask_2", "decal")
tt.render.sprites[1].name = "stage_6_mask2"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("stage_06_mask_3", "decal")
tt.render.sprites[1].name = "stage_6_mask3"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("stage_06_mask_4", "decal")
tt.render.sprites[1].name = "stage_6_mask4"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("stage_06_hole", "decal")
tt.render.sprites[1].prefix = "stage_6_madriguera"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("stage_06_door", "decal_scripted")

E:add_comps(tt, "spawner", "render", "sound_events", "editor", "ui", "tween")

tt.main_script.update = scripts.decal_stage_06_door.update

for i = 1, 4 do
	tt.render.sprites[i] = E:clone_c("sprite")
	tt.render.sprites[i].animated = true
	tt.render.sprites[i].prefix = "stage_6_ascensor_ascensor_layer" .. i
	tt.render.sprites[i].name = "idle1_1"
	tt.render.sprites[i].group = "layers"
end

tt.render.sprites[5] = E:clone_c("sprite")
tt.render.sprites[5].name = "stage_6_ascensor_door"
tt.render.sprites[5].animated = false
tt.render.sprites[5].z = Z_OBJECTS_COVERS
tt.render.sprites[5].offset.x = 8.9
tt.render.sprites[5].offset.y = -13.2
tt.render.sprites[6] = E:clone_c("sprite")
tt.render.sprites[6].prefix = "tusked_brawler"
tt.render.sprites[6].hidden = true
tt.render.sprites[7] = E:clone_c("sprite")
tt.render.sprites[7].prefix = "stage_6_ascensor_jabali"
tt.render.sprites[7].hidden = true
tt.render.sprites[7].offset.x = -70
tt.render.sprites[7].offset.y = 15
tt.render.sprites[8] = E:clone_c("sprite")
tt.render.sprites[8].name = "stage_6_ascensor_ascensor_dust"
tt.render.sprites[8].animated = false
tt.render.sprites[8].z = Z_DECALS
tt.spawner.eternal = true
tt.render.sprites[8] = E:clone_c("sprite")
tt.render.sprites[8].name = "stage_6_ascensor_ascensor_dust"
tt.render.sprites[8].animated = false
tt.render.sprites[8].z = Z_DECALS
tt.render.sprites[8].offset.x = 15
tt.render.sprites[8].offset.y = -55
tt.render.sprites[7].z = Z_OBJECTS_COVERS + 1
tt.render.sprites[4].z = Z_OBJECTS_COVERS + 2
tt.render.sprites[3].z = Z_OBJECTS_COVERS + 1
tt.render.sprites[2].z = Z_DECALS
tt.render.sprites[1].z = Z_DECALS
tt.ui.can_click = false
tt.ui.click_rect = r(0, 0, 50, 50)
tt.clicks_to_kill = 3
tt.pig_death_sound = "EnemyTuskedBrawlerDeath"
tt.pig_click_sound = "Stage06EasterEggMinecraftClick"
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		3,
		255
	},
	{
		5,
		0
	}
}
tt.tween.props[1].sprite_id = 6
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].name = "scale"
tt.tween.props[2].keys = {
	{
		0,
		v(1, 1)
	},
	{
		fts(1),
		v(1.2, 1.2)
	},
	{
		fts(3),
		v(1, 1)
	}
}
tt.tween.props[2].disabled = true
tt.tween.props[2].sprite_id = 6
tt.tween.disabled = true
tt.tween.remove = false
tt.tween.run_once = false
tt = E:register_t("stage_06_hole_mask", "decal")
tt.render.sprites[1].name = "stage_6_maskmadriguera"
tt.render.sprites[1].animated = false
tt.render.sprites[1].hidden = true
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = -75
tt = E:register_t("stage_06_mask_door", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].name = "stage_6_maskascensor"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("taunts_s06_controller")

E:add_comps(tt, "main_script", "taunts", "editor")

tt.load_file = "level01_taunts"
tt.main_script.insert = scripts.taunts_controller.insert
tt.taunts.delay_min = 10
tt.taunts.delay_max = 20
tt.taunts.sets = {}
tt.taunts.sets.stage_06_cult_leader_greetings = CC("taunt_set")
tt.taunts.sets.stage_06_cult_leader_greetings.format = "TAUNT_STAGE06_CULTIST_GREETING_%04i"
tt.taunts.sets.stage_06_cult_leader_greetings.decal_name = "decal_stage06_cultist_shoutbox"
tt.taunts.sets.stage_06_cult_leader_greetings.pos = v(740, 670)
tt.taunts.sets.stage_06_boss_pig_response = CC("taunt_set")
tt.taunts.sets.stage_06_boss_pig_response.format = "TAUNT_STAGE06_BOSS_PIG_RESPONSE_%04i"
tt.taunts.sets.stage_06_boss_pig_response.decal_name = "decal_stage06_boss_pig_shoutbox"
tt.taunts.sets.stage_06_boss_pig_response.pos = v(460, 550)
tt.taunts.sets.stage_06_boss_pig_prebattle = CC("taunt_set")
tt.taunts.sets.stage_06_boss_pig_prebattle.format = "TAUNT_STAGE06_BOSS_PIG_PREBATTLE_%04i"
tt.taunts.sets.stage_06_boss_pig_prebattle.decal_name = "decal_stage06_boss_pig_shoutbox"
tt.taunts.sets.stage_06_boss_pig_prebattle.pos = v(460, 550)
tt = E:register_t("decal_stage06_cultist_shoutbox", "decal_tween")

E:add_comps(tt, "texts")

tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "cultist_taunt_0001"
tt.render.sprites[1].z = Z_BULLETS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "cultist_taunt_0003"
tt.render.sprites[2].z = Z_BULLETS
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].animated = false
tt.render.sprites[3].z = Z_BULLETS
tt.render.sprites[3].offset = v(13, -13)
tt.texts.list[1].text = "Hello world"
tt.texts.list[1].size = v(158, 56)
tt.texts.list[1].font_name = "taunts"
tt.texts.list[1].font_size = i18n:cjk(28, nil, 22, nil)
tt.texts.list[1].color = {
	233,
	189,
	255
}
tt.texts.list[1].line_height = i18n:cjk(0.8, 0.9, 1.1, 0.7)
tt.texts.list[1].sprite_id = 3
tt.texts.list[1].fit_height = true
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.25,
		255
	},
	{
		"this.duration-0.25",
		255
	},
	{
		"this.duration",
		0
	}
}
tt.tween.props[1].sprite_id = 1
tt.tween.props[2] = table.deepclone(tt.tween.props[1])
tt.tween.props[2].sprite_id = 2
tt.tween.props[3] = table.deepclone(tt.tween.props[1])
tt.tween.props[3].sprite_id = 3
tt.tween.props[4] = E:clone_c("tween_prop")
tt.tween.props[4].name = "scale"
tt.tween.props[4].keys = {
	{
		0,
		v(1.01, 1.01)
	},
	{
		0.4,
		v(0.99, 0.99)
	},
	{
		0.8,
		v(1.01, 1.01)
	}
}
tt.tween.props[4].sprite_id = 1
tt.tween.props[4].loop = true
tt.tween.props[5] = table.deepclone(tt.tween.props[4])
tt.tween.props[5].sprite_id = 2
tt.tween.props[6] = table.deepclone(tt.tween.props[4])
tt.tween.props[6].sprite_id = 3
tt.tween.remove = true
tt = E:register_t("decal_stage06_boss_pig_shoutbox", "decal_tween")

E:add_comps(tt, "texts")

tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "boss_pig_taunt_0001"
tt.render.sprites[1].z = Z_BULLETS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "boss_pig_taunt_0005"
tt.render.sprites[2].z = Z_BULLETS
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].animated = false
tt.render.sprites[3].z = Z_BULLETS
tt.render.sprites[3].offset = v(13, -13)
tt.texts.list[1].text = "Hello world"
tt.texts.list[1].size = v(158, 56)
tt.texts.list[1].font_name = "taunts"
tt.texts.list[1].font_size = i18n:cjk(28, nil, 22, nil)
tt.texts.list[1].color = {
	180,
	80,
	52
}
tt.texts.list[1].line_height = i18n:cjk(0.8, 0.9, 1.1, 0.7)
tt.texts.list[1].sprite_id = 3
tt.texts.list[1].fit_height = true
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.25,
		255
	},
	{
		"this.duration-0.25",
		255
	},
	{
		"this.duration",
		0
	}
}
tt.tween.props[1].sprite_id = 1
tt.tween.props[2] = table.deepclone(tt.tween.props[1])
tt.tween.props[2].sprite_id = 2
tt.tween.props[3] = table.deepclone(tt.tween.props[1])
tt.tween.props[3].sprite_id = 3
tt.tween.props[4] = E:clone_c("tween_prop")
tt.tween.props[4].name = "scale"
tt.tween.props[4].keys = {
	{
		0,
		v(1.01, 1.01)
	},
	{
		0.4,
		v(0.99, 0.99)
	},
	{
		0.8,
		v(1.01, 1.01)
	}
}
tt.tween.props[4].sprite_id = 1
tt.tween.props[4].loop = true
tt.tween.props[5] = table.deepclone(tt.tween.props[4])
tt.tween.props[5].sprite_id = 2
tt.tween.props[6] = table.deepclone(tt.tween.props[4])
tt.tween.props[6].sprite_id = 3
tt.tween.remove = true
tt = E:register_t("decal_stage_06_minecraft_easter_egg", "decal_scripted")

E:add_comps(tt, "ui", "tween")

tt.render.sprites[1].prefix = "minecraft_easter_egg"
tt.ui.can_click = true
tt.ui.click_rect = r(-30, -30, 60, 60)
tt.main_script.update = scripts.decal_stage_06_minecraft_easter_egg.update
tt.animation_idle = "idle"
tt.animation_attack = "attack"
tt.animation_death = "death"
tt.sound_click = "Stage06EasterEggMinecraftClick"
tt.sound_death = "Stage06EasterEggMinecraftDeath"
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		2,
		0
	}
}
tt.tween.props[1].disabled = true
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].name = "scale"
tt.tween.props[2].keys = {
	{
		0,
		v(1, 1)
	},
	{
		fts(1),
		v(1.2, 1.2)
	},
	{
		fts(3),
		v(1, 1)
	}
}
tt.tween.props[2].disabled = true
tt.tween.disabled = true
tt.tween.remove = false
tt.clicks_to_kill = 3
tt.change_anim_cd_min = 4
tt.change_anim_cd_max = 7
tt = E:register_t("controller_stage_06_minecraft_easter_egg")

E:add_comps(tt, "main_script")

tt.main_script.update = scripts.controller_stage_06_minecraft_easter_egg.update
tt = E:register_t("decal_stage_06_elder_rune", "decal_click_play")

E:add_comps(tt, "main_script", "click_play", "ui", "editor")

tt.render.sprites[1].prefix = "stage_6_elder_rune_6"
tt.render.sprites[1].loop = true
tt.main_script.update = scripts.decal_stage_06_elder_rune.update
tt.click_play.idle_animation = "idle_2"
tt.click_play.click_animation = "activation"
tt.click_play.play_once = true
tt.click_play.clicked_sound = "Stage0506Rune"
tt.ui.can_click = true
tt.ui.click_rect = r(-70, -10, 90, 60)
tt = E:register_t("decal_stage_06_elder_rune_static", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].name = "stage_6_elder_rune_6_0125"
tt.render.sprites[1].animated = false
tt.render.sprites[1].loop = false
tt = E:register_t("decal_terrain_2_smoke", "decal")
tt.render.sprites[1].prefix = "t2_smokeDef"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_terrain_2_dust", "decal")
tt.render.sprites[1].prefix = "t2_dustDef"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_stage_07_fire", "decal")
tt.render.sprites[1].prefix = "fireDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS - 1
tt.render.sprites[1].loop = true
tt = E:register_t("decal_stage_07_fireMask", "decal")
tt.render.sprites[1].prefix = "fire_maskDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS - 1
tt.render.sprites[1].loop = true
tt = E:register_t("decal_stage_07_mask", "decal")
tt.render.sprites[1].name = "T2_Stage_7_mask"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_BACKGROUND_COVERS
tt = E:register_t("decal_stage_07_cave_mask_smoke", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].name = "T2_Stage_7_mask_cave"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("decal_stage_07_dust", "decal_terrain_2_dust")
tt.render.sprites[1].z = Z_OBJECTS_COVERS + 1
tt.render.sprites[1].random_ts = 1
tt = E:register_t("decal_stage_07_temple", "decal_scripted")
b = balance.specials.stage07_temple
tt.render.sprites[1].prefix = "templeDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_BACKGROUND_BETWEEN
tt.render.sprites[1].loop = true
tt.main_script.update = scripts.decal_stage_07_temple.update
tt.activation_wave = b.activation_wave
tt.temple_mask = "decal_stage_07_temple_mask"
tt.cave_mask = "decal_stage_07_cave_mask_smoke"
tt.sound = "Stage07CultTemple"
tt = E:register_t("decal_stage_07_temple_mask", "decal")
tt.render.sprites[1].prefix = "temple_maskDef"
tt.render.sprites[1].name = "idle_in"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt.render.sprites[1].loop = true
tt.render.sprites[1].hidden = true
tt = E:register_t("controller_stage_07_crows")

E:add_comps(tt, "main_script")

tt.main_script.update = scripts.controller_stage_07_crows.update
tt = E:register_t("decal_stage_07_crow_clickable", "decal_scripted")

E:add_comps(tt, "editor", "ui")

tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt.main_script.update = scripts.stage_07_crow.update
tt.ui.can_click = true
tt.ui.click_rect = r(-15, -15, 30, 30)
tt = E:register_t("decal_stage_07_crow_clickable_1", "decal_stage_07_crow_clickable")
tt.render.sprites[1].prefix = "stage_7_crow1Def"
tt = E:register_t("decal_stage_07_crow_clickable_2", "decal_stage_07_crow_clickable")
tt.render.sprites[1].prefix = "stage_7_crow2Def"
tt.render.sprites[1].flip_x = true
tt = E:register_t("decal_stage_07_crow_clickable_3", "decal_stage_07_crow_clickable")
tt.render.sprites[1].prefix = "stage_7_crow3Def"
tt.render.sprites[1].flip_x = true
tt = E:register_t("decal_stage_07_crow_clickable_4", "decal_stage_07_crow_clickable")
tt.render.sprites[1].prefix = "stage_7_crow4Def"
tt.render.sprites[1].z = Z_FLYING_HEROES - 1
tt = E:register_t("decal_stage_07_crow_clickable_5", "decal_stage_07_crow_clickable")

E:add_comps(tt, "editor", "ui")

tt.render.sprites[1].prefix = "stage_7_crow5Def"
tt.render.sprites[1].flip_x = true
tt = E:register_t("decal_stage_07_witcher_easter_egg", "decal_scripted")

E:add_comps(tt, "editor", "ui")

tt.render.sprites[1].prefix = "the_witcherDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt.main_script.insert = scripts.stage_07_witcher.insert
tt.main_script.update = scripts.stage_07_witcher.update
tt.ui.can_click = true
tt.ui.click_rect = r(520, -220, 50, 50)
tt = E:register_t("stage_08_mask_1", "decal")
tt.render.sprites[1].name = "T2_Stage_8_mask_1"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].offset.y = -235
tt = E:register_t("stage_08_mask_2", "decal")
tt.render.sprites[1].name = "T2_Stage_8_mask_2"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].offset.y = -235
tt = E:register_t("stage_08_mask_3", "decal")
tt.render.sprites[1].name = "T2_Stage_8_mask_3"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].offset.y = -185
tt = E:register_t("stage_08_mask_4", "decal")
tt.render.sprites[1].name = "T2_Stage_8_mask_4"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].offset.y = -250
tt = E:register_t("decal_stage_08_fire", "decal")
tt.render.sprites[1].prefix = "fire_stage_8Def"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS_COVERS + 1
tt.render.sprites[1].loop = true
tt = E:register_t("controller_stage_08_gem_baskets")

E:add_comps(tt, "main_script")

tt.main_script.update = scripts.controller_stage_08_gem_baskets.update
tt = E:register_t("decal_stage_08_gem_basket_big_clickable", "decal_scripted")

E:add_comps(tt, "editor", "ui")

tt.render.sprites[1].prefix = "stage_8_gems_basket_bigDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt.main_script.update = scripts.stage_08_gem_basket.update
tt.ui.can_click = true
tt.ui.click_rect = r(-525, 200, 50, 50)
tt.gold_pos_offset = v(0, -30)
tt.gold_amount = 333
tt = E:register_t("decal_stage_08_gem_basket_small_clickable", "decal_stage_08_gem_basket_big_clickable")
tt.render.sprites[1].prefix = "stage_8_gems_basket_smallDef"
tt.ui.click_rect = r(138, 248, 40, 40)
tt = E:register_t("decal_stage_08_gem_basket_third_clickable", "decal_stage_08_gem_basket_big_clickable")
tt.render.sprites[1].prefix = "stage_8_gems_basket_thirdDef"
tt.ui.click_rect = r(477, -260, 50, 50)
tt.gold_pos_offset = nil
tt = E:register_t("decal_stage_09_mask", "decal")
tt.render.sprites[1].name = "T2_Stage_9_chains_mask"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("decal_stage_09_bridge", "decal_scripted")
tt.render.sprites[1].name = "in"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_BACKGROUND_COVERS
tt.render.sprites[1].loop = false
tt.in_delay = nil
tt.animation_in = "in"
tt.animation_loop = "loop"
tt.mask_before = false
tt.main_script.insert = scripts.decal_stage_09_bridge.insert
tt.main_script.update = scripts.decal_stage_09_bridge.update
tt = E:register_t("decal_stage_09_bridge1", "decal_stage_09_bridge")
tt.render.sprites[1].prefix = "stage_9_bridge1Def"
tt.mask_entity = "decal_stage_09_bridge1_mask"
tt.in_delay = 1
tt = E:register_t("decal_stage_09_bridge2", "decal_stage_09_bridge")
tt.render.sprites[1].prefix = "stage_9_bridge2Def"
tt.mask_entity = "decal_stage_09_bridge2_mask"
tt.in_delay = 2.5
tt = E:register_t("decal_stage_09_bridge3", "decal_stage_09_bridge")
tt.render.sprites[1].prefix = "stage_9_bridge3Def"
tt.mask_entity = "decal_stage_09_bridge3_mask"
tt.mask_before = true
tt.mask_in_animation = "in"
tt.mask_loop_animation = "loop"
tt = E:register_t("decal_stage_09_bridge_mask", "decal")
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].exo = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_stage_09_bridge1_mask", "decal_stage_09_bridge_mask")
tt.render.sprites[1].prefix = "stage_9_bridge1_maskDef"
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("decal_stage_09_bridge2_mask", "decal_stage_09_bridge_mask")
tt.render.sprites[1].prefix = "stage_9_bridge2_maskDef"
tt = E:register_t("decal_stage_09_bridge3_mask", "decal_stage_09_bridge_mask")
tt.render.sprites[1].prefix = "stage_9_bridge3_maskDef"
tt = E:register_t("decal_stage_09_candle", "decal_scripted")
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].loop = true
tt.render.sprites[1].name = "idle_off"
tt.main_script.update = scripts.decal_stage_09_candle.update
tt = E:register_t("decal_stage_09_candle_back1", "decal_stage_09_candle")
tt.render.sprites[1].prefix = "stage_9_candles_back_1Def"
tt = E:register_t("decal_stage_09_candle_back2", "decal_stage_09_candle")
tt.render.sprites[1].prefix = "stage_9_candles_back_2Def"
tt = E:register_t("decal_stage_09_candle_back3", "decal_stage_09_candle")
tt.render.sprites[1].prefix = "stage_9_candles_back_3Def"
tt = E:register_t("decal_stage_09_candle_front1", "decal_stage_09_candle")
tt.render.sprites[1].prefix = "stage_9_candles_front_1Def"
tt = E:register_t("decal_stage_09_candle_front2", "decal_stage_09_candle")
tt.render.sprites[1].prefix = "stage_9_candles_front_2Def"
tt = E:register_t("decal_stage_09_candle_front3", "decal_stage_09_candle")
tt.render.sprites[1].prefix = "stage_9_candles_front_3Def"
tt = E:register_t("decal_stage_09_candle_glow_back", "decal")
tt.render.sprites[1].prefix = "stage_9_candles_glow_backDef"
tt.render.sprites[1].name = "off"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].loop = true
tt = E:register_t("decal_stage_09_candle_glow_front", "decal")
tt.render.sprites[1].prefix = "stage_9_candles_glow_frontDef"
tt.render.sprites[1].name = "off"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].loop = true
tt = E:register_t("decal_stage_09_fire", "decal")
tt.render.sprites[1].prefix = "stage_9_fireDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS + 1
tt.render.sprites[1].loop = true
tt = E:register_t("decal_stage_09_portal_path_spawn", "decal_scripted")
tt.render.sprites[1].prefix = "stage_9_portal_pathDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].loop = true
tt.main_script.update = scripts.decal_stage_09_path_portal.update
tt = E:register_t("decal_stage_09_portal", "decal")
tt.render.sprites[1].prefix = "stage_9_portalDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].loop = true
tt = E:register_t("decal_stage_09_sheepy_easteregg", "decal_scripted")

E:add_comps(tt, "ui", "editor")

tt.render.sprites[1].prefix = "stage_9_sheepyDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS - 1
tt.render.sprites[1].loop = true
tt.main_script.update = scripts.decal_stage_09_sheepy_easteregg.update
tt.ui.click_rect = r(-20, -10, 40, 40)
tt = E:register_t("decal_stage_10_mask", "decal")
tt.render.sprites[1].name = "T2_Stage_10_mask"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("decal_stage_10_fire", "decal")
tt.render.sprites[1].prefix = "stage_10_fireDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].loop = true
tt = E:register_t("decal_stage_10_obelisk", "decal")
tt.render.sprites[1].name = "stage10_obelisk_base"
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].animated = false
tt = E:register_t("decal_stage_10_obelisk_back", "decal")
tt.render.sprites[1].name = "stage10_obelisk_base_back"
tt.render.sprites[1].z = Z_DECALS - 1
tt.render.sprites[1].animated = false
tt = E:register_t("decal_stage_10_obelisk_priests", "decal")
tt.render.sprites[1].prefix = "stage10_obelisk_priests"
tt.render.sprites[1].name = "idle_off"
tt.render.sprites[1].z = Z_DECALS + 1
tt.render.sprites[1].animated = true
tt = E:register_t("decal_stage_10_obelisk_crystals", "decal")
tt.render.sprites[1].prefix = "stage10_obelisk_base_cristalitos"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].animated = true
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "stage10_obelisk_base_cristalitos_back"
tt.render.sprites[2].name = "idle"
tt.render.sprites[2].z = Z_DECALS - 1
tt.render.sprites[2].animated = true
tt = E:register_t("decal_stage_10_ymca_ground_decos", "decal")
tt.render.sprites[1].name = "ymca_spawn_fx_layer_2"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_stage_10_obelisk_crystal", "decal_tween")
tt.render.sprites[1].prefix = "stage10_obelisk_crystal"
tt.render.sprites[1].name = "idle_off"
tt.render.sprites[1].z = Z_DECALS - 1
tt.render.sprites[1].animated = true
tt.move_frequency = 25
tt.move_distance = 20
tt.tween.props[1].name = "offset"
tt.tween.props[1].interp = "sine"
tt.tween.props[1].keys = {
	{
		fts(0),
		v(0, tt.move_distance)
	},
	{
		fts(tt.move_frequency),
		v(0, 15)
	},
	{
		fts(tt.move_frequency * 2),
		v(0, tt.move_distance)
	}
}
tt.tween.props[1].loop = true
tt.tween.props[1].disabled = true
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].name = "offset"
tt.tween.props[2].interp = "sine"
tt.tween.props[2].keys = {
	{
		fts(0),
		v(0, 0)
	},
	{
		fts(tt.move_frequency),
		v(0, tt.move_distance)
	}
}
tt.tween.props[2].disabled = true
tt.tween.remove = false
tt.tween.disabled = true
tt = E:register_t("decal_stage_10_obelisk_crystal_fx", "decal_scripted")

E:add_comps(tt, "tween")

tt.render.sprites[1].prefix = "stage10_obelisk_changestate_fx_change"
tt.render.sprites[1].loop = true
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		fts(12),
		0
	}
}
tt.tween.disabled = true
tt.main_script.update = scripts.decal_stage_10_obelisk_crystal_fx.update
tt = E:register_t("decal_stage_10_ymca_statue", "decal_scripted")

E:add_comps(tt, "ui")

tt.render.sprites[1].prefix = "ymca_statue"
tt.main_script.update = scripts.decal_stage_10_ymca_statue.update
tt.ui.click_rect = r(-30, -10, 60, 80)
tt.click_fx = "fx_stage_10_statue_click"
tt = E:register_t("decal_stage_10_ymca_dots", "decal")
tt.render.sprites[1].prefix = "YMCAPuntosDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].loop = true
tt = E:register_t("decal_stage_10_ymca_fireworks", "decal")
tt.render.sprites[1].prefix = "ymca_spawn_fx_layer_3"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].animated = true
tt.render.sprites[1].hide_after_runs = 1
tt = E:register_t("decal_stage_10_ymca_lights", "decal")
tt.render.sprites[1].prefix = "ymca_spawn_fx_layer_4"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt.render.sprites[1].animated = true
tt = E:register_t("decal_stage_11_cult_leader", "decal")

E:add_comps(tt, "taunts", "tween")

tt.render.sprites[1].prefix = "mydriasDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.taunts.delay_min = 20
tt.taunts.delay_max = 30
tt.taunts.sets = {}
tt.taunts.sets.pre_bossfight = CC("taunt_set")
tt.taunts.sets.pre_bossfight.format = "LV11_CULTIST_TAUNT_%02i"
tt.taunts.sets.pre_bossfight.end_idx = 6
tt.taunts.sets.in_bossfight = CC("taunt_set")
tt.taunts.sets.in_bossfight.format = "LV11_CULTIST_TAUNT_IN_BOSSFIGHT_%02i"
tt.taunts.sets.in_bossfight.end_idx = 6
tt.tween.props[1] = E:clone_c("tween_prop")
tt.tween.props[1].name = "offset"
tt.tween.props[1].loop = true
tt.tween.props[1].keys = {
	{
		0,
		v(0, 0)
	},
	{
		fts(35),
		v(0, 7)
	},
	{
		fts(70),
		v(0, 0)
	}
}
tt.tween.props[1].interp = "sine"
tt.tween.disabled = true
tt.tween.remove = false
tt = E:register_t("decal_stage_11_boss_corrupted_denas_intro_base", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].prefix = "denas_intro_baseDef"
tt.render.sprites[1].name = "start"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_stage_11_boss_corrupted_denas_intro_chains", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].prefix = "denas_intro_chainsDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt = E:register_t("decal_stage_11_boss_corrupted_denas_intro_jump", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].prefix = "denas_intro_jumpDef"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].exo = true
tt.render.sprites[1].loop = false
tt = E:register_t("decal_stage_11_veznan", "tower")
b = balance.specials.stage11_veznan

E:add_comps(tt, "user_selection", "attacks")

tt.tower.type = "stage_11_veznan"
tt.tower.can_be_sold = false
tt.tower.can_be_mod = false
tt.render.sprites[1].prefix = "stage11_veznan_export_veznan"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].scale = vv(1.15)
tt.info = nil
tt.user_selection.can_select_point_fn = scripts.decal_stage_11_veznan.can_select_point
tt.main_script.update = scripts.decal_stage_11_veznan.update
tt.attacks.list[1] = E:clone_c("custom_attack")
tt.attacks.list[1].bullet = "bullet_stage_11_veznan_skill_1"
tt.attacks.list[1].bullet_spawn_pos = v(0, 50)
tt.attacks.list[2] = E:clone_c("custom_attack")
tt.attacks.list[2].preparation_time = fts(25)
tt.attacks.list[2].spawn_time = fts(30)
tt.attacks.list[2].decal = "decal_stage_11_veznan_skill_soldiers"
tt.attacks.list[2].decal_pos = {
	v(-40, 333),
	v(540, 91)
}
tt.attacks.list[2].entity = "soldier_stage_11_veznan_skill_soldiers"
tt.attacks.list[2].available_paths = {
	{
		1,
		4
	},
	{
		2,
		3,
		5
	}
}
tt.attacks.list[3] = E:clone_c("custom_attack")
tt.attacks.list[3].preparation_time = fts(25)
tt.attacks.list[3].mod = "mod_stage_11_veznan_skill_cage"
tt.skill_cooldown = b.cooldown
tt.hint_cooldown = 10
tt.illusion_template_name = "enemy_stage_11_cult_leader_illusion"
tt.cult_leader_template_name = "decal_stage_11_cult_leader"
tt.boss_corrupted_denas_template_name = "boss_corrupted_denas"
tt.hint_template_name = "decal_stage_11_veznan_hint"
tt.bullet_formation = {
	{
		v(0, 50)
	},
	{
		v(-20, 30),
		v(20, 30)
	},
	{
		v(-20, 30),
		v(20, 30),
		v(0, 50)
	},
	{
		v(-20, 40),
		v(20, 40),
		v(0, 60),
		v(0, 30)
	}
}
tt.spawn_fx = "fx_stage_11_veznan_spawn"
tt.spawn_fx_base = "fx_stage_11_veznan_spawn_base"
tt.spawn_delay = fts(42)
tt.sound_events.insert = "Stage11MidCinematicVeznanTeleport"
tt.sound_ready = "Stage11MidCinematicVeznanTeleport"
tt.sound_soul_impact_cast = "Stage11VeznanSoulImpactCast"
tt.sound_demon_guard_cast = "Stage11VeznanDemonGuardCast"
tt = E:register_t("taunts_s11_controller")

E:add_comps(tt, "main_script", "taunts", "editor")

tt.load_file = "level11_taunts"
tt.main_script.insert = scripts.taunts_controller.insert
tt.taunts.delay_min = 10
tt.taunts.delay_max = 20
tt.taunts.sets = {}
tt.taunts.sets.stage_11_cult_leader = CC("taunt_set")
tt.taunts.sets.stage_11_cult_leader.format = "TAUNT_STAGE06_CULTIST_GREETING_%04i"
tt.taunts.sets.stage_11_cult_leader.decal_name = "decal_stage11_cultist_shoutbox"
tt.taunts.sets.stage_11_cult_leader.pos = v(740, 670)
tt = E:register_t("decal_stage11_cultist_shoutbox", "decal_tween")

E:add_comps(tt, "texts")

tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "cultist_taunt_0001"
tt.render.sprites[1].z = Z_BULLETS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "cultist_taunt_0003"
tt.render.sprites[2].z = Z_BULLETS
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].animated = false
tt.render.sprites[3].z = Z_BULLETS
tt.render.sprites[3].offset = v(13, -13)
tt.texts.list[1].text = "Hello world"
tt.texts.list[1].size = v(158, 56)
tt.texts.list[1].font_name = "taunts"
tt.texts.list[1].font_size = i18n:cjk(28, nil, 22, nil)
tt.texts.list[1].color = {
	233,
	189,
	255
}
tt.texts.list[1].line_height = i18n:cjk(0.8, 0.9, 1.1, 0.7)
tt.texts.list[1].sprite_id = 3
tt.texts.list[1].fit_height = true
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.25,
		255
	},
	{
		"this.duration-0.25",
		255
	},
	{
		"this.duration",
		0
	}
}
tt.tween.props[1].sprite_id = 1
tt.tween.props[2] = table.deepclone(tt.tween.props[1])
tt.tween.props[2].sprite_id = 2
tt.tween.props[3] = table.deepclone(tt.tween.props[1])
tt.tween.props[3].sprite_id = 3
tt.tween.props[4] = E:clone_c("tween_prop")
tt.tween.props[4].name = "scale"
tt.tween.props[4].keys = {
	{
		0,
		v(1.01, 1.01)
	},
	{
		0.4,
		v(0.99, 0.99)
	},
	{
		0.8,
		v(1.01, 1.01)
	}
}
tt.tween.props[4].sprite_id = 1
tt.tween.props[4].loop = true
tt.tween.props[5] = table.deepclone(tt.tween.props[4])
tt.tween.props[5].sprite_id = 2
tt.tween.props[6] = table.deepclone(tt.tween.props[4])
tt.tween.props[6].sprite_id = 3
tt.tween.remove = true
tt = E:register_t("decal_stage_11_veznan_skill_soldiers", "decal_sequence")
tt.render.sprites[1].prefix = "stage11_veznan_export_spawn_decal"
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].anchor = v(0.5, 0.35)
tt.sequence.steps = {
	"in",
	"spawn",
	"out"
}
tt = E:register_t("decal_stage_11_veznan_skill_cage", "decal")
tt.render.sprites[1].prefix = "stage11_veznan_export_veznan_electric_skill3"
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt = E:register_t("decal_stage_11_veznan_hint", "decal_tween")
tt.render.sprites[1].name = "stage11_veznan_export_globito"
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].animated = false
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		3,
		255
	},
	{
		3.1,
		0
	}
}
tt.tween.remove = true
tt = E:register_t("decal_boss_corrupted_denas_hit_floor", "decal_tween")
tt.render.sprites[1].name = "denas_decal"
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].animated = false
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.3,
		255
	},
	{
		1.9,
		255
	},
	{
		2.3,
		0
	}
}
tt.tween.remove = true
tt = E:register_t("decal_boss_corrupted_denas_hit_spikes_1", "decal")
tt.render.sprites[1].name = "denas_spikes1_run"
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].hide_after_runs = 1
tt = E:register_t("decal_boss_corrupted_denas_hit_spikes_2", "decal")
tt.render.sprites[1].name = "denas_spikes2_run"
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].hide_after_runs = 1
tt = E:register_t("decal_boss_corrupted_denas_hit", "decal_scripted")
tt.render.sprites[1].name = "denas_dustexplosion_run"
tt.render.sprites[1].hide_after_runs = 1
tt.main_script.update = scripts.decal_stage_11_boss_corrupted_denas_hit.update
tt.floor_decal = "decal_boss_corrupted_denas_hit_floor"
tt.spike_decals = {
	"decal_boss_corrupted_denas_hit_spikes_1",
	"decal_boss_corrupted_denas_hit_spikes_2"
}
tt.decal_spawn_range = 50
tt.distance_between = 20
tt.decal_amount = 5
tt = E:register_t("decal_boss_corrupted_denas_dust", "decal")
tt.render.sprites[1].name = "denas_dustexplosion_run"
tt.render.sprites[1].hide_after_runs = 1
tt = E:register_t("decal_stage_11_portal", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].random_ts = 1
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].scale = v(1, 1)
tt.render.sprites[1].prefix = "stage_11_portalDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].draw_order = 1
tt = E:register_t("decal_stage_11_torches", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].random_ts = 1
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].scale = v(1, 1)
tt.render.sprites[1].prefix = "stage_11_torchesDef"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].exo = true
tt.render.sprites[1].draw_order = 2
tt = E:register_t("decal_stage_11_portal_crystal_1", "decal")

E:add_comps(tt, "tween")

tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].prefix = "stage_11_crystal2_1Def"
tt.render.sprites[1].name = "idle_off"
tt.render.sprites[1].exo = true
tt.render.sprites[1].draw_order = 2
tt.tween_amplitude = 10
tt.tween_frecueny_min = 60
tt.tween_frecueny_max = 90
tt.tween.disabled = false
tt.tween.remove = false
tt.tween.props[1].name = "offset"
tt.tween.props[1].loop = true
tt.tween.props[1].interp = "sine"
tt = E:register_t("decal_stage_11_portal_crystal_2", "decal_stage_11_portal_crystal_1")
tt.render.sprites[1].prefix = "stage_11_crystal1_1Def"
tt = E:register_t("decal_stage_11_portal_crystal_3", "decal_stage_11_portal_crystal_1")
tt.render.sprites[1].prefix = "stage_11_crystal1_2Def"
tt = E:register_t("decal_stage_11_portal_crystal_4", "decal_stage_11_portal_crystal_1")
tt.render.sprites[1].prefix = "stage_11_crystal2_2Def"
tt = E:register_t("decal_stage_11_portal_crystal_5", "decal_stage_11_portal_crystal_1")
tt.render.sprites[1].prefix = "stage_11_crystal2_3Def"
tt.render.sprites[1].draw_order = 0
tt = E:register_t("decal_stage_11_portal_crystal_6", "decal_stage_11_portal_crystal_1")
tt.render.sprites[1].prefix = "stage_11_crystal2_4Def"
tt = E:register_t("decal_stage_11_portal_crystal_7", "decal_stage_11_portal_crystal_1")
tt.render.sprites[1].prefix = "stage_11_crystal2_5Def"
tt.render.sprites[1].draw_order = 0
tt = E:register_t("decal_stage_11_portal_crystal_8", "decal_stage_11_portal_crystal_1")
tt.render.sprites[1].prefix = "stage_11_crystal2_6Def"
tt = E:register_t("decal_stage_11_lightnings_1", "decal")
tt.render.sprites[1].prefix = "stage_11_elec1Def"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_BACKGROUND_COVERS
tt = E:register_t("decal_stage_11_lightnings_2", "decal")
tt.render.sprites[1].prefix = "stage_11_elec2Def"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_BACKGROUND_COVERS
tt = E:register_t("decal_stage_11_lightnings_3", "decal")
tt.render.sprites[1].prefix = "stage_11_elec3Def"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_BACKGROUND_COVERS
tt = E:register_t("decal_stage_11_mask", "decal")
tt.render.sprites[1].name = "sam_and_frodo_easter_egg_mask"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_BACKGROUND_COVERS
tt = E:register_t("decal_stage_11_rock_1", "decal")

E:add_comps(tt, "tween", "editor")

tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].name = "T2_Stage_11_floating_rocks_1"
tt.render.sprites[1].animated = false
tt.render.sprites[1].draw_order = 2
tt.tween_amplitude = 30
tt.tween_frecueny = 200
tt.tween.disabled = false
tt.tween.remove = false
tt.tween.props[1].name = "offset"
tt.tween.props[1].loop = true
tt.tween.props[1].interp = "sine"
tt.editor.props = {
	{
		"tween_amplitude",
		PT_NUMBER
	},
	{
		"tween_frecueny",
		PT_NUMBER
	}
}
tt = E:register_t("decal_stage_11_rock_2", "decal_stage_11_rock_1")
tt.render.sprites[1].name = "T2_Stage_11_floating_rocks_2"
tt = E:register_t("decal_stage_11_rock_3", "decal_stage_11_rock_1")
tt.render.sprites[1].name = "T2_Stage_11_floating_rocks_3"
tt = E:register_t("decal_stage_11_rock_4", "decal_stage_11_rock_1")
tt.render.sprites[1].name = "T2_Stage_11_floating_rocks_4"
tt = E:register_t("decal_stage_11_rock_5", "decal_stage_11_rock_1")
tt.render.sprites[1].name = "T2_Stage_11_floating_rocks_5"
tt.render.sprites[1].scale = vv(0.65)
tt = E:register_t("decal_stage_11_rock_6", "decal_stage_11_rock_1")
tt.render.sprites[1].name = "T2_Stage_11_floating_rocks_6"
tt = E:register_t("decal_stage_11_rock_7", "decal_stage_11_rock_1")
tt.render.sprites[1].name = "T2_Stage_11_floating_rocks_7"
tt = E:register_t("decal_stage_11_rock_8", "decal_stage_11_rock_1")
tt.render.sprites[1].name = "T2_Stage_11_floating_rocks_8"
tt.render.sprites[1].scale = vv(0.75)
tt = E:register_t("decal_stage_11_rock_9", "decal_stage_11_rock_1")
tt.render.sprites[1].name = "T2_Stage_11_floating_rocks_9"
tt = E:register_t("decal_stage_11_rock_10", "decal_stage_11_rock_1")
tt.render.sprites[1].name = "T2_Stage_11_floating_rocks_10"
tt = E:register_t("decal_stage_11_rock_11", "decal_stage_11_rock_1")
tt.render.sprites[1].name = "T2_Stage_11_floating_rocks_11"
tt = E:register_t("decal_stage_11_rock_12", "decal_stage_11_rock_11")
tt.render.sprites[1].scale = vv(1.35)
tt = E:register_t("decal_stage_11_rock_13", "decal_stage_11_rock_1")
tt.render.sprites[1].scale = vv(0.85)
tt = E:register_t("decal_stage_11_rock_14", "decal_stage_11_rock_13")
tt.render.sprites[1].flip_x = true
tt = E:register_t("decal_stage_11_rock_15", "decal_stage_11_rock_2")
tt.render.sprites[1].scale = vv(2)
tt.render.sprites[1].flip_x = true
tt = E:register_t("decal_stage_11_rock_16", "decal_stage_11_rock_4")
tt.render.sprites[1].scale = vv(1.25)
tt = E:register_t("decal_stage_11_rock_17", "decal_stage_11_rock_4")
tt.render.sprites[1].scale = v(0.75, 0.5)
tt.render.sprites[1].flip_x = true
tt = E:register_t("decal_stage_11_rock_18", "decal_stage_11_rock_1")
tt.render.sprites[1].name = "T2_Stage_11_floating_rocks_12"
tt = E:register_t("decal_stage_11_rock_19", "decal_stage_11_rock_18")
tt.render.sprites[1].scale = v(0.5, 0.5)
tt.render.sprites[1].flip_x = true
tt = E:register_t("decal_stage_11_cultist_leader_modes", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].prefix = "stage_11_deco_mydrias_baseDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].draw_order = 1
tt = E:register_t("decal_stage_11_cultist_leader_modes_worker", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].prefix = "stage_11_deco_mydrias_workerDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].draw_order = 2
tt = E:register_t("decal_stage_11_veznan_modes", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].name = "deco_veznan_statue_statue"
tt.render.sprites[1].animated = false
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = true
tt.render.sprites[2].prefix = "deco_veznan_statue_torch"
tt.render.sprites[2].name = "idle"
tt.render.sprites[2].draw_order = 2
tt.render.sprites[2].offset = v(0, -66)
tt = E:register_t("decal_stage_11_sam_and_frodo", "decal_scripted")

E:add_comps(tt, "ui")

tt.render.sprites[1].prefix = "sam_and_frodoDef"
tt.render.sprites[1].name = "in"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_BACKGROUND_COVERS
tt.main_script.update = scripts.decal_stage_11_sam_and_frodo.update
tt.ui.click_rect = r(370, -270, 50, 40)
tt.push_up_cooldown = 7
tt = E:register_t("decal_stage_11_sam_and_frodo_mask", "decal")
tt.render.sprites[1].name = "sam_and_frodo_easter_egg_mask"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_BACKGROUND_COVERS + 1
tt = E:register_t("decal_glare_terrain_3_overlay", "decal")

E:add_comps(tt, "tween")

tt.pos = v(512, 384)
tt.render.sprites[1].name = "display_of_true_might_slow_overlay"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS_SKY
tt.render.sprites[1].scale = vv(4096)
tt.render.sprites[1].alpha = 0
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(30),
		60
	}
}
tt.tween.remove = false
tt.tween.disabled = true
tt = E:register_t("decal_item_veznan_wrath_dark_overlay", "decal")

E:add_comps(tt, "tween")

tt.pos = v(512, 384)
tt.render.sprites[1].name = "item_veznan_wrath_overlay"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_SCREEN_FIXED
tt.render.sprites[1].scale = vv(4096)
tt.render.sprites[1].alpha = 0
tt.render.sprites[1].hidden = false
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		100
	}
}
tt.tween.remove = false
tt.tween.disabled = false
tt = E:register_t("decal_item_veznan_wrath_green_overlay", "decal")
tt.pos = v(512, 384)
tt.render.sprites[1].name = "item_veznan_wrath_overlay_green"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_SCREEN_FIXED
tt.render.sprites[1].scale = vv(4096)
tt.render.sprites[1].alpha = 100
tt.render.sprites[1].hidden = true
tt = E:register_t("decal_item_veznan_wrath_instakill_ground", "decal")

E:add_comps(tt, "timed")

tt.render.sprites[1].animated = true
tt.render.sprites[1].prefix = "veznan_wrath_instakill_effect_fx"
tt.render.sprites[1].name = "idle"
tt.timed.runs = 1
tt = E:register_t("decal_terrain_3_floating_rock", "decal")

E:add_comps(tt, "tween", "editor")

tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].name = "T3_Stage_12_floating_01"
tt.render.sprites[1].animated = false
tt.render.sprites[1].draw_order = 2
tt.tween_amplitude = 15
tt.tween_frecueny = 150
tt.tween.disabled = false
tt.tween.remove = false
tt.tween.props[1].name = "offset"
tt.tween.props[1].loop = true
tt.tween.props[1].interp = "sine"
tt.editor.props = {
	{
		"render.sprites[1].r",
		PT_NUMBER,
		math.pi / 180
	},
	{
		"render.sprites[1].scale",
		PT_COORDS
	},
	{
		"render.sprites[1].draw_order",
		PT_NUMBER
	},
	{
		"render.sprites[1].name",
		PT_STRING
	},
	{
		"render.sprites[1].z",
		PT_NUMBER
	}
}
tt = E:register_t("decal_terrain_3_glare_eye_big", "decal_scripted")
tt.render.sprites[1].name = "glare_eye_big"
tt.render.sprites[1].animated = false
tt.render.sprites[1].draw_order = 2
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "glare_eyelids_big"
tt.render.sprites[2].name = "idle_close"
tt.render.sprites[2].animated = true
tt.render.sprites[2].z = Z_DECALS
tt.render.sprites[2].draw_order = 4
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].prefix = "glare_eye_big_pupil"
tt.render.sprites[3].name = "look"
tt.render.sprites[3].animated = true
tt.render.sprites[3].z = Z_DECALS
tt.render.sprites[3].draw_order = 3
tt.main_script.update = scripts.decal_terrain_3_glare_eye.update
tt.sid_eyelids = 2
tt.sid_pupil = 3
tt.is_big_eye = true
tt = E:register_t("decal_terrain_3_glare_eye_small", "decal_scripted")
tt.render.sprites[1].prefix = "glare_eye_big"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].draw_order = 2
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "glare_eyelids_big"
tt.render.sprites[2].name = "idle_close"
tt.render.sprites[2].animated = true
tt.render.sprites[2].z = Z_DECALS
tt.render.sprites[2].draw_order = 3
tt.main_script.update = scripts.decal_terrain_3_glare_eye.update
tt.sid_eye = 1
tt.sid_eyelids = 2
tt = E:register_t("decal_terrain_3_glare_eye_small_1", "decal_terrain_3_glare_eye_small")
tt.render.sprites[1].prefix = "glare_eyes_1"
tt.render.sprites[2].prefix = "glare_eyelids_1"
tt = E:register_t("decal_terrain_3_glare_eye_small_2", "decal_terrain_3_glare_eye_small")
tt.render.sprites[1].prefix = "glare_eyes_2"
tt.render.sprites[2].prefix = "glare_eyelids_2"
tt = E:register_t("decal_terrain_3_glare_eye_small_3", "decal_terrain_3_glare_eye_small")
tt.render.sprites[1].prefix = "glare_eyes_3"
tt.render.sprites[2].prefix = "glare_eyelids_3"
tt = E:register_t("decal_stage_12_sheepy_easteregg", "decal_scripted")

E:add_comps(tt, "ui")

tt.render.sprites[1].prefix = "stage_12_sheepyDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].loop = true
tt.main_script.update = scripts.decal_stage_12_sheepy_easteregg.update
tt.ui.click_rect = r(410, 230, 40, 40)
tt = E:register_t("decal_stage_12_tentacles", "decal")
tt.render.sprites[1].prefix = "BKtentacleDef"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].exo = true
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_DECALS - 1
tt.render.sprites[1].fps = 15
tt = E:register_t("decal_stage_12_glare", "decal")
tt.render.sprites[1].prefix = "stage_12_glareDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_stage_12_mask_1", "decal")
tt.render.sprites[1].name = "T3_12_mask_01"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_DECALS + 1
tt = E:register_t("decal_stage_12_mask_2", "decal_stage_12_mask_1")
tt.render.sprites[1].name = "T3_12_mask_02"
tt = E:register_t("decal_stage_12_mask_3", "decal_stage_12_mask_1")
tt.render.sprites[1].name = "T3_12_mask_03"
tt = E:register_t("decal_stage_12_mask_4", "decal_stage_12_mask_1")
tt.render.sprites[1].name = "T3_12_mask_04"
tt = E:register_t("decal_stage_12_windmill", "decal_click_pause")

E:add_comps(tt, "ui", "tween")

tt.render.sprites[1].prefix = "t3_windmillDef"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].exo = true
tt.ui.click_rect = r(-25, -5, 50, 70)
tt.tween_amplitude = 15
tt.tween_frecuency = 150
tt.tween.disabled = false
tt.tween.remove = false
tt.tween.props[1].name = "offset"
tt.tween.props[1].loop = true
tt.tween.props[1].interp = "sine"
tt.tween.props[1].keys = {
	{
		fts(0),
		v(0, 0)
	},
	{
		fts(tt.tween_frecuency),
		v(0, tt.tween_amplitude)
	},
	{
		fts(tt.tween_frecuency * 2),
		v(0, 0)
	}
}
tt.main_script.update = scripts.decal_stage_12_windmill.update
tt = E:register_t("decal_stage_12_easter_egg_strangerthings", "decal")

E:add_comps(tt, "pos", "render", "ui", "main_script")

tt.main_script.update = scripts.decal_stage_12_easter_egg_strangerthings.update
tt.render.sprites[1].prefix = "stranger_thingsDef"
tt.render.sprites[1].name = "in"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS + 1
tt.ui.click_rect = r(-365, -240, 95, 55)
tt = E:register_t("decal_stage_13_tentacles", "decal_stage_12_tentacles")
tt.render.sprites[1].prefix = "BKtentacle13Def"
tt = E:register_t("decal_stage_13_mask_1", "decal")
tt.render.sprites[1].name = "stage13_mask1"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("decal_stage_13_mask_2", "decal_stage_13_mask_1")
tt.render.sprites[1].name = "stage13_mask2"
tt = E:register_t("decal_stage_13_mask_3", "decal_stage_13_mask_1")
tt.render.sprites[1].name = "stage13_masktentacle1"
tt.render.sprites[1].z = Z_DECALS + 1
tt = E:register_t("decal_stage_13_mask_4", "decal_stage_13_mask_1")
tt.render.sprites[1].name = "stage13_masktentacle2"
tt.render.sprites[1].z = Z_DECALS + 1
tt = E:register_t("decal_stage_13_glare", "decal_stage_12_glare")
tt.render.sprites[1].prefix = "stage_13_glareDef"
tt = E:register_t("decal_stage_14_easter_egg_rickmorty", "decal")

E:add_comps(tt, "editor", "pos", "main_script", "render", "ui")

tt.main_script.insert = scripts.decal_stage_14_easter_egg_rickmorty.insert
tt.main_script.update = scripts.decal_stage_14_easter_egg_rickmorty.update
tt.render.sprites[1].prefix = "Rick1Def"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS + 1
tt.idle_cooldown_min = 4
tt.idle_cooldown_max = 8
tt.ui.click_rect = r(-40, -30, 80, 50)
tt.pos_spawn = {
	v(130, 210),
	v(1033, 468)
}
tt.prefix_names = {
	"Rick2Def",
	"Rick3Def"
}
tt = E:register_t("decal_stage_14_glare_1", "decal_stage_12_glare")
tt.render.sprites[1].prefix = "stage_14_glare_1Def"
tt = E:register_t("decal_stage_14_glare_2", "decal_stage_12_glare")
tt.render.sprites[1].prefix = "stage_14_glare_2Def"
tt = E:register_t("decal_terrain_3_glare_eye_big_stage_14", "decal_terrain_3_glare_eye_big")
tt.render.sprites[1].name = "glare_stage_14_eye_2_big"
tt.render.sprites[2].prefix = "glare_stage_14_eyelid_2_big"
tt.render.sprites[3].prefix = "glare_stage_14_eye_2_big_pupil"
tt = E:register_t("decal_terrain_3_glare_eye_small_1_stage_14", "decal_terrain_3_glare_eye_small")
tt.render.sprites[1].prefix = "glare_stage_14_eye_2_1"
tt.render.sprites[2].prefix = "glare_stage_14_eyelid_2_1"
tt = E:register_t("decal_terrain_3_glare_eye_small_2_stage_14", "decal_terrain_3_glare_eye_small")
tt.render.sprites[1].prefix = "glare_stage_14_eye_2_2"
tt.render.sprites[2].prefix = "glare_stage_14_eyelid_2_2"
tt = E:register_t("decal_terrain_3_glare_eye_small_3_stage_14", "decal_terrain_3_glare_eye_small")
tt.render.sprites[1].prefix = "glare_stage_14_eye_2_3"
tt.render.sprites[2].prefix = "glare_stage_14_eyelid_2_3"
tt = E:register_t("decal_stage_14_tentacles", "decal_stage_12_tentacles")
tt.render.sprites[1].prefix = "BKtentacle14Def"
tt = E:register_t("decal_stage_14_mask_1", "decal")
tt.render.sprites[1].name = "T3_S14_mask_01"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_stage_14_mask_2", "decal_stage_14_mask_1")
tt.render.sprites[1].name = "T3_S14_mask_02"
tt = E:register_t("decal_stage_14_mask_3", "decal_stage_14_mask_1")
tt.render.sprites[1].name = "T3_S14_mask_03"
tt = E:register_t("decal_stage_14_mask_4", "decal_stage_14_mask_1")
tt.render.sprites[1].name = "T3_S14_mask_04"
tt = E:register_t("decal_stage_14_mask_amalgam", "decal_stage_14_mask_1")
tt.render.sprites[1].name = "T3_S14_mask_amalgam"
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = 90
tt = E:register_t("decal_controller_stage_14_amalgam", "decal_stage_14_mask_1")
tt.render.sprites[1].prefix = "Amalgam_dude"
tt.render.sprites[1].name = "state_1"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_stage_14_hidden_path", "decal")
tt.render.sprites[1].prefix = "hidden_pathDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_BACKGROUND_COVERS
tt = E:register_t("decal_stage_14_hidden_path_dust", "decal")
tt.render.sprites[1].prefix = "dust_pathDef"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("decal_stage_15_glare", "decal_stage_12_glare")
tt.render.sprites[1].prefix = "stage_15_glareDef"
tt = E:register_t("decal_stage_15_tentacles", "decal_stage_12_tentacles")
tt.render.sprites[1].prefix = "BKtentacle_S15Def"
tt = E:register_t("decal_stage_15_mask_1", "decal")
tt.render.sprites[1].name = "T3_15_mask_01"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_stage_15_mask_2", "decal_stage_15_mask_1")
tt.render.sprites[1].name = "T3_15_mask_02"
tt = E:register_t("decal_stage_15_mask_3", "decal_stage_15_mask_1")
tt.render.sprites[1].name = "T3_15_mask_03"
tt = E:register_t("decal_stage_15_mask_4", "decal_stage_15_mask_1")
tt.render.sprites[1].name = "T3_15_mask_04"
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("decal_stage_15_mask_5", "decal_stage_15_mask_1")
tt.render.sprites[1].name = "T3_15_mask_05"
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("decal_terrain_3_glare_eye_big_stage_15", "decal_terrain_3_glare_eye_big")
tt.render.sprites[1].name = "glare_stage_15_eye_big"
tt.render.sprites[2].prefix = "glare_stage_15_eyelids_big"
tt.render.sprites[3].prefix = "glare_stage_15_eye_big_pupil"
tt = E:register_t("decal_terrain_3_glare_eye_small_1_stage_15", "decal_terrain_3_glare_eye_small")
tt.render.sprites[1].prefix = "glare_stage_15_eyes_1"
tt.render.sprites[2].prefix = "glare_stage_15_eyelids_1"
tt = E:register_t("decal_terrain_3_glare_eye_small_2_stage_15", "decal_terrain_3_glare_eye_small")
tt.render.sprites[1].prefix = "glare_stage_15_eyes_2"
tt.render.sprites[2].prefix = "glare_stage_15_eyelids_2"
tt = E:register_t("decal_terrain_3_glare_eye_small_3_stage_15", "decal_terrain_3_glare_eye_small")
tt.render.sprites[1].prefix = "glare_stage_15_eyes_3"
tt.render.sprites[2].prefix = "glare_stage_15_eyelids_3"
tt = E:register_t("decal_soldier_reinforcement_stage_15_denas_spawn", "decal_timed")
tt.render.sprites[1].name = "denas_floor_fx_idle"
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_soldier_reinforcement_stage_15_denas_floor", "decal_timed")
tt.render.sprites[1].name = "denas_decal_Idle"
tt.render.sprites[1].z = Z_DECALS + 1
tt = E:register_t("decal_stage_15_cult_leader_tower_mask", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].name = "mutamydrias_fx_Mutamydrias_balcon"
tt.render.sprites[1].z = Z_OBJECTS_COVERS + 15
tt.render.sprites[1].animated = false
tt = E:register_t("decal_stage_15_tentacle_stun_out", "decal")

E:add_comps(tt, "editor", "tween")

tt.render.sprites[1].prefix = "mutamydrias_fx_Mutamydrias_Stuncircle"
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].loop = false
tt.render.sprites[1].name = "decalfade"
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "mutamydrias_fx_Mutamydrias_Stuncircle_Eye"
tt.render.sprites[2].name = "decalfade"
tt.render.sprites[2].loop = false
tt.render.sprites[2].z = Z_DECALS
tt.render.sprites[2].offset = v(0, 13)
tt.render.sprites[3] = table.deepclone(tt.render.sprites[2])
tt.render.sprites[3].offset = v(22, 0)
tt.render.sprites[4] = table.deepclone(tt.render.sprites[2])
tt.render.sprites[4].offset = v(0, -13)
tt.render.sprites[5] = table.deepclone(tt.render.sprites[2])
tt.render.sprites[5].offset = v(-22, 0)
tt.tween.remove = true
tt.duration = 1.5
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.6,
		0
	},
	{
		0.8,
		255
	},
	{
		tt.duration,
		255
	},
	{
		tt.duration + 1,
		0
	}
}
tt.tween.props[2] = table.deepclone(tt.tween.props[1])
tt.tween.props[2].sprite_id = 2
tt.tween.props[3] = table.deepclone(tt.tween.props[1])
tt.tween.props[3].sprite_id = 3
tt.tween.props[4] = table.deepclone(tt.tween.props[1])
tt.tween.props[4].sprite_id = 4
tt.tween.props[5] = table.deepclone(tt.tween.props[1])
tt.tween.props[5].sprite_id = 5
tt = E:register_t("decal_stage_15_tentacle_stun_activate", "decal_stage_15_tentacle_stun_out")
tt.render.sprites[1].name = "stun"
tt.render.sprites[2].name = "stun"
tt.render.sprites[3].name = "stun"
tt.render.sprites[4].name = "stun"
tt.render.sprites[5].name = "stun"
tt.duration = 0.6
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		0.15,
		255
	},
	{
		tt.duration,
		255
	},
	{
		tt.duration + 0.25,
		0
	}
}
tt.tween.props[2] = table.deepclone(tt.tween.props[1])
tt.tween.props[2].sprite_id = 2
tt.tween.props[3] = table.deepclone(tt.tween.props[1])
tt.tween.props[3].sprite_id = 3
tt.tween.props[4] = table.deepclone(tt.tween.props[1])
tt.tween.props[4].sprite_id = 4
tt.tween.props[5] = table.deepclone(tt.tween.props[1])
tt.tween.props[5].sprite_id = 5
tt = E:register_t("decal_soldier_reinforcement_item_summon_blackburn_area_attack", "decal_timed")
tt.render.sprites[1].name = "item_summon_blackburn_attack_2_decal_idle"
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_item_portable_coil", "decal_scripted")
b = balance.items.portable_coil
tt.render.sprites[1].prefix = "item_portable_coilDef"
tt.render.sprites[1].name = "spawn"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECT
tt.main_script.update = scripts.decal_item_portable_coil.update
tt.vis_flags = bor(F_STUN)
tt.vis_bans = bor(F_NIGHTMARE)
tt.range = b.range
tt.bullet_start_offset = v(0, 45)
tt.hit_time = fts(2)
tt.ray = "bullet_decal_item_portable_coil"
tt.max_targets = b.max_targets
tt.sound_cast = "ItemsPortableCoilCast"
tt.sound_attack = "ItemsPortableCoilAttack"
tt = E:register_t("decal_item_scroll_of_spaceshift", "decal_timed")
tt.render.sprites[1].name = "item_scroll_of_spaceshift_decal_in"
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_item_loot_box_chest_projectile", "decal_scripted")
b = balance.items.loot_box

E:add_comps(tt, "bullet")

tt.render.sprites[1].name = "item_loot_box_chest_projectile"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_BULLETS
tt.render.sprites[1].scale = vv(0.95)
tt.bullet.max_speed = 3000
tt.bullet.arrive_decal = "decal_item_loot_box_chest"
tt.bullet.aura = "aura_item_loot_box_damage"
tt.main_script.update = scripts.decal_item_loot_box_projectile.update
tt.dust = "fx_item_loot_box_dust"
tt.floor_decal = "decal_item_loot_box_floor"
tt.gold_amount = b.gold_amount
tt.gold_pos_offset = v(0, 60)
tt.sound_hit = "ItemsLootBoxCast"
tt = E:register_t("decal_item_loot_box_chest", "decal_tween")
tt.render.sprites[1].prefix = "item_loot_box_chest"
tt.render.sprites[1].name = "in"
tt.render.sprites[1].scale = vv(0.95)
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		2,
		255
	},
	{
		2.5,
		0
	}
}
tt.tween.remove = true
tt.tween.disabled = false
tt.tween.disabled = false
tt = E:register_t("decal_item_loot_box_pig_projectile", "decal_item_loot_box_chest_projectile")
tt.render.sprites[1].name = "item_loot_box_pig_projectile"
tt.bullet.arrive_decal = "decal_item_loot_box_pig"
tt = E:register_t("decal_item_loot_box_pig", "decal_item_loot_box_chest")
tt.render.sprites[1].prefix = "item_loot_box_pig"
tt = E:register_t("decal_item_loot_box_statue_projectile", "decal_item_loot_box_chest_projectile")
tt.render.sprites[1].name = "item_loot_box_statue_projectile"
tt.render.sprites[1].scale = vv(1)
tt.bullet.arrive_decal = "decal_item_loot_box_statue"
tt = E:register_t("decal_item_loot_box_statue", "decal_item_loot_box_chest")
tt.render.sprites[1].prefix = "item_loot_box_statue"
tt.render.sprites[1].scale = vv(1)
tt = E:register_t("decal_item_loot_box_floor", "decal_tween")
tt.render.sprites[1].name = "item_loot_box_decal"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_DECALS
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		2,
		255
	},
	{
		2.5,
		0
	}
}
tt.tween.remove = true
tt.tween.disabled = false
tt = E:register_t("decal_item_second_breath", "decal_timed")
tt.render.sprites[1].name = "item_second_breath_decal_idle"
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("taunts_s15_controller")

E:add_comps(tt, "main_script", "taunts", "editor")

tt.load_file = "level15_taunts"
tt.main_script.insert = scripts.taunts_controller.insert
tt.taunts.delay_min = 10
tt.taunts.delay_max = 20
tt.taunts.sets = {}
tt.taunts.sets.stage_15_cult_leader_greetings = CC("taunt_set")
tt.taunts.sets.stage_15_cult_leader_greetings.format = "TAUNT_STAGE15_CULTIST_%04i"
tt.taunts.sets.stage_15_cult_leader_greetings.decal_name = "decal_stage15_cultist_shoutbox"
tt.taunts.sets.in_bossfight = CC("taunt_set")
tt.taunts.sets.in_bossfight.format = "LV15_CULTIST01_BOSSFIGHT_%02i"
tt.taunts.sets.in_bossfight.decal_name = "decal_stage11_cultist_shoutbox"
tt.taunts.sets.in_bossfight.start_idx = 1
tt.taunts.sets.in_bossfight.end_idx = 6
tt = E:register_t("decal_stage15_cultist_shoutbox", "decal_tween")

E:add_comps(tt, "texts")

tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "cultist_taunt_0001"
tt.render.sprites[1].z = Z_BULLETS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "cultist_taunt_0003"
tt.render.sprites[2].z = Z_BULLETS
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].animated = false
tt.render.sprites[3].z = Z_BULLETS
tt.render.sprites[3].offset = v(13, -13)
tt.texts.list[1].text = "Hello world"
tt.texts.list[1].size = v(158, 56)
tt.texts.list[1].font_name = "taunts"
tt.texts.list[1].font_size = i18n:cjk(28, nil, 22, nil)
tt.texts.list[1].color = {
	233,
	189,
	255
}
tt.texts.list[1].line_height = i18n:cjk(0.8, 0.9, 1.1, 0.7)
tt.texts.list[1].sprite_id = 3
tt.texts.list[1].fit_height = true
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.25,
		255
	},
	{
		"this.duration-0.25",
		255
	},
	{
		"this.duration",
		0
	}
}
tt.tween.props[1].sprite_id = 1
tt.tween.props[2] = table.deepclone(tt.tween.props[1])
tt.tween.props[2].sprite_id = 2
tt.tween.props[3] = table.deepclone(tt.tween.props[1])
tt.tween.props[3].sprite_id = 3
tt.tween.props[4] = E:clone_c("tween_prop")
tt.tween.props[4].name = "scale"
tt.tween.props[4].keys = {
	{
		0,
		v(1.01, 1.01)
	},
	{
		0.4,
		v(0.99, 0.99)
	},
	{
		0.8,
		v(1.01, 1.01)
	}
}
tt.tween.props[4].sprite_id = 1
tt.tween.props[4].loop = true
tt.tween.props[5] = table.deepclone(tt.tween.props[4])
tt.tween.props[5].sprite_id = 2
tt.tween.props[6] = table.deepclone(tt.tween.props[4])
tt.tween.props[6].sprite_id = 3
tt.tween.remove = true
tt = E:register_t("decal_stage_15_boss_cult_leader_ray", "decal_tween")
tt.render.sprites[1].prefix = "mutamydrias_ray_decalDef"
tt.render.sprites[1].name = "areaattack"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		1.5,
		0
	}
}
tt.tween.remove = true
tt = E:register_t("decal_stage_15_tentacle_spawn", "decal_tween")
tt.render.sprites[1].prefix = "mutamydrias_fx_Mutamydrias_Stuncircle_Tentacles"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = false
tt.render.sprites[1].z = Z_DECALS + 1
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		fts(20),
		255
	}
}
tt.tween.remove = true
tt = E:register_t("decal_stage_15_easter_egg_goblin", "decal_scripted")

E:add_comps(tt, "ui")

tt.main_script.update = scripts.decal_stage_15_easter_egg_goblin.update
tt.render.sprites[1].prefix = "t3stage15_eastereggDef"
tt.render.sprites[1].name = "in"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS_COVERS + 10
tt.out_cooldown = 5
tt.sweep_cooldown = 2
tt.time_to_in_cooldown = 20
tt.ui.click_rect = r(-10, -30, 50, 50)
tt = E:register_t("decal_stage_15_easter_egg_goblin_portal", "decal")
tt.render.sprites[1].prefix = "t3stage15_easteregg_tempportalDef"
tt.render.sprites[1].name = "in"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS_COVERS + 10
tt = E:register_t("decal_stage_15_mask_modes", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].name = "stage15modos"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS_COVERS + 20
tt = E:register_t("decal_stage_16_mask_1", "decal")
tt.render.sprites[1].name = "stage16_mask1"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_BACKGROUND_COVERS
tt = E:register_t("decal_stage_16_mask_2", "decal")
tt.render.sprites[1].name = "stage16_mask2"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_BACKGROUND_COVERS
tt = E:register_t("decal_stage_16_mask_3", "decal")
tt.render.sprites[1].name = "stage16_mask3"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_BACKGROUND_COVERS
tt = E:register_t("decal_stage_16_mask_4", "decal")
tt.render.sprites[1].name = "stage16_mask4"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_BACKGROUND_COVERS
tt = E:register_t("decal_stage_16_holder_destroy_fx", "decal")
tt.render.sprites[1].name = "overseer_fx_overseer_crater_run"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = false
tt.render.sprites[1].offset.y = 10
tt.render.sprites[1].sort_y_offset = -1
tt = E:register_t("decal_stage_16_holder_destroy_crater", "decal_scripted")
tt.render.sprites[1].prefix = "t3_craterDef"
tt.render.sprites[1].name = "start"
tt.render.sprites[1].exo = true
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = false
tt.main_script.update = scripts.decal_stage_16_holder_destroy_crater.update
tt = E:register_t("decal_stage_16_tower_change_fx", "decal_tween")
tt.render.sprites[1].prefix = "overseer_fx_overseer_teleportdecal"
tt.render.sprites[1].name = "decalin"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].offset = v(-2, 5)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "overseer_fx_overseer_teleportdecal"
tt.render.sprites[2].name = "decalactivate"
tt.render.sprites[2].animated = true
tt.render.sprites[2].loop = true
tt.render.sprites[2].z = Z_DECALS
tt.render.sprites[2].offset = v(-2, 5)
tt.duration = 2.8 + fts(60)
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.25,
		255
	},
	{
		"this.duration-0.25",
		255
	},
	{
		"this.duration",
		0
	}
}
tt.tween.props[1].sprite_id = 1
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].sprite_id = 2
tt.tween.props[2].name = "alpha"
tt.tween.props[2].keys = {
	{
		0,
		0
	},
	{
		1,
		255
	},
	{
		"this.duration-0.25",
		255
	},
	{
		"this.duration",
		0
	}
}
tt = E:register_t("decal_stage_16_overseer_tentacle_projectile", "decal_tween")
tt.render.sprites[1].name = "overseer_fx_overseer_proyectile_decal"
tt.render.sprites[1].animated = false
tt.render.sprites[1].loop = true
tt.render.sprites[1].z = Z_DECALS
tt.duration = 2.5
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.25,
		255
	},
	{
		"this.duration-0.5",
		255
	},
	{
		"this.duration",
		0
	}
}
tt = E:register_t("decal_stage_16_glare_1", "decal_stage_12_glare")
tt.render.sprites[1].prefix = "stage_16_glare_1Def"
tt = E:register_t("decal_stage_16_glare_2", "decal_stage_12_glare")
tt.render.sprites[1].prefix = "stage_16_glare_2Def"
tt = E:register_t("decal_stage_16_glare_eye_big", "decal_scripted")
tt.render.sprites[1].name = "glare_stage_16_eye_big"
tt.render.sprites[1].animated = false
tt.render.sprites[1].draw_order = 2
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "glare_stage_16_eyelids_big"
tt.render.sprites[2].name = "idle_close"
tt.render.sprites[2].animated = true
tt.render.sprites[2].z = Z_DECALS
tt.render.sprites[2].draw_order = 4
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].prefix = "glare_stage_16_eye_big_pupil"
tt.render.sprites[3].name = "look"
tt.render.sprites[3].animated = true
tt.render.sprites[3].z = Z_DECALS
tt.render.sprites[3].draw_order = 3
tt.main_script.update = scripts.decal_terrain_3_glare_eye.update
tt.sid_eyelids = 2
tt.sid_pupil = 3
tt.is_big_eye = true
tt = E:register_t("decal_stage_16_glare_eye_small_1", "decal_terrain_3_glare_eye_small")
tt.render.sprites[1].prefix = "glare_stage_16_eyes_1"
tt.render.sprites[2].prefix = "glare_stage_16_eyelids_1"
tt = E:register_t("decal_stage_16_glare_eye_small_2", "decal_terrain_3_glare_eye_small")
tt.render.sprites[1].prefix = "glare_stage_16_eyes_2"
tt.render.sprites[2].prefix = "glare_stage_16_eyelids_2"
tt = E:register_t("decal_stage_16_glare_eye_small_3", "decal_terrain_3_glare_eye_small")
tt.render.sprites[1].prefix = "glare_stage_16_eyes_3"
tt.render.sprites[2].prefix = "glare_stage_16_eyelids_3"
tt = E:register_t("decal_stage_16_overseer_blood", "decal_scripted")
tt.main_script.update = scripts.decal_stage_16_overseer_blood.update
tt.blood_pos = {
	v(20, 20),
	v(100, 100),
	v(-100, 100),
	v(-150, -30),
	v(150, -70),
	v(-30, 40)
}
tt.fx_template = "decal_stage_16_overseer_single_blood_fx"
tt = E:register_t("decal_stage_16_overseer_single_blood_fx", "decal_tween")
tt.render.sprites[1].name = "overseer_fx_overseer_blood"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = false
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt.render.sprites[1].offset = v(20, 20)
tt.tween.remove = true
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		fts(13),
		255
	},
	{
		fts(16),
		0
	}
}
tt = E:register_t("decal_stage_16_death_bright", "decal")
tt.render.sprites[1].prefix = "overseer_deathbrightDef"
tt.render.sprites[1].name = "areaattack"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS_SKY + 1
tt = E:register_t("decal_stage_16_overseer_destroy_holder_bright", "decal_tween")
tt.render.sprites[1].name = "overseer_fx_overseer_destroyray_bright_run"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_BULLETS + 1
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(5),
		255
	},
	{
		fts(25),
		255
	},
	{
		fts(26),
		0
	}
}
tt.tween.remove = true

tt = E:register_t("decal_terrain_4_cheshire_cat_easter_egg", "decal_scripted")

E:add_comps(tt, "ui")

tt.render.sprites[1].prefix = "cheshire_cat_easter_egg_cat"
tt.render.sprites[1].name = "idle"
tt.ui.can_click = true
tt.ui.click_rect = r(-30, -30, 60, 60)
tt.main_script.insert = scripts.decal_terrain_4_cheshire_cat_easter_egg.insert
tt.main_script.update = scripts.decal_terrain_4_cheshire_cat_easter_egg.update
tt.animations_tap = {
	"action_1",
	"action_2",
	"action_3"
}
tt.level_index = nil
tt.appear_cd_min = 7
tt.appear_cd_max = 14
tt.appear_duration_min = 3
tt.appear_duration_max = 7
tt.sound_in = "Terrain4CheshireCatIn"
tt.sound_out = "Terrain4CheshireCatOut"
tt = E:register_t("decal_stage_17_mask_3", "decal")
tt.render.sprites[1].name = "stage17_mask3"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_stage_17_hidden_path_1", "decal")
tt.render.sprites[1].prefix = "hidden_path_01Def"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_stage_17_hidden_path_2", "decal")
tt.render.sprites[1].prefix = "hidden_path_02Def"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_stage_17_hidden_path_unlock_soulcaller", "decal")
tt.render.sprites[1].prefix = "hidden_path_reventant_revenant_roots_reveal"
tt.render.sprites[1].name = "revenant_idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_OBJECTS + 1
tt = E:register_t("decal_stage_17_bubbles", "decal")
tt.render.sprites[1].prefix = "stage_17_bubblesDef"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_stage_17_bubbles_water", "decal")
tt.render.sprites[1].prefix = "stage_17_bubbles_waterDef"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_stage_17_tree_1", "decal_scripted")

E:add_comps(tt, "editor", "ui")

tt.render.sprites[1].prefix = "stage_17_tree_1Def"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS
tt.main_script.update = scripts.decal_stage_17_tree.update
tt.ui.can_click = true
tt.ui.click_rect = r(-75, -290, 90, 80)
tt.sound_tap = "Terrain4HowlingTree"
tt = E:register_t("decal_stage_17_tree_2", "decal_stage_17_tree_1")
tt.render.sprites[1].prefix = "stage_17_tree_2Def"
tt.ui.click_rect = r(-570, -230, 90, 80)
tt = E:register_t("decal_stage_17_tree_3", "decal_stage_17_tree_1")
tt.render.sprites[1].prefix = "stage_17_tree_3Def"
tt.ui.click_rect = r(20, 300, 90, 80)
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_stage_17_tree_4", "decal_stage_17_tree_1")
tt.render.sprites[1].prefix = "stage_17_tree_4Def"
tt.render.sprites[1].z = Z_DECALS
tt.ui.click_rect = r(-227, 270, 90, 80)
tt = E:register_t("decal_stage_18_mask_1", "decal")
tt.render.sprites[1].name = "stage18_mask1"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("decal_stage_18_tree_1", "decal_scripted")

E:add_comps(tt, "editor", "ui")

tt.render.sprites[1].prefix = "stage_18_tree_1Def"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS
tt.main_script.update = scripts.decal_stage_17_tree.update
tt.ui.can_click = true
tt.ui.click_rect = r(-335, -200, 80, 80)
tt.sound_tap = "Terrain4HowlingTree"
tt = E:register_t("decal_stage_18_tree_2", "decal_stage_18_tree_1")
tt.render.sprites[1].prefix = "stage_18_tree_2Def"
tt.ui.click_rect = r(495, -170, 80, 80)
tt = E:register_t("decal_stage_18_bubbles", "decal")
tt.render.sprites[1].prefix = "stage_18_bubblesDef"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_stage_18_bubbles_water", "decal")
tt.render.sprites[1].prefix = "stage_18_bubbles_waterDef"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_stage_18_streetlight_1", "decal_scripted")

E:add_comps(tt, "editor", "editor_script", "ui")

tt.render.sprites[1].prefix = "stage_18_light_1Def"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = -250
tt.main_script.update = scripts.decal_stage_18_streetlight.update
tt.ui.can_click = true
tt.ui.click_rect = r(-60, -210, 30, 40)
tt.sound_break = "Stage18LampBreak"
tt = E:register_t("decal_stage_18_streetlight_2", "decal_stage_18_streetlight_1")
tt.render.sprites[1].prefix = "stage_18_light_2Def"
tt.render.sprites[1].sort_y_offset = 250
tt.ui.click_rect = r(135, 290, 30, 40)
tt = E:register_t("decal_stage_18_streetlight_3", "decal_stage_18_streetlight_1")
tt.render.sprites[1].prefix = "stage_18_light_3Def"
tt.render.sprites[1].sort_y_offset = 223
tt.ui.click_rect = r(535, 263, 30, 40)
tt = E:register_t("decal_stage_18_streetlight_4", "decal_stage_18_streetlight_1")
tt.render.sprites[1].prefix = "stage_18_light_4Def"
tt.render.sprites[1].sort_y_offset = 33
tt.ui.click_rect = r(520, 73, 30, 40)
tt = E:register_t("decal_stage_18_cuckoo", "decal_scripted")

E:add_comps(tt, "ui")

tt.ui.can_click = true
tt.ui.click_rect = r(-30, -30, 60, 60)
tt.main_script.update = scripts.decal_stage_18_cuckoo.update
tt.render.sprites[1].prefix = "cuckoo_easter_egg_door"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_OBJECTS_COVERS + 1
tt.touches_needed = 3
tt.touchable_after_anim = false
tt.reset_touches = false
tt.duration = 0.6
tt.sound_in = "Stage18CuckooIn"
tt.sound_out = "Stage18CuckooOut"
tt = E:register_t("decal_stage_19_mask_1", "decal")
tt.render.sprites[1].name = "stage19_mask1"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = 194
tt = E:register_t("decal_stage_19_mask_2", "decal")
tt.render.sprites[1].name = "stage19_mask2"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("decal_stage_19_mask_3", "decal")
tt.render.sprites[1].name = "stage19_mask3"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("decal_stage_19_statue", "decal_scripted")

E:add_comps(tt, "ui")

tt.ui.can_click = true
tt.ui.click_rect = r(272, 110, 60, 60)
tt.main_script.update = scripts.decal_stage_19_statue.update
tt.render.sprites[1].prefix = "stage_19_statue_decoDef"
tt.render.sprites[1].name = "idle_campaign"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS
tt.sound_12 = "Stage19Statue12"
tt.sound_3 = "Stage19Statue3"
tt = E:register_t("decal_stage_19_statue_hands", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].prefix = "navira_hands"
tt.render.sprites[1].name = "hands_idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_OBJECTS_COVERS + 1
tt.render.sprites[1].draw_order = -1
tt = E:register_t("decal_stage_19_bubbles", "decal")
tt.render.sprites[1].prefix = "stage_19_bubblesDef"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("decal_stage_19_bubbles_water", "decal")
tt.render.sprites[1].prefix = "stage_19_bubbles_waterDef"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("decal_stage_19_smoke", "decal")
tt.render.sprites[1].prefix = "stage_19_smokeDef"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS_COVERS + 1
tt = E:register_t("decal_stage_19_navira_cape", "decal_scripted")

E:add_comps(tt, "tween")

tt.render.sprites[1].prefix = "navira_naviracape"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].z = Z_EFFECTS
tt.main_script.update = scripts.decal_stage_19_navira_cape.update
tt.tween.remove = true
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		fts(67),
		0
	}
}
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].name = "offset"
tt.tween.props[2].keys = {
	{
		0,
		v(25, 50)
	},
	{
		fts(22),
		v(50, 50)
	},
	{
		fts(67),
		v(100, 25)
	}
}

tt = E:register_t("stage20_arborean_house", "unit")
b = balance.specials.stage20_arborean_house

E:add_comps(tt, "editor", "main_script", "info", "vis", "soldier")

tt.info.fn = scripts.stage20_arborean_house.get_info
tt.info.portrait = "gui_bottom_info_image_soldiers_0046"
tt.info.i18n_key = "ARBOREAN_HOUSE_1"
tt.main_script.update = scripts.stage20_arborean_house.update
tt.render.sprites[1].prefix = "arborean_house_base"
tt.render.sprites[1].name = "idle1"
tt.render.sprites[1].animated = true
tt.render.sprites[1].offset.y = 0
tt.life_thresholds = {
	0.66,
	0.33,
	0
}
tt.threshold_fx = "fx_stage_20_arborean_house_hit_1"
tt.threshold_fx_last = "fx_stage_20_arborean_house_hit_2"
tt.unit.hit_offset = v(0, 15)
tt.health.hp_max = b.hp_max
tt.health.hp = b.hp_max
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 45)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM_MEDIUM
tt.health_bar.colors = {}
tt.health_bar.colors.fg = {
	255,
	255,
	0,
	255
}
tt.health_bar.colors.bg = {
	0,
	0,
	0,
	255
}
tt.health.ignore_delete_after = true
tt.ui.click_rect = r(-30, -10, 60, 60)
tt.vis.flags = bor(F_FRIEND, F_RANGED)
tt.vis.bans = bor(F_AREA, F_MOD)
tt = E:register_t("decal_stage_21_mask_1", "decal")
tt.render.sprites[1].name = "stage21_mask1"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("decal_stage_21_mask_2", "decal")
tt.render.sprites[1].name = "stage21_mask2"
tt.render.sprites[1].animated = false
tt.render.sprites[1].sort_y_offset = 1
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("decal_stage_21_mask_3", "decal")
tt.render.sprites[1].name = "stage21_mask3"
tt.render.sprites[1].animated = false
tt.render.sprites[1].sort_y_offset = 2
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("decal_stage_21_mask_4", "decal")
tt.render.sprites[1].name = "stage21_mask4"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("decal_stage_21_bubbles", "decal")
tt.render.sprites[1].prefix = "stage_21_bubbles_02Def"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_stage_21_mask_lianas", "decal")
tt.render.sprites[1].name = "stage21_mask_lianas"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_FLYING_HEROES + 1
tt = E:register_t("decal_stage_21_falling_rocks", "decal_scripted")
b = balance.specials.stage21_falling_rocks

E:add_comps(tt, "editor", "editor_script", "ui")

tt.render.sprites[1].name = "proxy_stage_21_falling_rocks1"
tt.render.sprites[1].name_fallen = "proxy_stage_21_falling_rocks2"
tt.render.sprites[1].animated = false
tt.render.sprites[1].offset = v(0, 50)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].name = "proxy_stage_21_falling_rocks3"
tt.render.sprites[2].animated = false
tt.render.sprites[2].hidden = true
tt.main_script.update = scripts.decal_stage_21_falling_rocks.update
tt.ui.can_click = true
tt.ui.click_rect = r(-20, 5, 40, 80)
tt.damage = b.damage
tt.damage_type = b.damage_type
tt.damage_radius = b.damage_radius
tt.vis_flags = bor(F_AREA)
tt.vis_bans = 0
tt.fall_position = nil
tt.fall_fx = "fx_decal_stage_21_falling_rocks"
tt = E:register_t("decal_stage_22_rune_rock", "decal_scripted")
tt.main_script.update = scripts.decal_stage_22_rune_rock.update
tt.animation_idle = "idle1"
tt.animation_start = "redin"
tt.animation_loop = "redloop"
tt.animation_end = "redout"
tt.render.sprites[1].prefix = "rune_rockDef"
tt.render.sprites[1].name = "idle1"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("decal_stage_22_rune_doors", "decal_scripted")
tt.main_script.update = scripts.decal_stage_22_rune_rock.update
tt.animation_idle = "idleblue"
tt.animation_start = "redin"
tt.animation_loop = "idlered"
tt.animation_end = "redout"
tt.render.sprites[1].prefix = "stage_22_Glow_Rock1Def"
tt.render.sprites[1].name = tt.animation_idle
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[2] = table.deepclone(tt.render.sprites[1])
tt.render.sprites[2].prefix = "stage_22_Glow_Rock2Def"
tt.render.sprites[3] = table.deepclone(tt.render.sprites[1])
tt.render.sprites[3].prefix = "stage_22_Glow_Rock3Def"
tt.render.sprites[3].sort_y_offset = 100
tt.render.sprites[4] = table.deepclone(tt.render.sprites[1])
tt.render.sprites[4].prefix = "stage_22_Glow_Rock4Def"
tt.render.sprites[5] = table.deepclone(tt.render.sprites[1])
tt.render.sprites[5].prefix = "stage_22_Glow_Rock5Def"
tt.render.sprites[5].sort_y_offset = -100
tt.render.sprites[5].z = Z_OBJECTS_COVERS
tt = E:register_t("decal_stage_22_remolino", "decal_scripted")

local b = balance.specials.stage22_remolino

tt.main_script.update = scripts.decal_stage_22_remolino.update
tt.animation_start = "in"
tt.animation_loop = "loop"
tt.animation_end = "out"
tt.render.sprites[1].prefix = "remolino_stage_3_anim"
tt.render.sprites[1].name = tt.animation_start
tt.render.sprites[1].animated = true
tt.render.sprites[1].hidden = true
tt.render.sprites[1].z = Z_DECALS + 1
tt.waves = b

tt = E:register_t("decal_terrain_6_exodia_arm", "decal_scripted")

E:add_comps(tt, "ui")

tt.render.sprites[1].prefix = "DLC_enanos_easter_egg_exodia_arm"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_DECALS
tt.main_script.update = scripts.decal_terrain_6_exodia_part.update
tt.ui.can_click = true
tt.ui.click_rect = r(-15, -5, 30, 20)
tt.sound_click = "Terrain6ExodiaPart"
tt = E:register_t("decal_terrain_6_exodia_arm_2", "decal_terrain_6_exodia_arm")
tt.render.sprites[1].flip_x = true
tt = E:register_t("decal_terrain_6_exodia_head", "decal_terrain_6_exodia_arm")
tt.render.sprites[1].prefix = "DLC_enanos_easter_egg_exodia_head"
tt = E:register_t("decal_terrain_6_exodia_leg", "decal_terrain_6_exodia_arm")
tt.render.sprites[1].prefix = "DLC_enanos_easter_egg_exodia_leg"
tt.ui.click_rect = r(-15, -5, 30, 30)
tt = E:register_t("decal_terrain_6_exodia_leg_2", "decal_terrain_6_exodia_arm")
tt.render.sprites[1].prefix = "DLC_enanos_easter_egg_exodia_leg"
tt.render.sprites[1].flip_x = true
tt.ui.click_rect = r(-15, -5, 30, 30)
tt = E:register_t("decal_stage_23_mask_1", "decal")
tt.render.sprites[1].name = "stage23_mask1"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = 170
tt = E:register_t("decal_stage_23_mask_2", "decal")
tt.render.sprites[1].name = "stage23_mask2"
tt.render.sprites[1].animated = false
tt.render.sprites[1].sort_y_offset = 51
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("decal_stage_23_mask_4", "decal")
tt.render.sprites[1].name = "stage23_mask4"
tt.render.sprites[1].animated = false
tt.render.sprites[1].sort_y_offset = -8
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("decal_stage_23_mask_5", "decal")
tt.render.sprites[1].name = "stage23_mask5"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = 50
tt.render.sprites[1].hidden = false
tt = E:register_t("decal_stage_23_mask_6", "decal")
tt.render.sprites[1].name = "stage23_mask6"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = 123
tt.render.sprites[1].hidden = true
tt = E:register_t("decal_stage_23_snow", "decal")
tt.render.sprites[1].prefix = "dclenanos_stage01_snowfallDef"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_stage_23_torches", "decal")
tt.render.sprites[1].prefix = "dclenanos_stage01_torchesDef"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_stage_23_crane", "decal_scripted")

E:add_comps(tt, "ui")

tt.render.sprites[1].prefix = "DLCenanos_stage1_deco_gruaDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt.main_script.update = scripts.decal_stage_23_crane.update
tt.ui.can_click = true
tt.ui.click_rect = r(400, -220, 110, 100)
tt.sound_tap_1_2 = "Stage23TruckOneShot"
tt.sound_tap_3 = "Stage23TruckTap3"
tt = E:register_t("decal_stage_23_rock", "decal")
tt.render.sprites[1].prefix = "darksteel_guardian_stage_rock"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("decal_stage_24_factory", "decal_scripted")

E:add_comps(tt, "spawner", "editor")

tt.render.sprites[1].prefix = "factoryDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS - 2
tt.main_script.update = scripts.decal_stage_24_factory.update
tt.spawner.eternal = true
tt.sound_factory_turn_on_end = "Stage24FactoryTurnOnEnd"
tt.sound_factory_turn_off = "Stage24FactoryTurnOff"
tt = E:register_t("decal_stage_24_gear_factory", "decal")
tt.render.sprites[1].prefix = "factory2Def"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_stage_24_factory_conveyor_belt", "decal")
tt.render.sprites[1].prefix = "dlc_enanos_stage_02_LAYERS_factorygate"
tt.render.sprites[1].name = "activeloop"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].draw_order = 1
tt.render.sprites[1].hidden = true
tt = E:register_t("decal_stage_24_factory_sparks", "decal_scripted")
tt.render.sprites[1].prefix = "dlc_dwarf_boss_operator_sparks"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = false
tt.render.sprites[1].z = Z_DECALS + 1
tt.render.sprites[1].hidden = true
tt.main_script.update = scripts.decal_stage_24_factory_sparks.update
tt = E:register_t("decal_stage_24_elevator", "decal_scripted")

E:add_comps(tt, "editor")

tt.render.sprites[1].prefix = "ascensorDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS - 1
tt.main_script.update = scripts.decal_stage_24_elevator.update
tt.sound_machinist_in = "Stage24MachinistEnter"
tt.sound_machinist_out = "Stage24MachinistExit"
tt = E:register_t("decal_stage_24_mask_1", "decal")
tt.render.sprites[1].name = "stage24_mask1"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].draw_order = 1
tt.render.sprites[1].hidden = true
tt = E:register_t("decal_stage_24_mask_2", "decal")
tt.render.sprites[1].name = "stage24_mask2"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("decal_stage_24_mask_3", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].name = "stage24_mask3"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("decal_stage_24_mask_4", "decal")
tt.render.sprites[1].name = "stage24_mask4"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].hidden = true
tt.render.sprites[1].sort_y_offset = 44
tt = E:register_t("decal_stage_24_mask_5", "decal")
tt.render.sprites[1].name = "stage24_mask5"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_stage_24_mask_6", "decal")
tt.render.sprites[1].name = "stage24_mask6"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].hidden = true
tt.render.sprites[1].sort_y_offset = 95
tt = E:register_t("decal_stage_24_fans", "decal")
tt.render.sprites[1].prefix = "stage2dlcanimsfansDef"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("decal_stage_24_gears", "decal")
tt.render.sprites[1].prefix = "stage2dlcanimstuercasDef"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("decal_stage_24_gear_floor", "decal_scripted")

E:add_comps(tt, "ui")

tt.render.sprites[1].prefix = "dlc_enanos_stage_02_LAYERS_gear"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].z = Z_OBJECTS
tt.main_script.update = scripts.decal_stage_24_gears.update
tt.ui.click_rect = r(-25, -5, 50, 35)
tt = E:register_t("decal_stage_24_gear_tower", "decal_scripted")

E:add_comps(tt, "ui")

tt.render.sprites[1].prefix = "towerDef"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].z = Z_OBJECTS
tt.main_script.update = scripts.decal_stage_24_gears.update
tt.ui.click_rect = r(15, -35, 40, 65)
tt = E:register_t("decal_stage_24_bubble", "decal_scripted")
tt.render.sprites[1].prefix = "lavabubbleDef"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = false
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt.render.sprites[1].hidden = true
tt.main_script.update = scripts.decal_stage_24_bubble.update
tt = E:register_t("decal_stage_24_dust", "decal")
tt.render.sprites[1].prefix = "t5_dustDef"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS_COVERS + 1
tt = E:register_t("decal_stage_24_smoke", "decal")
tt.render.sprites[1].prefix = "t5_smokeDef"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS_COVERS + 1
tt = E:register_t("decal_stage_24_upgrade_station", "decal_scripted")

local b = balance.specials.stage24_upgrade_station

tt.render.sprites[1].prefix = "converterDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS
tt.main_script.update = scripts.decal_stage_24_upgrade_station.update
tt.hammerer_t = "enemy_darksteel_hammerer"
tt.fist_t = "enemy_darksteel_fist"
tt.wave_config = b.wave_config
tt.path_in = 8
tt.path_out = 9
tt.sound_open = "Stage24UpgradeStationIn"
tt.sound_close = "Stage24UpgradeStationOut"
tt.sound_transform = "Stage24UpgradeStationTransform"
tt = E:register_t("decal_stage_24_modes_decos", "decal_scripted")

E:add_comps(tt, "editor")

tt.render.sprites[1].prefix = "stage2DLC_ascensor_modosDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt.main_script.update = scripts.decal_stage_24_modes_decos.update
tt = E:register_t("decal_stage_25_mask_1", "decal")
tt.render.sprites[1].name = "stage25_mask1"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = 32
tt = E:register_t("decal_stage_25_mask_2", "decal")
tt.render.sprites[1].name = "stage25_mask2"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = 18
tt = E:register_t("decal_stage_25_mask_2_glow", "decal_tween")
tt.render.sprites[1].name = "stage25_mask2_glow"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = 19
tt.render.sprites[1].alpha = 0
tt.tween.disabled = true
tt.tween.remove = false
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(30),
		255
	}
}
tt = E:register_t("decal_stage_25_mask_3", "decal")
tt.render.sprites[1].name = "stage25_mask3"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = 4
tt = E:register_t("decal_stage_25_mask_4", "decal")
tt.render.sprites[1].name = "stage25_mask4"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("decal_stage_25_torso", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].prefix = "DLC_stage3_dwarf_machinistDef"
tt.render.sprites[1].name = "idle_doors"
tt.render.sprites[1].exo = true
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("decal_stage_25_torso_modes", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].prefix = "DLC_stage3_dwarf_machinist_modesDef"
tt.render.sprites[1].name = "idle_doors"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("decal_stage_25_fist", "decal")
tt.render.sprites[1].prefix = "DLC_stage3_robot_armDef"
tt.render.sprites[1].name = "in"
tt.render.sprites[1].exo = true
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = -20
tt = E:register_t("decal_stage_25_fist_shadow", "decal")
tt.render.sprites[1].prefix = "DLC_stage3_robot_arm_decalsDef"
tt.render.sprites[1].name = "in"
tt.render.sprites[1].exo = true
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_stage_25_dwarf_intro", "decal_timed")
tt.render.sprites[1].prefix = "DLC_stage3_dwarf_inDef"
tt.render.sprites[1].name = "in"
tt.render.sprites[1].exo = true
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_OBJECTS_SKY
tt = E:register_t("decal_mod_stage_25_torso_missile_stun_water", "decal_timed")
tt.render.sprites[1].name = "DLC_stage_03_missile_water_splash"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = -9
tt.render.sprites[1].offset = v(0, 5)
tt = E:register_t("decal_mod_stage_25_torso_missile_stun_hand", "decal_tween")
tt.render.sprites[1].prefix = "DLC_stage_03_missile_tower_block_tap"
tt.render.sprites[1].name = "tap"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt.render.sprites[1].offset = v(23, 10)
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(15),
		255
	},
	{
		fts(45),
		255
	},
	{
		fts(60),
		0
	}
}
tt.tween.remove = true

tt = E:register_t("decal_mod_stage_29_holder_block_hand", "decal_tween")
tt.render.sprites[1].prefix = "spiderholder_block_tap"
tt.render.sprites[1].name = "tap"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].z = Z_OBJECTS_SKY
tt.render.sprites[1].offset = v(23, 50)
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(15),
		255
	},
	{
		fts(45),
		255
	},
	{
		fts(60),
		0
	}
}
tt.tween.remove = true

tt = E:register_t("decal_stage_25_solid_snake", "decal_scripted")

E:add_comps(tt, "ui")

tt.render.sprites[1].prefix = "DLC_Enanos_S3_EasterEgg_SolidSnakeDef"
tt.render.sprites[1].name = "idle_1"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt.main_script.update = scripts.decal_stage_25_solid_snake.update
tt.ui.can_click = true
tt.ui.click_rect = r(-325, 290, 50, 45)
tt.click_rect_1 = r(-325, 290, 50, 45)
tt.click_rect_2 = r(-335, 283, 50, 45)
tt.sound_1_2 = "Stage25SolidSnakeTap12"
tt.sound_3 = "Stage25SolidSnakeTap3"
tt = E:register_t("decal_stage_26_mask_1", "decal")
tt.render.sprites[1].name = "DLC_enanos_stage_04_mask_1"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_BACKGROUND_COVERS
tt = E:register_t("decal_stage_26_mask_2", "decal")
tt.render.sprites[1].name = "DLC_enanos_stage_04_mask_2"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_BACKGROUND_COVERS
tt = E:register_t("decal_stage_26_mask_3", "decal")
tt.render.sprites[1].name = "DLC_enanos_stage_04_mask_3"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_BACKGROUND_COVERS
tt = E:register_t("decal_stage_26_mask_4", "decal")
tt.render.sprites[1].name = "DLC_enanos_stage_04_mask_4"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = 200
tt = E:register_t("decal_stage_26_mask_5", "decal")
tt.render.sprites[1].name = "DLC_enanos_stage_04_mask_5"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("decal_stage_26_foreground_1", "decal")
tt.render.sprites[1].name = "DLC_enanos_stage_04_foreground_a"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS_SKY
tt = E:register_t("decal_stage_26_foreground_2", "decal")
tt.render.sprites[1].name = "DLC_enanos_stage_04_foreground_b"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS_SKY
tt = E:register_t("decal_stage_26_mewtwo_capsules", "decal_scripted")

E:add_comps(tt, "ui")

tt.render.sprites[1].prefix = "DLC_Enanos_S4_EasterEgg_Mewtwo_CanistersDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt.main_script.update = scripts.decal_stage_26_mewtwo.update
tt.ui.can_click = true
tt.ui.click_rect = r(100, 270, 50, 80)
tt.mewtwo_t = "decal_stage_26_mewtwo"
tt.sound_1_2 = "Stage26MewtwoTap12"
tt.sound_3 = "Stage26MewtwoTap3"
tt.sound_end = "Stage26MewtwoFlightFullSequence"
tt = E:register_t("decal_stage_26_mewtwo", "decal_timed")

E:add_comps(tt, "ui")

tt.render.sprites[1].prefix = "DLC_Enanos_S4_EasterEgg_MewtwoDef"
tt.render.sprites[1].name = "spawn"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = false
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECT
tt = E:register_t("decal_stage_26_boss", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].prefix = "DLC_Enanos_S4_Boss01Def"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = 104
tt = E:register_t("decal_stage_26_clone_spawner", "decal")
tt.render.sprites[1].prefix = "DLC_Enanos_S4_ElevatorDef"
tt.render.sprites[1].name = "idle_1"
tt.render.sprites[1].exo = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("decal_stage_26_tube_left", "decal")
tt.render.sprites[1].prefix = "DLC_Enanos_S4_ElevatorTubeADef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_BACKGROUND
tt = E:register_t("decal_stage_26_tube_right", "decal")
tt.render.sprites[1].prefix = "DLC_Enanos_S4_ElevatorTubeBDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_BACKGROUND
tt = E:register_t("decal_stage_26_fist_spawner", "decal")
tt.render.sprites[1].prefix = "DLC_Enanos_S4_CloneActivatorDef"
tt.render.sprites[1].name = "idle_1"
tt.render.sprites[1].exo = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_stage_26_fist_spawner_light", "decal")
tt.render.sprites[1].prefix = "DLC_Enanos_S4_ActivatorLightDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("decal_stage_26_hulk_spawner", "decal")
tt.render.sprites[1].prefix = "DLC_Enanos_S4_HulkSpawnerDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "DLC_Enanos_S4_HulkSpawnerSyringeDef"
tt.render.sprites[2].name = "idle"
tt.render.sprites[2].exo = true
tt.render.sprites[2].loop = true
tt.render.sprites[2].animated = true
tt.render.sprites[2].z = Z_OBJECTS_COVERS
tt = E:register_t("decal_stage_26_gears_front", "decal")
tt.render.sprites[1].prefix = "DLC_Enanos_S4_GearsDef"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].exo = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("decal_stage_26_gears_back", "decal")
tt.render.sprites[1].prefix = "DLC_Enanos_S4_GearsBackDef"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].exo = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_BACKGROUND
tt = E:register_t("decal_stage_26_bubbles", "decal")
tt.render.sprites[1].prefix = "DLC_Enanos_S4_BubblesDef"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].exo = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].animated = true
tt.render.sprites[1].hidden = true
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("decal_stage_26_modes_decos", "decal_scripted")

E:add_comps(tt, "editor")

tt.render.sprites[1].prefix = "DLCstage4_deco_modosDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt.main_script.update = scripts.decal_stage_26_modes_decos.update
tt = E:register_t("decal_stage_27_mask_1", "decal")
tt.render.sprites[1].name = "stage27_mask1"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_BACKGROUND_COVERS
tt.render.sprites[1].draw_order = 3
tt = E:register_t("decal_stage_27_mask_2", "decal")
tt.render.sprites[1].name = "stage27_mask2"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("decal_stage_27_mask_3", "decal")
tt.render.sprites[1].name = "stage27_mask3"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].hidden = true
tt = E:register_t("decal_stage_27_mask_4", "decal")
tt.render.sprites[1].name = "stage27_mask4"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_BACKGROUND_COVERS
tt.render.sprites[1].draw_order = 2
tt = E:register_t("decal_stage_27_mask_5", "decal")
tt.render.sprites[1].name = "stage27_mask5"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_BACKGROUND_COVERS
tt.render.sprites[1].draw_order = 2
tt = E:register_t("decal_stage_27_snow", "decal")
tt.render.sprites[1].prefix = "dclenanos_stage05_snowfallDef"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_EFFECTS
tt = E:register_t("decal_stage_27_platform", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].prefix = "dclenanos_stage05_platformDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_BACKGROUND_COVERS
tt = E:register_t("decal_stage_27_platform_bars", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].prefix = "dclenanos_stage05_platform_barsDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_BACKGROUND_BETWEEN
tt = E:register_t("decal_stage_27_cannon_right", "decal")
tt.render.sprites[1].prefix = "dlcenanos_stage05_cannonDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].hidden = true
tt.render.sprites[1].z = Z_BACKGROUND_BETWEEN
tt.shot_pos = v(924, 509)
tt.shot_target_pos = v(815, 364)
tt = E:register_t("decal_stage_27_cannon_left", "decal")
tt.render.sprites[1].prefix = "dlcenanos_stage05_cannonDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].flip_x = true
tt.render.sprites[1].hidden = true
tt.render.sprites[1].z = Z_BACKGROUND_BETWEEN
tt.shot_pos = v(238, 532)
tt.shot_target_pos = v(361, 345)
tt = E:register_t("decal_stage_27_clone_dead", "decal_tween")
tt.render.sprites[1].prefix = "cannonLAYERS_clonedecorative"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = false
tt.render.sprites[1].z = Z_OBJECTS
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		fts(30),
		255
	},
	{
		fts(55),
		0
	}
}
tt.tween.remove = true
tt = E:register_t("decal_stage_27_clone_alive", "decal_timed")
tt.render.sprites[1].prefix = "cannonLAYERS_cloneland"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = false
tt.render.sprites[1].z = Z_OBJECTS
tt.timed.runs = 1
tt = E:register_t("decal_stage_27_head", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].prefix = "dclenanos_stage05_headDef"
tt.render.sprites[1].name = "headdeathsmokeidle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_BACKGROUND_COVERS
tt.render.sprites[1].draw_order = 1
tt = E:register_t("decal_stage_27_ray", "decal")
tt.render.sprites[1].prefix = "dclenanos_stage05_headrayDef"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt.render.sprites[1].scale = vv(2)
tt = E:register_t("decal_stage_27_goblins", "decal")
tt.render.sprites[1].prefix = "dclenanos_head_goblinsDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = -350
tt = E:register_t("decal_stage_27_smoke_back", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].prefix = "dclenanos_stage05_HeadSmokeBackDef"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_BACKGROUND_BETWEEN
tt = E:register_t("decal_stage_27_smoke_front", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].prefix = "dclenanos_stage05_HeadSmokeFrontDef"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_BACKGROUND_COVERS + 1
tt = E:register_t("decal_stage_27_sparks", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].prefix = "dclenanos_stage05_HeadSparksDef"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_BACKGROUND_COVERS + 1
tt = E:register_t("decal_stage_27_modes_decos", "decal_scripted")

E:add_comps(tt, "editor", "ui")

tt.render.sprites[1].prefix = "DLCstage5_deco_modosDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt.main_script.update = scripts.decal_stage_27_modes_decos.update
tt.ui.can_click = true
tt.ui.click_rect = r(-33, 60, 20, 20)
tt = E:register_t("decal_stage_27_beam", "decal_scripted")

E:add_comps(tt, "ui", "editor")

tt.render.sprites[1].prefix = "DLCstage5_enanos_vigaDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_BACKGROUND_BETWEEN
tt.main_script.update = scripts.decal_stage_27_beam.update
tt.ui.can_click = true
tt.ui.click_rect = r(-470, 200, 150, 60)
tt.sound_prefix = "Stage27BeamWorkersTap"
tt = E:register_t("decal_boss_grymbeard_area_attack", "decal_tween")
tt.render.sprites[1].prefix = "dclenanos_stage05_grymbossdecalDef"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].loop = false
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		fts(30),
		255
	},
	{
		fts(60),
		0
	}
}
tt.tween.remove = true
tt = E:register_t("decal_bullet_boss_grymbeard", "decal_tween")
tt.render.sprites[1].prefix = "dclenanos_stage05_grymmissiledecalDef"
tt.render.sprites[1].name = "decal"
tt.render.sprites[1].loop = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		fts(30),
		255
	},
	{
		fts(60),
		0
	}
}
tt.tween.remove = true
tt = E:register_t("decal_bullet_boss_grymbeard_death_clone", "decal_stage_27_clone_dead")
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		1e+99,
		255
	}
}
tt = E:register_t("decal_bullet_boss_grymbeard_death_boss", "decal")
tt.render.sprites[1].prefix = "dclenanos_stage05_grymbossflyDef"
tt.render.sprites[1].name = "land"
tt.render.sprites[1].loop = false
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("decal_bullet_boss_grymbeard_death_scrap_1", "decal")
tt.render.sprites[1].prefix = "dclenanos_stage05_grymdebree1Def"
tt.render.sprites[1].name = "land"
tt.render.sprites[1].loop = false
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("decal_bullet_boss_grymbeard_death_scrap_2", "decal_bullet_boss_grymbeard_death_scrap_1")
tt.render.sprites[1].prefix = "dclenanos_stage05_grymdebree2Def"

tt = E:register_t("decal_stage_22_puerta1", "decal")
tt.render.sprites[1].name = "stage_22_puerta1"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("decal_stage_22_puerta2", "decal")
tt.render.sprites[1].name = "stage_22_puerta2"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("decal_stage_22_puerta3", "decal")
tt.render.sprites[1].name = "stage_22_puerta3"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = 290
tt = E:register_t("decal_stage_22_puerta4", "decal")
tt.render.sprites[1].name = "stage_22_puerta4"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = 290
tt = E:register_t("decal_stage_22_puerta5", "decal")
tt.render.sprites[1].name = "stage_22_puerta5"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("decal_stage_22_puerta6", "decal")
tt.render.sprites[1].name = "stage_22_puerta6"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("decal_stage_22_sombras", "decal")
tt.render.sprites[1].name = "stage_22_sombras"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS_SKY
tt = E:register_t("decal_stage_22_water_vfx1", "decal")
tt.render.sprites[1].prefix = "stage_22_bubbles_01Def"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_stage_22_water_vfx2", "decal_stage_22_water_vfx1")
tt.render.sprites[1].prefix = "stage_22_bubbles_02Def"
tt = E:register_t("decal_stage_22_easteregg_sheepy", "decal_scripted")

E:add_comps(tt, "ui")

tt.main_script.update = scripts.decal_stage_22_easteregg_sheepy.update
tt.render.sprites[1].prefix = "croco_sheepy"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_OBJECTS
tt.ui.can_click = true
tt.ui.click_rect = r(-15, -5, 30, 50)
tt = E:register_t("decal_stage20_ruperto_easter_egg", "decal_scripted")

E:add_comps(tt)

tt.render.sprites[1].prefix = "anim_arborean_ruperto_arborean"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.main_script.update = scripts.decal_stage20_ruperto_easter_egg.update
tt.animations_random = {
	"action1",
	"action2"
}
tt.appear_cd_min = 7
tt.appear_cd_max = 14
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_stage20_ruperto_ruperto_easter_egg", "decal_scripted")

E:add_comps(tt)

tt.render.sprites[1].name = "anim_arborean_ruperto_ruperto"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_achievement_stage_21_croc_boat", "decal_scripted")

E:add_comps(tt, "ui")

tt.ui.can_click = true
tt.ui.click_rect = r(-55, -20, 90, 60)
tt.main_script.update = scripts.decal_achievement_stage_21_croc_boat.update
tt.touches_needed = 2
tt.render.sid_croc = 3
tt.render.sprites[1].name = "Achievement_lagarto_juancho_boat"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].offset = v(-8, -20)
tt.render.sprites[1].anchor = v(0.5833333333333334, 0.21052631578947367)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].name = "Achievement_lagarto_juancho_water"
tt.render.sprites[2].animated = false
tt.render.sprites[2].z = Z_OBJECTS
tt.render.sprites[2].anchor = v(0.7289156626506024, 0.29464285714285715)
tt.render.sprites[2].offset = v(-2, -16)
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].prefix = "Achievement_lagarto_juancho_creep"
tt.render.sprites[3].name = "idle1"
tt.render.sprites[3].animated = true
tt.render.sprites[3].z = Z_OBJECTS
tt.render.sprites[3].anchor = v(0.5, 0.38636363636363635)
tt.sound_engine_fail = "Stage21JuanchoEngineFail"
tt.sound_engine_success = "Stage21JuanchoEngineSuccess"
tt = E:register_t("decal_achievement_stage_22_croc_king", "decal_scripted")

E:add_comps(tt, "ui")

tt.ui.can_click = true
tt.ui.click_rect = r(-20, -10, 40, 40)
tt.main_script.update = scripts.decal_achievement_stage_22_croc_king.update
tt.render.sprites[1].prefix = "achievement_donkey_kong_creep"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].anchor = vv(0.5)
tt = E:register_t("decal_stage_21_dragonfly_1", "decal_delayed_play")
tt.render.sprites[1].z = Z_OBJECTS_SKY
tt.main_script.update = scripts.delayed_play_kr5.update
tt.render.sprites[1].prefix = "stage_21_dragonfly_01Def"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].exo = true
tt.render.sprites[1].loop = false
tt.delayed_play.idle_animation = nil
tt.delayed_play.play_animation = "loop"
tt.delayed_play.min_delay = 15
tt.delayed_play.max_delay = 35
tt.delayed_play.start_min_delay = 1
tt.delayed_play.start_max_delay = 3
tt = E:register_t("decal_stage_21_dragonfly_2", "decal_stage_21_dragonfly_1")
tt.render.sprites[1].prefix = "stage_21_dragonfly_02Def"
tt.delayed_play.start_min_delay = 13
tt.delayed_play.start_max_delay = 20
tt = E:register_t("decal_stage_21_particlesLeft", "decal_delayed_play")
tt.render.sprites[1].z = Z_OBJECTS_SKY
tt.main_script.update = scripts.delayed_play_kr5.update
tt.render.sprites[1].prefix = "stage_21_particlesDef"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].exo = true
tt.render.sprites[1].loop = false
tt.delayed_play.idle_animation = nil
tt.delayed_play.play_animation = "loop"
tt.delayed_play.min_delay = 15
tt.delayed_play.max_delay = 35

tt = E:register_t("decal_stage_28_mask_1", "decal")
tt.render.sprites[1].name = "stage_28_mask_01"
tt.render.sprites[1].animated = false
tt.render.sprites[1].sort_y_offset = 106
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("decal_stage_28_mask_2", "decal")
tt.render.sprites[1].name = "stage_28_mask_02"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("decal_stage_28_mask_3", "decal")
tt.render.sprites[1].name = "stage_28_mask_03"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_TOWER_BASES
tt = E:register_t("decal_stage_28_torches", "decal")
tt.render.sprites[1].prefix = "stage_28_antorchasDef"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].sort_y_offset = 200
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("decal_achievement_into_the_ogreverse", "decal_scripted")

E:add_comps(tt, "ui")

tt.ui.can_click = true
tt.ui.click_rect = r(-20, -40, 40, 50)
tt.main_script.update = scripts.decal_achievement_into_the_ogreverse.update
tt.render.sprites[1].name = "ogreverse_web"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].anchor = v(0.5, 0)
tt.render.sprites[1].sort_y_offset = -30
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "ogreverse_character"
tt.render.sprites[2].name = "cultist_idle"
tt.render.sprites[2].z = Z_OBJECTS
tt.render.sprites[2].offset = v(0, 20)
tt.render.sprites[2].anchor = vv(0.5)
tt.render.sprites[2].sort_y_offset = -30
tt = E:register_t("decal_achievement_a_coon_of_surprises_fredo", "decal_scripted")

E:add_comps(tt, "ui")

tt.ui.can_click = true
tt.ui.click_rect = r(-20, -50, 40, 40)
tt.main_script.update = scripts.decal_achievement_a_coon_of_surprises.update
tt.give_achievement = true
tt.required_touches = 3
tt.change_z_time = fts(8)
tt.change_y_sort_offset = -160
tt.render.sid_animated = 2
tt.render.sprites[1].name = "coonsuprices_cuerdafredo"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS_SKY
tt.render.sprites[1].anchor = v(0.5, 0.11538461538461539)
tt.render.sprites[tt.render.sid_animated] = E:clone_c("sprite")
tt.render.sprites[tt.render.sid_animated].prefix = "coonsuprices_fredo"
tt.render.sprites[tt.render.sid_animated].name = "idle"
tt.render.sprites[tt.render.sid_animated].z = Z_OBJECTS_SKY
tt.render.sprites[tt.render.sid_animated].offset = v(5, 4)
tt.render.sprites[tt.render.sid_animated].anchor = v(0.5, 0.973404255319149)
tt = E:register_t("decal_achievement_a_coon_of_surprises_silksong", "decal_achievement_a_coon_of_surprises_fredo")

E:add_comps(tt, "ui")

tt.give_achievement = false
tt.change_z_time = fts(36)
tt.change_y_sort_offset = -400
tt.ui.click_rect = r(-18, -70, 40, 60)
tt.render.sprites[1].name = "coonsuprices_cuerdasilksong"
tt.render.sprites[1].anchor = v(0.5, 0.23958333333333334)
tt.render.sprites[tt.render.sid_animated].prefix = "coonsuprices_silksong"
tt.render.sprites[tt.render.sid_animated].name = "idle"
tt.render.sprites[tt.render.sid_animated].offset = v(2, -30)
tt.render.sprites[tt.render.sid_animated].anchor = vv(0.5)
tt = E:register_t("decal_achievement_a_coon_of_surprises_jarra", "decal_achievement_a_coon_of_surprises_fredo")

E:add_comps(tt, "ui")

tt.give_achievement = false
tt.change_z_time = fts(32)
tt.change_y_sort_offset = -210
tt.ui.click_rect = r(-20, -60, 47, 55)
tt.render.sprites[1].name = "coonsuprices_cuerdajarra"
tt.render.sprites[1].anchor = v(0.5, 0.23958333333333334)
tt.render.sprites[tt.render.sid_animated].prefix = "coonsuprices_jarra"
tt.render.sprites[tt.render.sid_animated].name = "idle"
tt.render.sprites[tt.render.sid_animated].offset = v(-2, -22)
tt.render.sprites[tt.render.sid_animated].anchor = vv(0.5)
tt = E:register_t("decal_achievement_a_coon_of_surprises_darkcrystal", "decal_achievement_a_coon_of_surprises_fredo")

E:add_comps(tt, "ui")

tt.give_achievement = false
tt.change_z_time = fts(37)
tt.change_y_sort_offset = -260
tt.ui.click_rect = r(-20, -80, 40, 80)
tt.render.sprites[1].name = "coonsuprices_cuerdadarkcrystal"
tt.render.sprites[1].anchor = v(0.5, 0.23958333333333334)
tt.render.sprites[tt.render.sid_animated].prefix = "coonsuprices_darkcrystal"
tt.render.sprites[tt.render.sid_animated].name = "idle"
tt.render.sprites[tt.render.sid_animated].offset = v(0, 0)
tt.render.sprites[tt.render.sid_animated].anchor = vv(0.5)
tt = E:register_t("decal_achievement_a_coon_of_surprises_sheepy", "decal_achievement_a_coon_of_surprises_fredo")

E:add_comps(tt, "ui")

tt.give_achievement = false
tt.change_z_time = fts(30)
tt.change_y_sort_offset = -336
tt.ui.click_rect = r(-17, -60, 40, 70)
tt.render.sprites[1].name = "coonsuprices_cuerdadarkcrystal"
tt.render.sprites[1].anchor = v(0.5, 0.23958333333333334)
tt.render.sprites[tt.render.sid_animated].prefix = "coonsuprices_sheepy"
tt.render.sprites[tt.render.sid_animated].name = "idle"
tt.render.sprites[tt.render.sid_animated].offset = v(0, 0)
tt.render.sprites[tt.render.sid_animated].anchor = v(0.5, 0.5173913043478261)
tt = E:register_t("decal_achievement_a_coon_of_surprises_arak", "decal_achievement_a_coon_of_surprises_fredo")

E:add_comps(tt, "ui")

tt.give_achievement = false
tt.ui.click_rect = r(-20, -40, 62, 75)
tt.change_y_sort_offset = 0
tt.render.sid_animated = 1
tt.render.sprites[2] = nil
tt.render.sprites[tt.render.sid_animated].z = Z_OBJECTS
tt.render.sprites[tt.render.sid_animated].prefix = "coonsuprices_arak"
tt.render.sprites[tt.render.sid_animated].name = "idle"
tt.render.sprites[tt.render.sid_animated].animated = true
tt.render.sprites[tt.render.sid_animated].anchor = vv(0.5)
tt = E:register_t("decal_achievement_lucas_spider", "decal_scripted")

E:add_comps(tt, "ui")

tt.ui.can_click = true
tt.ui.click_rect = r(-20, -10, 40, 40)
tt.main_script.update = scripts.decal_achievement_lucas_spider.update
tt.render.sprites[1].prefix = "export_easter_egg_lucas"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].anchor = vv(0.5)
tt = E:register_t("decal_stage_29_background_eyes", "decal")
tt.render.sprites[1].prefix = "spiders_stage29_eyes_stageDef"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("mask_stage_30_1", "decal")
tt.render.sprites[1].name = "stage_30_mask_01"
tt.render.sprites[1].animated = false
tt.render.sprites[1].sort_y_offset = -60
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("mask_stage_30_2", "decal")
tt.render.sprites[1].name = "stage_30_mask_02"
tt.render.sprites[1].animated = false
tt.render.sprites[1].sort_y_offset = -112
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("mask_stage_30_3", "decal")
tt.render.sprites[1].name = "stage_30_mask_03"
tt.render.sprites[1].animated = false
tt.render.sprites[1].sort_y_offset = 0
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("mask_stage_30_4", "decal")
tt.render.sprites[1].name = "stage_30_mask_04"
tt.render.sprites[1].animated = false
tt.render.sprites[1].sort_y_offset = 0
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("mask_stage_30_5", "decal")
tt.render.sprites[1].name = "stage_30_mask_05"
tt.render.sprites[1].animated = false
tt.render.sprites[1].sort_y_offset = 0
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("decal_stage_30_door", "decal_scripted")
b = balance.specials.stage30_door
tt.render.sprites[1].prefix = "stage_30_spider_doorDef"
tt.render.sprites[1].name = "idle1"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].sort_y_offset = 100
tt.render.sprites[1].z = Z_OBJECTS
tt.main_script.update = scripts.decal_stage_30_door.update
tt.animation_idle_open = "idle2"
tt.animation_idle_closed = "idle1"
tt.animation_open = "open"
tt.animation_close = "close"
tt.waves = b

tt = E:register_t("debug_path_renderer", "decal_scripted")

E:add_comps(tt, "editor", "editor_script")

tt.render.sprites[1].z = Z_BACKGROUND + 1
tt.path_debug = {}
tt.path_debug.background_color = {
	255,
	255,
	255,
	0
}
tt.path_debug.path_color = {
	255,
	0,
	0,
	0
}
tt.main_script.update = scripts.debug_path_renderer.insert
tt.editor_script.update = scripts.debug_path_renderer.editor_update
tt = E:register_t("tool_auto_player", "decal_scripted")
tt.auto_player = {}
tt.auto_player.enemies = {
	{
		"enemy_hog_invader",
		"enemy_tusked_brawler",
		"enemy_turtle_shaman",
		"enemy_bear_vanguard",
		"enemy_cutthroat_rat",
		"enemy_dreadeye_viper",
		"enemy_surveyor_harpy",
		"enemy_skunk_bombardier",
		"enemy_hyena5",
		"enemy_rhino"
	},
	{
		"enemy_acolyte",
		"enemy_lesser_sister",
		"enemy_lesser_sister_nightmare",
		"enemy_unblinded_priest",
		"enemy_small_stalker",
		"enemy_unblinded_abomination",
		"enemy_spiderling",
		"enemy_unblinded_shackler",
		"enemy_crystal_golem",
		"enemy_corrupted_stalker"
	},
	{
		"enemy_unblinded_abomination",
		"enemy_glareling",
		"enemy_blinker",
		"enemy_mindless_husk",
		"enemy_vile_spawner",
		"enemy_noxious_horror",
		"enemy_hardened_horror",
		"enemy_evolving_scourge",
		"enemy_amalgam"
	},
	{
		"enemy_corrupted_elf",
		"enemy_specter",
		"enemy_dust_cryptid",
		"enemy_bane_wolf",
		"enemy_deathwood",
		"enemy_animated_armor",
		"enemy_revenant_soulcaller",
		"enemy_revenant_harvester"
	},
	{
		"enemy_crocs_basic_egg",
		"enemy_crocs_basic",
		"enemy_quickfeet_gator_chicken_leg",
		"enemy_killertile",
		"enemy_crocs_flier",
		"enemy_crocs_ranged",
		"enemy_crocs_shaman",
		"enemy_crocs_tank",
		"enemy_crocs_egg_spawner",
		"enemy_crocs_hydra"
	},
	{
		"enemy_darksteel_hammerer",
		"enemy_darksteel_shielder",
		"enemy_surveillance_sentry",
		"enemy_mad_tinkerer",
		"enemy_scrap_drone",
		"enemy_brute_welder",
		"enemy_scrap_speedster",
		"enemy_common_clone",
		"enemy_darksteel_fist",
		"enemy_darksteel_guardian",
		"enemy_darksteel_anvil",
		"enemy_darksteel_hulk"
	},
	{
		"enemy_spiderling",
		"enemy_spider_priest",
		"enemy_glarenwarden",
		"enemy_ballooning_spider",
		"enemy_spider_sister"
	}
}
tt.auto_player.excluded_towers = {
	"tower_arborean_sentinels",
	"decal_stage_11_veznan",
	"tower_stage_13_sunray",
	"tower_stage_17_weirdwood",
	"tower_stage_18_elven_barrack"
}
tt.auto_player.spawn_enemy_interval = 1
tt.auto_player.tower_update_interval = 1
tt.auto_player.tower_sell_chance = 0.05
tt.main_script.insert = scripts.tool_auto_player.insert
tt.main_script.update = scripts.tool_auto_player.update
tt = E:register_t("decal_debug_range", "decal_rally_range")

E:add_comps(tt, "timed", "main_script")

tt.radius = nil
tt.render.sprites[1].name = "range_circle"
tt.render.sprites[2].name = "range_circle"
tt.render.sprites[3].name = "range_circle"
tt.render.sprites[4].name = "range_circle"
tt.timed.duration = 1
tt.timed.runs = nil

function tt.main_script.insert(this, store)
	for i = 1, 4 do
		this.render.sprites[i].scale.x = (i % 2 == 0 and -1 or 1) * this.radius / this.actual_radius
		this.render.sprites[i].scale.y = (i > 2 and -1 or 1) * ASPECT * this.radius / this.actual_radius
		this.render.sprites[i].ts = store.tick_ts
	end

	return true
end

function tt.main_script.update(this, store)
	log.info("Updating")
end

tt = E:register_t("screen_focus_circle", "decal_scripted")

E:add_comps(tt, "tween")

tt.render.sprites[1].z = Z_EFFECTS
tt.main_script.insert = scripts.screen_focus_circle.insert
tt.main_script.update = scripts.screen_focus_circle.update
tt.tween.disabled = true
tt.tween.remove = false
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(30),
		255
	}
}
tt.circle_pos = v(512, 384)
tt.circle_radius = 120
tt.circle_gradient_size = 60
tt.black_opacity = 140
tt = E:register_t("stage_01_tower_build_indicator", "decal_tween")
tt.render.sprites[1].name = "tutorial_floor_circle_glow_big"
tt.render.sprites[1].animated = false
tt.render.sprites[1].offset.y = 10
tt.render.sprites[1].z = Z_TOWER_BASES
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(5),
		255
	}
}
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].name = "stage1_tutorial_hand_indicator"
tt.render.sprites[2].animated = true
tt.render.sprites[2].offset.y = 90
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].sprite_id = 2
tt.tween.props[2].name = "alpha"
tt.tween.props[2].keys = {
	{
		0,
		0
	},
	{
		fts(5),
		255
	}
}
tt.tween.disabled = false
tt.tween.remove = false
tt = E:register_t("stage_01_bush", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].prefix = "Stage_1_tutorial_bush"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt = E:register_t("stage_01_shaman", "decal")
tt.render.sprites[1].prefix = "Stage_1_tutorial_shaman"
tt.render.sprites[1].name = "idle1"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("stage_01_dead_enemy_indicator", "decal_tween")
tt.render.sprites[1].name = "tutorial_floor_circle_glow"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_DECALS
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(5),
		255
	},
	{
		fts(90),
		255
	},
	{
		fts(120),
		0
	}
}
tt.tween.disabled = false
tt.tween.remove = true
tt = E:register_t("stage_01_drag_tutorial", "decal_tween")

E:add_comps(tt, "main_script")

tt.main_script.update = scripts.stage_01_drag_tutorial.update
tt.render.sprites[1].prefix = "drag_tutorialDef"
tt.render.sprites[1].name = "action"
tt.render.sprites[1].loop = true
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt.render.sprites[1].alpha = 0
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		fts(10),
		0
	}
}
tt.tween.disabled = true
tt.tween.reverse = true
tt.tween.remove = false
tt.time_limit = 10
tt = E:register_t("decal_entity_marker_soldier_med", "decal_entity_marker_soldier_small")
tt.render.sprites[1].scale = vv(1.7)
tt = E:register_t("decal_entity_marker_soldier_big", "decal_entity_marker_soldier_small")
tt.render.sprites[1].scale = vv(2)
tt = E:register_t("decal_entity_marker_hero_small", "decal_entity_marker_soldier_small")
tt.render.sprites[1].name = "selected_hero_small"
tt = E:register_t("decal_entity_marker_hero_med", "decal_entity_marker_hero_small")
tt.render.sprites[1].scale = vv(1.7)
tt = E:register_t("decal_entity_marker_hero_big", "decal_entity_marker_hero_small")
tt.render.sprites[1].scale = vv(2)

tt = E:register_t("decal_mod_stage_22_tower_stun_hand", "decal_tween")
tt.render.sprites[1].prefix = "crocs_tower_block_tap"
tt.render.sprites[1].name = "tap"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt.render.sprites[1].offset = v(23, 10)
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(15),
		255
	},
	{
		fts(45),
		255
	},
	{
		fts(60),
		0
	}
}
tt.tween.remove = true

tt = E:register_t("background_sounds_kr5", "background_sounds")
tt.main_script.update = scripts.background_sounds_kr5.update
tt.min_delay = 7
tt.max_delay = 13
tt.only_on_preparation = true
tt = E:register_t("tower_holder")

E:add_comps(tt, "tower", "tower_holder", "pos", "render", "ui", "editor", "editor_script")

tt.ui.click_rect = r(-40, -12, 80, 50)
tt.ui.has_nav_mesh = true
tt.tower.level = 1
tt.tower.type = "holder"
tt.tower.can_be_mod = false
tt.tower_holder.preview_ids = {
	paladin_covenant = 7,
	royal_archers = 8,
	ballista = 5,
	rocket_gunners = 13,
	dwarf = 21,
	barrel = 15,
	flamespitter = 3,
	hermit_toad = 20,
	sand = 16,
	elven_stargazers = 12,
	sparking_geode = 22,
	arcane_wizard = 4,
	necromancer = 14,
	ray = 18,
	demon_pit = 11,
	arborean_emissary = 9,
	ghost = 17,
	dark_elf = 19,
	tricannon = 6
}
local id = tt.tower_holder.preview_ids.flamespitter + 1
for k, v in pairs(tt.tower_holder.preview_ids) do
    id = id + 1
end
tt.tower_holder.preview_ids.rock_thrower = id
id = id + 1
tt.tower_holder.preview_ids.warmongers_barrack = id
id = id + 1
tt.tower_holder.preview_ids.random = id
id = id + 1
tt.tower_holder.preview_ids.ignis_altar = id
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "terrains_holders_%04i"
tt.render.sprites[1].offset = v(0, 13)
tt.render.sprites[1].z = Z_TOWER_BASES
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].name = "terrains_holders_%04i_flag"
tt.render.sprites[2].animated = false
tt.render.sprites[2].offset = v(0, 13)
tt.render.sprites[2].sort_y_offset = 13
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].name = "dwarven_flamespitter_tower_preview"
tt.render.sprites[3].offset = v(0, 15)
tt.render.sprites[3].alpha = 180
tt.render.sprites[3].hidden = true
tt.render.sprites[3].animated = false
tt.render.sprites[4] = table.deepclone(tt.render.sprites[3])
tt.render.sprites[4].name = "arcane_wizard_tower_preview"
tt.render.sprites[4].offset = v(0, 7)
tt.render.sprites[5] = table.deepclone(tt.render.sprites[3])
tt.render.sprites[5].name = "ballista_tower_preview"
tt.render.sprites[5].offset = v(0, 15)
tt.render.sprites[6] = table.deepclone(tt.render.sprites[3])
tt.render.sprites[6].name = "tower_preview_tricannon"
tt.render.sprites[6].offset = v(0, 0)
tt.render.sprites[7] = table.deepclone(tt.render.sprites[3])
tt.render.sprites[7].name = "paladin_covenant_preview"
tt.render.sprites[7].offset = v(0, 9)
tt.render.sprites[8] = table.deepclone(tt.render.sprites[3])
tt.render.sprites[8].name = "royal_archer_tower_preview"
tt.render.sprites[8].offset = v(0, 15)
tt.render.sprites[9] = table.deepclone(tt.render.sprites[3])
tt.render.sprites[9].name = "arborean_emissary_tower_preview"
tt.render.sprites[9].offset = v(3, 8)
tt.render.sprites[10] = table.deepclone(tt.render.sprites[3])
tt.render.sprites[10].name = "arcane_wizard_tower_preview"
tt.render.sprites[10].offset = v(0, 7)
tt.render.sprites[11] = table.deepclone(tt.render.sprites[3])
tt.render.sprites[11].name = "demon_pit_tower_preview"
tt.render.sprites[11].offset = v(0, 15)
tt.render.sprites[12] = table.deepclone(tt.render.sprites[3])
tt.render.sprites[12].name = "elven_stargazers_tower_preview"
tt.render.sprites[12].offset = v(0, 15)
tt.render.sprites[13] = table.deepclone(tt.render.sprites[3])
tt.render.sprites[13].name = "rocket_gunners_tower_preview"
tt.render.sprites[13].offset = v(0, 15)
tt.render.sprites[14] = table.deepclone(tt.render.sprites[3])
tt.render.sprites[14].name = "necromancer_tower_preview"
tt.render.sprites[14].offset = v(0, 15)
tt.render.sprites[15] = table.deepclone(tt.render.sprites[3])
tt.render.sprites[15].name = "barrel_tower_preview"
tt.render.sprites[15].offset = v(0, 15)
tt.render.sprites[16] = table.deepclone(tt.render.sprites[3])
tt.render.sprites[16].name = "tower_sand_preview"
tt.render.sprites[16].offset = v(0, 15)
tt.render.sprites[17] = table.deepclone(tt.render.sprites[3])
tt.render.sprites[17].name = "ghost_tower_preview"
tt.render.sprites[17].offset = v(0, 15)
tt.render.sprites[18] = table.deepclone(tt.render.sprites[3])
tt.render.sprites[18].name = "channeler_tower_preview"
tt.render.sprites[18].offset = v(0, 10)
tt.render.sprites[19] = table.deepclone(tt.render.sprites[3])
tt.render.sprites[19].name = "tower_preview_dark_elf"
tt.render.sprites[19].offset = v(0, 10)
tt.render.sprites[20] = table.deepclone(tt.render.sprites[3])
tt.render.sprites[20].name = "hermit_toad_tower_preview"
tt.render.sprites[20].offset = v(0, 6)
tt.render.sprites[21] = table.deepclone(tt.render.sprites[3])
tt.render.sprites[21].name = "tower_dwarf_preview"
tt.render.sprites[21].offset = v(0, 10)
tt.render.sprites[22] = table.deepclone(tt.render.sprites[3])
tt.render.sprites[22].name = "sparking_geode_preview"
tt.render.sprites[22].offset = v(0, 10)
local sid = #tt.render.sprites + 1
tt.render.sprites[sid] = table.deepclone(tt.render.sprites[3])
tt.render.sprites[sid].name = "tower_preview_artillery"
tt.render.sprites[sid].offset = v(0, 26)
sid = #tt.render.sprites + 1
tt.render.sprites[sid] = table.deepclone(tt.render.sprites[3])
tt.render.sprites[sid].name = "warmongers_barrack_towers_ghost"
tt.render.sprites[sid].anchor.y = 0.16
tt.render.sprites[sid].offset = v(0, 2)
sid = #tt.render.sprites + 1
tt.render.sprites[sid] = table.deepclone(tt.render.sprites[3])
tt.render.sprites[sid].name = "random_tower_preview"
tt.render.sprites[sid].anchor.y = 0.305556
sid = #tt.render.sprites + 1
tt.render.sprites[sid] = table.deepclone(tt.render.sprites[3])
tt.render.sprites[sid].name = "ignis_altar_lvl1_ghost_0001"
tt.render.sprites[sid].exo = true
tt.render.sprites[sid].anchor = v(0.53, 0.16)
tt.render.sprites[sid].offset = v(0, 4)
tt.editor.props = {
	{
		"tower.terrain_style",
		PT_NUMBER
	},
	{
		"tower.default_rally_pos",
		PT_COORDS
	},
	{
		"tower.holder_id",
		PT_STRING
	},
	{
		"ui.nav_mesh_id",
		PT_STRING
	},
	{
		"editor.game_mode",
		PT_NUMBER
	}
}
tt.editor_script.insert = scripts.editor_tower.insert
tt.editor_script.remove = scripts.editor_tower.remove
tt = E:register_t("tower_holder_capture", "tower_holder")

E:add_comps(tt, "main_script", "tween")

tt.main_script.insert = scripts.tower_holder_capture.insert
tt.aura_capture = "aura_tower_holder_capture"
tt.ui.can_click = false
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "buildbar_bg"
tt.render.sprites[2].offset = v(0, 50)
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].animated = false
tt.render.sprites[3].name = "buildbar"
tt.render.sprites[3].offset = v(-21, 50)
tt.render.sprites[3].anchor = v(0, 0.5)
tt.capture_duration = 15
tt.enable_waves = {}
tt.spawn_delay = 0

table.insert(tt.editor.props, {
	"enable_waves"
})
table.insert(tt.editor.props, {
	"spawn_delay"
})
table.insert(tt.editor.props, {
	"capture_duration"
})

tt.tween.props[1].name = "scale"
tt.tween.props[1].keys = {
	{
		0,
		v(0, 1)
	},
	{
		nil,
		v(1, 1)
	}
}
tt.tween.props[1].sprite_id = 3
tt.tween.remove = false
tt = E:register_t("tower_holder_sea_of_trees", "tower_holder")
tt.tower.terrain_style = TERRAIN_STYLE_SEA_OF_TREES
tt.render.sprites[1].name = "terrains_holders_0001"
tt.render.sprites[2].name = "terrains_holders_0001_flag"
tt = E:register_t("tower_holder_sea_of_trees_2", "tower_holder")
tt.tower.terrain_style = TERRAIN_STYLE_SEA_OF_TREES_2
tt.render.sprites[1].name = "terrains_holders_0002"
tt.render.sprites[2].name = "terrains_holders_0002_flag"
tt = E:register_t("tower_holder_sea_of_trees_3", "tower_holder")
tt.tower.terrain_style = TERRAIN_STYLE_SEA_OF_TREES_3
tt.render.sprites[1].name = "terrains_holders_0003"
tt.render.sprites[2].name = "terrains_holders_0003_flag"
tt = E:register_t("tower_holder_sea_of_trees_4", "tower_holder")
tt.tower.terrain_style = TERRAIN_STYLE_SEA_OF_TREES_4
tt.render.sprites[1].name = "terrains_holders_0004"
tt.render.sprites[2].name = "terrains_holders_0004_flag"
tt = E:register_t("tower_holder_sea_of_trees_5", "tower_holder")
tt.tower.terrain_style = TERRAIN_STYLE_SEA_OF_TREES_5
tt.render.sprites[1].name = "terrains_holders_0005"
tt.render.sprites[2].name = "terrains_holders_0005_flag"

tt = E:register_t("tower_holder_sea_of_trees_6", "tower_holder")
tt.tower.terrain_style = TERRAIN_STYLE_SEA_OF_TREES_6
tt.render.sprites[1].name = "terrains_holders_0006"
tt.render.sprites[2].name = "terrains_holders_0006_flag"

tt = E:register_t("tower_holder_sea_of_trees_7", "tower_holder")
tt.tower.terrain_style = TERRAIN_STYLE_SEA_OF_TREES_7
tt.render.sprites[1].name = "terrains_holders_0007"
tt.render.sprites[2].name = "terrains_holders_0007_flag"

tt = E:register_t("tower_holder_sea_of_trees_8", "tower_holder")
tt.tower.terrain_style = TERRAIN_STYLE_SEA_OF_TREES_8
tt.render.sprites[1].name = "terrains_holders_0008"
tt.render.sprites[2].name = "terrains_holders_0008_flag"
tt = E:register_t("tower_holder_sea_of_trees_9", "tower_holder")
tt.tower.terrain_style = TERRAIN_STYLE_SEA_OF_TREES_9
tt.render.sprites[1].name = "terrains_holders_0009"
tt.render.sprites[2].name = "terrains_holders_0009_flag"

tt = E:register_t("tower_holder_sea_of_trees_capture", "tower_holder_capture")
tt.tower.terrain_style = TERRAIN_STYLE_SEA_OF_TREES
tt.render.sprites[1].name = "build_terrain_capture_0001"
tt.tower_holder_on_capture = "tower_holder_sea_of_trees"
tt = E:register_t("tower_holder_blocked")

E:add_comps(tt, "tower", "tower_holder", "pos", "render", "ui", "sound_events", "editor")

tt.tower.level = 1
tt.tower.can_be_mod = false
tt.tower_holder.blocked = true
tt.tower.can_be_sold = false
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "terrains_holders_%04i"
tt.render.sprites[1].offset = v(0, 13)
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].name = "terrains_holders_%04i_flag"
tt.render.sprites[2].animated = false
tt.render.sprites[2].offset = v(0, 13.5)
tt.render.sprites[2].sort_y_offset = 13.5
tt.ui.click_rect = r(-40, -12, 80, 46)
tt.sound_events.remove = "GUITowerSell"
tt = E:register_t("tower_holder_blocked_sea_of_trees", "tower_holder_blocked")
b = balance.specials.trees.blocked_holders
tt.tower.type = "holder_blocked_sea_of_trees"
tt.tower_holder.unblock_price = b.price
tt.render.sprites[1].name = "terrains_holders_0001_blocked"
tt.render.sprites[2].name = "terrains_holders_0001_flag_blocked"
tt = E:register_t("tower_holder_blocked_sea_of_trees_2", "tower_holder_blocked")
b = balance.specials.trees.blocked_holders
tt.tower.type = "holder_blocked_sea_of_trees"
tt.tower_holder.unblock_price = b.price
tt.render.sprites[1].name = "terrains_holders_0003_blocked"
tt.render.sprites[2].name = "terrains_holders_0003_flag_blocked"
tt = E:register_t("tower_holder_blocked_terrain_2", "tower_holder_blocked")
b = balance.specials.terrain_2.blocked_holders
tt.tower.type = "holder_blocked_sea_of_trees"
tt.tower_holder.unblock_price = b.price
tt.render.sprites[1].name = "terrains_holders_0004_blocked"
tt.render.sprites[2].name = "terrains_holders_0004_flag_blocked"
tt = E:register_t("tower_holder_blocked_terrain_3", "tower_holder_blocked")
b = balance.specials.terrain_3.blocked_holders
tt.tower.type = "holder_blocked_sea_of_trees"
tt.tower_holder.unblock_price = b.price
tt.render.sprites[1].name = "terrains_holders_0005_blocked"
tt.render.sprites[2].name = "terrains_holders_0005_flag_blocked"

tt = E:register_t("tower_holder_blocked_terrain_4", "tower_holder_blocked")
b = balance.specials.trees.blocked_holders

E:add_comps(tt, "main_script")

tt.main_script.remove = scripts.tower_holder_animated.remove
tt.tower.type = "holder_blocked_halloween"
tt.tower_holder.unblock_price = b.price
tt.tower_holder.unblock_fx = "fx_tower_holder_unblock_terrain_4"
tt.render.sprites[1].name = "terrains_holders_0006_blocked"
tt.render.sprites[2].name = "UpdateHalloween_terrain_anim_0001"

tt = E:register_t("tower_holder_blocked_terrain_6", "tower_holder_blocked")
b = balance.specials.terrain_6.blocked_holders
tt.tower.type = "holder_blocked_sea_of_trees"
tt.tower_holder.unblock_price = b.price
tt.render.sprites[1].name = "terrains_holders_0008_blocked"
tt.render.sprites[2].name = "terrains_holders_0008_flag_blocked"

tt = E:register_t("tower_holder_blocked_terrain_6_2", "tower_holder_blocked")
b = balance.specials.terrain_6.blocked_holders
tt.tower.type = "holder_blocked_sea_of_trees"
tt.tower_holder.unblock_price = b.price
tt.render.sprites[1].name = "terrains_holders_0009_blocked"
tt.render.sprites[2].name = "terrains_holders_0009_flag_blocked"

tt = E:register_t("tower_holder_blocked_spiders", "tower_holder_blocked")

E:add_comps(tt, "main_script")

b = balance.specials.stage29_holder_block.blocked_holders
tt.main_script.insert = scripts.tower_holder_blocked_spiders.insert
tt.tower.type = "holder_blocked_spiders"
tt.tower_holder.unblock_price = b.price[1]
tt.prices = b.price
tt.render.sprites[1].name = "terrains_holders_0004"
tt.render.sprites[2].name = "terrains_holders_0018_flag_blocked"

tt = E:register_t("tower_build_paladin_covenant", "tower_build")
tt.build_name = "tower_paladin_covenant_lvl1"
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 15)
tt.render.sprites[2].name = "paladin_covenant_build"
tt.render.sprites[2].offset = v(0, 9)
tt.render.sprites[3].offset.y = 62
tt.render.sprites[4].offset.y = 62
tt = E:register_t("tower_build_arcane_wizard", "tower_build")
tt.build_name = "tower_arcane_wizard_lvl1"
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 13)
tt.render.sprites[2].name = "arcane_wizard_tower_build"
tt.render.sprites[2].offset = v(0, 7)
tt.render.sprites[3].offset.y = 62
tt.render.sprites[4].offset.y = 62
tt = E:register_t("tower_build_tricannon", "tower_build")
tt.build_name = "tower_tricannon_lvl1"
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 10)
tt.render.sprites[2].name = "tricannon_tower_build"
tt.render.sprites[2].offset = v(0, 0)
tt.render.sprites[3].offset.y = 65
tt.render.sprites[4].offset.y = 65
tt = E:register_t("tower_build_royal_archers", "tower_build")
tt.build_name = "tower_royal_archers_lvl1"
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 14)
tt.render.sprites[2].name = "royal_archer_tower_build"
tt.render.sprites[2].offset = v(2, 14)
tt.render.sprites[3].offset.y = 62
tt.render.sprites[4].offset.y = 62
tt = E:register_t("tower_build_viper_goblins", "tower_build")
tt.build_name = "tower_viper_goblins_lvl1"
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 10)
tt.render.sprites[2].name = "build_archer"
tt.render.sprites[2].offset = v(0, 26)
tt = E:register_t("tower_build_arborean_emissary", "tower_build")
tt.build_name = "tower_arborean_emissary_lvl1"
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 10)
tt.render.sprites[2].name = "arborean_emissary_tower_build"
tt.render.sprites[2].offset = v(3, 8)
tt.render.sprites[3].offset.y = 62
tt.render.sprites[4].offset.y = 62
tt = E:register_t("tower_build_elder_portal", "tower_build")
tt.build_name = "tower_elder_portal_lvl1"
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 10)
tt.render.sprites[2].name = "build_mage"
tt.render.sprites[2].offset = v(0, 24)
tt = E:register_t("tower_build_demon_pit", "tower_build")
tt.build_name = "tower_demon_pit_lvl1"
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 15)
tt.render.sprites[2].name = "demon_pit_tower_build"
tt.render.sprites[2].offset = v(0, 15)
tt.render.sprites[3].offset.y = 66
tt.render.sprites[4].offset.y = 66
tt = E:register_t("tower_build_elven_stargazers", "tower_build")
tt.build_name = "tower_elven_stargazers_lvl1"
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 15)
tt.render.sprites[2].name = "elven_stargazers_tower_build"
tt.render.sprites[2].offset = v(0, 15)
tt.render.sprites[3].offset.y = 65
tt.render.sprites[4].offset.y = 65
tt = E:register_t("tower_build_rocket_gunners", "tower_build")
tt.build_name = "tower_rocket_gunners_lvl1"
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 15)
tt.render.sprites[2].name = "rocket_gunners_tower_build"
tt.render.sprites[2].offset = v(0, 15)
tt.render.sprites[3].offset.y = 65
tt.render.sprites[4].offset.y = 65
tt = E:register_t("tower_build_necromancer", "tower_build")
tt.build_name = "tower_necromancer_lvl1"
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 15)
tt.render.sprites[2].name = "necromancer_tower_build"
tt.render.sprites[2].offset = v(0, 15)
tt.render.sprites[3].offset.y = 62
tt.render.sprites[4].offset.y = 62
tt = E:register_t("tower_build_ballista", "tower_build")
tt.build_name = "tower_ballista_lvl1"
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 15)
tt.render.sprites[2].name = "ballista_tower_tower_construction"
tt.render.sprites[2].offset = v(0, 15)
tt.render.sprites[3].offset.y = 75
tt.render.sprites[4].offset.y = 75
tt = E:register_t("tower_build_flamespitter", "tower_build")
tt.build_name = "tower_flamespitter_lvl1"
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 15)
tt.render.sprites[2].name = "dwarven_flamespitter_tower_build"
tt.render.sprites[2].offset = v(0, 15)
tt.render.sprites[3].offset.y = 65
tt.render.sprites[4].offset.y = 65
tt = E:register_t("tower_build_barrel", "tower_build")
tt.build_name = "tower_barrel_lvl1"
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 15)
tt.render.sprites[2].name = "barrel_tower_build"
tt.render.sprites[2].offset = v(0, 15)
tt.render.sprites[3].offset.y = 60
tt.render.sprites[4].offset.y = 60
tt = E:register_t("tower_build_sand", "tower_build")
tt.build_name = "tower_sand_lvl1"
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 15)
tt.render.sprites[2].name = "tower_sand_build"
tt.render.sprites[2].offset = v(0, 15)
tt.render.sprites[3].offset.y = 60
tt.render.sprites[4].offset.y = 60
tt = E:register_t("tower_build_ghost", "tower_build")
tt.build_name = "tower_ghost_lvl1"
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 15)
tt.render.sprites[2].name = "ghost_tower_build"
tt.render.sprites[2].offset = v(0, 15)
tt.render.sprites[3].offset.y = 60
tt.render.sprites[4].offset.y = 60
tt = E:register_t("tower_build_ray", "tower_build")
tt.build_name = "tower_ray_lvl1"
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 15)
tt.render.sprites[2].name = "channeler_tower_build"
tt.render.sprites[2].offset = v(0, 15)
tt.render.sprites[3].offset.y = 60
tt.render.sprites[4].offset.y = 60

tt = E:register_t("tower_build_dark_elf", "tower_build")
tt.build_name = "tower_dark_elf_lvl1"
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 15)
tt.render.sprites[2].name = "Tower_construction"
tt.render.sprites[2].offset = v(0, 10)
tt.render.sprites[3].offset.y = 75
tt.render.sprites[4].offset.y = 75

tt = E:register_t("tower_build_hermit_toad", "tower_build")
tt.build_name = "tower_hermit_toad_lvl1"
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 0)
tt.render.sprites[1].hidden = true
tt.render.sprites[2].name = "hermit_toad_tower_construction"
tt.render.sprites[2].offset = v(0, 5)
tt.render.sprites[3].offset.y = 75
tt.render.sprites[4].offset.y = 75

tt = E:register_t("tower_build_dwarf", "tower_build")
tt.build_name = "tower_dwarf_lvl1"
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 15)
tt.render.sprites[2].name = "tower_dwarf_build"
tt.render.sprites[2].offset = v(0, 10)
tt.render.sprites[3].offset.y = 62
tt.render.sprites[4].offset.y = 62

tt = E:register_t("tower_build_sparking_geode", "tower_build")
tt.build_name = "tower_sparking_geode_lvl1"
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 15)
tt.render.sprites[1].hidden = true
tt.render.sprites[2].name = "sparking_geode_construction"
tt.render.sprites[2].offset = v(0, 10)
tt.render.sprites[3].offset.y = 62
tt.render.sprites[4].offset.y = 62

tt = E:register_t("tower_KR5", "tower")

E:add_comps(tt, "tower_upgrade_persistent_data")

tt = E:register_t("tower_royal_archers_lvl1", "tower_KR5")

E:add_comps(tt, "attacks", "vis")

b = balance.towers.royal_archers
tt.tower.type = "royal_archers"
tt.tower.kind = TOWER_KIND_ARCHER
tt.tower.team = TEAM_LINIREA
tt.tower.level = 1
tt.tower.price = b.price[1]
tt.tower.menu_offset = v(0, 20)
tt.info.portrait = "portraits_towers" .. "_0002"
tt.info.room_portrait = "quickmenu_main_icons_main_icons_0002_0001"
tt.info.enc_icon = 1
tt.info.i18n_key = "TOWER_ROYAL_ARCHERS_1"
tt.info.tower_portrait = "towerselect_portraits_big_" .. "0002"
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 14)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "royal_archer_tower_lvl1_tower"
tt.render.sprites[2].offset = v(2, 14)
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].prefix = "royal_archer_tower_royal_archer_lvl1"
tt.render.sprites[3].name = "idleDown"
tt.render.sprites[3].angles = {}
tt.render.sprites[3].angles.idle = {
	"idle_2",
	"idle_1"
}
tt.render.sprites[3].angles.shoot = {
	"attack_2",
	"attack_1"
}
tt.render.sprites[3].offset = v(-9, 39)
tt.render.sprites[4] = table.deepclone(tt.render.sprites[3])
tt.render.sprites[4].offset = v(13, 38)
tt.render.sprites[5] = E:clone_c("sprite")
tt.render.sprites[5].animated = false
tt.render.sprites[5].name = "royal_archer_tower_lvl1_tower_front"
tt.render.sprites[5].offset = v(2, 14)
tt.main_script.insert = scripts.tower_archer.insert
tt.main_script.update = scripts.tower_royal_archers.update
tt.main_script.remove = scripts.tower_royal_archers.remove
tt.attacks.range = b.basic_attack.range[1]
tt.attacks.attack_delay_on_spawn = fts(5)
tt.attacks.list[1] = E:clone_c("bullet_attack")
tt.attacks.list[1].bullet = "tower_royal_archers_arrow_lvl1"
tt.attacks.list[1].cooldown = b.basic_attack.cooldown
tt.attacks.list[1].shoot_time = fts(8)
tt.attacks.list[1].bullet_start_offset = {
	v(11, 18),
	v(12, 22)
}
tt.attacks.list[1].vis_flags = bor(F_RANGED)
tt.attacks.list[1].vis_bans = bor(F_NIGHTMARE)
tt.sound_events.insert = "TowerRoyalArchersTaunt"
tt.sound_events.tower_room_select = "TowerRoyalArchersTauntSelect"
tt.ui.click_rect = r(-30, 3, 63, 62)
tt = E:register_t("tower_royal_archers_lvl2", "tower_royal_archers_lvl1")
b = balance.towers.royal_archers
tt.info.enc_icon = 5
tt.info.i18n_key = "TOWER_ROYAL_ARCHERS_2"
tt.tower.level = 2
tt.tower.price = b.price[2]
tt.tower.menu_offset = v(0, 22)
tt.render.sprites[2].name = "royal_archer_tower_lvl2_tower"
tt.render.sprites[3].prefix = "royal_archer_tower_royal_archer_lvl2"
tt.render.sprites[3].offset = v(-9, 45)
tt.render.sprites[4].prefix = "royal_archer_tower_royal_archer_lvl2"
tt.render.sprites[4].offset = v(13, 44)
tt.render.sprites[5].name = "royal_archer_tower_lvl2_tower_front"
tt.attacks.list[1].bullet = "tower_royal_archers_arrow_lvl2"
tt.attacks.list[1].bullet_start_offset = {
	v(11, 18),
	v(12, 22)
}
tt.attacks.range = b.basic_attack.range[2]
tt.ui.click_rect = r(-30, 3, 63, 67)
tt = E:register_t("tower_royal_archers_lvl3", "tower_royal_archers_lvl1")
b = balance.towers.royal_archers
tt.info.enc_icon = 9
tt.info.i18n_key = "TOWER_ROYAL_ARCHERS_3"
tt.tower.level = 3
tt.tower.price = b.price[3]
tt.tower.menu_offset = v(0, 22)
tt.tower.size = TOWER_SIZE_LARGE
tt.render.sprites[2].name = "royal_archer_tower_lvl3_tower"
tt.render.sprites[3].prefix = "royal_archer_tower_royal_archer_lvl3"
tt.render.sprites[3].offset = v(-9, 51)
tt.render.sprites[4].prefix = "royal_archer_tower_royal_archer_lvl3"
tt.render.sprites[4].offset = v(13, 50)
tt.render.sprites[5].name = "royal_archer_tower_lvl3_tower_front"
tt.attacks.list[1].bullet = "tower_royal_archers_arrow_lvl3"
tt.attacks.list[1].bullet_start_offset = {
	v(11, 18),
	v(12, 22)
}
tt.attacks.range = b.basic_attack.range[3]
tt.ui.click_rect = r(-32, 3, 67, 72)

tt = E:register_t("tower_royal_archers_lvl4", "tower_royal_archers_lvl1")
E:add_comps(tt, "powers")
b = balance.towers.royal_archers
image_y = 90
tt.decal_preview_controller = "royal_archers_decal_preview_controller"
tt.tower_combination_controller = "royal_archers_tower_combination_controller"
tt.info.enc_icon = 18
tt.info.i18n_key = "TOWER_ROYAL_ARCHERS_4"
tt.info.stat_damage = b.stats.damage
tt.info.stat_cooldown = b.stats.cooldown
tt.info.stat_range = b.stats.range
tt.tower.level = 4
tt.tower.price = b.price[4]
tt.tower.menu_offset = v(0, 25)
tt.tower.size = TOWER_SIZE_LARGE
tt.attacks.list[1].animation = "shoot"
tt.attacks.list[1].bullet = "tower_royal_archers_arrow_lvl4"
tt.attacks.list[1].shoot_time = fts(8)
tt.attacks.list[1].bullet_start_offset = {
	v(11, 18),
	v(12, 22)
}
tt.attacks.list[2] = E:clone_c("bullet_attack")
tt.attacks.list[2].animation = "armor_piercer"
tt.attacks.list[2].bullet = "arrow_armor_piercer_royal_archers"
tt.attacks.list[2].range_trigger = b.armor_piercer.range_trigger
tt.attacks.list[2].range_effect = b.armor_piercer.range_effect
tt.attacks.list[2].cooldown = nil
tt.attacks.list[2].shoot_time = fts(53)
tt.attacks.list[2].time_between_arrows = fts(0)
tt.attacks.list[2].nearby_range = b.armor_piercer.nearby_range
tt.attacks.list[2].bullet_start_offset = {
	v(6, 20),
	v(0, 20)
}
tt.attacks.list[2].shot_fx = "fx_arrow_silver_sentence_shot"
tt.attacks.list[2].sound = "TowerRoyalArchersArmorPiercerShot"
tt.attacks.list[2].vis_bans = bor(F_FRIEND, F_NIGHTMARE)
tt.attacks.range = b.basic_attack.range[4]
tt.powers.armor_piercer = E:clone_c("power")
tt.powers.armor_piercer.attack_idx = 2
tt.powers.armor_piercer.price = b.armor_piercer.price
tt.powers.armor_piercer.cooldown = b.armor_piercer.cooldown
tt.powers.armor_piercer.enc_icon = 3
tt.powers.armor_piercer.flight_time_factor = {
	0.2,
	0.4,
	0.6
}
tt.powers.rapacious_hunter = E:clone_c("power")
tt.powers.rapacious_hunter.attack_idx = 3
tt.powers.rapacious_hunter.price = b.rapacious_hunter.price
tt.powers.rapacious_hunter.enc_icon = 4
tt.powers.rapacious_hunter.damage_max = b.rapacious_hunter.damage_max
tt.powers.rapacious_hunter.damage_min = b.rapacious_hunter.damage_min
tt.powers.rapacious_hunter.entity = "tower_royal_archers_pow_rapacious_hunter_tamer"
tt.powers.rapacious_hunter.entity_offset = v(31, 7)
tt.powers.rapacious_hunter.purchase_fx = "fx_tower_royal_archer_rapacious_hunter_dust"
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 14)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "royal_archer_tower_lvl4_tower"
tt.render.sprites[2].offset = v(1, 13)
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].prefix = "royal_archer_tower_royal_archer_lvl4"
tt.render.sprites[3].name = "idleDown"
tt.render.sprites[3].angles = {}
tt.render.sprites[3].angles.idle = {
	"idle_2",
	"idle_1"
}
tt.render.sprites[3].angles.shoot = {
	"attack_2",
	"attack_1"
}
tt.render.sprites[3].offset = v(-12, 54)
tt.render.sprites[4] = table.deepclone(tt.render.sprites[3])
tt.render.sprites[4].offset = v(14, 54)
tt.render.sprites[5] = E:clone_c("sprite")
tt.render.sprites[5].animated = false
tt.render.sprites[5].name = "royal_archer_tower_lvl4_tower_front"
tt.render.sprites[5].offset = v(1, 13)
tt.render.sprites[6] = E:clone_c("sprite")
tt.render.sprites[6].name = "royal_archer_tower_lvl4_tower_rapacious_hunter_base"
tt.render.sprites[6].animated = false
tt.render.sprites[6].offset = v(1, 13)
tt.render.sprites[6].hidden = true
tt.render.sprites[6].draw_order = 2
tt.sid_rapacious_hunter = 6
tt.sound_events.insert = "TowerRoyalArchersTaunt"
tt.ui.click_rect = r(-35, 3, 73, 77)
tt = E:register_t("tower_royal_archers_arrow_hit_fx", "fx")
tt.render.sprites[1].name = "royal_archer_tower_royal_archer_hit_fx_hit_fx"
tt.render.sprites[1].loop = false
tt.render.sprites[1].hide_after_runs = 1
tt = E:register_t("tower_royal_archers_pow_armor_piercer_arrow_hit_fx", "fx")
tt.render.sprites[1].name = "royal_archer_tower_royal_archer_lvl4_armor_breaker_hit_fx_armor_breaker_hit_fx"
tt.render.sprites[1].loop = false
tt.render.sprites[1].hide_after_runs = 1
tt = E:register_t("tower_royal_archers_pow_rapacious_hunter_tamer", "decal_scripted")

E:add_comps(tt, "pos", "main_script", "attacks")

b = balance.towers.royal_archers
tt.render.sprites[1].prefix = "royal_archer_tower_royal_archer_lvl4_rapacious_hunter_tamer"
tt.render.sprites[1].name = "idle_1"
tt.render.sprites[1].offset = v(0, 0)
tt.render.sprites[1].sort_y_offset = -13
tt.render.sprites[1].draw_order = 2
tt.render.sprites[1].z = Z_OBJECTS
tt.main_script.update = scripts.tower_royal_archers_pow_rapacious_hunter_tamer.update
tt.min_cheer_cooldown = 1
tt.max_time_without_cheer = 9
tt.cheer_chance = 1
tt.attacks.list[1] = E:clone_c("custom_attack")
tt.attacks.list[1].animation = "leave"
tt.attacks.list[1].range = b.rapacious_hunter.range
tt.attacks.list[1].cooldown = b.rapacious_hunter.cooldown
tt.attacks.list[1].bullet_start_offset = {
	v(9, 4),
	v(6, -5)
}
tt.attacks.list[1].cast_time = fts(7)
tt.attacks.list[1].sound = "TowerGoldenBowFlareShot"
tt.attacks.list[1].entity = "tower_royal_archers_pow_rapacious_hunter_eagle"
tt.attacks.list[1].mark_mod = "tower_royal_archers_pow_rapacious_hunter_tamer_mark_mod"
tt.attacks.list[1].mark_mod_duration = 1e+99
tt.attacks.list[1].vis_flags = bor(F_MOD, F_CUSTOM, F_RANGED)
tt.attacks.list[1].vis_bans = bor(F_CUSTOM, F_NIGHTMARE)
tt.idle = {}
tt.idle.min_cooldown = 4
tt.idle.max_cooldown = 10
tt.idle.animation = "idle_2"
tt = E:register_t("tower_royal_archers_pow_rapacious_hunter_eagle", "decal_scripted")

E:add_comps(tt, "pos", "main_script", "attacks", "force_motion", "tween", "sound_events")

b = balance.towers.royal_archers
tt.flight_speed = 45
tt.flight_height = 27
tt.flight_height_max = 60
tt.owner_offset = v(10, 0)
tt.owner_flight_height = 27
tt.offset_x_after_hit = b.rapacious_hunter.shoot_range
tt.attack_accel = 600
tt.max_speed = 600
tt.min_speed = 300
tt.return_accel = 180
tt.main_script.update = scripts.tower_royal_archers_pow_rapacious_hunter_eagle.update
tt.main_script.remove = scripts.tower_royal_archers_pow_rapacious_hunter_eagle.remove
tt.max_distance_from_tower = b.rapacious_hunter.max_distance_from_tower
tt.min_distance_to_attack = tt.offset_x_after_hit + tt.offset_x_after_hit
tt.orbital_speed = 300
tt.attacks.list[1] = E:clone_c("custom_attack")
tt.attacks.list[1].damage_min = b.rapacious_hunter.damage_min
tt.attacks.list[1].damage_max = b.rapacious_hunter.damage_max
tt.attacks.list[1].cooldown = b.rapacious_hunter.attack_cooldown
tt.attacks.list[1].armor_penetration = b.armor_piercer.armor_penetration
tt.attacks.list[1].hit_fx = "tower_royal_archers_pow_rapacious_hunter_eagle_hit_fx"
tt.attacks.list[1].damage_type = b.rapacious_hunter.damage_type
tt.attacks.list[1].vis_flags = F_RANGED
tt.attacks.list[1].vis_bans = bor(F_NIGHTMARE)
tt.attacks.list[1].sound = "TowerRoyalArchersRapaciousHunterHit"
tt.attacks.list[1].trail = "ps_rapacious_hunter_eagle_royal_archers"
tt.render.sprites[1].prefix = "royal_archer_tower_royal_archer_lvl4_rapacious_hunter_eagle"
tt.render.sprites[1].offset = v(0, 0)
tt.render.sprites[1].z = Z_FLYING_HEROES
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "decal_flying_shadow_hard"
tt.render.sprites[2].offset = v(0, 0)
tt.render.sprites[2].z = Z_DECALS
tt.render.sprites[2].scale = vv(0.7)
tt.tween.disabled = true
tt.tween.remove = false
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	}
}
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].keys = {
	{
		0,
		v(0.75, 1)
	},
	{
		fts(10),
		v(1, 1)
	}
}
tt.tween.props[2].name = "scale"
tt.sound_events.insert = "TowerRoyalArchersRapaciousHunterTakeOff"
tt.sound_events.descend = "TowerRoyalArchersRapaciousHunterDescend"
tt = E:register_t("tower_royal_archers_pow_rapacious_hunter_eagle_hit_fx", "fx")
tt.render.sprites[1].name = "royal_archer_tower_royal_archer_lvl4_rapacious_hunter_eagle_hit_fx_rapacious_hunter_hit_fx"
tt.render.sprites[1].loop = false
tt.render.sprites[1].hide_after_runs = 1
tt = E:register_t("tower_royal_archers_pow_rapacious_hunter_tamer_mark_mod", "modifier")

E:add_comps(tt, "mark_flags")

tt.mark_flags.vis_bans = F_CUSTOM
tt.main_script.queue = scripts.mod_mark_flags.queue
tt.main_script.dequeue = scripts.mod_mark_flags.dequeue
tt.main_script.update = scripts.tower_royal_archers_pow_rapacious_hunter_tamer_mark_mod.update

local b = balance.towers.arcane_wizard

tt = E:register_t("tower_arcane_wizard_lvl1", "tower_KR5")

E:add_comps(tt, "attacks", "vis")

tt.tower.type = "arcane_wizard"
tt.tower.kind = TOWER_KIND_MAGE
tt.tower.team = TEAM_LINIREA
tt.tower.level = 1
tt.tower.price = b.price[1]
tt.tower.menu_offset = v(0, 20)
tt.info.enc_icon = 3
tt.info.i18n_key = "TOWER_ARCANE_WIZARD_1"
tt.info.portrait = "portraits_towers" .. "_0003"
tt.info.fn = scripts.tower_arcane_wizard.get_info
tt.info.tower_portrait = "towerselect_portraits_big_" .. "0003"
tt.main_script.insert = scripts.tower_arcane_wizard.insert
tt.main_script.update = scripts.tower_arcane_wizard.update
tt.main_script.remove = scripts.tower_arcane_wizard.remove
tt.attacks.range = b.basic_attack.range
tt.attacks.min_cooldown = b.shared_min_cooldown
tt.attacks.range = b.basic_attack.range[1]
tt.attacks.attack_delay_on_spawn = fts(5)
tt.attacks.list[1] = E:clone_c("bullet_attack")
tt.attacks.list[1].animation = "attack"
tt.attacks.list[1].bullet = "tower_arcane_wizard_ray"
tt.attacks.list[1].cooldown = b.basic_attack.cooldown
tt.attacks.list[1].shoot_time = fts(15)
tt.attacks.list[1].bullet_start_offset = {
	v(0, 80),
	v(0, 80)
}
tt.attacks.list[1].ignore_out_of_range_check = 1
tt.attacks.list[1].vis_bans = bor(F_NIGHTMARE)
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 13)

for i = 2, 6 do
	tt.render.sprites[i] = E:clone_c("sprite")
	tt.render.sprites[i].prefix = "arcane_wizard_tower_lvl1_tower_layer" .. i - 1
	tt.render.sprites[i].name = "idle"
	tt.render.sprites[i].offset = v(0, 5)
	tt.render.sprites[i].group = "layers"
	tt.render.sprites[i].angles = {}
	tt.render.sprites[i].angles.idle = {
		"idle_back",
		"idle"
	}
	tt.render.sprites[i].angles.attack = {
		"attack_back",
		"attack"
	}
end

tt.render.sid_shooter = 5
tt.shooter_offset = v(0, 35)
tt.sound_events.insert = "TowerArcaneWizardTaunt"
tt.sound_events.tower_room_select = "TowerArcaneWizardTauntSelect"
tt.ui.click_rect = r(-30, 0, 60, 65)
tt = E:register_t("tower_arcane_wizard_lvl2", "tower_arcane_wizard_lvl1")
tt.info.enc_icon = 7
tt.info.i18n_key = "TOWER_ARCANE_WIZARD_2"
tt.tower.level = 2
tt.tower.price = b.price[2]
tt.attacks.range = b.basic_attack.range[2]
tt.attacks.list[1].bullet_start_offset = {
	v(0, 88),
	v(0, 88)
}

for i = 2, 11 do
	tt.render.sprites[i] = E:clone_c("sprite")
	tt.render.sprites[i].prefix = "arcane_wizard_tower_lvl2_tower_layer" .. i - 1
	tt.render.sprites[i].name = "idle"
	tt.render.sprites[i].offset = v(0, 5)
	tt.render.sprites[i].group = "layers"
	tt.render.sprites[i].angles = {}
	tt.render.sprites[i].angles.idle = {
		"idle_back",
		"idle"
	}
	tt.render.sprites[i].angles.attack = {
		"attack_back",
		"attack"
	}
end

tt.render.sid_shooter = 10
tt.ui.click_rect = r(-35, 0, 70, 70)
tt = E:register_t("tower_arcane_wizard_lvl3", "tower_arcane_wizard_lvl1")
tt.info.enc_icon = 11
tt.info.i18n_key = "TOWER_ARCANE_WIZARD_3"
tt.tower.level = 3
tt.tower.price = b.price[3]
tt.attacks.range = b.basic_attack.range[3]
tt.attacks.list[1].bullet_start_offset = {
	v(0, 90),
	v(0, 90)
}

for i = 2, 7 do
	tt.render.sprites[i] = E:clone_c("sprite")
	tt.render.sprites[i].prefix = "arcane_wizard_tower_lvl3_tower_layer" .. i - 1
	tt.render.sprites[i].name = "idle"
	tt.render.sprites[i].offset = v(0, 5)
	tt.render.sprites[i].group = "layers"
	tt.render.sprites[i].angles = {}
	tt.render.sprites[i].angles.idle = {
		"idle_back",
		"idle"
	}
	tt.render.sprites[i].angles.attack = {
		"attack_back",
		"attack"
	}
end

tt.render.sid_shooter = 6
tt.ui.click_rect = r(-37, 0, 74, 72)
tt = E:register_t("tower_arcane_wizard_lvl4", "tower_KR5")

E:add_comps(tt, "attacks", "powers", "vis")

image_y = 90
tt.tower.type = "arcane_wizard"
tt.tower.kind = TOWER_KIND_MAGE
tt.tower.team = TEAM_LINIREA
tt.tower.level = 4
tt.tower.price = b.price[4]
tt.tower.size = TOWER_SIZE_LARGE
tt.tower.menu_offset = v(0, 25)
tt.info.enc_icon = 15
tt.info.i18n_key = "TOWER_ARCANE_WIZARD_4"
tt.info.fn = scripts.tower_arcane_wizard.get_info
tt.info.portrait = "portraits_towers" .. "_0003"
tt.info.room_portrait = "quickmenu_main_icons_main_icons_0003_0001"
tt.info.tower_portrait = "towerselect_portraits_big_" .. "0003"
tt.info.damage_icon = "magic"
tt.info.stat_damage = b.stats.damage
tt.info.stat_range = b.stats.range
tt.info.stat_cooldown = b.stats.cooldown
tt.powers.disintegrate = CC("power")
tt.powers.disintegrate.price = b.disintegrate.price
tt.powers.disintegrate.cooldown = b.disintegrate.cooldown
tt.powers.disintegrate.enc_icon = 5
tt.powers.empowerment = CC("power")
tt.powers.empowerment.price = b.empowerment.price
tt.powers.empowerment.damage_factor = b.empowerment.damage_factor
tt.powers.empowerment.cooldown = b.empowerment.cooldown
tt.powers.empowerment.duration = b.empowerment.duration
tt.powers.empowerment.enc_icon = 6
tt.powers.empowerment.name = "empowerment"
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 13)

for i = 2, 9 do
	tt.render.sprites[i] = E:clone_c("sprite")
	tt.render.sprites[i].prefix = "arcane_wizard_tower_lvl4_tower_layer" .. i - 1
	tt.render.sprites[i].name = "idle"
	tt.render.sprites[i].offset = v(0, 5)
	tt.render.sprites[i].group = "layers"
	tt.render.sprites[i].angles = {}
	tt.render.sprites[i].angles.idle = {
		"idle_back",
		"idle"
	}
	tt.render.sprites[i].angles.attack = {
		"attack_back",
		"attack"
	}
	tt.render.sprites[i].angles.skill1 = {
		"skill1_back",
		"skill1"
	}
	tt.render.sprites[i].angles.skill2 = {
		"skill2_back",
		"skill2"
	}
end

tt.render.sid_shooter = 8
tt.main_script.update = scripts.tower_arcane_wizard.update
tt.main_script.remove = scripts.tower_arcane_wizard.remove
tt.sound_events.insert = "TowerArcaneWizardTaunt"
tt.sound_events.tower_room_select = "TowerArcaneWizardTauntSelect"
tt.attacks.min_cooldown = b.shared_min_cooldown
tt.attacks.range = b.basic_attack.range[4]
tt.attacks.attack_delay_on_spawn = fts(5)
tt.attacks.list[1] = E:clone_c("bullet_attack")
tt.attacks.list[1].animation = "attack"
tt.attacks.list[1].bullet = "tower_arcane_wizard_ray"
tt.attacks.list[1].cooldown = b.basic_attack.cooldown
tt.attacks.list[1].shoot_time = fts(15)
tt.attacks.list[1].bullet_start_offset = {
	v(0, 98),
	v(0, 98)
}
tt.attacks.list[1].ignore_out_of_range_check = 1
tt.attacks.list[1].vis_bans = bor(F_NIGHTMARE)
tt.attacks.list[2] = table.deepclone(tt.attacks.list[1])
tt.attacks.list[2].animation = "skill1"
tt.attacks.list[2].bullet = "tower_arcane_wizard_ray_disintegrate"
tt.attacks.list[2].cooldown = nil
tt.attacks.list[2].vis_flags = bor(F_DISINTEGRATED)
tt.attacks.list[2].vis_bans = bor(F_NIGHTMARE)
tt.attacks.list[2].shoot_time = fts(31)
tt.attacks.list[2].load_time = fts(13)
tt.attacks.list[2].sound = "TowerArcaneWizardDisintegrate"
tt.attacks.list[2].excluded_templates = {
	"enemy_overseer_hit_point"
}
tt.attacks.list[3] = CC("custom_attack")
tt.attacks.list[3].animation = "skill2"
tt.attacks.list[3].shoot_time = fts(20)
tt.attacks.list[3].cooldown = nil
tt.attacks.list[3].mod = "mod_tower_arcane_wizard_power_empowerment"
tt.attacks.list[3].mod_fx = "mod_tower_arcane_wizard_power_empowerment_fx"
tt.attacks.list[3].mark_mod = "tower_arcane_wizard_power_empowerment_mark_mod"
tt.attacks.list[3].max_range = b.empowerment.max_range
tt.attacks.list[3].min_range = b.empowerment.min_range
tt.attacks.list[3].exclude_tower_kind = {}
tt.attacks.list[3].vis_flags = bor(F_MOD)
tt.attacks.list[3].vis_bans = 0
tt.ui.click_rect = r(-40, 0, 80, 86)
tt = E:register_t("tower_arcane_wizard_ray_disintegrate_mod", "modifier")

local b = balance.towers.arcane_wizard

tt.main_script.update = scripts.tower_arcane_wizard_ray_disintegrate_mod.update
tt.modifier.pop = {
	"pop_zap_arcane"
}
tt.modifier.pop_conds = DR_KILL
tt.modifier.damage_type = bor(DAMAGE_DISINTEGRATE, DAMAGE_INSTAKILL, DAMAGE_NO_SPAWNS, DAMAGE_IGNORE_SHIELD)
tt.modifier.damage = 1
tt.modifier.duration = fts(5)
tt.boss_damage_config = b.disintegrate.boss_damage

local b = balance.towers.elven_stargazers

tt = E:register_t("tower_elven_stargazers_lvl1", "tower_KR5")

E:add_comps(tt, "attacks", "vis")

tt.tower.type = "elven_stargazers"
tt.tower.kind = TOWER_KIND_MAGE
tt.tower.team = TEAM_LINIREA
tt.tower.level = 1
tt.tower.price = b.price[1]
tt.tower.menu_offset = v(3, 19)
tt.info.enc_icon = 3
tt.info.i18n_key = "TOWER_STARGAZER_1"
tt.info.portrait = "portraits_towers" .. "_0007"
tt.info.room_portrait = "quickmenu_main_icons_main_icons_0008_0001"
tt.info.tower_portrait = "towerselect_portraits_big_0007"
tt.info.fn = scripts.tower_stargazers.get_info
tt.main_script.update = scripts.tower_stargazers.update
tt.main_script.remove = scripts.tower_stargazers.remove
tt.attacks.range = b.basic_attack.range
tt.attacks.min_cooldown = b.shared_min_cooldown
tt.attacks.range = b.basic_attack.range[1]
tt.attacks.attack_delay_on_spawn = fts(5)
tt.attacks.list[1] = E:clone_c("bullet_attack")
tt.attacks.list[1].animation = "attack"
tt.attacks.list[1].bullet = "tower_elven_stargazers_ray"
tt.attacks.list[1].cooldown = b.basic_attack.cooldown
tt.attacks.list[1].shoot_time = fts(15)
tt.attacks.list[1].ray_timing = b.basic_attack.ray_timing
tt.attacks.list[1].ignore_out_of_range_check = 1
tt.attacks.list[1].vis_bans = bor(F_NIGHTMARE)
tt.attacks.list[1].sound = "TowerElvenStargazersBasicAttack"

local base_scale = v(1.1, 1.1)

tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 15)

for i = 2, 4 do
	tt.render.sprites[i] = E:clone_c("sprite")
	tt.render.sprites[i].prefix = "elven_stargazers_tower_lvl1_tower_layer" .. i - 1
	tt.render.sprites[i].name = "idle"
	tt.render.sprites[i].offset = v(3, 15)
	tt.render.sprites[i].group = "layers"
	tt.render.sprites[i].angles = {}
	tt.render.sprites[i].angles.idle = {
		"idle_back",
		"idle"
	}
	tt.render.sprites[i].sort_y_offset = 5
	tt.render.sprites[i].angles.attack = {
		"attack_back",
		"attack"
	}
	tt.render.sprites[i].scale = base_scale
end

tt.render.sprites[5] = E:clone_c("sprite")
tt.render.sprites[5].prefix = "elven_stargazers_tower_ray_start_lvl3_lvl2_lvl1"
tt.render.sprites[5].name = "start"
tt.render.sprites[5].hidden = true
tt.render.sprites[5].offset = v(3 * base_scale.x, 65 * base_scale.y)
tt.render.sprites[5].z = Z_BULLETS + 1
tt.render.sprites[5].scale = base_scale
tt.render.moon_sid = 5
tt.render.sprites[6] = E:clone_c("sprite")
tt.render.sprites[6].prefix = "elven_stargazers_tower_lvl1_elf"
tt.render.sprites[6].name = "idle"
tt.render.sprites[6].offset = v(4, 33)
tt.render.sprites[6].scale = base_scale
tt.render.elf_sid = 6
tt.shooter_offset = v(0, 35)
tt.sound_events.insert = "TowerElvenStargazersTaunt"
tt.sound_events.tower_room_select = "TowerElvenStargazersTauntSelect"
tt.attacks.list[1].bullet_start_offset = {
	tt.render.sprites[tt.render.moon_sid].offset,
	tt.render.sprites[tt.render.moon_sid].offset
}
tt.ui.click_rect = r(-35, 0, 72, 65)
tt = E:register_t("tower_elven_stargazers_lvl2", "tower_elven_stargazers_lvl1")
b = balance.towers.elven_stargazers
tt.info.i18n_key = "TOWER_STARGAZER_2"
tt.tower.level = 2
tt.tower.price = b.price[2]
tt.tower.menu_offset = v(3, 22)
tt.attacks.range = b.basic_attack.range[2]

local base_scale = v(1.1, 1.1)

for i = 2, 4 do
	tt.render.sprites[i] = E:clone_c("sprite")
	tt.render.sprites[i].prefix = "elven_stargazers_tower_lvl2_tower_layer" .. i - 1
	tt.render.sprites[i].name = "idle"
	tt.render.sprites[i].offset = v(3, 14)
	tt.render.sprites[i].group = "layers"
	tt.render.sprites[i].angles = {}
	tt.render.sprites[i].angles.idle = {
		"idle_back",
		"idle"
	}
	tt.render.sprites[i].angles.attack = {
		"attack_back",
		"attack"
	}
	tt.render.sprites[i].scale = base_scale
end

tt.render.sprites[5].offset = v(3.3 * base_scale.x, 73 * base_scale.y)
tt.render.sprites[5].scale = base_scale
tt.render.sprites[6] = E:clone_c("sprite")
tt.render.sprites[6].prefix = "elven_stargazers_tower_lvl2_elf"
tt.render.sprites[6].name = "idle"
tt.render.sprites[6].offset = v(4, 32)
tt.render.sprites[6].scale = base_scale
tt.render.elf_sid = 6
tt.attacks.list[1].bullet_start_offset = {
	tt.render.sprites[tt.render.moon_sid].offset,
	tt.render.sprites[tt.render.moon_sid].offset
}
tt.ui.click_rect = r(-36, 0, 75, 83)
tt = E:register_t("tower_elven_stargazers_lvl3", "tower_elven_stargazers_lvl1")
b = balance.towers.elven_stargazers
tt.info.i18n_key = "TOWER_STARGAZER_3"
tt.tower.level = 3
tt.tower.price = b.price[3]
tt.tower.menu_offset = v(3, 30)
tt.attacks.range = b.basic_attack.range[3]

local base_scale = v(1.05, 1.05)

for i = 2, 7 do
	tt.render.sprites[i] = E:clone_c("sprite")
	tt.render.sprites[i].prefix = "elven_stargazers_tower_lvl3_tower_layer" .. i - 1
	tt.render.sprites[i].name = "idle"
	tt.render.sprites[i].offset = v(3, 14)
	tt.render.sprites[i].group = "layers"
	tt.render.sprites[i].angles = {}
	tt.render.sprites[i].angles.idle = {
		"idle_back",
		"idle"
	}
	tt.render.sprites[i].angles.attack = {
		"attack_back",
		"attack"
	}
	tt.render.sprites[i].scale = base_scale
end

tt.render.sprites[8] = E:clone_c("sprite")
tt.render.sprites[8].prefix = "elven_stargazers_tower_ray_start_lvl3_lvl2_lvl1"
tt.render.sprites[8].name = "start"
tt.render.sprites[8].hidden = true
tt.render.sprites[8].z = Z_BULLETS + 1
tt.render.sprites[8].offset = v(3.3 * base_scale.x, 82 * base_scale.y)
tt.render.sprites[8].scale = base_scale
tt.render.moon_sid = 8
tt.render.sprites[9] = E:clone_c("sprite")
tt.render.sprites[9].prefix = "elven_stargazers_tower_lvl3_elf"
tt.render.sprites[9].name = "idle"
tt.render.sprites[9].offset = v(2.5, 33)
tt.render.sprites[9].scale = base_scale
tt.render.elf_sid = 9
tt.attacks.list[1].bullet_start_offset = {
	tt.render.sprites[tt.render.moon_sid].offset,
	tt.render.sprites[tt.render.moon_sid].offset
}
tt.ui.click_rect = r(-37, 0, 80, 86)
tt = E:register_t("tower_elven_stargazers_lvl4", "tower_elven_stargazers_lvl1")

local b = balance.towers.elven_stargazers

E:add_comps(tt, "powers")

tt.info.i18n_key = "TOWER_STARGAZER_4"
tt.info.stat_damage = b.stats.damage
tt.info.stat_range = b.stats.range
tt.info.stat_cooldown = b.stats.cooldown
tt.info.damage_icon = "magic"
tt.tower.level = 4
tt.tower.price = b.price[4]
tt.tower.menu_offset = v(3, 28)
tt.attacks.range = b.basic_attack.range[4]
tt.attacks.list[1].bullet_start_offset = {
	v(3, 85.7),
	v(3, 85.7)
}
tt.powers.teleport = CC("power")
tt.powers.teleport.price = b.teleport.price
tt.powers.teleport.cooldown = b.teleport.cooldown
tt.powers.teleport.teleport_nodes_back = b.teleport.teleport_nodes_back
tt.powers.teleport.enc_icon = 13
tt.powers.teleport.name = "teleport"
tt.powers.teleport.key = "EVENT_HORIZON"
tt.powers.stars_death = CC("power")
tt.powers.stars_death.price = b.stars_death.price
tt.powers.stars_death.enc_icon = 14
tt.powers.stars_death.name = "stars_death"
tt.powers.stars_death.key = "RISING_STAR"

for i = 2, 9 do
	tt.render.sprites[i] = E:clone_c("sprite")
	tt.render.sprites[i].prefix = "elven_stargazers_tower_lvl4_tower_layer" .. i - 1
	tt.render.sprites[i].name = "idle"
	tt.render.sprites[i].offset = v(3, 14)
	tt.render.sprites[i].group = "layers"
	tt.render.sprites[i].angles = {}
	tt.render.sprites[i].angles.idle = {
		"idle_back",
		"idle"
	}
	tt.render.sprites[i].angles.attack = {
		"attack_back",
		"attack"
	}
end

tt.render.sprites[10] = E:clone_c("sprite")
tt.render.sprites[10].prefix = "elven_stargazers_tower_ray_start_lvl3_lvl2_lvl1"
tt.render.sprites[10].name = "start"
tt.render.sprites[10].hidden = true
tt.render.sprites[10].z = Z_BULLETS + 1
tt.render.sprites[10].offset = v(3, 88.7)
tt.render.moon_sid = 10
tt.render.sprites[11] = E:clone_c("sprite")
tt.render.sprites[11].prefix = "elven_stargazers_tower_lvl4_elf"
tt.render.sprites[11].name = "idle"
tt.render.sprites[11].offset = v(3, 35)
tt.render.elf_sid = 11
tt.render.sprites[12] = E:clone_c("sprite")
tt.render.sprites[12].prefix = "elven_stargazers_tower_event_horizon_tower_fx"
tt.render.sprites[12].name = "idle"
tt.render.sprites[12].hidden = true
tt.render.sprites[12].offset = v(3, 85.7)
tt.render.teleport_sid = 12
tt.attacks.list[2] = table.deepclone(tt.attacks.list[1])
tt.attacks.list[2].animation = "skill1"
tt.attacks.list[2].mod = "mod_tower_stargazers_teleport_stun"
tt.attacks.list[2].fx = "fx_tower_stargazers_teleport_middle"
tt.attacks.list[2].enemy_fx_small = "fx_tower_stargazers_teleport_enemy_small"
tt.attacks.list[2].enemy_fx_big = "fx_tower_stargazers_teleport_enemy_big"
tt.attacks.list[2].cooldown = nil
tt.attacks.list[2].vis_flags = bor(F_TELEPORT)
tt.attacks.list[2].vis_bans = bor(F_BOSS, F_MINIBOSS, F_NIGHTMARE)
tt.attacks.list[2].shoot_time = fts(31)
tt.attacks.list[2].load_time = fts(13)
tt.attacks.list[2].teleport_nodes_back = b.teleport.teleport_nodes_back
tt.attacks.list[2].max_targets = b.teleport.max_targets
tt.attacks.list[2].sound_cast = "TowerElvenStargazersEventHorizonCast"
tt.attacks.list[2].sound_teleport_out = "TowerElvenStargazersEventHorizonTeleportOut"
tt.attacks.list[2].sound_teleport_in = "TowerElvenStargazersEventHorizonTeleportIn"
tt.attacks.list[3] = CC("custom_attack")
tt.attacks.list[3].animation = "skill2"
tt.attacks.list[3].mod = "mod_tower_elven_stargazers_star_death"
tt.ui.click_rect = r(-40, 0, 85, 93)
tt = E:register_t("soldier_tower_ghost_lvl1", "soldier_militia")

E:add_comps(tt, "nav_grid")

b = balance.towers.ghost
tt.info.portrait = "gui_bottom_info_image_soldiers_0040"
tt.info.random_name_count = 18
tt.info.random_name_format = "SOLDIER_GHOST_TOWER"
tt.unit.blood_color = BLOOD_RED
tt.main_script.update = scripts.tower_ghost.soldier_update
tt.main_script.insert = scripts.tower_ghost.soldier_insert
tt.render.sprites[1].prefix = "ghost_tower_lvl1_unit"
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.unit.hit_offset = v(0, 12)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, 13)
tt.health.hp_max = b.soldier.hp[1]
tt.health.armor = b.soldier.armor[1]
tt.health_bar.offset = v(0, 33)
tt.health.dead_lifetime = b.soldier.dead_lifetime
tt.regen.health = b.soldier.regen_hp[1]
tt.motion.max_speed = b.soldier.speed
tt.particle = "ps_soldier_tower_ghost"
tt.melee.range = b.soldier.basic_attack.range
tt.melee.attacks[1].cooldown = b.soldier.basic_attack.cooldown
tt.melee.attacks[1].damage_min = b.soldier.basic_attack.damage_min[1]
tt.melee.attacks[1].damage_max = b.soldier.basic_attack.damage_max[1]
tt.melee.attacks[1].hit_time = fts(16)
tt.melee.attacks[1].damage_type = b.soldier.basic_attack.damage_type
tt.melee.attacks[1].hit_decal = "decal_soldier_tower_ghost_hit"
tt.melee.attacks[1].hit_offset = v(30, 20)
tt.soldier.melee_slot_spread = v(-8, -8)
tt.sound_events.death = "TowerGhostSoulAttackTravel"
tt.ui.click_rect = r(-10, 2, 20, 27)
tt = E:register_t("soldier_tower_ghost_lvl2", "soldier_tower_ghost_lvl1")
b = balance.towers.ghost
tt.info.portrait = "gui_bottom_info_image_soldiers_0041"
tt.render.sprites[1].prefix = "ghost_tower_lvl2_unit"
tt.health.hp_max = b.soldier.hp[2]
tt.health_bar.offset = v(0, 35)
tt.health.armor = b.soldier.armor[2]
tt.regen.health = b.soldier.regen_hp[2]
tt.melee.attacks[1].damage_min = b.soldier.basic_attack.damage_min[2]
tt.melee.attacks[1].damage_max = b.soldier.basic_attack.damage_max[2]
tt = E:register_t("soldier_tower_ghost_lvl3", "soldier_tower_ghost_lvl1")
b = balance.towers.ghost
tt.info.portrait = "gui_bottom_info_image_soldiers_0042"
tt.render.sprites[1].prefix = "ghost_tower_lvl3_unit"
tt.health.hp_max = b.soldier.hp[3]
tt.health_bar.offset = v(0, 38)
tt.health.armor = b.soldier.armor[3]
tt.regen.health = b.soldier.regen_hp[3]
tt.melee.attacks[1].damage_min = b.soldier.basic_attack.damage_min[3]
tt.melee.attacks[1].damage_max = b.soldier.basic_attack.damage_max[3]
tt = E:register_t("soldier_tower_ghost_lvl4", "soldier_tower_ghost_lvl1")

E:add_comps(tt, "powers")

b = balance.towers.ghost
tt.info.portrait = "gui_bottom_info_image_soldiers_0043"
tt.render.sprites[1].prefix = "ghost_tower_lvl4_unit"
tt.health.hp_max = b.soldier.hp[4]
tt.health_bar.offset = v(0, 40)
tt.health.armor = b.soldier.armor[4]
tt.regen.health = b.soldier.regen_hp[4]
tt.melee.attacks[1].damage_min = b.soldier.basic_attack.damage_min[4]
tt.melee.attacks[1].damage_max = b.soldier.basic_attack.damage_max[4]
tt.ui.click_rect = r(-12, 2, 24, 30)
tt.powers.soul_attack = E:clone_c("power")
tt.powers.extra_damage = E:clone_c("power")
tt.powers.extra_damage.damages = b.extra_damage.damage_factor
tt.powers.extra_damage.cooldowns = b.extra_damage.cooldown_start
tt.soul = "soul_soldier_tower_ghost_lvl4"
tt.mod_extra_damage = "mod_tower_ghost_increase_damage_factor"
tt.extra_damage_cooldown = b.extra_damage.cooldown_start[1]

tt = E:register_t("soul_soldier_tower_ghost_lvl4", "decal_scripted")
tt.main_script.update = scripts.tower_ghost.soul_update
b = balance.towers.ghost.soul_attack
tt.render.sprites[1].prefix = "ghost_tower_soul_skill"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].loop = false
tt.render.sprites[1].hidden = true
tt.damage_min = b.damage_min
tt.damage_max = b.damage_max
tt.slow_duration = b.slow_duration
tt.slow_factor = b.slow_factor
tt.damage_factor_duration = b.damage_factor_duration
tt.radius = b.range
tt.max_targets = b.max_targets
tt.delay = fts(16)
tt.vis_bans = bor(F_FLYING)
tt.bullet = "bolt_soul_soldier_tower_ghost"
tt = E:register_t("tower_paladin_covenant_soldier_lvl1", "soldier_militia")

E:add_comps(tt, "nav_grid")

b = balance.towers.paladin_covenant
tt.info.portrait = "gui_bottom_info_image_soldiers_0001"
tt.info.random_name_count = 18
tt.info.random_name_format = "SOLDIER_PALADINS_%i_NAME"
tt.main_script.update = scripts.tower_paladin_covenant.soldier_update
tt.main_script.insert = scripts.tower_paladin_covenant.soldier_insert
tt.render.sprites[1].prefix = "paladin_soldiers_lvl1"
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.unit.hit_offset = v(0, 12)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, 13)
tt.health.hp_max = b.soldier.hp[1]
tt.health.armor = b.soldier.armor[1]
tt.health_bar.offset = v(0, 30)
tt.health.dead_lifetime = b.soldier.dead_lifetime
tt.regen.health = b.soldier.regen_hp[1]
tt.motion.max_speed = b.soldier.speed
tt.melee.range = b.soldier.basic_attack.range
tt.melee.attacks[1].cooldown = b.soldier.basic_attack.cooldown
tt.melee.attacks[1].damage_min = b.soldier.basic_attack.damage_min[1]
tt.melee.attacks[1].damage_max = b.soldier.basic_attack.damage_max[1]
tt.melee.attacks[1].hit_time = fts(10)
tt.soldier.melee_slot_spread = v(-8, -8)
tt.sound_events.death = "TowerPaladinCovenantUnitDeath"
tt.ui.click_rect = r(-10, -2, 20, 25)
tt = E:register_t("tower_paladin_covenant_soldier_lvl2", "tower_paladin_covenant_soldier_lvl1")
tt.info.portrait = "gui_bottom_info_image_soldiers_0002"
tt.render.sprites[1].prefix = "paladin_soldiers_lvl2"
tt.health.hp_max = b.soldier.hp[2]
tt.health.armor = b.soldier.armor[2]
tt.regen.health = b.soldier.regen_hp[2]
tt.motion.max_speed = b.soldier.speed
tt.melee.range = b.soldier.basic_attack.range
tt.melee.attacks[1].cooldown = b.soldier.basic_attack.cooldown
tt.melee.attacks[1].damage_min = b.soldier.basic_attack.damage_min[2]
tt.melee.attacks[1].damage_max = b.soldier.basic_attack.damage_max[2]
tt.melee.attacks[1].hit_time = fts(10)
tt = E:register_t("tower_paladin_covenant_soldier_lvl3", "tower_paladin_covenant_soldier_lvl1")
tt.info.portrait = "gui_bottom_info_image_soldiers_0003"
tt.render.sprites[1].prefix = "paladin_soldiers_lvl3"
tt.health.hp_max = b.soldier.hp[3]
tt.health.armor = b.soldier.armor[3]
tt.health_bar.offset = v(0, 30)
tt.regen.health = b.soldier.regen_hp[3]
tt.idle_flip.animations = {
	"idle",
	"idle2"
}
tt.motion.max_speed = b.soldier.speed
tt.melee.range = b.soldier.basic_attack.range
tt.melee.attacks[1].cooldown = b.soldier.basic_attack.cooldown
tt.melee.attacks[1].damage_min = b.soldier.basic_attack.damage_min[3]
tt.melee.attacks[1].damage_max = b.soldier.basic_attack.damage_max[3]
tt.melee.attacks[1].hit_time = fts(11)
tt = E:register_t("tower_paladin_covenant_soldier_lvl4", "tower_paladin_covenant_soldier_lvl1")

E:add_comps(tt, "powers", "timed_attacks")

b = balance.towers.paladin_covenant
tt.info.portrait = "gui_bottom_info_image_soldiers_0004"
tt.render.sprites[1].prefix = "paladin_soldier_lvl4"
tt.render.sprites[1].angles.walk = {
	"walk"
}
tt.idle_flip.animations = {
	"idle"
}
tt.health.hp_max = b.soldier.hp[4]
tt.health.armor = b.soldier.armor[4]
tt.health_bar.offset = v(0, 35)
tt.regen.health = b.soldier.regen_hp[4]
tt.motion.max_speed = b.soldier.speed
tt.ui.click_rect = r(-15, -2, 30, 35)
tt.powers.lead = E:clone_c("power")
tt.powers.lead.b = b.lead.soldier_veteran
tt.powers.lead.sprite_prefix = "paladin_soldiers_lvl4_captain_soldier"
tt.powers.lead.health_bar_size = HEALTH_BAR_SIZE_MEDIUM
tt.powers.lead.cooldown = b.lead.soldier_veteran.aura_cooldown
tt.powers.lead.animation_upgrade = "raise"
tt.powers.lead.hit_time = fts(12)
tt.powers.lead.portrait = "gui_bottom_info_image_soldiers_0005"
tt.powers.healing_prayer = E:clone_c("power")
tt.powers.healing_prayer.health_trigger_factor = b.healing_prayer.health_trigger_factor
tt.powers.healing_prayer.cooldown = b.healing_prayer.cooldown
tt.melee.range = b.soldier.basic_attack.range
tt.melee.attacks[1].animation = "attack01"
tt.melee.attacks[1].cooldown = b.soldier.basic_attack.cooldown
tt.melee.attacks[1].damage_min = b.soldier.basic_attack.damage_min[4]
tt.melee.attacks[1].damage_max = b.soldier.basic_attack.damage_max[4]
tt.melee.attacks[1].shared_cooldown = true
tt.melee.attacks[1].hit_time = fts(9)
tt.melee.attacks[2] = table.deepclone(tt.melee.attacks[1])
tt.melee.attacks[2].animation = "attack02"
tt.melee.attacks[2].chance = 0.5
tt.melee.attacks[2].hit_time = fts(8)
tt.timed_attacks.list[1] = E:clone_c("mod_attack")
tt.timed_attacks.list[1].animation = "healing"
tt.timed_attacks.list[1].cooldown = nil
tt.timed_attacks.list[1].disabled = true
tt.timed_attacks.list[1].hit_time = {
	fts(10),
	fts(9)
}
tt.timed_attacks.list[1].lost_health = nil
tt.timed_attacks.list[1].duration = b.healing_prayer.duration
tt.timed_attacks.list[1].mods = {
	"tower_paladin_covenant_soldier_lvl4_invincibility",
	"tower_paladin_covenant_soldier_lvl4_healing_mod",
	"tower_paladin_covenant_soldier_lvl4_healing_mod_fx"
}
tt.timed_attacks.list[1].sound = "TowerPaladinCovenantHealingPrayer"
tt.timed_attacks.list[2] = E:clone_c("aura_attack")
tt.timed_attacks.list[2].animation = "armor"
tt.timed_attacks.list[2].cooldown = nil
tt.timed_attacks.list[2].disabled = true
tt.timed_attacks.list[2].hit_time = fts(8)
tt.timed_attacks.list[2].enemies_trigger_range = 90
tt.timed_attacks.list[2].vis_bans = bor(F_FLYING)
tt.timed_attacks.list[2].aura_name = "tower_paladin_covenant_soldier_lvl4_lead_aura"
tt.timed_attacks.list[2].fx = "tower_paladin_covenant_soldier_lvl4_lead_aura_fx"
tt.soldier.melee_slot_offset = v(8, 0)

tt = E:register_t("tower_paladin_covenant_soldier_lvl4_invincibility", "modifier")
tt.invincibility_duration = b.healing_prayer.invincibility_duration
tt.main_script.insert = scripts.tower_paladin_covenant_soldier_lvl4_invincibility.insert
tt.main_script.update = scripts.tower_paladin_covenant_soldier_lvl4_invincibility.update
tt.main_script.remove = scripts.tower_paladin_covenant_soldier_lvl4_invincibility.remove

tt = E:register_t("tower_paladin_covenant_soldier_lvl4_healing_mod", "modifier")

E:add_comps(tt, "hps", "render")

b = balance.towers.paladin_covenant
tt.healing_duration = b.healing_prayer.healing_duration
tt.modifier.duration = b.healing_prayer.duration
tt.modifier.resets_same = false
tt.hps.heal_min = b.healing_prayer.heal
tt.hps.heal_max = b.healing_prayer.heal
tt.hps.heal_every = b.healing_prayer.heal_every
function tt.main_script.insert(this, store, script)
	this.modifier.duration = this.healing_duration[this.modifier.level]
	this.hps.heal_min = this.hps.heal_min[this.modifier.level]
	this.hps.heal_max = this.hps.heal_max[this.modifier.level]

	return scripts.mod_hps.insert(this, store, script)
end
tt.main_script.update = scripts.mod_hps.update

tt = E:register_t("tower_paladin_covenant_soldier_lvl4_healing_mod_fx", "modifier")

E:add_comps(tt, "render", "tween")

b = balance.towers.paladin_covenant
tt.healing_duration = b.healing_prayer.healing_duration
tt.modifier.duration = b.healing_prayer.duration
tt.modifier.resets_same = false
tt.modifier.use_mod_offset = false
tt.render.sprites[1].name = "paladin_soldier_lvl4_healing_halo"
tt.render.sprites[1].loop = false
tt.render.sprites[1].animated = false
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].loop = false
tt.render.sprites[2].name = "paladin_soldier_lvl4_healing_glow_0010"
tt.render.sprites[2].sort_y_offset = 1
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].name = "paladin_soldiers_lvl4_healing_plusSymbol"
tt.render.sprites[3].loop = true
tt.render.sprites[3].animated = true
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(4),
		255
	}
}
tt.tween.props[1].sprite_id = 1
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].name = "alpha"
tt.tween.props[2].keys = {
	{
		0,
		0
	},
	{
		fts(4),
		255
	}
}
tt.tween.props[2].sprite_id = 2
tt.tween.props[3] = E:clone_c("tween_prop")
tt.tween.props[3].name = "alpha"
tt.tween.props[3].keys = {
	{
		0,
		0
	},
	{
		fts(4),
		255
	}
}
tt.tween.props[3].sprite_id = 3
tt.tween.remove = false
function tt.main_script.insert(this, store, script)
	this.modifier.duration = this.healing_duration[this.modifier.level]

	local target = store.entities[this.modifier.target_id]

	if not target or not target.health or target.health.dead then
		return false
	end

	signal.emit("mod-applied", this, target)

	return true
end
tt.main_script.update = scripts.mod_track_fx.update

tt = E:register_t("tower_paladin_covenant_soldier_lvl4_lead_aura", "aura")

E:add_comps(tt)

tt.aura.mods = {
	"tower_paladin_covenant_soldier_lvl4_lead_aura_mod",
	"tower_paladin_covenant_soldier_lvl4_lead_aura_mod_fx"
}
tt.aura.cycles = 1
tt.aura.radius = b.lead.soldier_veteran.aura_range
tt.aura.track_source = true
tt.aura.vis_bans = bor(F_ENEMY)
tt.aura.vis_flags = F_MOD
tt.aura.use_mod_offset = false
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_apply_mod.update
tt.sound_events.insert = "TowerPaladinCovenantLeadByExample"
tt = E:register_t("tower_paladin_covenant_soldier_lvl4_lead_aura_mod", "modifier")
b = balance.towers.paladin_covenant
tt.modifier.duration = b.lead.soldier_veteran.aura_duration
tt.modifier.use_mod_offset = false
tt.inflicted_damage_factor = b.lead.soldier_veteran.aura_damage_buff_factor
tt.main_script.insert = scripts.mod_damage_factors.insert
tt.main_script.remove = scripts.mod_damage_factors.remove
tt.main_script.update = scripts.mod_track_target.update
tt = E:register_t("tower_paladin_covenant_soldier_lvl4_lead_aura_mod_fx", "modifier")

E:add_comps(tt, "render", "tween")

tt.modifier.duration = b.lead.soldier_veteran.aura_duration
tt.modifier.use_mod_offset = false
tt.render.sprites[1].name = "paladin_soldiers_lvl4_captain_armor_mod_decal"
tt.render.sprites[1].loop = false
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_DECALS
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		1,
		255
	}
}
tt.tween.remove = false
tt.main_script.update = scripts.mod_track_fx.update
tt = E:register_t("tower_paladin_covenant_soldier_lvl4_lead_aura_fx", "fx")
tt.render.sprites[1].name = "paladin_soldiers_lvl4_captain_armor_decal_start"
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].name = "paladin_soldiers_lvl4_captain_armor_buff"
tt.render.sprites[2].loop = false
tt.render.sprites[2].animated = true
tt.render.sprites[2].hide_after_runs = 1
tt = E:register_t("tower_paladin_covenant_lvl1", "tower_KR5")

E:add_comps(tt, "barrack", "vis")

tt.tower.type = "paladin_covenant"
tt.tower.kind = TOWER_KIND_BARRACK
tt.tower.team = TEAM_LINIREA
tt.tower.level = 1
tt.tower.price = b.price[1]
tt.tower.menu_offset = v(0, 20)
tt.info.i18n_key = "TOWER_PALADIN_COVENANT_1"
tt.info.portrait = "portraits_towers_0001"
tt.info.enc_icon = 2
tt.info.tower_portrait = "towerselect_portraits_big_" .. "0001"
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 15)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "paladin_covenant_lvl1"
tt.render.sprites[2].offset = v(0, 9)
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].prefix = "paladin_covenant_lvl123_door"
tt.render.sprites[3].name = "close"
tt.render.sprites[3].loop = false
tt.render.sprites[3].offset = v(0, 7)
tt.barrack.soldier_type = "tower_paladin_covenant_soldier_lvl1"
tt.barrack.rally_range = b.rally_range
tt.barrack.respawn_offset = v(0, 9)
tt.barrack.max_soldiers = b.max_soldiers
tt.info.fn = scripts.tower_paladin_covenant.get_info
tt.main_script.insert = scripts.tower_barrack.insert
tt.main_script.update = scripts.tower_barrack.update
tt.main_script.remove = scripts.tower_barrack.remove
tt.sound_events.insert = "TowerPaladinCovenantTaunt"
tt.sound_events.change_rally_point = "TowerPaladinCovenantTaunt"
tt.sound_events.tower_room_select = "TowerPaladinCovenantTauntSelect"
tt.ui.click_rect = r(-40, 0, 80, 70)
tt = E:register_t("tower_paladin_covenant_lvl2", "tower_paladin_covenant_lvl1")
tt.info.enc_icon = 6
tt.info.i18n_key = "TOWER_PALADIN_COVENANT_2"
tt.tower.level = 2
tt.tower.price = b.price[2]
tt.tower.menu_offset = v(0, 21)
tt.render.sprites[2].name = "paladin_covenant_lvl2"
tt.barrack.soldier_type = "tower_paladin_covenant_soldier_lvl2"
tt.ui.click_rect = r(-40, 0, 80, 70)
tt = E:register_t("tower_paladin_covenant_lvl3", "tower_paladin_covenant_lvl1")
tt.info.enc_icon = 10
tt.info.i18n_key = "TOWER_PALADIN_COVENANT_3"
tt.tower.level = 3
tt.tower.price = b.price[3]
tt.tower.menu_offset = v(0, 22)
tt.render.sprites[2].name = "paladin_covenant_lvl3"
tt.barrack.soldier_type = "tower_paladin_covenant_soldier_lvl3"
tt.ui.click_rect = r(-40, 0, 80, 80)
tt = E:register_t("tower_paladin_covenant_lvl4", "tower_paladin_covenant_lvl1")

E:add_comps(tt, "powers")

tt.info.portrait = "portraits_towers_0001"
tt.info.room_portrait = "quickmenu_main_icons_main_icons_0001_0001"
tt.info.enc_icon = 20
tt.info.i18n_key = "TOWER_PALADIN_COVENANT_4"
tt.info.stat_damage = b.stats.damage
tt.info.stat_hp = b.stats.hp
tt.info.stat_armor = b.stats.armor
tt.tower.price = b.price[4]
tt.tower.level = 4
tt.tower.menu_offset = v(0, 25)
tt.powers.lead = E:clone_c("power")
tt.powers.lead.price = b.lead.price
tt.powers.lead.enc_icon = 2
tt.powers.lead.max_level = 1
tt.powers.healing_prayer = E:clone_c("power")
tt.powers.healing_prayer.price = b.healing_prayer.price
tt.powers.healing_prayer.enc_icon = 1
tt.barrack.soldier_type = "tower_paladin_covenant_soldier_lvl4"
tt.barrack.rally_range = b.rally_range
tt.render.sprites[2].name = "paladin_covenant_lvl4"
tt.render.sprites[3].prefix = "paladin_covenant_lvl4_door"
tt.render.sprites[3].offset = v(0, 10)
tt.render.sprites[4] = E:clone_c("sprite")
tt.render.sprites[4].name = "paladin_covenant_lvl4_flag"
tt.render.sprites[4].offset = v(0, 9)
tt.sound_events.insert = "TowerPaladinCovenantTaunt"
tt.sound_events.change_rally_point = "TowerPaladinCovenantTaunt"
tt.ui.click_rect = r(-42, 0, 84, 90)
tt = E:register_t("tower_ghost_lvl1", "tower_KR5")
b = balance.towers.ghost

E:add_comps(tt, "barrack", "vis", "tower_upgrade_persistent_data")

tt.tower.type = "ghost"
tt.tower.kind = TOWER_KIND_BARRACK
tt.tower.team = TEAM_DARK_ARMY
tt.tower.level = 1
tt.tower.price = b.price[1]
tt.tower.menu_offset = v(0, 20)
tt.info.fn = scripts.tower_ghost.get_info
tt.info.i18n_key = "TOWER_GHOST_1"
tt.info.portrait = "portraits_towers_0016"
tt.info.enc_icon = 16
tt.info.room_portrait = "quickmenu_main_icons_main_icons_0015_0001"
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 15)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "ghost_tower_lvl1_tower"
tt.render.sprites[2].offset = v(0, 15)
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].prefix = "ghost_tower_lvl1_tower_shadow_fx"
tt.render.sprites[3].name = "idle"
tt.render.sprites[3].loop = true
tt.render.sprites[3].offset = v(0, 15)
tt.render.sprites[3].fps = 20
tt.render.sprites[4] = E:clone_c("sprite")
tt.render.sprites[4].prefix = "ghost_tower_lvl1_tower_spawn_fx"
tt.render.sprites[4].name = "idle"
tt.render.sprites[4].loop = false
tt.render.sprites[4].hidden = true
tt.render.sprites[4].offset = v(2, 15)
tt.barrack.soldier_type = "soldier_tower_ghost_lvl1"
tt.barrack.rally_range = b.rally_range
tt.barrack.respawn_offset = v(0, 15)
tt.barrack.max_soldiers = b.max_soldiers
tt.main_script.insert = scripts.tower_barrack.insert
tt.main_script.update = scripts.tower_ghost.update
tt.main_script.remove = scripts.tower_barrack.remove
tt.sound_events.insert = "TowerGhostTaunt"
tt.sound_events.change_rally_point = "TowerGhostTaunt"
tt.sound_events.tower_room_select = "TowerGhostTauntSelect"
tt.sound_events.spawn_unit = "TowerGhostSpawnUnit"
tt.ui.click_rect = r(-35, 0, 70, 65)
tt = E:register_t("tower_ghost_lvl2", "tower_ghost_lvl1")
b = balance.towers.ghost
tt.tower.level = 2
tt.tower.price = b.price[2]
tt.info.i18n_key = "TOWER_GHOST_2"
tt.barrack.respawn_offset = v(0, 28)
tt.tower.menu_offset = v(0, 27)
tt.barrack.soldier_type = "soldier_tower_ghost_lvl2"
tt.render.sprites[2].name = "ghost_tower_lvl2_tower"
tt.render.sprites[2].offset = v(0, 20)
tt.render.sprites[3].prefix = "ghost_tower_lvl2_tower_shadow_fx"
tt.render.sprites[3].offset = v(0, 19)
tt.render.sprites[4].prefix = "ghost_tower_lvl2_tower_spawn_fx"
tt.render.sprites[4].offset = v(0, 19)
tt.ui.click_rect = r(-35, 0, 70, 80)
tt = E:register_t("tower_ghost_lvl3", "tower_ghost_lvl1")
b = balance.towers.ghost
tt.tower.level = 3
tt.tower.price = b.price[3]
tt.info.i18n_key = "TOWER_GHOST_3"
tt.barrack.respawn_offset = v(0, 35)
tt.tower.menu_offset = v(0, 30)
tt.barrack.soldier_type = "soldier_tower_ghost_lvl3"
tt.render.sprites[2].name = "ghost_tower_lvl3_tower"
tt.render.sprites[2].offset = v(0, 20)
tt.render.sprites[3].prefix = "ghost_tower_lvl3_tower_shadow_fx"
tt.render.sprites[3].offset = v(0, 20)
tt.render.sprites[4].prefix = "ghost_tower_lvl3_tower_spawn_fx"
tt.render.sprites[4].offset = v(0, 20)
tt.ui.click_rect = r(-35, 0, 70, 90)
tt = E:register_t("tower_ghost_lvl4", "tower_ghost_lvl1")

E:add_comps(tt, "powers")

b = balance.towers.ghost
tt.tower.level = 4
tt.tower.price = b.price[4]
tt.info.i18n_key = "TOWER_GHOST_4"
tt.info.stat_damage = b.stats.damage
tt.info.stat_hp = b.stats.hp
tt.info.stat_armor = b.stats.armor
tt.barrack.respawn_offset = v(0, 40)
tt.tower.menu_offset = v(0, 30)
tt.barrack.soldier_type = "soldier_tower_ghost_lvl4"
tt.render.sprites[2].name = "ghost_tower_lvl4_tower"
tt.render.sprites[2].offset = v(0, 18)
tt.render.sprites[3].prefix = "ghost_tower_lvl4_tower_shadow_fx"
tt.render.sprites[3].offset = v(0, 16)
tt.render.sprites[4].prefix = "ghost_tower_lvl4_tower_spawn_fx"
tt.render.sprites[4].offset = v(0, 18)
tt.ui.click_rect = r(-35, 0, 70, 90)
tt.powers.extra_damage = E:clone_c("power")
tt.powers.extra_damage.price = b.extra_damage.price
tt.powers.extra_damage.enc_icon = 25
tt.powers.soul_attack = E:clone_c("power")
tt.powers.soul_attack.price = b.soul_attack.price
tt.powers.soul_attack.enc_icon = 26
tt = E:register_t("tower_tricannon_lvl1", "tower_KR5")

E:add_comps(tt, "attacks", "vis")

b = balance.towers.tricannon
tt.tower.type = "tricannon"
tt.tower.kind = TOWER_KIND_ENGINEER
tt.tower.team = TEAM_DARK_ARMY
tt.tower.level = 1
tt.tower.price = b.price[1]
tt.tower.menu_offset = v(0, 18)
tt.info.portrait = "portraits_towers_0004"
tt.info.tower_portrait = "towerselect_portraits_big_" .. "0006"
tt.info.enc_icon = 4
tt.info.i18n_key = "TOWER_TRICANNON_1"
tt.main_script.insert = scripts.tower_engineer.insert
tt.main_script.update = scripts.tower_tricannon.update
tt.attacks.range = b.basic_attack.range[1]
tt.attacks.attack_delay_on_spawn = fts(5)
tt.attacks.list[1] = E:clone_c("bullet_attack")
tt.attacks.list[1].bullet = "tower_tricannon_bomb_1"
tt.attacks.list[1].bomb_amount = b.basic_attack.bomb_amount[1]
tt.attacks.list[1].time_between_bombs = b.basic_attack.time_between_bombs
tt.attacks.list[1].range = b.basic_attack.range[1]
tt.attacks.list[1].cooldown = b.basic_attack.cooldown
tt.attacks.list[1].shoot_time = fts(39)
tt.attacks.list[1].vis_bans = bor(F_FLYING, F_NIGHTMARE, F_CLIFF)
tt.attacks.list[1].bullet_start_offset = {
	v(0, 45),
	v(-14, 36),
	v(14, 36)
}
tt.attacks.list[1].node_prediction = fts(32)
tt.attacks.list[1].animation = "attack"
tt.attacks.list[1].random_x_to_dest = 30
tt.attacks.list[1].random_y_to_dest = 20
tt.attacks.list[1].sound = "TowerTricannonBasicAttackFire"
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 10)

for i = 2, 8 do
	tt.render.sprites[i] = E:clone_c("sprite")
	tt.render.sprites[i].prefix = "tricannon_tower_lvl1_tower_layer" .. i - 1
	tt.render.sprites[i].name = "idle"
	tt.render.sprites[i].group = "layers"
end

tt.sound_events.insert = "TowerTricannonTaunt"
tt.ui.click_rect = r(-40, -3, 80, 55)
tt = E:register_t("tower_tricannon_lvl2", "tower_tricannon_lvl1")
tt.info.enc_icon = 8
tt.info.i18n_key = "TOWER_TRICANNON_2"
tt.tower.level = 2
tt.tower.price = b.price[2]
tt.attacks.range = b.basic_attack.range[2]
tt.attacks.list[1].bullet = "tower_tricannon_bomb_2"
tt.attacks.list[1].bomb_amount = b.basic_attack.bomb_amount[2]
tt.attacks.list[1].bullet_start_offset = {
	v(0, 59),
	v(-14, 50),
	v(14, 50)
}
tt.attacks.list[1].range = b.basic_attack.range[2]

for i = 2, 8 do
	tt.render.sprites[i] = E:clone_c("sprite")
	tt.render.sprites[i].prefix = "tricannon_tower_lvl2_tower_layer" .. i - 1
	tt.render.sprites[i].name = "idle"
	tt.render.sprites[i].group = "layers"
end

tt.ui.click_rect = r(-40, -3, 80, 62)
tt = E:register_t("tower_tricannon_lvl3", "tower_tricannon_lvl1")
tt.info.enc_icon = 12
tt.info.i18n_key = "TOWER_TRICANNON_3"
tt.tower.level = 3
tt.tower.price = b.price[3]
tt.tower.menu_offset = v(0, 19)
tt.attacks.range = b.basic_attack.range[3]
tt.attacks.list[1].bullet = "tower_tricannon_bomb_3"
tt.attacks.list[1].bomb_amount = b.basic_attack.bomb_amount[3]
tt.attacks.list[1].bullet_start_offset = {
	v(0, 59),
	v(-14, 50),
	v(14, 50)
}
tt.attacks.list[1].range = b.basic_attack.range[3]

for i = 2, 8 do
	tt.render.sprites[i] = E:clone_c("sprite")
	tt.render.sprites[i].prefix = "tricannon_tower_lvl3_tower_layer" .. i - 1
	tt.render.sprites[i].name = "idle"
	tt.render.sprites[i].group = "layers"
end

tt.ui.click_rect = r(-40, -3, 80, 70)
tt = E:register_t("tower_tricannon_lvl4", "tower_KR5")

E:add_comps(tt, "attacks", "powers", "vis")

image_y = 120
tt.tower.type = "tricannon"
tt.tower.kind = TOWER_KIND_ENGINEER
tt.tower.team = TEAM_DARK_ARMY
tt.tower.level = 4
tt.tower.price = b.price[4]
tt.tower.size = TOWER_SIZE_LARGE
tt.tower.menu_offset = v(0, 24)
tt.info.enc_icon = 13
tt.info.i18n_key = "TOWER_TRICANNON_4"
tt.info.portrait = "portraits_towers_0004"
tt.info.room_portrait = "quickmenu_main_icons_main_icons_0004_0001"
tt.info.tower_portrait = "towerselect_portraits_big_" .. "0006"
tt.info.stat_damage = b.stats.damage
tt.info.stat_range = b.stats.range
tt.info.stat_cooldown = b.stats.cooldown
tt.powers.bombardment = E:clone_c("power")
tt.powers.bombardment.price = b.bombardment.price
tt.powers.bombardment.enc_icon = 7
tt.powers.bombardment.cooldown = b.bombardment.cooldown
tt.powers.bombardment.damage_min = b.bombardment.damage_min
tt.powers.bombardment.damage_max = b.bombardment.damage_max
tt.powers.bombardment.bomb_amount = b.bombardment.bomb_amount
tt.powers.overheat = CC("power")
tt.powers.overheat.price = b.overheat.price
tt.powers.overheat.enc_icon = 8
tt.powers.overheat.cooldown = b.overheat.cooldown
tt.powers.overheat.duration = b.overheat.duration
tt.powers.overheat.tick_dmg = b.overheat.decal.effect.damage
tt.main_script.update = scripts.tower_tricannon.update
tt.sound_events.insert = "TowerTricannonTaunt"
tt.sound_events.tower_room_select = "TowerTricannonTauntSelect"
tt.attacks.min_cooldown = b.shared_min_cooldown
tt.attacks.range = b.basic_attack.range[4]
tt.attacks.attack_delay_on_spawn = fts(5)
tt.attacks.list[1] = CC("bullet_attack")
tt.attacks.list[1].bullet = "tower_tricannon_bomb_4"
tt.attacks.list[1].bullet_overheated = "tower_tricannon_bomb_overheated"
tt.attacks.list[1].bomb_amount = b.basic_attack.bomb_amount[4]
tt.attacks.list[1].bullet_start_offset = {
	v(14, 71),
	v(-14, 71),
	v(0, 62)
}
tt.attacks.list[1].cooldown = b.basic_attack.cooldown
tt.attacks.list[1].node_prediction = fts(32)
tt.attacks.list[1].range = b.basic_attack.range[4]
tt.attacks.list[1].shoot_time = fts(48)
tt.attacks.list[1].vis_bans = bor(F_FLYING, F_NIGHTMARE, F_CLIFF)
tt.attacks.list[1].time_between_bombs = b.basic_attack.time_between_bombs
tt.attacks.list[1].random_x_to_dest = 30
tt.attacks.list[1].random_y_to_dest = 20
tt.attacks.list[1].sound = "TowerTricannonBasicAttackFire"
tt.attacks.list[2] = table.deepclone(tt.attacks.list[1])
tt.attacks.list[2].vis_bans = bor(F_NIGHTMARE, F_CLIFF)
tt.attacks.list[2].bullet = "tower_tricannon_bomb_bombardment_bomb"
tt.attacks.list[2].bullet_overheated = "tower_tricannon_bombardment_overheated_bomb"
tt.attacks.list[2].bullet_start_offset = {
	v(0, 71)
}
tt.attacks.list[2].cooldown = nil
tt.attacks.list[2].bomb_amount = nil
tt.attacks.list[2].node_prediction = fts(32)
tt.attacks.list[2].range = b.bombardment.range
tt.attacks.list[2].vis_flags = bor(F_MOD, F_RANGED)
tt.attacks.list[2].time_between_bombs_min = 3
tt.attacks.list[2].time_between_bombs_max = 9
tt.attacks.list[2].spread = b.bombardment.spread
tt.attacks.list[2].node_skip = b.bombardment.node_skip
tt.attacks.list[2].animation_start = "skill1"
tt.attacks.list[2].animation_loop = "loop"
tt.attacks.list[2].animation_end = "loop_end"
tt.attacks.list[2].shoot_time = fts(45)
tt.attacks.list[2].sounds = {
	"TowerTricannonBombardmentLvl1",
	"TowerTricannonBombardmentLvl2",
	"TowerTricannonBombardmentLvl3"
}
tt.attacks.list[3] = table.deepclone(tt.attacks.list[1])
tt.attacks.list[3].cooldown = nil
tt.attacks.list[3].duration = nil
tt.attacks.list[3].animation_charge = "skill_2_charge"
tt.attacks.list[3].animation_idle = "skill_2_idle"
tt.attacks.list[3].animation_shoot = "skill_2_attack"
tt.attacks.list[3].animation_end = "skill_2_fade_out"
tt.attacks.list[3].sound = "TowerTricannonOverheat"
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 10)

for i = 2, 11 do
	tt.render.sprites[i] = E:clone_c("sprite")
	tt.render.sprites[i].prefix = "tricannon_tower_lvl4_tower_layer" .. i - 1
	tt.render.sprites[i].name = "idle"
	tt.render.sprites[i].group = "layers"
end

tt.ui.click_rect = r(-45, -3, 90, 78)

tt = E:register_t("tower_tricannon_overheat_scorch_aura", "aura")

E:add_comps(tt, "render", "tween")

tt.aura.mod = "tower_tricannon_overheat_scorch_aura_mod"
tt.aura.duration = b.overheat.decal.duration
tt.aura.cycle_time = 0.3
tt.aura.radius = b.overheat.decal.radius
tt.aura.vis_bans = bor(F_FRIEND, F_FLYING)
tt.aura.vis_flags = bor(F_MOD)
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_apply_mod.update
tt.render.sprites[1].name = "tricannon_tower_fissure_decal"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].sort_y_offset = 2
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].name = "tricannon_tower_overheat_fire_fx"
tt.render.sprites[2].z = Z_DECALS
tt.tween.remove = false
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	},
	{
		"this.aura.duration-0.5",
		255
	},
	{
		"this.aura.duration",
		0
	}
}
tt.tween.props[1].loop = false
tt.tween.props[1].sprite_id = 1
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].sprite_id = 2
tt.tween.props[2].loop = true
tt.tween.props[2].keys = {
	{
		0,
		0
	},
	{
		0.5,
		255
	},
	{
		1,
		0
	}
}

tt = E:register_t("tower_tricannon_overheat_scorch_aura_bombardment", "tower_tricannon_overheat_scorch_aura")
tt.aura.duration = b.overheat.decal.duration

tt = E:register_t("tower_tricannon_overheat_scorch_aura_mod", "modifier")

E:add_comps(tt, "dps", "render")

tt.modifier.duration = b.overheat.decal.effect.duration
tt.dps.damage_config = b.overheat.decal.effect.damage
tt.dps.damage_type = DAMAGE_TRUE
tt.dps.damage_every = b.overheat.decal.effect.damage_every
tt.render.sprites[1].size_names = {
	"small",
	"medium",
	"large"
}
tt.render.sprites[1].prefix = "fire"
tt.render.sprites[1].name = "small"
tt.render.sprites[1].draw_order = 2
tt.render.sprites[1].loop = true
tt.main_script.insert = scripts.mod_tricannon_overheat_dps.insert
tt.main_script.update = scripts.mod_dps.update

tt = E:register_t("mod_aura_bullet_soldier_tower_dwarf", "modifier")
b = balance.towers.dwarf.incendiary_ammo.burn

E:add_comps(tt, "dps", "render")

tt.modifier.duration = b.duration
tt.dps.damage_config = b.damage
tt.dps.damage_type = DAMAGE_TRUE
tt.dps.damage_every = b.damage_every
tt.render.sprites[1].size_names = {
	"small",
	"big",
	"big"
}
tt.render.sprites[1].prefix = "tower_dwarf_fire_modifier"
tt.render.sprites[1].name = "small"
tt.render.sprites[1].draw_order = 2
tt.render.sprites[1].loop = true
tt.main_script.insert = scripts.mod_tricannon_overheat_dps.insert
tt.main_script.update = scripts.mod_dps.update

tt = E:register_t("tower_arborean_emissary_lvl1", "tower_KR5")
b = balance.towers.arborean_emissary

E:add_comps(tt, "attacks", "barrack", "vis")

tt.tower.type = "arborean_emissary"
tt.tower.kind = TOWER_KIND_MAGE
tt.tower.team = TEAM_LINIREA
tt.tower.level = 1
tt.tower.price = b.price[1]
tt.tower.menu_offset = v(0, 19)
tt.info.enc_icon = 3
tt.info.i18n_key = "TOWER_ARBOREAN_EMISSARY_1"
tt.info.portrait = "portraits_towers" .. "_0005"
tt.info.fn = scripts.tower_mage.get_info
tt.info.tower_portrait = "towerselect_portraits_big_" .. "0005"
tt.main_script.insert = scripts.tower_arborean_emissary.insert
tt.main_script.update = scripts.tower_arborean_emissary.update
tt.main_script.remove = scripts.tower_barrack.remove
tt.attacks.range = b.basic_attack.range
tt.attacks.min_cooldown = b.shared_min_cooldown
tt.attacks.range = b.basic_attack.range[1]
tt.attacks.attack_delay_on_spawn = fts(5)
tt.attacks.list[1] = E:clone_c("bullet_attack")
tt.attacks.list[1].animation = "attack"
tt.attacks.list[1].bullet = "tower_arborean_emissary_bolt_lvl1"
tt.attacks.list[1].cooldown = b.basic_attack.cooldown
tt.attacks.list[1].max_range = b.basic_attack.range
tt.attacks.list[1].shoot_time = fts(20)
tt.attacks.list[1].bullet_start_offset = v(0, 23)
tt.attacks.list[1].node_prediction = 0
tt.attacks.list[1].sound = "TowerArboreanEmissaryBasicAttack"
tt.attacks.list[1].vis_bans = bor(F_NIGHTMARE)
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 13)

for i = 2, 4 do
	tt.render.sprites[i] = E:clone_c("sprite")
	tt.render.sprites[i].prefix = "arborean_emissary_lvl1_tower_layer" .. i - 1
	tt.render.sprites[i].name = "idle"
	tt.render.sprites[i].offset = v(3, 10)
	tt.render.sprites[i].group = "layers"
end

tt.barrack.max_soldiers = 1
tt.barrack.soldier_type = "soldier_arborean_sentinels_barkshield"
tt.barrack.standby_soldier_type = "soldier_arborean_sentinels_spearmen"
tt.barrack.rally_range = 145
tt.barrack.respawn_offset = v(0, 1)
tt.barrack.change_interval = b.change_interval
tt.sound_events.change_rally_point = "TowerArboreanEmissaryTaunt"
tt.sound_events.standby_soldiers_change_rally_point = "Stage04ArboreanThornspears"
tt.sound_events.insert = "TowerArboreanEmissaryTaunt"
tt.animation_idles = {
	"idle_2"
}
tt.tower.long_idle_cooldown_min = 4
tt.tower.long_idle_cooldown_max = 8
tt.ui.click_rect = r(-35, 0, 70, 60)

tt = E:register_t("tower_arborean_emissary_lvl2", "tower_arborean_emissary_lvl1")
tt.info.enc_icon = 7
tt.info.i18n_key = "TOWER_ARBOREAN_EMISSARY_2"
tt.tower.level = 2
tt.tower.price = b.price[2]
tt.attacks.range = b.basic_attack.range[2]
tt.attacks.list[1].bullet = "tower_arborean_emissary_bolt_lvl2"

for i = 2, 4 do
	tt.render.sprites[i] = E:clone_c("sprite")
	tt.render.sprites[i].prefix = "arborean_emissary_lvl2_tower_layer" .. i - 1
	tt.render.sprites[i].name = "idle"
	tt.render.sprites[i].offset = v(3, 10)
	tt.render.sprites[i].group = "layers"
end

tt.barrack.max_soldiers = 2
tt.barrack.rally_range = 160
tt.ui.click_rect = r(-37, 0, 74, 62)

tt = E:register_t("tower_arborean_emissary_lvl3", "tower_arborean_emissary_lvl1")
tt.info.enc_icon = 11
tt.info.i18n_key = "TOWER_ARBOREAN_EMISSARY_3"
tt.tower.level = 3
tt.tower.price = b.price[3]
tt.tower.menu_offset = v(0, 20)
tt.attacks.range = b.basic_attack.range[3]
tt.attacks.list[1].bullet = "tower_arborean_emissary_bolt_lvl3"
tt.attacks.list[1].bullet_start_offset = v(0, 22)

for i = 2, 4 do
	tt.render.sprites[i] = E:clone_c("sprite")
	tt.render.sprites[i].prefix = "arborean_emissary_lvl3_tower_layer" .. i - 1
	tt.render.sprites[i].name = "idle"
	tt.render.sprites[i].offset = v(3, 10)
	tt.render.sprites[i].group = "layers"
end

tt.barrack.max_soldiers = 3
tt.barrack.rally_range = 174
tt.ui.click_rect = r(-39, 0, 78, 64)

tt = E:register_t("tower_arborean_emissary_lvl4", "tower_KR5")

E:add_comps(tt, "attacks", "powers", "barrack", "vis")

image_y = 90
tt.tower.type = "arborean_emissary"
tt.tower.kind = TOWER_KIND_MAGE
tt.tower.team = TEAM_LINIREA
tt.tower.level = 4
tt.tower.price = b.price[4]
tt.tower.size = TOWER_SIZE_LARGE
tt.tower.menu_offset = v(0, 25)
tt.info.enc_icon = 15
tt.info.i18n_key = "TOWER_ARBOREAN_EMISSARY_4"
tt.info.fn = scripts.tower_mage.get_info
tt.info.portrait = "portraits_towers" .. "_0005"
tt.info.room_portrait = "quickmenu_main_icons_main_icons_0006_0001"
tt.info.tower_portrait = "towerselect_portraits_big_" .. "0005"
tt.info.stat_damage = b.stats.damage
tt.info.stat_range = b.stats.range
tt.info.stat_cooldown = b.stats.cooldown
tt.info.damage_icon = "magic"
tt.powers.gift_of_nature = E:clone_c("power")
tt.powers.gift_of_nature.price = b.gift_of_nature.price
tt.powers.gift_of_nature.cooldown = b.gift_of_nature.cooldown
tt.powers.gift_of_nature.aura_duration = b.gift_of_nature.duration
tt.powers.gift_of_nature.enc_icon = 10
tt.powers.gift_of_nature.name = "GIFT_OF_NATURE"
tt.powers.wave_of_roots = E:clone_c("power")
tt.powers.wave_of_roots.price = b.wave_of_roots.price
tt.powers.wave_of_roots.count = b.wave_of_roots.count
tt.powers.wave_of_roots.cooldown = b.wave_of_roots.cooldown
tt.powers.wave_of_roots.damage_min = b.wave_of_roots.damage_min
tt.powers.wave_of_roots.damage_max = b.wave_of_roots.damage_max
tt.powers.wave_of_roots.enc_icon = 9
tt.powers.wave_of_roots.name = "WAVE_OF_ROOTS"
tt.ui.click_rect = r(-43, 0, 86, 68)
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 15)

for i = 2, 2 do
	tt.render.sprites[i] = E:clone_c("sprite")
	tt.render.sprites[i].prefix = "arborean_emissary_lvl4_tower_layer" .. i - 1
	tt.render.sprites[i].name = "idle"
	tt.render.sprites[i].offset = v(3, 10)
	tt.render.sprites[i].group = "layers"
end

tt.main_script.insert = scripts.tower_arborean_emissary.insert
tt.main_script.update = scripts.tower_arborean_emissary.update
tt.main_script.remove = scripts.tower_barrack.remove
tt.barrack.max_soldiers = 4
tt.barrack.soldier_type = "soldier_arborean_sentinels_barkshield"
tt.barrack.standby_soldier_type = "soldier_arborean_sentinels_spearmen"
tt.barrack.rally_range = 188
tt.barrack.respawn_offset = v(0, 1)
tt.barrack.change_interval = b.change_interval
tt.sound_events.change_rally_point = "TowerArboreanEmissaryTaunt"
tt.sound_events.standby_soldiers_change_rally_point = "Stage04ArboreanThornspears"

tt.sound_events.insert = "TowerArboreanEmissaryTaunt"
tt.sound_events.tower_room_select = "TowerArboreanEmissaryTauntSelect"
tt.attacks.min_cooldown = b.shared_min_cooldown
tt.attacks.range = b.basic_attack.range[4]
tt.attacks.attack_delay_on_spawn = fts(5)
tt.attacks.list[1] = E:clone_c("bullet_attack")
tt.attacks.list[1].animation = "attack"
tt.attacks.list[1].bullet = "tower_arborean_emissary_bolt_lvl4"
tt.attacks.list[1].cooldown = b.basic_attack.cooldown
tt.attacks.list[1].max_range = b.basic_attack.range
tt.attacks.list[1].shoot_time = fts(20)
tt.attacks.list[1].node_prediction = 1
tt.attacks.list[1].bullet_start_offset = v(0, 23)
tt.attacks.list[1].sound = "TowerArboreanEmissaryBasicAttack"
tt.attacks.list[1].vis_bans = bor(F_NIGHTMARE)
tt.attacks.list[2] = E:clone_c("custom_attack")
tt.attacks.list[2].animation = "gift_of_nature"
tt.attacks.list[2].cooldown = nil
tt.attacks.list[2].entity = "controller_tower_arborean_emissary_gift_of_nature"
tt.attacks.list[2].cooldown = b.basic_attack.cooldown
tt.attacks.list[2].max_range = b.gift_of_nature.max_range
tt.attacks.list[2].shoot_time = fts(2)
tt.attacks.list[2].min_soldiers = b.gift_of_nature.min_soldiers
tt.attacks.list[2].min_enemies = b.gift_of_nature.min_enemies
tt.attacks.list[2].vis_flags_soldier = bor(F_RANGED, F_FRIEND)
tt.attacks.list[2].vis_bans_soldier = 0
tt.attacks.list[2].vis_flags_enemy = bor(F_RANGED, F_ENEMY)
tt.attacks.list[2].vis_bans_enemy = F_FLYING
tt.attacks.list[2].node_prediction = fts(20)
tt.attacks.list[2].check_melee_range = 50
tt.attacks.list[2].sound = "TowerArboreanEmissaryGiftOfNature"
tt.attacks.list[3] = E:clone_c("custom_attack")
tt.attacks.list[3].animation = "thorny_garden"
tt.attacks.list[3].shoot_time = fts(33)
tt.attacks.list[3].cooldown = nil
tt.attacks.list[3].node_prediction = fts(20)
tt.attacks.list[3].damage_min = nil
tt.attacks.list[3].damage_max = nil
tt.attacks.list[3].damage_type = b.wave_of_roots.damage_type
tt.attacks.list[3].min_targets = b.wave_of_roots.min_targets
tt.attacks.list[3].max_targets = b.wave_of_roots.max_targets
tt.attacks.list[3].trigger_range = b.wave_of_roots.trigger_range
tt.attacks.list[3].effect_range = b.wave_of_roots.effect_range
tt.attacks.list[3].mod = "tower_arborean_emissary_root_stun_mod"
tt.attacks.list[3].mod_duration = b.wave_of_roots.mod_duration
tt.attacks.list[3].wave_of_roots_balance = b.wave_of_roots
tt.attacks.list[3].vis_flags = bor(F_STUN, F_ENEMY)
tt.attacks.list[3].vis_bans = bor(F_FLYING, F_BOSS, F_CLIFF, F_NIGHTMARE, F_WATER)
tt.attacks.list[3].sound = "TowerArboreanEmissaryThornyGarden"
tt.animation_idles = {
	"idle_2",
	"idle_3"
}
tt.tower.long_idle_cooldown_min = 4
tt.tower.long_idle_cooldown_max = 8

tt = E:register_t("tower_arborean_emissary_root_stun_mod", "mod_stun")
tt.modifier.duration = nil
tt.modifier.vis_flags = bor(F_MOD, F_STUN)
tt.modifier.vis_bans = bor(F_BOSS)
tt.modifier.use_mod_offset = false

function tt.main_script.insert(this, store, script)
	this.modifier.duration = this.wave_of_roots.mod_duration[this.modifier.level]

	return scripts.mod_stun.insert(this, store, script)
end

tt.main_script.update = scripts.tower_arborean_emissary_root_stun_mod.update
tt.render.sprites[1].prefix = "arborean_emissary_thorny_garden_thorns"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].loop = false
tt.render.sprites[1].draw_order = DO_MOD_FX
tt.render.sprites[1].sort_y_offset = -5
tt.render.sprites[1].size_names = {
	"small",
	"big",
	"big"
}
tt.out_before = fts(18)
tt.animation_start = "run"
tt.animation_idle = "idle"
tt.animation_end = "out"

tt = E:register_t("tower_demon_pit_lvl1", "tower_KR5")

E:add_comps(tt, "attacks", "vis")

b = balance.towers.demon_pit
tt.tower.type = "demon_pit"
tt.tower.kind = TOWER_KIND_BARRACK
tt.tower.team = TEAM_DARK_ARMY
tt.tower.level = 1
tt.tower.price = b.price[1]
tt.tower.menu_offset = v(0, 20)
tt.info.portrait = "portraits_towers" .. "_0006"
tt.info.room_portrait = "quickmenu_main_icons_main_icons_0007_0001"
tt.info.enc_icon = 4
tt.info.i18n_key = "TOWER_DEMON_PIT_1"
tt.info.fn = scripts.tower_demon_pit.get_info
tt.info.tower_portrait = "towerselect_portraits_big_" .. "0004"
tt.main_script.update = scripts.tower_demon_pit.update
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 15)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "demon_pit_tower_lvl1_tower_base"
tt.render.sprites[2].name = "idle"
tt.render.sprites[2].offset = v(0, 15)
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].prefix = "demon_pit_tower_lvl1_tower_bubbles"
tt.render.sprites[3].name = "idle"
tt.render.sprites[3].offset = v(0, 15)
tt.render.sprites[3].animated = true
tt.render.sprites[4] = E:clone_c("sprite")
tt.render.sprites[4].prefix = "demon_pit_tower_lvl1_tower_demons"
tt.render.sprites[4].name = "idle"
tt.render.sprites[4].offset = v(0, 15)
tt.render.sprites[4].fps = b.basic_attack.fps[1]
tt.ui.click_rect = r(-30, 0, 60, 60)
tt.sound_events.insert = "TowerDemonPitTaunt"
tt.sound_events.tower_room_select = "TowerDemonPitTauntSelect"
tt.attacks.range = b.basic_attack.range[1]
tt.attacks.attack_delay_on_spawn = fts(5)
tt.attacks.list[1] = E:clone_c("custom_attack")
tt.attacks.list[1].bullet = "bullet_tower_demon_pit_basic_attack_lvl1"
tt.attacks.list[1].cooldown = b.basic_attack.cooldown[1]
tt.attacks.list[1].shoot_time = fts(33) * FPS / b.basic_attack.fps[1]
tt.attacks.list[1].bullet_start_offset = v(-7, 100)
tt.attacks.list[1].max_range = b.basic_attack.range[1]
tt.attacks.list[1].node_prediction = fts(60)
tt.attacks.list[1].animation = "attack"
tt.attacks.list[1].animation_reload = "reload_2"
tt.attacks.list[1].vis_flags = bor(F_RANGED)
tt.attacks.list[1].vis_bans = bor(F_FLYING, F_CLIFF)
tt.demons_sid = 4
tt.decal_reload = "decal_tower_demon_pit_reload"
tt.animation_reload = "demon_pit_tower_lvl1_tower_demon_reload_reload_1"

tt = E:register_t("tower_demon_pit_lvl2", "tower_demon_pit_lvl1")
b = balance.towers.demon_pit
tt.tower.level = 2
tt.tower.price = b.price[2]
tt.tower.menu_offset = v(0, 22)
tt.info.i18n_key = "TOWER_DEMON_PIT_2"
tt.render.sprites[2].prefix = "demon_pit_tower_lvl2_tower_base"
tt.render.sprites[3].prefix = "demon_pit_tower_lvl2_tower_bubbles"
tt.render.sprites[4].prefix = "demon_pit_tower_lvl2_tower_demons"
tt.render.sprites[4].fps = b.basic_attack.fps[2]
tt.render.sprites[5] = E:clone_c("sprite")
tt.render.sprites[5].prefix = "demon_pit_tower_lvl2_tower_front"
tt.render.sprites[5].offset = v(0, 15)
tt.ui.click_rect = r(-32, 0, 64, 70)
tt.attacks.range = b.basic_attack.range[2]
tt.attacks.list[1].bullet = "bullet_tower_demon_pit_basic_attack_lvl2"
tt.attacks.list[1].cooldown = b.basic_attack.cooldown[2]
tt.attacks.list[1].max_range = b.basic_attack.range[2]
tt.attacks.list[1].shoot_time = fts(33) * FPS / b.basic_attack.fps[2]
tt.animation_reload = "demon_pit_tower_lvl2_tower_reload_reload_1"

tt = E:register_t("tower_demon_pit_lvl3", "tower_demon_pit_lvl1")
b = balance.towers.demon_pit
tt.tower.level = 3
tt.tower.price = b.price[3]
tt.tower.menu_offset = v(0, 23)
tt.info.i18n_key = "TOWER_DEMON_PIT_3"
tt.render.sprites[2].prefix = "demon_pit_tower_lvl3_tower_base"
tt.render.sprites[3].prefix = "demon_pit_tower_lvl3_tower_bubbles"
tt.render.sprites[4].prefix = "demon_pit_tower_lvl3_tower_demons"
tt.render.sprites[4].fps = b.basic_attack.fps[3]
tt.render.sprites[5] = E:clone_c("sprite")
tt.render.sprites[5].prefix = "demon_pit_tower_lvl3_tower_front"
tt.render.sprites[5].offset = v(0, 15)
tt.ui.click_rect = r(-34, 0, 68, 78)
tt.attacks.range = b.basic_attack.range[3]
tt.attacks.list[1].bullet = "bullet_tower_demon_pit_basic_attack_lvl3"
tt.attacks.list[1].cooldown = b.basic_attack.cooldown[3]
tt.attacks.list[1].max_range = b.basic_attack.range[3]
tt.attacks.list[1].shoot_time = fts(33) * FPS / b.basic_attack.fps[3]
tt.animation_reload = "demon_pit_tower_lvl3_tower_reload_reload_1"

tt = E:register_t("tower_demon_pit_lvl4", "tower_demon_pit_lvl1")

E:add_comps(tt, "powers")

b = balance.towers.demon_pit
tt.tower.level = 4
tt.tower.price = b.price[4]
tt.tower.menu_offset = v(0, 25)
tt.info.i18n_key = "TOWER_DEMON_PIT_4"
tt.info.stat_damage = b.stats.damage
tt.info.stat_hp = b.stats.hp
tt.info.stat_armor = b.stats.armor
tt.render.sprites[2].prefix = "demon_pit_tower_lvl4_tower_base"
tt.render.sprites[3].prefix = "demon_pit_tower_lvl4_tower_bubbles"
tt.render.sprites[4].prefix = "demon_pit_tower_lvl4_tower_demons"
tt.render.sprites[4].fps = b.basic_attack.fps[4]
tt.render.sprites[5] = E:clone_c("sprite")
tt.render.sprites[5].prefix = "demon_pit_tower_lvl4_tower_front"
tt.render.sprites[5].offset = v(0, 15)
tt.ui.click_rect = r(-40, 0, 80, 80)
tt.attacks.range = b.basic_attack.range[4]
tt.attacks.list[1].bullet = "bullet_tower_demon_pit_basic_attack_lvl4"
tt.attacks.list[1].cooldown = b.basic_attack.cooldown[4]
tt.attacks.list[1].max_range = b.basic_attack.range[4]
tt.attacks.list[1].shoot_time = fts(33) * FPS / b.basic_attack.fps[4]
tt.animation_reload = "demon_pit_tower_lvl4_tower_reload_reload_1"
tt.powers.master_exploders = E:clone_c("power")
tt.powers.master_exploders.price = b.master_exploders.price
tt.powers.master_exploders.enc_icon = 11
tt.powers.master_exploders.explosion_damage_factor = b.master_exploders.explosion_damage_factor
tt.powers.master_exploders.burning_duration = b.master_exploders.burning_duration
tt.powers.master_exploders.burning_damage_min = b.master_exploders.burning_damage_min
tt.powers.master_exploders.burning_damage_max = b.master_exploders.burning_damage_max
tt.powers.master_exploders.mod = "mod_tower_demon_pit_master_explosion_burning"
tt.powers.master_exploders.sound = "TowerDemonPitDemonExplosion"
tt.powers.big_guy = E:clone_c("power")
tt.powers.big_guy.price = b.big_guy.price
tt.powers.big_guy.enc_icon = 12
tt.powers.big_guy.damage_max = 2
tt.powers.big_guy.damage_min = 2
tt.powers.big_guy.cooldown = b.big_guy.cooldown
tt.powers.big_guy.key = "BIG_DEMON"
tt.attacks.list[2] = E:clone_c("custom_attack")
tt.attacks.list[2].bullet = "bullet_tower_demon_pit_big_guy_lvl4"
tt.attacks.list[2].cooldown = b.big_guy.cooldown[1]
tt.attacks.list[2].shoot_time = fts(43) * FPS / b.basic_attack.fps[4]
tt.attacks.list[2].bullet_start_offset = v(-7, 70)
tt.attacks.list[2].max_range = b.big_guy.max_range
tt.attacks.list[2].node_prediction = fts(80)
tt.attacks.list[2].animation = "big_guy_spawn"
tt.attacks.list[2].animation_reload = "big_guy_reload_big_guy"
tt.attacks.list[2].vis_flags = bor(F_RANGED)
tt.attacks.list[2].vis_bans = bor(F_FLYING)

tt = E:register_t("tower_rocket_gunners_lvl1", "tower_KR5")
b = balance.towers.rocket_gunners

E:add_comps(tt, "barrack", "vis", "tower_upgrade_persistent_data")

tt.tower.type = "rocket_gunners"
tt.tower.kind = TOWER_KIND_BARRACK
tt.tower.team = TEAM_DARK_ARMY
tt.tower.level = 1
tt.tower.price = b.price[1]
tt.info.i18n_key = "TOWER_ROCKET_GUNNERS_1"
tt.info.portrait = "portraits_towers_0009"
tt.info.room_portrait = "quickmenu_main_icons_main_icons_0009_0001"
tt.info.enc_icon = 2
tt.tower.menu_offset = v(0, 15)
tt.info.tower_portrait = "towerselect_portraits_big_0009"
tt.barrack.soldier_type = "soldier_tower_rocket_gunners_lvl1"
tt.barrack.rally_range = b.rally_range[1]
tt.barrack.respawn_offset = v(1, 23)
tt.barrack.max_soldiers = b.max_soldiers
tt.barrack.has_door = false
tt.barrack.range_upgradable = true
tt.sound_events.insert = "TowerPaladinCovenantTaunt"
tt.sound_events.change_rally_point = "TowerPaladinCovenantTaunt"
tt.info.fn = scripts.tower_rocket_gunners.get_info
tt.main_script.insert = scripts.tower_barrack.insert
tt.main_script.update = scripts.tower_rocket_gunners.update
tt.main_script.remove = scripts.tower_barrack.remove
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 15)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = true
tt.render.sprites[2].prefix = "rocket_gunners_tower_lvl1_tower"
tt.render.sprites[2].name = "idle"
tt.render.sprites[2].offset = v(0, 18)
tt.render.sprites[2].sort_y_offset = 20
tt.ui.click_rect = r(-35, 0, 70, 50)
tt.spawn_time = 34
tt.spawn_delay = 10
tt.sound_events.insert = "TowerRocketGunnersTaunt"
tt.sound_events.change_rally_point = "TowerRocketGunnersTaunt"
tt.sound_events.tower_room_select = "TowerRocketGunnersTauntSelect"
tt.spawn_sound = "TowerRocketGunnersSpawn"
tt = E:register_t("tower_rocket_gunners_lvl2", "tower_rocket_gunners_lvl1")
b = balance.towers.rocket_gunners
tt.tower.level = 2
tt.tower.price = b.price[2]
tt.info.i18n_key = "TOWER_ROCKET_GUNNERS_2"
tt.tower.menu_offset = v(0, 15)
tt.barrack.soldier_type = "soldier_tower_rocket_gunners_lvl2"
tt.barrack.rally_range = b.rally_range[2]
tt.barrack.respawn_offset = v(1, 27)
tt.barrack.max_soldiers = b.max_soldiers
tt.render.sprites[2].prefix = "rocket_gunners_tower_lvl2_tower"
tt.render.sprites[2].offset = v(0, 18)
tt.render.sprites[2].sort_y_offset = 23
tt.spawn_time = 34
tt = E:register_t("tower_rocket_gunners_lvl3", "tower_rocket_gunners_lvl1")
b = balance.towers.rocket_gunners
tt.tower.level = 3
tt.tower.price = b.price[3]
tt.info.i18n_key = "TOWER_ROCKET_GUNNERS_3"
tt.tower.menu_offset = v(0, 15)
tt.barrack.soldier_type = "soldier_tower_rocket_gunners_lvl3"
tt.barrack.rally_range = b.rally_range[3]
tt.barrack.respawn_offset = v(1, 30)
tt.barrack.max_soldiers = b.max_soldiers
tt.render.sprites[2].prefix = "rocket_gunners_tower_lvl3_tower"
tt.render.sprites[2].offset = v(0, 18)
tt.render.sprites[2].sort_y_offset = 26
tt.render.sprites[2].scale = v(0.95, 0.95)
tt.spawn_time = 34
tt = E:register_t("tower_rocket_gunners_lvl4", "tower_rocket_gunners_lvl1")
b = balance.towers.rocket_gunners

E:add_comps(tt, "powers")

tt.tower.level = 4
tt.tower.price = b.price[4]
tt.info.i18n_key = "TOWER_ROCKET_GUNNERS_4"
tt.info.stat_damage = b.stats.damage
tt.info.stat_range = b.stats.range
tt.info.stat_cooldown = b.stats.cooldown
tt.tower.menu_offset = v(0, 20)
tt.barrack.soldier_type = "soldier_tower_rocket_gunners_lvl4"
tt.barrack.rally_range = b.rally_range[4]
tt.barrack.respawn_offset = v(0, 34)
tt.barrack.max_soldiers = b.max_soldiers
tt.render.sprites[2].prefix = "rocket_gunners_tower_lvl4_tower"
tt.render.sprites[2].offset = v(0, 18)
tt.render.sprites[2].sort_y_offset = 30
tt.render.sprites[2].scale = v(0.95, 0.95)
tt.ui.click_rect = r(-35, -2, 70, 60)
tt.spawn_time = 34
tt.powers.phosphoric = E:clone_c("power")
tt.powers.phosphoric.price = b.soldier.phosphoric.price
tt.powers.phosphoric.enc_icon = 16
tt.powers.sting_missiles = E:clone_c("power")
tt.powers.sting_missiles.price = b.soldier.sting_missiles.price
tt.powers.sting_missiles.enc_icon = 15
tt.powers.sting_missiles.cooldown = b.sting_missiles.cooldown
tt = E:register_t("tower_necromancer_lvl1", "tower_KR5")

local b = balance.towers.necromancer

E:add_comps(tt, "attacks", "vis", "tower_upgrade_persistent_data", "tween")

tt.tower.type = "necromancer"
tt.tower.kind = TOWER_KIND_MAGE
tt.tower.team = TEAM_DARK_ARMY
tt.tower.level = 1
tt.tower.price = b.price[1]
tt.tower.menu_offset = v(0, 20)
tt.info.enc_icon = 3
tt.info.i18n_key = "TOWER_NECROMANCER_1"
tt.info.portrait = "portraits_towers" .. "_0011"
tt.info.room_portrait = "quickmenu_main_icons_main_icons_0011_0001"
tt.info.fn = scripts.tower_mage.get_info
tt.info.tower_portrait = "towerselect_portraits_big_" .. "0010"
tt.main_script.insert = scripts.tower_mage.insert
tt.main_script.update = scripts.tower_necromancer.update
tt.main_script.remove = scripts.tower_necromancer.remove
tt.attacks.min_cooldown = b.shared_min_cooldown
tt.attacks.range = b.basic_attack.range[1]
tt.attacks.attack_delay_on_spawn = fts(5)
tt.attacks.list[1] = E:clone_c("bullet_attack")
tt.attacks.list[1].animation = "attack"
tt.attacks.list[1].bullet = "bullet_tower_necromancer_lvl1"
tt.attacks.list[1].cooldown = b.basic_attack.cooldown
tt.attacks.list[1].shoot_time = fts(10)
tt.attacks.list[1].bullet_spawn_offset = {
	v(20, 63),
	v(-20, 63),
	v(-36, 38),
	v(36, 38)
}
tt.attacks.list[1].bullet_start_offset = v(-15, 75)
tt.attacks.list[1].ignore_out_of_range_check = 1
tt.attacks.list[1].vis_bans = bor(F_NIGHTMARE)
tt.attacks.list[1].node_prediction = fts(11)
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 13)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "necromancer_tower_lvl1_tower"
tt.render.sprites[2].offset = v(0, 14)
tt.render.sprites[2].sort_y_offset = 10
tt.render.sprites[2].scale = v(1.1, 1.1)
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].animated = true
tt.render.sprites[3].prefix = "necromancer_tower_lvl1_necromancer"
tt.render.sprites[3].offset = tt.render.sprites[2].offset
tt.render.sprites[3].z = Z_OBJECTS
tt.render.sprites[3].sort_y_offset = tt.render.sprites[2].sort_y_offset
tt.render.sprites[3].scale = v(1.1, 1.1)
tt.render.sprites[4] = E:clone_c("sprite")
tt.render.sprites[4].animated = true
tt.render.sprites[4].prefix = "necromancer_tower_lvl1_tower_FX_tower_FX"
tt.render.sprites[4].offset = tt.render.sprites[2].offset
tt.render.sprites[4].sort_y_offset = tt.render.sprites[2].sort_y_offset
tt.render.sprites[4].scale = v(1.1, 1.1)
tt.render.sprites[5] = E:clone_c("sprite")
tt.render.sprites[5].animated = true
tt.render.sprites[5].prefix = "necromancer_tower_lvl1_tower_FX_tower_FX"
tt.render.sprites[5].offset = tt.render.sprites[2].offset
tt.render.sprites[5].sort_y_offset = tt.render.sprites[2].sort_y_offset
tt.render.sprites[5].scale = v(1.1, 1.1)
tt.render.sid_tower = 2
tt.render.sid_mage = 3
tt.render.sid_smoke_fx = 4
tt.render.sid_glow_fx = 5
tt.mage_offset = v(0, 35)
tt.sound_events.insert = "TowerNecromancerTaunt"
tt.sound_events.tower_room_select = "TowerNecromancerTauntSelect"
tt.tween.remove = false
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(20),
		255
	}
}
tt.tween.props[1].sprite_id = tt.render.sid_smoke_fx
tt.tween.disabled = true
tt.max_skeletons = b.curse.max_skeletons[1]
tt.max_golems = b.curse.max_golems[1]
tt = E:register_t("tower_necromancer_lvl2", "tower_necromancer_lvl1")

local b = balance.towers.necromancer

tt.tower.level = 2
tt.tower.price = b.price[2]
tt.tower.menu_offset = v(0, 26)
tt.info.i18n_key = "TOWER_NECROMANCER_2"
tt.attacks.range = b.basic_attack.range[2]
tt.attacks.list[1].bullet = "bullet_tower_necromancer_lvl2"
tt.attacks.list[1].bullet_spawn_offset = {
	v(20, 68),
	v(-20, 68),
	v(-36, 43),
	v(36, 43)
}
tt.attacks.list[1].bullet_start_offset = v(-15, 85)
tt.render.sprites[2].name = "necromancer_tower_lvl2_tower"
tt.render.sprites[2].sort_y_offset = 10
tt.render.sprites[3].prefix = "necromancer_tower_lvl2_necromancer"
tt.render.sprites[3].sort_y_offset = tt.render.sprites[2].sort_y_offset
tt.render.sprites[4].prefix = "necromancer_tower_lvl2_tower_FX_tower_FX"
tt.render.sprites[4].sort_y_offset = tt.render.sprites[2].sort_y_offset
tt.render.sprites[5].prefix = "necromancer_tower_lvl2_tower_FX_tower_FX"
tt.render.sprites[5].sort_y_offset = tt.render.sprites[2].sort_y_offset
tt.max_skeletons = b.curse.max_skeletons[2]
tt.max_golems = b.curse.max_golems[2]
tt.ui.click_rect = r(-35, 0, 70, 70)
tt.ui.click_rect_offset_y = -10
tt = E:register_t("tower_necromancer_lvl3", "tower_necromancer_lvl1")

local b = balance.towers.necromancer

tt.tower.level = 3
tt.tower.price = b.price[3]
tt.tower.menu_offset = v(0, 31)
tt.info.i18n_key = "TOWER_NECROMANCER_3"
tt.attacks.range = b.basic_attack.range[3]
tt.attacks.list[1].bullet = "bullet_tower_necromancer_lvl3"
tt.attacks.list[1].bullet_spawn_offset = {
	v(20, 80),
	v(-20, 80),
	v(-36, 58),
	v(36, 58)
}
tt.attacks.list[1].bullet_start_offset = v(-15, 92)
tt.render.sprites[2].name = "necromancer_tower_lvl3_tower"
tt.render.sprites[2].sort_y_offset = 10
tt.render.sprites[2].scale = v(1.1, 1.1)
tt.render.sprites[3].prefix = "necromancer_tower_lvl3_necromancer"
tt.render.sprites[3].sort_y_offset = tt.render.sprites[2].sort_y_offset
tt.render.sprites[3].scale = v(1.1, 1.1)
tt.render.sprites[4].prefix = "necromancer_tower_lvl3_tower_FX_tower_FX"
tt.render.sprites[4].sort_y_offset = tt.render.sprites[2].sort_y_offset
tt.render.sprites[4].scale = v(1.1, 1.1)
tt.render.sprites[5].prefix = "necromancer_tower_lvl3_tower_FX_tower_FX"
tt.render.sprites[5].sort_y_offset = tt.render.sprites[2].sort_y_offset
tt.render.sprites[5].scale = v(1.1, 1.1)
tt.max_skeletons = b.curse.max_skeletons[3]
tt.max_golems = b.curse.max_golems[3]
tt.ui.click_rect = r(-35, 0, 70, 70)
tt.ui.click_rect_offset_y = -10
tt = E:register_t("tower_necromancer_lvl4", "tower_necromancer_lvl1")

local b = balance.towers.necromancer

E:add_comps(tt, "powers")

tt.tower.level = 4
tt.tower.price = b.price[4]
tt.tower.menu_offset = v(0, 34)
tt.info.i18n_key = "TOWER_NECROMANCER_4"
tt.info.stat_damage = b.stats.damage
tt.info.stat_range = b.stats.range
tt.info.stat_cooldown = b.stats.cooldown
tt.info.damage_icon = "magic"
tt.attacks.range = b.basic_attack.range[4]
tt.attacks.list[1].bullet = "bullet_tower_necromancer_lvl4"
tt.attacks.list[1].bullet_spawn_offset = {
	v(20, 95),
	v(-20, 95),
	v(-36, 75),
	v(36, 75)
}
tt.attacks.list[1].bullet_start_offset = v(-15, 105)
tt.render.sprites[2].name = "necromancer_tower_lvl4_tower"
tt.render.sprites[2].scale = v(0.9, 0.9)
tt.render.sprites[2].sort_y_offset = 10
tt.render.sprites[3].prefix = "necromancer_tower_lvl4_necromancer"
tt.render.sprites[3].anchor = v(0.5, 0.5175)
tt.render.sprites[3].sort_y_offset = tt.render.sprites[2].sort_y_offset
tt.render.sprites[4].prefix = "necromancer_tower_lvl4_tower_FX_tower_FX"
tt.render.sprites[4].scale = v(0.9, 0.9)
tt.render.sprites[4].sort_y_offset = tt.render.sprites[2].sort_y_offset
tt.render.sprites[5].prefix = "necromancer_tower_lvl4_tower_FX_tower_FX"
tt.render.sprites[5].scale = v(0.9, 0.9)
tt.render.sprites[5].sort_y_offset = tt.render.sprites[2].sort_y_offset
tt.render.sprites[6] = E:clone_c("sprite")
tt.render.sprites[6].animated = true
tt.render.sprites[6].loop = true
tt.render.sprites[6].prefix = "necromancer_tower_lvl4_tower"
tt.render.sprites[6].scale = v(0.9, 0.9)
tt.attacks.list[2] = E:clone_c("custom_attack")
tt.attacks.list[2].animation = "mark_of_silence"
tt.attacks.list[2].cooldown = nil
tt.attacks.list[2].entity = "aura_tower_necromancer_skill_debuff"
tt.attacks.list[2].max_range = b.skill_debuff.range
tt.attacks.list[2].cast_time = fts(27)
tt.attacks.list[2].node_prediction = fts(60)
tt.attacks.list[2].min_cooldown = 1
tt.attacks.list[2].min_targets = b.skill_debuff.min_targets
tt.attacks.list[3] = E:clone_c("custom_attack")
tt.attacks.list[3].animation = "call_death_rider"
tt.attacks.list[3].cooldown = nil
tt.attacks.list[3].entity = "aura_tower_necromancer_skill_rider"
tt.attacks.list[3].max_range = b.skill_rider.range
tt.attacks.list[3].cast_time = fts(27)
tt.attacks.list[3].node_prediction = fts(60)
tt.attacks.list[3].min_cooldown = 1
tt.attacks.list[3].min_targets = b.skill_rider.min_targets
tt.attacks.list[3].vis_bans = bor(F_FLYING, F_NIGHTMARE)
tt.powers.skill_debuff = E:clone_c("power")
tt.powers.skill_debuff.mod_duration = b.skill_debuff.mod_duration
tt.powers.skill_debuff.aura_duration = b.skill_debuff.aura_duration
tt.powers.skill_debuff.radius = b.skill_debuff.radius
tt.powers.skill_debuff.cooldown = b.skill_debuff.cooldown
tt.powers.skill_debuff.price = b.skill_debuff.price
tt.powers.skill_debuff.enc_icon = 17
tt.powers.skill_rider = E:clone_c("power")
tt.powers.skill_rider.run_range = b.skill_rider.run_range
tt.powers.skill_rider.price = b.skill_rider.price
tt.powers.skill_rider.cooldown = b.skill_rider.cooldown
tt.powers.skill_rider.price = b.skill_rider.price
tt.powers.skill_rider.enc_icon = 18
tt.max_skeletons = b.curse.max_skeletons[4]
tt.max_golems = b.curse.max_golems[4]
tt.ui.click_rect = r(-40, 0, 80, 90)
tt.ui.click_rect_offset_y = -10
tt = E:register_t("tower_ballista_lvl1", "tower_KR5")

local b = balance.towers.ballista

E:add_comps(tt, "attacks", "vis", "tower_upgrade_persistent_data")

tt.tower.type = "ballista"
tt.tower.kind = TOWER_KIND_ARCHER
tt.tower.team = TEAM_DARK_ARMY
tt.tower.level = 1
tt.tower.price = b.price[1]
tt.tower.menu_offset = v(0, 25)
tt.info.portrait = "portraits_towers" .. "_0010"
tt.info.enc_icon = 1
tt.info.i18n_key = "TOWER_BALLISTA_1"
tt.info.tower_portrait = "towerselect_portraits_big_" .. "0008"
tt.info.room_portrait = "quickmenu_main_icons_main_icons_0010_0001"
tt.info.stat_damage = b.stats.damage
tt.info.stat_cooldown = b.stats.cooldown
tt.info.stat_range = b.stats.range
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 15)

for i = 2, 4 do
	tt.render.sprites[i] = E:clone_c("sprite")
	tt.render.sprites[i].animated = true
	tt.render.sprites[i].prefix = "ballista_tower_lvl1_tower_layer" .. i - 1
	tt.render.sprites[i].name = "idle_1_1"
	tt.render.sprites[i].offset = v(0, 10)
	tt.render.sprites[i].group = "layers_base"
	tt.render.sprites[i].sort_y_offset = 10
end

tt.render.sprites[5] = E:clone_c("sprite")
tt.render.sprites[5].animated = true
tt.render.sprites[5].prefix = "ballista_tower_lvl123_tower_goblin"
tt.render.sprites[5].name = "idle_1_1"
tt.render.sprites[5].offset = v(2, 14)
tt.render.sprites[5].sort_y_offset = tt.render.sprites[2].sort_y_offset
tt.render.sprites[6] = E:clone_c("sprite")
tt.render.sprites[6].animated = true
tt.render.sprites[6].prefix = "ballista_tower_lvl1_tower_top"
tt.render.sprites[6].name = "idle_1_1"
tt.render.sprites[6].angles = {}
tt.render.sprites[6].angles.idle = {
	"idle_1_1",
	"idle_1_2",
	"idle_1_3",
	"idle_1_4",
	"idle_1_5"
}
tt.render.sprites[6].angles.shot = {
	"ability1_loop_1_1",
	"ability1_loop_1_2",
	"ability1_loop_1_3",
	"ability1_loop_1_4",
	"ability1_loop_1_5"
}
tt.render.sprites[6].angles.reload = {
	"ability1_out_1_1",
	"ability1_out_1_2",
	"ability1_out_1_3",
	"ability1_out_1_4",
	"ability1_out_1_5"
}
tt.render.sprites[6].offset = tt.render.sprites[2].offset
tt.render.sprites[6].sort_y_offset = tt.render.sprites[2].sort_y_offset
tt.render.sid_tower_base_back = 2
tt.render.sid_tower_base_arrows = 3
tt.render.sid_tower_base_front = 4
tt.render.sid_goblin = 5
tt.render.sid_tower_top = 6
tt.main_script.insert = scripts.tower_archer.insert
tt.main_script.update = scripts.tower_ballista.update
tt.main_script.remove = scripts.tower_ballista.remove
tt.attacks.min_cooldown = b.shared_min_cooldown
tt.attacks.range = b.basic_attack.range[1]
tt.attacks.attack_delay_on_spawn = fts(5)
tt.attacks.list[1] = E:clone_c("bullet_attack")
tt.attacks.list[1].bullet = "bullet_tower_ballista_lvl1"
tt.attacks.list[1].cooldown = b.basic_attack.cooldown
tt.attacks.list[1].shoot_time = fts(8)
tt.attacks.list[1].vis_flags = bor(F_RANGED)
tt.attacks.list[1].vis_bans = bor(F_NIGHTMARE)
tt.attacks.list[1].burst_count = 5
tt.attacks.list[1].bullet_start_offset = {
	v(13, 35),
	v(20, 42),
	v(20, 58),
	v(0, 63),
	v(0, 28)
}
tt.attacks.list[1].max_dist_between_shots = 80
tt.shot_fx = "fx_tower_ballista_shot"
tt.final_shot_fx = "fx_tower_ballista_final_shot"
tt.tower_top_offset = v(0, 20)
tt.turn_speed = b.turn_speed
tt.sound_events.insert = "TowerBallistaTaunt"
tt.sound_events.tower_room_select = "TowerBallistaTauntSelect"
tt.ui.click_rect = r(-35, 0, 70, 75)
tt.ui.click_rect_offset_y = -10
tt = E:register_t("tower_ballista_lvl2", "tower_ballista_lvl1")

local b = balance.towers.ballista

tt.tower.level = 2
tt.tower.price = b.price[2]
tt.tower.menu_offset = v(0, 30)
tt.info.i18n_key = "TOWER_BALLISTA_2"

for i = 2, 4 do
	tt.render.sprites[i].prefix = "ballista_tower_lvl2_tower_layer" .. i - 1
	tt.render.sprites[i].sort_y_offset = 10
end

tt.render.sprites[5].sort_y_offset = tt.render.sprites[2].sort_y_offset
tt.render.sprites[6].prefix = "ballista_tower_lvl2_tower_top"
tt.render.sprites[6].offset = v(0, 5)
tt.render.sprites[6].sort_y_offset = tt.render.sprites[2].sort_y_offset
tt.attacks.range = b.basic_attack.range[2]
tt.attacks.list[1].bullet = "bullet_tower_ballista_lvl2"
tt.attacks.list[1].bullet_start_offset = {
	v(16, 43),
	v(20, 49),
	v(20, 63),
	v(0, 68),
	v(2, 40)
}
tt.ui.click_rect = r(-35, 0, 70, 80)
tt.ui.click_rect_offset_y = -10
tt = E:register_t("tower_ballista_lvl3", "tower_ballista_lvl1")

local b = balance.towers.ballista

tt.tower.level = 3
tt.tower.price = b.price[3]
tt.tower.menu_offset = v(0, 33)
tt.info.i18n_key = "TOWER_BALLISTA_3"

for i = 2, 4 do
	tt.render.sprites[i].prefix = "ballista_tower_lvl3_tower_base_layer" .. i - 1
	tt.render.sprites[i].sort_y_offset = 10
end

tt.render.sprites[5].sort_y_offset = tt.render.sprites[2].sort_y_offset
tt.render.sprites[6].prefix = "ballista_tower_lvl3_tower_top"
tt.render.sprites[6].offset = tt.render.sprites[2].offset
tt.render.sprites[6].sort_y_offset = tt.render.sprites[2].sort_y_offset
tt.attacks.range = b.basic_attack.range[3]
tt.attacks.list[1].bullet = "bullet_tower_ballista_lvl3"
tt.attacks.list[1].bullet_start_offset = {
	v(16, 47),
	v(20, 54),
	v(15, 70),
	v(0, 73),
	v(2, 44)
}
tt.ui.click_rect = r(-35, 0, 70, 90)
tt.ui.click_rect_offset_y = -10
tt = E:register_t("tower_ballista_lvl4", "tower_ballista_lvl1")

local b = balance.towers.ballista

E:add_comps(tt, "powers")

tt.tower.level = 4
tt.tower.price = b.price[4]
tt.tower.menu_offset = v(0, 30)
tt.info.i18n_key = "TOWER_BALLISTA_4"

for i = 2, 4 do
	tt.render.sprites[i].prefix = "ballista_tower_lvl4_tower_base_layer" .. i - 1
	tt.render.sprites[i].offset = v(0, 5)
	tt.render.sprites[i].sort_y_offset = 5
end

tt.render.sprites[5].prefix = "ballista_tower_lvl4_tower_goblin"
tt.render.sprites[5].name = "idle"
tt.render.sprites[5].offset = tt.render.sprites[2].offset
tt.render.sprites[5].sort_y_offset = tt.render.sprites[2].sort_y_offset
tt.render.sprites[6].prefix = "ballista_tower_lvl4_tower_top"
tt.render.sprites[6].offset = tt.render.sprites[2].offset
tt.render.sprites[6].angles.final_shot = {
	"ability2_1",
	"ability2_2",
	"ability2_3",
	"ability2_4",
	"ability2_5"
}
tt.render.sprites[6].sort_y_offset = tt.render.sprites[2].sort_y_offset
tt.attacks.range = b.basic_attack.range[4]
tt.attacks.list[1].bullet = "bullet_tower_ballista_lvl4"
tt.attacks.list[1].bullet_start_offset = {
	v(12, 54),
	v(23, 59),
	v(15, 78),
	v(0, 80),
	v(0, 47)
}
tt.attacks.list[2] = E:clone_c("bullet_attack")
tt.attacks.list[2].bullet = "bullet_tower_ballista_skill_bomb"
tt.attacks.list[2].max_range = b.skill_bomb.max_range
tt.attacks.list[2].min_range = b.skill_bomb.min_range
tt.attacks.list[2].cooldown = b.skill_bomb.cooldown[1]
tt.attacks.list[2].shoot_time = fts(20)
tt.attacks.list[2].vis_bans = bor(F_FLYING, F_NIGHTMARE, F_CLIFF)
tt.attacks.list[2].bullet_start_offset = v(0, 10)
tt.attacks.list[2].node_prediction = fts(b.skill_bomb.node_prediction)
tt.attacks.list[2].damage_type = b.skill_bomb.damage_type
tt.attacks.list[2].damage_max = b.skill_bomb.damage_max
tt.attacks.list[2].damage_min = b.skill_bomb.damage_min
tt.attacks.list[2].min_targets = b.skill_bomb.min_targets
tt.attacks.list[2].sound = "TowerTricannonBasicAttackFire"
tt.powers.skill_final_shot = E:clone_c("power")
tt.powers.skill_final_shot.cooldown = b.skill_final_shot.cooldown
tt.powers.skill_final_shot.price = b.skill_final_shot.price
tt.powers.skill_final_shot.damage_factor = b.skill_final_shot.damage_factor[1]
tt.powers.skill_final_shot.damage_factor_config = b.skill_final_shot.damage_factor
tt.powers.skill_final_shot.bullet = "bullet_tower_ballista_skill_final_shot"
tt.powers.skill_final_shot.enc_icon = 19
tt.powers.skill_bomb = E:clone_c("power")
tt.powers.skill_bomb.price = b.skill_bomb.price
tt.powers.skill_bomb.cooldown = b.skill_bomb.cooldown
tt.powers.skill_bomb.duration = b.skill_bomb.duration
tt.powers.skill_bomb.enc_icon = 20
tt.ui.click_rect = r(-35, 0, 70, 90)
tt.ui.click_rect_offset_y = -10
tt = E:register_t("tower_flamespitter_lvl1", "tower_KR5")

local b = balance.towers.flamespitter

E:add_comps(tt, "attacks", "vis", "tower_upgrade_persistent_data")

tt.tower.type = "flamespitter"
tt.tower.kind = TOWER_KIND_ENGINEER
tt.tower.team = TEAM_LINIREA
tt.tower.level = 1
tt.tower.price = b.price[1]
tt.tower.menu_offset = v(0, 25)
tt.info.portrait = "portraits_towers" .. "_0014"
tt.info.enc_icon = 1
tt.info.i18n_key = "TOWER_FLAMESPITTER_1"
tt.info.tower_portrait = "towerselect_portraits_big_" .. "0008"
tt.info.room_portrait = "quickmenu_main_icons_main_icons_0012_0001"
tt.info.stat_damage = b.stats.damage
tt.info.stat_cooldown = b.stats.cooldown
tt.info.stat_range = b.stats.range
tt.info.fn = scripts.tower_flamespitter.get_info
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 15)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "dwarven_flamespitter_tower_lvl1_tower"
tt.render.sprites[2].offset = tt.render.sprites[1].offset
tt.render.sprites[2].sort_y_offset = 10
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].animated = true
tt.render.sprites[3].prefix = "dwarven_flamespitter_tower_lvl123_dude"
tt.render.sprites[3].name = "idle"
tt.render.sprites[3].offset = tt.render.sprites[2].offset
tt.render.sprites[3].sort_y_offset = tt.render.sprites[2].sort_y_offset
tt.render.sprites[4] = E:clone_c("sprite")
tt.render.sprites[4].animated = true
tt.render.sprites[4].prefix = "dwarven_flamespitter_tower_lvl1_cannon"
tt.render.sprites[4].name = "idle_diagonal_down"
tt.render.sprites[4].angles = {}
tt.render.sprites[4].angles.idle = {
	"idle_diagonal_down",
	"idle_side",
	"idle_diagonal_up",
	"idle_up",
	"idle_down"
}
tt.render.sprites[4].angles.attack = {
	"attack_diagonal_down",
	"attack_side",
	"attack_diagonal_up",
	"attack_up",
	"attack_down"
}
tt.render.sprites[4].offset = v(1.5, tt.render.sprites[2].offset.y)
tt.render.sprites[4].sort_y_offset = tt.render.sprites[2].sort_y_offset
tt.render.sid_tower_base = 2
tt.render.sid_dwarf = 3
tt.render.sid_tower_top = 4
tt.main_script.insert = scripts.tower_engineer.insert
tt.main_script.update = scripts.tower_flamespitter.update
tt.main_script.remove = scripts.tower_flamespitter.remove
tt.attacks.min_cooldown = b.shared_min_cooldown
tt.attacks.range = b.basic_attack.range[1]
tt.attacks.attack_delay_on_spawn = fts(5)
tt.attacks.list[1] = E:clone_c("bullet_attack")
tt.attacks.list[1].cooldown = b.basic_attack.cooldown
tt.attacks.list[1].shoot_time = fts(8)
tt.attacks.list[1].vis_flags = bor(F_RANGED)
tt.attacks.list[1].vis_bans = bor(F_NIGHTMARE)
tt.attacks.list[1].burst_count = 5
tt.attacks.list[1].aura_offset = {
	v(13, 35),
	v(20, 42),
	v(20, 58),
	v(0, 63),
	v(0, 28)
}
tt.attacks.list[1].aura = "aura_tower_flamespitter"
tt.attacks.list[1].flame_fx = "fx_tower_flamespitter_flame"
tt.attacks.list[1].flame_fx_scale_x = {
	1,
	0.9,
	0.8,
	0.7,
	1.1
}
tt.attacks.list[1].duration = b.basic_attack.duration
tt.attacks.list[1].bullet_start_offset = {
	v(10, 55),
	v(10, 55),
	v(10, 55),
	v(0, 70),
	v(0, 45)
}
tt.attacks.list[1].node_prediction = fts(35)
tt.attacks.list[1].damage_min = b.basic_attack.damage_min[1]
tt.attacks.list[1].damage_max = b.basic_attack.damage_max[1]
tt.attacks.list[1].sound = "TowerFlamespitterBasicAttack"
tt.tower_top_offset = v(0, 20)
tt.turn_speed = b.turn_speed
tt.sound_events.insert = "TowerFlamespitterTaunt"
tt.sound_events.tower_room_select = "TowerFlamespitterTauntSelect"
tt.ui.click_rect = r(-35, 0, 70, 75)
tt.ui.click_rect_offset_y = -10
tt = E:register_t("tower_flamespitter_lvl2", "tower_flamespitter_lvl1")

local b = balance.towers.flamespitter

tt.tower.level = 2
tt.tower.price = b.price[2]
tt.tower.menu_offset = v(0, 30)
tt.info.i18n_key = "TOWER_FLAMESPITTER_2"
tt.render.sprites[2].name = "dwarven_flamespitter_tower_lvl2_tower"
tt.render.sprites[3].offset.y = 16
tt.render.sprites[4].prefix = "dwarven_flamespitter_tower_lvl2_cannon"
tt.attacks.range = b.basic_attack.range[2]
tt.attacks.list[1].damage_min = b.basic_attack.damage_min[2]
tt.attacks.list[1].damage_max = b.basic_attack.damage_max[2]
tt.attacks.list[1].bullet_start_offset = {
	v(20, 50),
	v(20, 60),
	v(20, 62),
	v(0, 75),
	v(0, 45)
}
tt.ui.click_rect = r(-35, 0, 70, 80)
tt.ui.click_rect_offset_y = -10
tt = E:register_t("tower_flamespitter_lvl3", "tower_flamespitter_lvl1")

local b = balance.towers.flamespitter

tt.tower.level = 3
tt.tower.price = b.price[3]
tt.tower.menu_offset = v(0, 30)
tt.info.i18n_key = "TOWER_FLAMESPITTER_3"
tt.render.sprites[2].name = "dwarven_flamespitter_tower_lvl3_tower"
tt.render.sprites[4].prefix = "dwarven_flamespitter_tower_lvl3_cannon"
tt.attacks.range = b.basic_attack.range[3]
tt.attacks.list[1].damage_min = b.basic_attack.damage_min[3]
tt.attacks.list[1].damage_max = b.basic_attack.damage_max[3]
tt.attacks.list[1].bullet_start_offset = {
	v(20, 50),
	v(20, 62),
	v(20, 62),
	v(0, 80),
	v(0, 50)
}
tt.ui.click_rect = r(-35, 0, 70, 80)
tt.ui.click_rect_offset_y = -10
tt = E:register_t("tower_flamespitter_lvl4", "tower_flamespitter_lvl1")

local b = balance.towers.flamespitter

E:add_comps(tt, "powers")

tt.tower.level = 4
tt.tower.price = b.price[4]
tt.tower.menu_offset = v(0, 30)
tt.info.i18n_key = "TOWER_FLAMESPITTER_4"
tt.render.sprites[2].name = "dwarven_flamespitter_tower_lvl4_tower"
tt.render.sprites[2].sort_y_offset = 5
tt.render.sprites[2].draw_order = 1
tt.render.sprites[3].prefix = "dwarven_flamespitter_tower_lvl4_dude"
tt.render.sprites[3].name = "idle"
tt.render.sprites[3].offset = tt.render.sprites[2].offset
tt.render.sprites[3].sort_y_offset = tt.render.sprites[2].sort_y_offset
tt.render.sprites[3].draw_order = 3
tt.render.sprites[4].prefix = "dwarven_flamespitter_tower_lvl4_cannon"
tt.render.sprites[4].offset = tt.render.sprites[2].offset
tt.render.sprites[4].sort_y_offset = tt.render.sprites[2].sort_y_offset
tt.render.sprites[4].draw_order = 4
tt.render.sprites[5] = E:clone_c("sprite")
tt.render.sprites[5].animated = true
tt.render.sprites[5].prefix = "dwarven_flamespitter_tower_lvl4_skill1"
tt.render.sprites[5].name = "idle"
tt.render.sprites[5].offset = tt.render.sprites[2].offset
tt.render.sprites[5].sort_y_offset = tt.render.sprites[2].sort_y_offset
tt.render.sprites[5].draw_order = 1
tt.render.sprites[6] = E:clone_c("sprite")
tt.render.sprites[6].animated = true
tt.render.sprites[6].prefix = "dwarven_flamespitter_tower_lvl4_skill2"
tt.render.sprites[6].name = "idle"
tt.render.sprites[6].offset = tt.render.sprites[2].offset
tt.render.sprites[6].sort_y_offset = tt.render.sprites[2].sort_y_offset
tt.render.sprites[6].draw_order = 3
tt.render.sprites[7] = E:clone_c("sprite")
tt.render.sprites[7].animated = true
tt.render.sprites[7].prefix = "dwarven_flamespitter_tower_lvl4_stove_fire_fx"
tt.render.sprites[7].hidden = true
tt.render.sprites[7].offset = tt.render.sprites[2].offset
tt.render.sprites[7].sort_y_offset = tt.render.sprites[2].sort_y_offset
tt.render.sprites[7].draw_order = 2
tt.render.sid_skill_1 = 5
tt.render.sid_skill_2 = 6
tt.render.sid_stove_fire = 7
tt.attacks.range = b.basic_attack.range[4]
tt.attacks.list[1].damage_min = b.basic_attack.damage_min[4]
tt.attacks.list[1].damage_max = b.basic_attack.damage_max[4]
tt.attacks.list[1].bullet_start_offset = {
	v(20, 55),
	v(20, 62),
	v(20, 72),
	v(0, 85),
	v(0, 50)
}
tt.attacks.list[2] = E:clone_c("bullet_attack")
tt.attacks.list[2].bullet = "bullet_tower_flamespitter_skill_bomb"
tt.attacks.list[2].max_range = b.skill_bomb.max_range
tt.attacks.list[2].min_range = b.skill_bomb.min_range
tt.attacks.list[2].cooldown = nil
tt.attacks.list[2].shoot_time = fts(20)
tt.attacks.list[2].vis_bans = bor(F_FRIEND, F_NIGHTMARE, F_CLIFF)
tt.attacks.list[2].vis_flags = bor(F_AREA)
tt.attacks.list[2].bullet_start_offset = v(32, 40)
tt.attacks.list[2].node_prediction = fts(b.skill_bomb.node_prediction)
tt.attacks.list[2].damage_type = b.skill_bomb.damage_type
tt.attacks.list[2].damage_max = b.skill_bomb.damage_max
tt.attacks.list[2].damage_min = b.skill_bomb.damage_min
tt.attacks.list[2].min_targets = b.skill_bomb.min_targets
tt.attacks.list[2].sound = "TowerFlamespitterBlazingTrailCast"
tt.attacks.list[3] = E:clone_c("custom_attack")
tt.attacks.list[3].max_range = b.skill_columns.max_range
tt.attacks.list[3].min_range = b.skill_columns.min_range
tt.attacks.list[3].cooldown = nil
tt.attacks.list[3].damage_min = b.skill_columns.damage_min
tt.attacks.list[3].damage_max = b.skill_columns.damage_max
tt.attacks.list[3].damage_type = b.skill_columns.damage_type
tt.attacks.list[3].min_targets = b.skill_columns.min_targets
tt.attacks.list[3].node_prediction = fts(40)
tt.attacks.list[3].vis_bans = bor(F_NIGHTMARE, F_CLIFF)
tt.attacks.list[3].vis_flags = bor(F_AREA)
tt.attacks.list[3].sound = "TowerFlamespitterScorchingTorchesCast"
tt.powers.skill_bomb = E:clone_c("power")
tt.powers.skill_bomb.price = b.skill_bomb.price
tt.powers.skill_bomb.cooldown = b.skill_bomb.cooldown
tt.powers.skill_bomb.duration = b.skill_bomb.duration
tt.powers.skill_bomb.enc_icon = 21
tt.powers.skill_bomb.attack_idx = 2
tt.powers.skill_columns = E:clone_c("power")
tt.powers.skill_columns.cooldown = b.skill_columns.cooldown
tt.powers.skill_columns.price = b.skill_columns.price
tt.powers.skill_columns.column_template = "controller_tower_flamespitter_column"
tt.powers.skill_columns.stun_time = b.skill_columns.stun_time
tt.powers.skill_columns.columns = b.skill_columns.columns
tt.powers.skill_columns.damage_type = b.skill_columns.damage_type
tt.powers.skill_columns.damage_in_max = b.skill_columns.damage_in_max
tt.powers.skill_columns.damage_in_min = b.skill_columns.damage_in_min
tt.powers.skill_columns.damage_out_max = b.skill_columns.damage_out_max
tt.powers.skill_columns.damage_out_min = b.skill_columns.damage_out_min
tt.powers.skill_columns.decal_start_offset = v(-20, 0)
tt.powers.skill_columns.enc_icon = 22
tt.powers.skill_columns.attack_idx = 3
tt.ui.click_rect = r(-35, 0, 70, 90)
tt.ui.click_rect_offset_y = -10
tt = E:register_t("controller_tower_flamespitter_column")
b = balance.towers.flamespitter.skill_columns

E:add_comps(tt, "main_script")

tt.main_script.update = scripts.controller_tower_flamespitter_column.update
tt.damage_in_min = nil
tt.damage_in_max = nil
tt.damage_in_type = b.damage_in_type
tt.damage_out_min = nil
tt.damage_out_max = nil
tt.damage_out_type = b.damage_out_type
tt.radius_in = b.radius_in
tt.radius_out = b.radius_out
tt.vis_bans = bor(F_FRIEND)
tt.vis_flags = bor(F_AREA)
tt.column_fx = "fx_tower_flamespitter_column"
tt.decal = "decal_tower_flamespitter_skill_columns"
tt.mod = "mod_tower_flamesplitter_skill_columns"
tt.origin = nil
tt.dest = nil
tt.source_id = nil
tt.sound = "TowerFlamespitterScorchingTorchesFlareUp"
tt = E:register_t("tower_barrel_lvl1", "tower_KR5")

E:add_comps(tt, "attacks", "vis")

b = balance.towers.barrel
tt.tower.type = "barrel"
tt.tower.kind = TOWER_KIND_ENGINEER
tt.tower.team = TEAM_LINIREA
tt.tower.level = 1
tt.tower.price = b.price[1]
tt.tower.menu_offset = v(0, 18)
tt.info.portrait = "portraits_towers_0017"
tt.info.room_portrait = "quickmenu_main_icons_main_icons_0016_0001"
tt.info.tower_portrait = "towerselect_portraits_big_" .. "0006"
tt.info.enc_icon = 1
tt.info.i18n_key = "TOWER_BARREL_1"
tt.info.stat_damage = b.stats.damage
tt.info.stat_cooldown = b.stats.cooldown
tt.info.stat_range = b.stats.range
tt.main_script.insert = scripts.tower_barrel.insert
tt.main_script.update = scripts.tower_barrel.update
tt.attacks.range = b.basic_attack.range[1]
tt.attacks.attack_delay_on_spawn = fts(10)
tt.attacks.list[1] = E:clone_c("bullet_attack")
tt.attacks.list[1].bullet = "bullet_tower_barrel_lvl1"
tt.attacks.list[1].range = b.basic_attack.range[1]
tt.attacks.list[1].cooldown = b.basic_attack.cooldown
tt.attacks.list[1].shoot_time = fts(8)
tt.attacks.list[1].vis_bans = bor(F_NIGHTMARE, F_CLIFF)
tt.attacks.list[1].bullet_start_offset = v(-3, 55)
tt.attacks.list[1].node_prediction = fts(25)
tt.attacks.list[1].animation = "attack"
tt.attacks.list[1].sound = "TowerBarrelBasicAttackCast"
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 10)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].name = "barrel_tower_lvl1_tower"
tt.render.sprites[2].animated = false
tt.render.sprites[2].offset = v(0, 10)
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].prefix = "barrel_tower_lvl1_tower_flow"
tt.render.sprites[3].name = "idle"
tt.render.sprites[3].offset = tt.render.sprites[2].offset
tt.render.sprites[4] = E:clone_c("sprite")
tt.render.sprites[4].name = "barrel_tower_lvl1_tower_tube"
tt.render.sprites[4].animated = false
tt.render.sprites[4].offset = tt.render.sprites[2].offset
tt.render.sprites[5] = E:clone_c("sprite")
tt.render.sprites[5].prefix = "barrel_tower_lvl1_viking"
tt.render.sprites[5].name = "idle"
tt.render.sprites[5].offset = v(-3, 20)
tt.sid_tower = 2
tt.sid_viking = 5
tt.sound_events.insert = "TowerBarrelTaunt"
tt.sound_events.tower_room_select = "TowerBarrelTauntSelect"
tt.ui.click_rect = r(-35, -3, 70, 55)
tt = E:register_t("tower_barrel_lvl2", "tower_barrel_lvl1")
b = balance.towers.barrel
tt.tower.level = 2
tt.tower.price = b.price[2]
tt.tower.menu_offset = v(0, 23)
tt.info.i18n_key = "TOWER_BARREL_2"
tt.attacks.range = b.basic_attack.range[2]
tt.attacks.list[1].bullet = "bullet_tower_barrel_lvl2"
tt.attacks.list[1].range = b.basic_attack.range[1]
tt.attacks.list[1].bullet_start_offset = v(-3, 65)
tt.attacks.list[1].shoot_time = fts(7)
tt.render.sprites[2].name = "barrel_tower_lvl2_tower"
tt.render.sprites[3].prefix = "barrel_tower_lvl2_tower_flow"
tt.render.sprites[4].name = "barrel_tower_lvl2_tower_tube"
tt.render.sprites[5].prefix = "barrel_tower_lvl2_viking"
tt.render.sprites[5].offset = v(-3, 30)
tt.ui.click_rect = r(-37, -3, 74, 70)
tt = E:register_t("tower_barrel_lvl3", "tower_barrel_lvl1")
b = balance.towers.barrel
tt.tower.level = 3
tt.tower.price = b.price[3]
tt.tower.menu_offset = v(0, 27)
tt.info.i18n_key = "TOWER_BARREL_3"
tt.attacks.range = b.basic_attack.range[3]
tt.attacks.list[1].bullet = "bullet_tower_barrel_lvl3"
tt.attacks.list[1].range = b.basic_attack.range[1]
tt.attacks.list[1].bullet_start_offset = v(-3, 69)
tt.attacks.list[1].shoot_time = fts(9)
tt.render.sprites[2].name = "barrel_tower_lvl3_tower"
tt.render.sprites[3].prefix = "barrel_tower_lvl3_tower_flow"
tt.render.sprites[4].name = "barrel_tower_lvl3_tower_tube"
tt.render.sprites[5].prefix = "barrel_tower_lvl3_viking"
tt.render.sprites[5].offset = v(-3, 34)
tt.ui.click_rect = r(-39, -3, 78, 75)
tt = E:register_t("tower_barrel_lvl4", "tower_barrel_lvl1")

E:add_comps(tt, "powers", "barrack")

b = balance.towers.barrel
tt.tower.level = 4
tt.tower.price = b.price[4]
tt.tower.menu_offset = v(0, 30)
tt.tower.show_rally = false
tt.info.i18n_key = "TOWER_BARREL_4"
tt.attacks.range = b.basic_attack.range[4]
tt.attacks.list[1].bullet = "bullet_tower_barrel_lvl4"
tt.attacks.list[1].range = b.basic_attack.range[1]
tt.attacks.list[1].bullet_start_offset = v(-3, 80)
tt.attacks.list[2] = table.deepclone(tt.attacks.list[1])
tt.attacks.list[2].bullet = "bullet_tower_barrel_skill_barrel"
tt.attacks.list[2].bullet_start_offset = v(-3, 85)
tt.attacks.list[2].shoot_time = fts(43)
tt.attacks.list[2].min_targets = b.skill_barrel.min_targets
tt.attacks.list[2].animation = "bad_barrel"
tt.attacks.list[2].disabled = true
tt.attacks.list[3] = E:clone_c("custom_attack")
tt.attacks.list[3].entity = "controller_soldier_tower_barrel_skill_warrior_spawn"
tt.attacks.list[3].min_targets = b.skill_warrior.min_targets
tt.attacks.list[3].animation = "berserker"
tt.attacks.list[3].drunk_man_spawn_delay = fts(18)
tt.attacks.list[3].range = b.skill_warrior.range
tt.attacks.list[3].cooldown = b.skill_warrior.cooldown
tt.attacks.list[3].vis_bans = bor(F_FLYING, F_CLIFF)
tt.attacks.list[3].disabled = true
tt.render.sprites[2].prefix = "barrel_tower_lvl4_tower"
tt.render.sprites[2].name = "idle"
tt.render.sprites[2].animated = true
tt.render.sprites[3].prefix = "barrel_tower_lvl4_tower_flow"
tt.render.sprites[4].name = "barrel_tower_lvl4_tower_tube"
tt.render.sprites[5].prefix = "barrel_tower_lvl4_viking"
tt.render.sprites[5].offset = v(-3, 45)
tt.powers.skill_warrior = E:clone_c("power")
tt.powers.skill_warrior.price = b.skill_warrior.price
tt.powers.skill_warrior.cooldown = b.skill_warrior.cooldown
tt.powers.skill_warrior.duration = b.skill_warrior.duration
tt.powers.skill_warrior.hp_max = b.skill_warrior.entity.hp_max
tt.powers.skill_warrior.armor = b.skill_warrior.entity.armor
tt.powers.skill_warrior.enc_icon = 23
tt.powers.skill_warrior.attack_idx = 3
tt.powers.skill_warrior.sound_evict = "TowerBarrelElixirOfMightEvict"
tt.powers.skill_warrior.sound_drink = "TowerBarrelElixirOfMightDrink"
tt.powers.skill_warrior.show_rally = true
tt.powers.skill_warrior.spawn_fx = "controller_soldier_tower_barrel_skill_warrior_spawn"
tt.powers.skill_barrel = E:clone_c("power")
tt.powers.skill_barrel.cooldown = b.skill_barrel.cooldown
tt.powers.skill_barrel.price = b.skill_barrel.price
tt.powers.skill_barrel.enc_icon = 24
tt.powers.skill_barrel.attack_idx = 2
tt.ui.click_rect = r(-40, -3, 80, 85)
tt.barrack.rally_range = b.rally_range
tt.barrack.rally_radius = 25
tt.barrack.soldier_type = "soldier_tower_barrel_skill_warrior"
tt.barrack.max_soldiers = 1
tt.barrack.respawn_offset = v(0, 0)
tt = E:register_t("controller_soldier_tower_barrel_skill_warrior_spawn")

E:add_comps(tt, "pos", "render", "main_script")

tt.render.sprites[1] = E:clone_c("sprite")
tt.render.sprites[1].prefix = "barrel_tower_lvl4_tower_berserker"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].hidden = false
tt.render.sprites[1].draw_order = 10
tt.main_script.update = scripts.controller_soldier_tower_barrel_skill_warrior_spawn.update
tt.berzerker_spawn_offset = v(-35, -17)
tt.berzerker_spawn_delay = fts(58)
tt.spawn_fx = "fx_soldier_tower_barrel_skill_warrior_spawn"
tt.berzerker_entity = "soldier_tower_barrel_skill_warrior"
tt = E:register_t("soldier_tower_barrel_skill_warrior", "soldier_militia")

E:add_comps(tt, "tween", "nav_grid")

b = balance.towers.barrel.skill_warrior.entity
tt.regen.health = b.regen_hp
tt.health_bar.offset = v(0, 50)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.motion.max_speed = b.speed
tt.info.i18n_key = "TOWER_BARREL_WARRIOR"
tt.info.enc_icon = 12
tt.info.portrait = "gui_bottom_info_image_soldiers_0037"
tt.info.fn = scripts.soldier_reinforcement.get_info
tt.info.random_name_format = nil
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].prefix = "barrel_tower_berserker_unit"
tt.render.sprites[1].name = "spawn"
tt.render.sprites[1].draw_order = DO_SOLDIER_BIG
tt.render.sprites[1].angles = {}
tt.render.sprites[1].angles.walk = {
	"walk"
}
tt.sound_events.death = "HeroRaelynUltimateDeath"
tt.unit.hit_offset = v(0, 16)
tt.unit.size = UNIT_SIZE_LARGE
tt.unit.fade_time_after_death = tt.health.dead_lifetime
tt.soldier.melee_slot_offset = v(20, 0)
tt.main_script.insert = scripts.soldier_tower_barrel_skill_warrior.insert
tt.main_script.update = scripts.soldier_tower_barrel_skill_warrior.update
tt.vis.bans = bor(F_SKELETON, F_CANNIBALIZE)
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	}
}
tt.tween.props[1].name = "alpha"
tt.tween.remove = true
tt.tween.reverse = false
tt.tween.disabled = true
tt.melee.attacks[1].vis_bans = bor(F_FLYING, F_CLIFF, F_WATER)
tt.melee.attacks[1].vis_flags = F_BLOCK
tt.melee.attacks[1].damage_min_config = b.damage_min
tt.melee.attacks[1].damage_max_config = b.damage_max
tt.melee.attacks[1].damage_type = b.damage_type
tt.melee.attacks[1].hit_time = fts(8)
tt.melee.attacks[1].hit_fx = "fx_soldier_tower_barrel_skill_warrior_hit"
tt.melee.attacks[1].hit_offset = v(30, 20)
tt.melee.attacks[1].animation = "attack"
tt.melee.attacks[1].shared_cooldown = true
tt.melee.attacks[1].sound = "CommonNoSwordAttack"
tt.melee.attacks[1].sound_args = {
	delay = fts(8)
}
tt.melee.attacks[2] = table.deepclone(tt.melee.attacks[1])
tt.melee.attacks[2].animation = "attack_2"
tt.melee.attacks[2].chance = 0.5
tt.melee.range = b.range
tt.melee.cooldown = b.cooldown
tt.floor_decal = "decal_soldier_tower_barrel_skill_warrior"
tt.ui.click_rect = r(-20, -5, 40, 50)
tt = E:register_t("tower_sand_lvl1", "tower_KR5")

E:add_comps(tt, "attacks", "vis")

b = balance.towers.sand
tt.tower.type = "sand"
tt.tower.kind = TOWER_KIND_ARCHER
tt.tower.team = TEAM_LINIREA
tt.tower.level = 1
tt.tower.price = b.price[1]
tt.tower.menu_offset = v(0, 20)
tt.info.portrait = "portraits_towers" .. "_0015"
tt.info.room_portrait = "quickmenu_main_icons_main_icons_0013_0001"
tt.info.enc_icon = 1
tt.info.i18n_key = "TOWER_SAND_1"
tt.info.tower_portrait = "towerselect_portraits_big_" .. "0015"
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 14)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "tower_sand_lvl1_tower"
tt.render.sprites[2].offset = v(2, 14)
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].prefix = "tower_sand_lvl1_sentinel"
tt.render.sprites[3].name = "idle"
tt.render.sprites[3].angles = {}
tt.render.sprites[3].angles.idle = {
	"idle_back",
	"idle"
}
tt.render.sprites[3].angles.shoot = {
	"attack_back",
	"attack"
}
tt.render.sprites[3].angles_flip_horizontal = {
	true,
	false
}
tt.render.sprites[3].offset = v(-7, 48)
tt.render.sprites[4] = table.deepclone(tt.render.sprites[3])
tt.render.sprites[4].offset = v(10, 43)
tt.render.sprites[5] = E:clone_c("sprite")
tt.render.sprites[5].animated = false
tt.render.sprites[5].name = "tower_sand_lvl1_tower_front"
tt.render.sprites[5].offset = v(2, 14)
tt.main_script.insert = scripts.tower_archer.insert
tt.main_script.update = scripts.tower_sand.update
tt.main_script.remove = scripts.tower_sand.remove
tt.attacks.range = b.basic_attack.range[1]
tt.attacks.attack_delay_on_spawn = fts(5)
tt.attacks.list[1] = E:clone_c("bullet_attack")
tt.attacks.list[1].bullet = "bullet_tower_sand_lvl1"
tt.attacks.list[1].cooldown = b.basic_attack.cooldown
tt.attacks.list[1].shoot_time = fts(10)
tt.attacks.list[1].bullet_start_offset = {
	v(-15, 13),
	v(15, 12)
}
tt.attacks.list[1].vis_flags = bor(F_RANGED)
tt.attacks.list[1].vis_bans = bor(F_NIGHTMARE)
tt.sound_events.insert = "TowerSandTaunt"
tt.sound_events.tower_room_select = "TowerSandTauntSelect"
tt.ui.click_rect = r(-30, 3, 63, 62)
tt = E:register_t("tower_sand_lvl2", "tower_sand_lvl1")
b = balance.towers.sand
tt.info.enc_icon = 5
tt.info.i18n_key = "TOWER_SAND_2"
tt.tower.level = 2
tt.tower.price = b.price[2]
tt.tower.menu_offset = v(0, 22)
tt.render.sprites[2].name = "tower_sand_lvl2_tower"
tt.render.sprites[3].prefix = "tower_sand_lvl2_sentinel"
tt.render.sprites[3].offset = v(-7, 53)
tt.render.sprites[4].prefix = "tower_sand_lvl2_sentinel"
tt.render.sprites[4].offset = v(10, 48)
tt.render.sprites[5].hidden = true
tt.attacks.list[1].bullet = "bullet_tower_sand_lvl2"
tt.attacks.list[1].bullet_start_offset = {
	v(-15, 13),
	v(15, 12)
}
tt.attacks.list[1].shoot_time = fts(9)
tt.attacks.range = b.basic_attack.range[2]
tt.ui.click_rect = r(-30, 3, 63, 67)
tt = E:register_t("tower_sand_lvl3", "tower_sand_lvl1")
b = balance.towers.sand
tt.info.enc_icon = 9
tt.info.i18n_key = "TOWER_SAND_3"
tt.tower.level = 3
tt.tower.price = b.price[3]
tt.tower.menu_offset = v(0, 22)
tt.tower.size = TOWER_SIZE_LARGE
tt.render.sprites[2].name = "tower_sand_lvl3_tower"
tt.render.sprites[3].prefix = "tower_sand_lvl3_sentinel"
tt.render.sprites[3].offset = v(-7, 56)
tt.render.sprites[4].prefix = "tower_sand_lvl3_sentinel"
tt.render.sprites[4].offset = v(10, 51)
tt.render.sprites[5].hidden = true
tt.attacks.list[1].bullet = "bullet_tower_sand_lvl3"
tt.attacks.list[1].bullet_start_offset = {
	v(-15, 13),
	v(15, 12)
}
tt.attacks.list[1].shoot_time = fts(9)
tt.attacks.range = b.basic_attack.range[3]
tt.ui.click_rect = r(-32, 3, 67, 72)
tt = E:register_t("tower_sand_lvl4", "tower_sand_lvl1")

E:add_comps(tt, "powers")

b = balance.towers.sand
tt.info.enc_icon = 18
tt.info.i18n_key = "TOWER_SAND_4"
tt.info.stat_damage = b.stats.damage
tt.info.stat_cooldown = b.stats.cooldown
tt.info.stat_range = b.stats.range
tt.tower.level = 4
tt.tower.price = b.price[4]
tt.tower.menu_offset = v(0, 25)
tt.tower.size = TOWER_SIZE_LARGE
tt.attacks.list[1].animation = "shoot"
tt.attacks.list[1].bullet = "bullet_tower_sand_lvl4"
tt.attacks.list[1].shoot_time = fts(9)
tt.attacks.list[1].bullet_start_offset = {
	v(-15, 13),
	v(15, 12)
}
tt.attacks.list[2] = E:clone_c("bullet_attack")
tt.attacks.list[2].animation = "skill1"
tt.attacks.list[2].bullet = "bullet_tower_sand_skill_gold"
tt.attacks.list[2].cooldown = nil
tt.attacks.list[2].shoot_time = fts(17)
tt.attacks.list[2].bullet_start_offset = {
	v(-12, 13),
	v(-12, 12)
}
tt.attacks.list[2].sound = "TowerSandSkillGoldCast"
tt.attacks.list[2].vis_bans = bor(F_FRIEND, F_NIGHTMARE)
tt.attacks.list[3] = E:clone_c("bullet_attack")
tt.attacks.list[3].animation = "skill2"
tt.attacks.list[3].bullet = "aura_tower_sand_skill_big_blade"
tt.attacks.list[3].cooldown = nil
tt.attacks.list[3].shoot_time = {
	fts(30),
	fts(33)
}
tt.attacks.list[3].bullet_start_offset = {
	v(-17, 18),
	v(17, 18)
}
tt.attacks.list[3].sound = "TowerSandSkillBigBladeCast"
tt.attacks.list[3].vis_bans = bor(F_FRIEND, F_NIGHTMARE, F_FLYING)
tt.attacks.list[3].range = b.skill_big_blade.range
tt.attacks.list[3].min_targets = b.skill_big_blade.min_targets
tt.attacks.range = b.basic_attack.range[4]
tt.powers.skill_gold = E:clone_c("power")
tt.powers.skill_gold.attack_idx = 2
tt.powers.skill_gold.price = b.skill_gold.price
tt.powers.skill_gold.cooldown = b.skill_gold.cooldown
tt.powers.skill_gold.enc_icon = 27
tt.powers.skill_big_blade = E:clone_c("power")
tt.powers.skill_big_blade.attack_idx = 3
tt.powers.skill_big_blade.price = b.skill_big_blade.price
tt.powers.skill_big_blade.enc_icon = 28
tt.powers.skill_big_blade.cooldown = b.skill_big_blade.cooldown
tt.powers.skill_big_blade.damage_min = b.skill_big_blade.damage_min
tt.powers.skill_big_blade.damage_max = b.skill_big_blade.damage_max
tt.powers.skill_big_blade.duration = b.skill_big_blade.duration
tt.powers.skill_big_blade.controller = "controller_tower_sand_lvl4_skill_big_blade"
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 14)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = true
tt.render.sprites[2].prefix = "tower_sand_lvl4_tower"
tt.render.sprites[2].name = "idle"
tt.render.sprites[2].offset = v(1, 13)
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].prefix = "tower_sand_lvl4_sentinel"
tt.render.sprites[3].name = "idle"
tt.render.sprites[3].angles = {}
tt.render.sprites[3].angles.idle = {
	"idle_back",
	"idle"
}
tt.render.sprites[3].angles.shoot = {
	"attack_back",
	"attack"
}
tt.render.sprites[3].angles_flip_horizontal = {
	true,
	false
}
tt.render.sprites[3].offset = v(-9, 61)
tt.render.sprites[4] = table.deepclone(tt.render.sprites[3])
tt.render.sprites[4].offset = v(10, 56)
tt.render.sprites[5] = E:clone_c("sprite")
tt.render.sprites[5].animated = false
tt.render.sprites[5].name = "tower_sand_lvl4_tower_front"
tt.render.sprites[5].offset = v(1, 13)
tt.ui.click_rect = r(-35, 3, 73, 77)
tt.tower_sid = 2
tt = E:register_t("controller_tower_sand_lvl4_skill_big_blade")

E:add_comps(tt, "main_script")

tt.main_script.update = scripts.controller_tower_sand_lvl4_skill_big_blade.update
tt = E:register_t("tower_ray_lvl1", "tower_KR5")

local b = balance.towers.ray

E:add_comps(tt, "attacks", "vis", "tween")

tt.tower.type = "ray"
tt.tower.kind = TOWER_KIND_MAGE
tt.tower.team = TEAM_DARK_ARMY
tt.tower.level = 1
tt.tower.price = b.price[1]
tt.tower.menu_offset = v(0, 33)
tt.tower.long_idle_cooldown = 2
tt.info.enc_icon = 17
tt.info.i18n_key = "TOWER_RAY_1"
tt.info.portrait = "portraits_towers" .. "_0019"
tt.info.fn = scripts.tower_ray.get_info
tt.info.room_portrait = "quickmenu_main_icons_main_icons_0017_0001"
tt.info.tower_portrait = "towerselect_portraits_big_" .. "0017"
tt.info.damage_icon = "magic"
tt.info.stat_damage = b.stats.damage
tt.info.stat_range = b.stats.range
tt.info.stat_cooldown = b.stats.cooldown
tt.main_script.insert = scripts.tower_ray.insert
tt.main_script.update = scripts.tower_ray.update
tt.main_script.remove = scripts.tower_ray.remove
tt.attacks.min_cooldown = b.shared_min_cooldown
tt.attacks.range = b.basic_attack.range[1]
tt.attacks.extra_range = b.basic_attack.extra_range_to_stay
tt.attacks.attack_delay_on_spawn = fts(5)
tt.attacks.list[1] = E:clone_c("bullet_attack")
tt.attacks.list[1].animation_start = "attack_start"
tt.attacks.list[1].animation_loop = "attack_loop"
tt.attacks.list[1].animation_end = "attack_end"
tt.attacks.list[1].bullet = "bullet_tower_ray_lvl1"
tt.attacks.list[1].cooldown = b.basic_attack.cooldown
tt.attacks.list[1].shoot_time = fts(9)
tt.attacks.list[1].duration = b.basic_attack.duration
tt.attacks.list[1].bullet_start_offset = v(0, 83)
tt.attacks.list[1].ignore_out_of_range_check = 1
tt.attacks.list[1].vis_bans = bor(F_NIGHTMARE)
tt.attacks.list[1].vis_flags = bor(F_RANGED)
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 13)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].name = "channeler_tower_lvl1_tower"
tt.render.sprites[2].animated = false
tt.render.sprites[2].offset = v(0, 13)
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].prefix = "channeler_tower_lvl1_rune_glow"
tt.render.sprites[3].name = "idle"
tt.render.sprites[3].hidden = true
tt.render.sprites[3].offset = tt.render.sprites[2].offset
tt.render.sprites[4] = E:clone_c("sprite")
tt.render.sprites[4].prefix = "channeler_tower_lvl1_mage"
tt.render.sprites[4].name = "idle"
tt.render.sprites[4].angles = {}
tt.render.sprites[4].angles.idle = {
	"idle_back",
	"idle"
}
tt.render.sprites[4].angles.attack_start = {
	"attack_back_start",
	"attack_start"
}
tt.render.sprites[4].angles.attack_loop = {
	"attack_back_loop",
	"attack_loop"
}
tt.render.sprites[4].angles.attack_end = {
	"attack_back_end",
	"attack_end"
}
tt.render.sprites[4].offset = tt.render.sprites[2].offset
tt.render.sprites[5] = E:clone_c("sprite")
tt.render.sprites[5].name = "channeler_tower_towers_decal"
tt.render.sprites[5].animated = false
tt.render.sprites[5].z = Z_DECALS
tt.render.sprites[5].offset = tt.render.sprites[2].offset
tt.render.sprites[6] = E:clone_c("sprite")
tt.render.sprites[6].prefix = "channeler_tower_crystal_full"
tt.render.sprites[6].name = "idle"
tt.render.sprites[6].animated = true
tt.render.sprites[6].z = Z_OBJECTS + 1
tt.render.sprites[6].offset = tt.attacks.list[1].bullet_start_offset
tt.render.sprites[6].hidden = true
tt.render.sid_glow = 3
tt.render.sid_mage = 4
tt.render.sid_crystal_union = 6
tt.render.sid_crystals = 7
tt.crystals_ids = {
	"a",
	"b",
	"c",
	"d",
	"e",
	"f"
}

for i = 1, #tt.crystals_ids do
	local crystal_sid = tt.render.sid_crystals + i - 1

	tt.render.sprites[crystal_sid] = E:clone_c("sprite")
	tt.render.sprites[crystal_sid].prefix = "channeler_tower_lvl1_2_3_crystal_" .. tt.crystals_ids[i]
	tt.render.sprites[crystal_sid].name = "idle"
	tt.render.sprites[crystal_sid].group = "crystals"
	tt.render.sprites[crystal_sid].offset = v(0, tt.attacks.list[1].bullet_start_offset.y - 15)
end

tt.mage_offset = v(0, 80)
tt.tween.remove = false
tt.sound_events.insert = "TowerRayTaunt"
tt.sound_events.tower_room_select = "TowerRayTauntSelect"
tt.ui.click_rect = r(-30, 0, 60, 65)
tt = E:register_t("tower_ray_lvl2", "tower_ray_lvl1")
tt.info.enc_icon = 7
tt.info.i18n_key = "TOWER_RAY_2"
tt.tower.level = 2
tt.tower.price = b.price[2]
tt.tower.menu_offset = v(0, 38)
tt.attacks.range = b.basic_attack.range[2]
tt.attacks.list[1].bullet = "bullet_tower_ray_lvl2"
tt.attacks.list[1].bullet_start_offset = v(0, 92)
tt.render.sprites[2].name = "channeler_tower_lvl2_tower"
tt.render.sprites[3].prefix = "channeler_tower_lvl2_rune_glow"
tt.render.sprites[4].prefix = "channeler_tower_lvl2_mage"
tt.render.sprites[tt.render.sid_crystal_union].offset = tt.attacks.list[1].bullet_start_offset

for i = 1, #tt.crystals_ids do
	local crystal_sid = tt.render.sid_crystals + i - 1

	tt.render.sprites[crystal_sid].offset.y = tt.attacks.list[1].bullet_start_offset.y - 15
end

tt.render.sid_stones = 13
tt.stones_ids = {
	"a",
	"b",
	"c",
	"d",
	"e"
}

for i = 1, #tt.stones_ids do
	local stone_sid = tt.render.sid_stones + i - 1

	tt.render.sprites[stone_sid] = E:clone_c("sprite")
	tt.render.sprites[stone_sid].name = "channeler_tower_lvl2_stone_" .. tt.stones_ids[i]
	tt.render.sprites[stone_sid].animated = false
	tt.render.sprites[stone_sid].offset = tt.render.sprites[2].offset
end

tt.ui.click_rect = r(-35, 0, 70, 70)
tt = E:register_t("tower_ray_lvl3", "tower_ray_lvl2")
tt.info.enc_icon = 7
tt.info.i18n_key = "TOWER_RAY_3"
tt.tower.level = 3
tt.tower.price = b.price[3]
tt.tower.menu_offset = v(0, 42)
tt.attacks.range = b.basic_attack.range[3]
tt.attacks.list[1].bullet = "bullet_tower_ray_lvl3"
tt.attacks.list[1].bullet_start_offset = v(0, 95)
tt.render.sprites[2].name = "channeler_tower_lvl3_tower"
tt.render.sprites[3].prefix = "channeler_tower_lvl3_rune_glow"
tt.render.sprites[4].prefix = "channeler_tower_lvl3_mage"

for i = 1, #tt.crystals_ids do
	local crystal_sid = tt.render.sid_crystals + i - 1

	tt.render.sprites[crystal_sid].offset.y = tt.attacks.list[1].bullet_start_offset.y - 15
end

tt.render.sprites[tt.render.sid_crystal_union].offset = tt.attacks.list[1].bullet_start_offset
tt.stones_ids = {
	"a",
	"b",
	"c",
	"d",
	"e",
	"f"
}

for i = 1, #tt.stones_ids do
	local stone_sid = tt.render.sid_stones + i - 1

	tt.render.sprites[stone_sid] = E:clone_c("sprite")
	tt.render.sprites[stone_sid].name = "channeler_tower_lvl3_stone_" .. tt.stones_ids[i]
	tt.render.sprites[stone_sid].animated = false
	tt.render.sprites[stone_sid].offset = tt.render.sprites[2].offset
end

tt.ui.click_rect = r(-35, 0, 70, 70)
tt = E:register_t("tower_ray_lvl4", "tower_ray_lvl3")

E:add_comps(tt, "powers")

tt.info.enc_icon = 15
tt.info.i18n_key = "TOWER_RAY_4"
tt.tower.level = 4
tt.tower.price = b.price[4]
tt.tower.size = TOWER_SIZE_LARGE
tt.tower.menu_offset = v(0, 38)
tt.powers.chain = CC("power")
tt.powers.chain.price = b.skill_chain.price
tt.powers.chain.damage_mult = b.skill_chain.damage_mult
tt.powers.chain.enc_icon = 29
tt.powers.sheep = CC("power")
tt.powers.sheep.price = b.skill_sheep.price
tt.powers.sheep.cooldown = b.skill_sheep.cooldown
tt.powers.sheep.duration = b.skill_sheep.duration
tt.powers.sheep.enc_icon = 30
tt.attacks.range = b.basic_attack.range[4]
tt.attacks.list[1].bullet = "bullet_tower_ray_lvl4"
tt.attacks.list[1].bullet_start_offset = v(0, 102)
tt.attacks.list[1].start_fx = "fx_tower_ray_lvl4_attack"
tt.attacks.list[2] = table.deepclone(tt.attacks.list[1])
tt.attacks.list[2].bullet = "bullet_tower_ray_chain"
tt.attacks.list[2].disabled = true
tt.attacks.list[3] = E:clone_c("bullet_attack")
tt.attacks.list[3].animation_start = "attack_start"
tt.attacks.list[3].animation_loop = "attack_loop"
tt.attacks.list[3].animation_end = "attack_end"
tt.attacks.list[3].bullet = "bullet_tower_ray_sheep"
tt.attacks.list[3].range = b.skill_sheep.range
tt.attacks.list[3].cooldown = nil
tt.attacks.list[3].shoot_time = fts(10)
tt.attacks.list[3].bullet_start_offset = tt.attacks.list[1].bullet_start_offset
tt.attacks.list[3].node_prediction = fts(10)
tt.attacks.list[3].start_fx = "fx_tower_ray_lvl4_attack_sheep"
tt.attacks.list[3].vis_bans = bor(F_BOSS, F_MINIBOSS, F_NIGHTMARE, F_WATER, F_CLIFF, F_POLYMORPH)
tt.attacks.list[3].vis_flags = bor(F_POLYMORPH)
tt.attacks.list[3].excluded_templates = {
	"enemy_tower_ray_sheep",
	"enemy_tower_ray_sheep_flying"
}
tt.attacks.list[3].disabled = true
tt.render.sprites[2].name = "channeler_tower_lvl4_rock_core"
tt.render.sprites[2].draw_order = 2
tt.render.sprites[3].hidden = true
tt.render.sprites[4].prefix = "channeler_tower_lvl4_mage"
tt.render.sprites[4].draw_order = 4
tt.render.sprites[tt.render.sid_crystal_union].offset = tt.attacks.list[1].bullet_start_offset
tt.crystals_ids = {
	"a",
	"b",
	"c",
	"d",
	"e",
	"f",
	"g",
	"h"
}

for i = 1, #tt.crystals_ids do
	local crystal_sid = tt.render.sid_crystals + i - 1

	tt.render.sprites[crystal_sid] = E:clone_c("sprite")
	tt.render.sprites[crystal_sid].prefix = "channeler_tower_lvl4_crystal_" .. tt.crystals_ids[i]
	tt.render.sprites[crystal_sid].name = "idle"
	tt.render.sprites[crystal_sid].group = "crystals"
	tt.render.sprites[crystal_sid].offset = v(0, 20)
	tt.render.sprites[crystal_sid].draw_order = 4
end

tt.render.sid_stones = tt.render.sid_crystals + #tt.crystals_ids
tt.stones_ids = {
	"a",
	"b",
	"c",
	"d",
	"e",
	"f",
	"g",
	"h",
	"i",
	"j",
	"k",
	"l"
}

for i = 1, #tt.stones_ids do
	local stone_sid = tt.render.sid_stones + i - 1

	tt.render.sprites[stone_sid] = E:clone_c("sprite")
	tt.render.sprites[stone_sid].name = "channeler_tower_lvl4_stone_" .. tt.stones_ids[i]
	tt.render.sprites[stone_sid].animated = false
	tt.render.sprites[stone_sid].draw_order = 2
	tt.render.sprites[stone_sid].offset = tt.render.sprites[2].offset
end

tt.render.sid_core_rock_shadow = 27
tt.render.sprites[tt.render.sid_core_rock_shadow] = E:clone_c("sprite")
tt.render.sprites[tt.render.sid_core_rock_shadow].name = "channeler_tower_lvl4_tower_shadow"
tt.render.sprites[tt.render.sid_core_rock_shadow].animated = false
tt.render.sprites[tt.render.sid_core_rock_shadow].z = Z_DECALS
tt.render.sprites[tt.render.sid_core_rock_shadow].offset = tt.render.sprites[2].offset
tt.render.sid_rocks = 28
tt.rocks_ids = {
	"a",
	"b",
	"c"
}

for i = 1, #tt.rocks_ids do
	local rock_sid = tt.render.sid_rocks + i - 1

	tt.render.sprites[rock_sid] = E:clone_c("sprite")
	tt.render.sprites[rock_sid].prefix = "channeler_tower_lvl4_rock_" .. tt.rocks_ids[i]
	tt.render.sprites[rock_sid].name = "idle"
	tt.render.sprites[rock_sid].animated = true
	tt.render.sprites[rock_sid].group = "rocks"
	tt.render.sprites[rock_sid].draw_order = 4
	tt.render.sprites[rock_sid].offset = tt.render.sprites[2].offset
end

tt.render.sid_back_rocks = 31
tt.back_rocks_ids = {
	"d",
	"e"
}

for i = 1, #tt.back_rocks_ids do
	local rock_sid = tt.render.sid_back_rocks + i - 1

	tt.render.sprites[rock_sid] = E:clone_c("sprite")
	tt.render.sprites[rock_sid].name = "channeler_tower_lvl4_rock_" .. tt.back_rocks_ids[i]
	tt.render.sprites[rock_sid].animated = false
	tt.render.sprites[rock_sid].draw_order = 1
	tt.render.sprites[rock_sid].offset = tt.render.sprites[2].offset
end

tt.shocks_ids = {
	"a",
	"b",
	"c",
	"d"
}
tt.shock_fx = "fx_tower_ray_lvl4_shock"
tt.ui.click_rect = r(-35, 10, 70, 70)

tt = E:register_t("tower_dark_elf_lvl1", "tower_KR5")
b = balance.towers.dark_elf

E:add_comps(tt, "attacks", "vis", "tower_upgrade_persistent_data")

tt.tower.type = "dark_elf"
tt.tower.kind = TOWER_KIND_ARCHER
tt.tower.team = TEAM_DARK_ARMY
tt.tower.level = 1
tt.tower.price = b.price[1]
tt.tower.menu_offset = v(0, 25)
tt.info.portrait = "portraits_towers_0020"
tt.info.enc_icon = 1
tt.info.i18n_key = "TOWER_DARK_ELF_1"
tt.info.tower_portrait = "tower_room_portraits_big_tower_dark_elf_0001"
tt.info.room_portrait = "quickmenu_main_icons_main_icons_0018_0001"
tt.info.stat_damage = b.stats.damage
tt.info.stat_cooldown = b.stats.cooldown
tt.info.stat_range = b.stats.range
tt.ui.click_rect = r(-35, 0, 70, 75)
tt.ui.click_rect_offset_y = -10
tt.main_script.update = scripts.tower_dark_elf.update
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 15)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "Tower_lvl1"
tt.render.sprites[2].offset = v(2, 11)
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].prefix = "Archer_lvl1"
tt.render.sprites[3].name = "idle"
tt.render.sprites[3].angles = {}
tt.render.sprites[3].angles.idle = {
	"idleback",
	"idle"
}
tt.render.sprites[3].angles.shot_prepare = {
	"shootbackstart",
	"shootstart"
}
tt.render.sprites[3].angles.shot = {
	"shootbackhigher",
	"shootbackhigher",
	"shootlower",
	"shoothigher"
}
tt.render.sprites[3].angles.shot_end = {
	"transitionback",
	"transition"
}
tt.render.sprites[3].offset = v(0, 47)
tt.render.sid_archer = 3
tt.attacks.range = b.basic_attack.range[1]
tt.attacks.list[1] = E:clone_c("bullet_attack")
tt.attacks.list[1].bullet = "bullet_tower_dark_elf_lvl1"
tt.attacks.list[1].cooldown = b.basic_attack.cooldown
tt.attacks.list[1].shoot_time = fts(13)
tt.attacks.list[1].vis_flags = bor(F_RANGED)
tt.attacks.list[1].vis_bans = bor(F_NIGHTMARE)
tt.attacks.list[1].node_prediction_prepare = fts(6)
tt.attacks.list[1].node_prediction = fts(24)
tt.attacks.list[1].bullet_start_offset = {
	v(18, 80),
	v(18, 80),
	v(18, 80),
	v(18, 80)
}
tt.attacks.list[1].first_cooldown = 2
tt.attacks.list[1].mod_target = "mod_tower_dark_elf_big_target"
tt.tower_upgrade_persistent_data.current_mode = 0
tt.tower_upgrade_persistent_data.souls_extra_damage_min = 0
tt.tower_upgrade_persistent_data.souls_extra_damage_max = 0
tt.tower.long_idle_cooldown = 6
tt.sound_events.insert = "TowerDarkElfTaunt"
tt.sound_events.tower_room_select = "TowerDarkElfTauntSelect"
tt = E:register_t("tower_dark_elf_lvl2", "tower_dark_elf_lvl1")
tt.tower.level = 2
tt.tower.price = b.price[2]
tt.info.i18n_key = "TOWER_DARK_ELF_2"
tt.render.sprites[2].name = "Tower_lvl2"
tt.render.sprites[2].offset = v(2, 11)
tt.render.sprites[3].prefix = "Archer_lvl2"
tt.render.sprites[3].offset = v(0, 55)
tt.attacks.range = b.basic_attack.range[2]
tt.attacks.list[1].bullet = "bullet_tower_dark_elf_lvl2"
tt.attacks.list[1].bullet_start_offset = {
	v(18, 88),
	v(18, 88),
	v(18, 88),
	v(18, 88)
}
tt = E:register_t("tower_dark_elf_lvl3", "tower_dark_elf_lvl1")
tt.tower.level = 3
tt.tower.price = b.price[3]
tt.info.i18n_key = "TOWER_DARK_ELF_3"
tt.render.sprites[2].name = "Tower_lvl3"
tt.render.sprites[2].offset = v(2, 11)
tt.render.sprites[3].prefix = "Archer_lvl3"
tt.render.sprites[3].offset = v(0, 60)
tt.attacks.range = b.basic_attack.range[3]
tt.attacks.list[1].bullet = "bullet_tower_dark_elf_lvl3"
tt.attacks.list[1].bullet_start_offset = {
	v(18, 93),
	v(18, 93),
	v(18, 93),
	v(18, 93)
}
tt = E:register_t("tower_dark_elf_lvl4", "tower_dark_elf_lvl1")
b = balance.towers.dark_elf

E:add_comps(tt, "powers", "barrack")

tt.tower.level = 4
tt.tower.price = b.price[4]
tt.info.i18n_key = "TOWER_DARK_ELF_4"
tt.info.fn = scripts.tower_dark_elf.get_info
tt.main_script.remove = scripts.tower_dark_elf.remove
tt.main_script.insert = scripts.tower_dark_elf.insert
tt.render.sprites[2].name = "Tower_lvl4"
tt.render.sprites[2].offset = v(2, 11)
tt.render.sprites[2].sort_y_offset = 11
tt.render.sprites[3].prefix = "Archer_lvl4"
tt.render.sprites[3].offset = v(0, 64)
tt.attacks.range = b.basic_attack.range[4]
tt.attacks.list[1].bullet = "bullet_tower_dark_elf_lvl4"
tt.attacks.list[1].bullet_start_offset = {
	v(18, 97),
	v(18, 97),
	v(18, 97),
	v(18, 97)
}
tt.powers.skill_soldiers = E:clone_c("power")
tt.powers.skill_soldiers.price = b.skill_soldiers.price
tt.powers.skill_soldiers.cooldown = b.skill_soldiers.cooldown
tt.powers.skill_soldiers.hp = b.soldier.hp
tt.powers.skill_soldiers.damage_min = b.soldier.basic_attack.damage_min
tt.powers.skill_soldiers.damage_max = b.soldier.basic_attack.damage_max
tt.powers.skill_soldiers.dodge_chance = b.soldier.dodge_chance
tt.powers.skill_soldiers.enc_icon = 31
tt.powers.skill_soldiers.show_rally = true
tt.powers.skill_buff = E:clone_c("power")
tt.powers.skill_buff.price = b.skill_buff.price
tt.powers.skill_buff.enc_icon = 32
tt.powers.skill_buff.damage_min = b.skill_buff.extra_damage_min
tt.powers.skill_buff.damage_max = b.skill_buff.extra_damage_max
tt.powers.skill_buff.fps_increment = b.skill_buff.fps_increment
tt.powers.skill_buff.armor_reduction = b.skill_buff.armor_reduction
tt.powers.skill_buff.max_fps = b.skill_buff.max_fps
tt.powers.skill_buff.max_armor_reduction = b.skill_buff.max_armor_reduction / 100
tt.powers.skill_buff.max_level = 2
tt.barrack.rally_range = b.rally_range
tt.barrack.rally_radius = 25
tt.barrack.soldier_type = "soldier_tower_dark_elf"
tt.barrack.max_soldiers = 2
tt.barrack.respawn_offset = v(0, 12)
tt.attacks.list[2] = E:clone_c("custom_attack")
tt.attacks.list[2].disabled = true
tt.attacks.list[2].spawn_delay = 1
tt.controller_soldiers_template = "controller_tower_dark_elf_soldiers"
tt.sound_events.change_rally_point = "TowerDarkElfUnitTaunt"

tt = E:register_t("tower_hermit_toad_lvl1", "tower_KR5")
b = balance.towers.hermit_toad

E:add_comps(tt, "attacks", "vis", "idle_flip")

tt.tower.type = "hermit_toad"
tt.tower.kind = TOWER_KIND_MAGE
tt.tower.team = TEAM_DARK_ARMY
tt.tower.level = 1
tt.tower.price = b.price[1]
tt.tower.menu_offset = v(0, 10)
tt.info.enc_icon = 1
tt.info.i18n_key = "TOWER_HERMIT_TOAD_1"
tt.info.portrait = "portraits_towers" .. "_0025"
tt.info.room_portrait = "quickmenu_main_icons_main_icons_0019_0001"
tt.info.tower_portrait = "towerselect_portraits_big_" .. "0005"
tt.info.stat_damage = b.stats.damage
tt.info.stat_cooldown = b.stats.cooldown
tt.info.stat_range = b.stats.range
tt.info.fn = scripts.tower_hermit_toad.get_info
tt.ui.click_rect = r(-35, 0, 70, 75)
tt.ui.click_rect_offset_y = -10
tt.main_script.update = scripts.tower_hermit_toad.update
tt.main_script.remove = scripts.tower_hermit_toad.remove
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 13)
tt.render.sprites[1].hidden = true
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = true
tt.render.sprites[2].prefix = "hermit_toad_tower_pond"
tt.render.sprites[2].offset.y = 5
tt.idle_modes = {
	"idle2",
	"idle"
}
tt.render.sprites[2].name = tt.idle_modes[1]
tt.render.sprites[2].z = tt.render.sprites[1].z
tt.render.sid_toad = 3
tt.render.sprites[tt.render.sid_toad] = E:clone_c("sprite")
tt.render.sprites[tt.render.sid_toad].prefix = "hermit_toad_tower_frog1"
tt.render.sprites[tt.render.sid_toad].name = "idle"
tt.render.sprites[tt.render.sid_toad].offset = tt.render.sprites[2].offset
tt.render.sid_bubbles = 4
tt.render.bubbles_anims = {
	"pruple",
	"blue"
}
tt.render.sprites[tt.render.sid_bubbles] = E:clone_c("sprite")
tt.render.sprites[tt.render.sid_bubbles].prefix = "hermit_toad_tower_bubbles_frog"
tt.render.sprites[tt.render.sid_bubbles].name = tt.render.bubbles_anims[1]
tt.render.sprites[tt.render.sid_bubbles].offset = tt.render.sprites[2].offset
tt.render.sprites[tt.render.sid_bubbles].animated = true
tt.attacks.range = b.engineer_basic_attack.range[1]
tt.attacks.list[1] = E:clone_c("bullet_attack")
tt.attacks.list[1].bullet = "bullet_tower_hermit_toad_engineer_basic_lvl1"
tt.attacks.list[1].cooldown = b.engineer_basic_attack.cooldown
tt.attacks.list[1].shoot_time = fts(18)
tt.attacks.list[1].vis_flags = bor(F_RANGED, F_AREA)
tt.attacks.list[1].vis_bans = bor(F_NIGHTMARE, F_FLYING)
tt.attacks.list[1].node_prediction = fts(25)
tt.attacks.list[1].bullet_start_offset = v(30, 30)
tt.attacks.list[1].first_cooldown = 2
tt.attacks.list[1].range = b.engineer_basic_attack.range
tt.attacks.list[1].animation = "shoot2"
tt.attacks.list[1].sound = "TowerHermitToadShootEngineer"
tt.attacks.list[2] = E:clone_c("bullet_attack")
tt.attacks.list[2].bullet = "bullet_tower_hermit_toad_mage_basic_lvl1"
tt.attacks.list[2].cooldown = b.mage_basic_attack.cooldown
tt.attacks.list[2].shoot_time = fts(18)
tt.attacks.list[2].vis_flags = bor(F_RANGED)
tt.attacks.list[2].vis_bans = bor(F_NIGHTMARE)
tt.attacks.list[2].node_prediction = fts(0)
tt.attacks.list[2].bullet_start_offset = v(13, 60)
tt.attacks.list[2].first_cooldown = 2
tt.attacks.list[2].range = b.mage_basic_attack.range
tt.attacks.list[2].animation = "shoot"
tt.attacks.list[2].sound = "TowerHermitToadShootMagic"
tt.tower_upgrade_persistent_data.current_mode = 1
tt.fx_splash = "fx_tower_hermit_toad_splash"
tt.fx_splash_offset = v(2, 10)
tt.idle_flip.cooldown = 3
tt.idle_flip.chance = 0.7
tt.toad_flip_duration = fts(11)
tt.toad_flip_anims = {
	"turn2",
	"turn"
}
tt.toad_idle_anims = {
	"idleanim2",
	"idleanim"
}
tt.toad_blink_anims = {
	"idleblink2",
	"idleblink"
}
tt.ps_bubbles_mage = "ps_tower_hermit_toad_mage_bubbles"
tt.ps_bubbles_mage_area = "ps_tower_hermit_toad_mage_bubbles_area"
tt.ps_bubbles_engineer = "ps_tower_hermit_toad_engineer_bubbles"
tt.ps_bubbles_mage_area_offset = v(0, 15)
tt.ps_bubbles_mage_area_emit_speed = {
	3,
	11
}
tt.ps_bubbles_mage_area_scale_var = {
	0.5,
	1.4
}
tt.ps_bubbles_mage_area_emission_rate = 1
tt.ps_bubbles_mage_offset = v(31, 32)
tt.ps_bubbles_mage_emit_speed = {
	3,
	11
}
tt.ps_bubbles_mage_scale_var = {
	0.5,
	1.1
}
tt.ps_bubbles_mage_emission_rate = 2
tt.ps_bubbles_engineer_offset = v(31, 32)
tt.ps_bubbles_engineer_emit_speed = {
	3,
	11
}
tt.ps_bubbles_engineer_scale_var = {
	0.5,
	1.1
}
tt.ps_bubbles_engineer_emission_rate = 2
tt.sound_events.insert = "TowerHermitToadTaunt"
tt.sound_events.tower_room_select = "TowerHermitToadTauntSelect"
tt = E:register_t("tower_hermit_toad_lvl2", "tower_hermit_toad_lvl1")
tt.tower.level = 2
tt.tower.price = b.price[2]
tt.info.i18n_key = "TOWER_HERMIT_TOAD_2"
tt.tower.menu_offset = v(0, 10)
tt.render.sprites[tt.render.sid_toad].prefix = "hermit_toad_tower_frog2"
tt.attacks.range = b.engineer_basic_attack.range[2]
tt.attacks.list[1].bullet = "bullet_tower_hermit_toad_engineer_basic_lvl2"
tt.attacks.list[1].bullet_start_offset = v(25, 56)
tt.attacks.list[2].bullet = "bullet_tower_hermit_toad_mage_basic_lvl2"
tt.ps_bubbles_mage_offset = v(33, 31)
tt.ps_bubbles_engineer_offset = v(33, 31)
tt = E:register_t("tower_hermit_toad_lvl3", "tower_hermit_toad_lvl1")
tt.tower.level = 3
tt.tower.price = b.price[3]
tt.info.i18n_key = "TOWER_HERMIT_TOAD_3"
tt.tower.menu_offset = v(0, 22)
tt.render.sprites[tt.render.sid_toad].prefix = "hermit_toad_tower_frog3"
tt.attacks.range = b.engineer_basic_attack.range[3]
tt.attacks.list[1].bullet = "bullet_tower_hermit_toad_engineer_basic_lvl3"
tt.attacks.list[1].bullet_start_offset = v(33, 60)
tt.attacks.list[2].bullet = "bullet_tower_hermit_toad_mage_basic_lvl3"
tt.ps_bubbles_mage_offset = v(39, 38)
tt.ps_bubbles_mage_emit_speed = {
	5,
	14
}
tt.ps_bubbles_mage_scale_var = {
	0.8,
	1.3
}
tt.ps_bubbles_engineer_offset = v(40, 37)
tt.ps_bubbles_engineer_emit_speed = {
	5,
	14
}
tt.ps_bubbles_engineer_scale_var = {
	0.8,
	1.3
}
tt = E:register_t("tower_hermit_toad_lvl4", "tower_hermit_toad_lvl1")
b = balance.towers.hermit_toad

E:add_comps(tt, "powers")

tt.tower.level = 4
tt.tower.price = b.price[4]
tt.info.i18n_key = "TOWER_HERMIT_TOAD_4"
tt.render.sid_leaf = 5
tt.render.sid_toad_jump = 6
tt.render.sprites[tt.render.sid_toad].prefix = "hermit_toad_tower_frog4"
tt.render.sprites[tt.render.sid_leaf] = E:clone_c("sprite")
tt.render.sprites[tt.render.sid_leaf].prefix = "hermit_toad_tower_leaves"
tt.render.sprites[tt.render.sid_leaf].name = "idle"
tt.render.sprites[tt.render.sid_leaf].z = tt.render.sprites[3].z
tt.render.sprites[tt.render.sid_leaf].offset = tt.render.sprites[3].offset
tt.render.sprites[tt.render.sid_leaf].sort_y_offset = 2
tt.render.sprites[tt.render.sid_toad_jump] = table.deepclone(tt.render.sprites[3])
tt.render.sprites[tt.render.sid_toad_jump].hidden = true
tt.ps_bubbles_mage_offset = v(37, 52)
tt.ps_bubbles_mage_emit_speed = {
	8,
	16
}
tt.ps_bubbles_mage_scale_var = {
	1,
	1.7
}
tt.ps_bubbles_mage_emission_rate = 3
tt.ps_bubbles_engineer_offset = v(37, 51)
tt.ps_bubbles_engineer_emit_speed = {
	8,
	16
}
tt.ps_bubbles_engineer_scale_var = {
	1,
	1.7
}
tt.ps_bubbles_engineer_emission_rate = 3
tt.attacks.range = b.engineer_basic_attack.range[4]
tt.attacks.list[1].bullet = "bullet_tower_hermit_toad_engineer_basic_lvl4"
tt.attacks.list[1].bullet_start_offset = v(33, 65)
tt.attacks.list[2].bullet = "bullet_tower_hermit_toad_mage_basic_lvl4"
tt.attacks.list[2].bullet_start_offset = v(13, 60)
tt.attacks.list[3] = E:clone_c("bullet_attack")
tt.attacks.list[3].animation = {
	"eat2",
	"eat"
}
tt.attacks.list[3].bullet = "bullet_tower_hermit_toad_instakill_tongue"
tt.attacks.list[3].cooldown = nil
tt.attacks.list[3].range = b.power_instakill.range
tt.attacks.list[3].shoot_time = fts(8)
tt.attacks.list[3].node_prediction = fts(8)
tt.attacks.list[3].bullet_start_offset = {
	v(0, 27),
	v(0, 27)
}
tt.attacks.list[3].sound = "TowerHermitToadTongue"
tt.attacks.list[3].mark_mod = "mod_tower_hermit_toad_instakill_mark"
tt.attacks.list[3].vis_flags = bor(tt.attacks.list[3].vis_flags, F_EAT)
tt.attacks.list[3].vis_bans = bor(F_FRIEND, F_NIGHTMARE, F_MINIBOSS, F_BOSS)
tt.attacks.list[4] = E:clone_c("area_attack")
tt.attacks.list[4].cooldown = nil
tt.attacks.list[4].damage_min = nil
tt.attacks.list[4].damage_max = nil
tt.attacks.list[4].damage_type = b.power_jump.damage_type
tt.attacks.list[4].bullet_start_offset = {
	v(0, 37),
	v(0, 37)
}
tt.attacks.list[4].vis_bans = bor(F_FRIEND)
tt.attacks.list[4].damage_bans = bor(F_FRIEND)
tt.attacks.list[4].radius = b.power_jump.radius
tt.attacks.list[4].range = b.power_jump.range
tt.attacks.list[4].mod = "mod_tower_hermit_toad_jump"
tt.attacks.list[4].min_targets = b.power_jump.min_targets
tt.attacks.list[4].animation_start = {
	"pathjumpbgin2",
	"pathjumpbgin"
}
tt.attacks.list[4].animation_disappear = {
	"pathjumpbgidle2",
	"pathjumpbgidle"
}
tt.attacks.list[4].animation_end = {
	"pathjumpbgout2",
	"pathjumpbgout"
}
tt.attacks.list[4].animation_path_landing = {
	"pathjump2",
	"pathjump"
}
tt.attacks.list[4].animation_back_up = {
	"pathjumpup2",
	"pathjumpup"
}
tt.attacks.list[4].animation_back_down = {
	"pathjumpdown2",
	"pathjumpdown"
}
tt.attacks.list[4].jump_decal = "fx_tower_hermit_toad_decal"
tt.attacks.list[4].jump_in_delay = 0.3
tt.attacks.list[4].path_landing_action_time = fts(3)
tt.attacks.list[4].jump_back_delay = 0.3
tt.attacks.list[4].jump_back_duration = fts(12)
tt.attacks.list[4].jump_back_height = -120
tt.attacks.list[4].node_prediction = fts(1)
tt.attacks.list[4].sound_back_to_pond = "TowerHermitToadBackToPond"
tt.attacks.list[4].sound_jump = "TowerHermitToadJump"
tt.attacks.list[4].sound_fall = "TowerHermitToadFall"
tt.attacks.list[4].jump_back_shadow = "hermit_toad_tower_shadow"
tt.powers.instakill = E:clone_c("power")
tt.powers.instakill.enc_icon = 33
tt.powers.instakill.max_level = 1
tt.powers.instakill.price = b.power_instakill.price
tt.powers.instakill.cooldown = b.power_instakill.cooldown
tt.powers.instakill.attack_idx = 3
tt.powers.jump = E:clone_c("power")
tt.powers.jump.enc_icon = 34
tt.powers.jump.max_level = 3
tt.powers.jump.price = b.power_jump.price
tt.powers.jump.cooldown = b.power_jump.cooldown
tt.powers.jump.damage_min = b.power_jump.damage_min
tt.powers.jump.damage_max = b.power_jump.damage_max
tt.powers.jump.attack_idx = 4

tt = E:register_t("tower_dwarf_lvl1", "tower_KR5")
b = balance.towers.dwarf

E:add_comps(tt, "barrack", "vis")

tt.tower.type = "dwarf"
tt.tower.kind = TOWER_KIND_BARRACK
tt.tower.team = TEAM_LINIREA
tt.tower.level = 1
tt.tower.price = b.price[1]
tt.tower.menu_offset = v(0, 28)
tt.info.i18n_key = "TOWER_DWARF_1"
tt.info.portrait = "portraits_towers_0024"
tt.info.enc_icon = 2
tt.info.tower_portrait = "towerselect_portraits_big_" .. "0001"
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 15)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "tower_dwarf_lvl1"
tt.render.sprites[2].offset = v(0, 9)
tt.render.sprites[2].sort_y_offset = 5
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].prefix = "tower_dwarf_lvl123_door"
tt.render.sprites[3].name = "close"
tt.render.sprites[3].loop = false
tt.render.sprites[3].offset = v(0, 7)
tt.render.sprites[3].sort_y_offset = 5
tt.barrack.soldier_type = "soldier_tower_dwarf_lvl1"
tt.barrack.rally_range = b.rally_range
tt.barrack.respawn_offset = v(10, 12)
tt.barrack.max_soldiers = b.max_soldiers
tt.info.fn = scripts.tower_paladin_covenant.get_info
tt.main_script.insert = scripts.tower_barrack.insert
tt.main_script.update = scripts.tower_dwarf.update
tt.main_script.remove = scripts.tower_barrack.remove
tt.sound_events.insert = "TowerDwarfTaunt"
tt.sound_events.change_rally_point = "TowerDwarfTaunt"
tt.sound_events.tower_room_select = "TowerDwarfTauntSelect"
tt.ui.click_rect = r(-35, 0, 70, 65)
tt = E:register_t("tower_dwarf_lvl2", "tower_dwarf_lvl1")
tt.info.enc_icon = 6
tt.info.i18n_key = "TOWER_DWARF_2"
tt.tower.level = 2
tt.tower.price = b.price[2]
tt.tower.menu_offset = v(0, 30)
tt.render.sprites[2].name = "tower_dwarf_lvl2"
tt.barrack.soldier_type = "soldier_tower_dwarf_lvl2"
tt.ui.click_rect = r(-35, 0, 70, 70)
tt = E:register_t("tower_dwarf_lvl3", "tower_dwarf_lvl1")
tt.info.enc_icon = 10
tt.info.i18n_key = "TOWER_DWARF_3"
tt.tower.level = 3
tt.tower.price = b.price[3]
tt.tower.menu_offset = v(0, 32)
tt.render.sprites[2].name = "tower_dwarf_lvl3"
tt.barrack.soldier_type = "soldier_tower_dwarf_lvl3"
tt.ui.click_rect = r(-40, 0, 80, 75)
tt = E:register_t("tower_dwarf_lvl4", "tower_dwarf_lvl1")

E:add_comps(tt, "powers")

b = balance.towers.dwarf
tt.info.portrait = "portraits_towers_0024"
tt.info.room_portrait = "quickmenu_main_icons_main_icons_0023_0001"
tt.info.enc_icon = 20
tt.info.i18n_key = "TOWER_DWARF_4"
tt.info.stat_damage = b.stats.damage
tt.info.stat_hp = b.stats.hp
tt.info.stat_armor = b.stats.armor
tt.tower.price = b.price[4]
tt.tower.level = 4
tt.tower.menu_offset = v(0, 35)
tt.powers.formation = E:clone_c("power")
tt.powers.formation.price = b.formation.price
tt.powers.formation.enc_icon = 35
tt.powers.incendiary_ammo = E:clone_c("power")
tt.powers.incendiary_ammo.price = b.incendiary_ammo.price
tt.powers.incendiary_ammo.damage_min = b.damage_min
tt.powers.incendiary_ammo.damage_max = b.damage_max
tt.powers.incendiary_ammo.burn_damage_min = b.incendiary_ammo.burn.damage_min
tt.powers.incendiary_ammo.burn_damage_max = b.incendiary_ammo.burn.damage_max
tt.powers.incendiary_ammo.enc_icon = 36
tt.barrack.soldier_type = "soldier_tower_dwarf_lvl4"
tt.barrack.rally_range = b.rally_range
tt.barrack.respawn_offset = v(0, 12)
tt.render.sprites[2].name = "tower_dwarf_lvl4"
tt.render.sprites[3].prefix = "tower_dwarf_lvl4_door"
tt.render.sprites[3].offset = v(0, 10)
tt.sound_events.insert = "TowerDwarfTaunt"
tt.sound_events.change_rally_point = "TowerDwarfTaunt"
tt.ui.click_rect = r(-42, 0, 84, 90)

tt = E:register_t("tower_sparking_geode_lvl1", "tower_KR5")
b = balance.towers.sparking_geode

E:add_comps(tt, "attacks", "vis")

tt.wakeup_duration = fts(45)
tt.tower.type = "sparking_geode"
tt.tower.kind = TOWER_KIND_ENGINEER
tt.tower.team = TEAM_LINIREA
tt.tower.level = 1
tt.tower.price = b.price[1]
tt.tower.menu_offset = v(3, 19)
tt.info.enc_icon = 3
tt.info.i18n_key = "TOWER_SPARKING_GEODE_1"
tt.info.portrait = "portraits_towers_0030"
tt.info.room_portrait = "quickmenu_main_icons_main_icons_0024_0001"
tt.info.fn = scripts.tower_sparking_geode.get_info
tt.main_script.update = scripts.tower_sparking_geode.update
tt.attacks.min_cooldown = b.shared_min_cooldown
tt.attacks.range = b.basic_attack.range[1]
tt.attacks.attack_delay_on_spawn = fts(5)
tt.attacks.list[1] = E:clone_c("bullet_attack")
tt.attacks.list[1].animation_start = "attack_in"
tt.attacks.list[1].animation_loop = "attack_loop"
tt.attacks.list[1].animation_end = "attack_out"
tt.attacks.list[1].bullet = "tower_sparking_geode_ray_lvl1"
tt.attacks.list[1].cooldown = b.basic_attack.cooldown
tt.attacks.list[1].prediction_time = fts(23)
tt.attacks.list[1].ray_timing_max = b.basic_attack.ray_timing_max[tt.tower.level]
tt.attacks.list[1].ray_timing_min = b.basic_attack.ray_timing_min[tt.tower.level]
tt.attacks.list[1].targeting_style = b.basic_attack.targeting_style
tt.attacks.list[1].ignore_out_of_range_check = 1
tt.attacks.list[1].vis_bans = bor(F_NIGHTMARE)
tt.attacks.list[1].sound = "TowerElvenStargazersBasicAttack"
tt.attacks.list[1].bullet_start_offset = {
	v(-20, 52),
	v(-10, 60),
	v(10, 60),
	v(20, 52)
}
tt.attacks.list[1].bullet_start_offset_safe = {
	v(-20, 52),
	v(-10, 60),
	v(0, 35),
	v(10, 60),
	v(20, 52)
}
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 15)
tt.render.sprites[1].hidden = true
tt.render.sid_base_back = 2
tt.render.sprites[tt.render.sid_base_back] = E:clone_c("sprite")
tt.render.sprites[tt.render.sid_base_back].prefix = "sparking_geode_base"
tt.render.sprites[tt.render.sid_base_back].name = "off_idle"
tt.render.sprites[tt.render.sid_base_back].scale = vv(0.8)
tt.render.sid_base_electricity = 3
tt.render.sprites[tt.render.sid_base_electricity] = E:clone_c("sprite")
tt.render.sprites[tt.render.sid_base_electricity].prefix = "sparking_geode_base"
tt.render.sprites[tt.render.sid_base_electricity].name = "idleup"
tt.render.sprites[tt.render.sid_base_electricity].scale = vv(0.8)
tt.render.sid_base_front_rocks = 4
tt.render.sprites[tt.render.sid_base_front_rocks] = E:clone_c("sprite")
tt.render.sprites[tt.render.sid_base_front_rocks].animated = false
tt.render.sprites[tt.render.sid_base_front_rocks].name = "sparking_geode_base_lvl1"
tt.render.sid_geode = 5
tt.render.sprites[tt.render.sid_geode] = E:clone_c("sprite")
tt.render.sprites[tt.render.sid_geode].prefix = "sparking_geode_tower_lvl1"
tt.render.sprites[tt.render.sid_geode].name = "idle"
tt.render.sprites[tt.render.sid_geode].offset = v(0, 0)
tt.render.sid_attack_fx = 6
tt.render.sprites[tt.render.sid_attack_fx] = E:clone_c("sprite")
tt.render.sprites[tt.render.sid_attack_fx].prefix = "sparking_geode_tower_attack_fx_attack"
tt.render.sprites[tt.render.sid_attack_fx].name = "in"
tt.render.sprites[tt.render.sid_attack_fx].hidden = true
tt.render.sprites[tt.render.sid_attack_fx].offset = v(0, 24)
tt.render.sprites[tt.render.sid_attack_fx].scale = vv(0.92)
tt.sound_events.insert = "TowerSparkingGeodeTaunt"
tt.sound_events.tower_room_select = "TowerSparkingGeodeTauntSelect"
tt.ui.click_rect = r(-35, 0, 72, 55)
tt.fx_evolve = "fx_tower_sparking_geode_evolve"
tt.fx_evolve_offset = v(0, 0)
tt = E:register_t("tower_sparking_geode_lvl2", "tower_sparking_geode_lvl1")
b = balance.towers.sparking_geode
tt.info.i18n_key = "TOWER_SPARKING_GEODE_2"
tt.tower.level = 2
tt.tower.price = b.price[2]
tt.tower.menu_offset = v(3, 22)
tt.attacks.range = b.basic_attack.range[2]
tt.attacks.list[1].bullet = "tower_sparking_geode_ray_lvl2"
tt.attacks.list[1].ray_timing_max = b.basic_attack.ray_timing_max[tt.tower.level]
tt.attacks.list[1].ray_timing_min = b.basic_attack.ray_timing_min[tt.tower.level]
tt.attacks.list[1].bullet_start_offset = {
	v(-20, 52),
	v(-10, 69),
	v(10, 69),
	v(20, 52)
}
tt.attacks.list[1].bullet_start_offset_safe = {
	v(-20, 52),
	v(-10, 69),
	v(0, 43),
	v(10, 69),
	v(20, 52)
}
tt.render.sprites[tt.render.sid_geode].prefix = "sparking_geode_tower_lvl2"
tt.render.sprites[tt.render.sid_base_back].scale = vv(0.9)
tt.render.sprites[tt.render.sid_base_electricity].scale = vv(0.9)
tt.render.sprites[tt.render.sid_base_front_rocks].hidden = true
tt.render.sprites[tt.render.sid_attack_fx].offset = v(0, 15)
tt.render.sprites[tt.render.sid_attack_fx].scale = vv(1.05)
tt.ui.click_rect = r(-36, 0, 75, 73)
tt = E:register_t("tower_sparking_geode_lvl3", "tower_sparking_geode_lvl1")
b = balance.towers.sparking_geode
tt.info.i18n_key = "TOWER_SPARKING_GEODE_3"
tt.tower.level = 3
tt.tower.price = b.price[3]
tt.tower.menu_offset = v(3, 30)
tt.attacks.range = b.basic_attack.range[3]
tt.attacks.list[1].bullet = "tower_sparking_geode_ray_lvl3"
tt.attacks.list[1].ray_timing_max = b.basic_attack.ray_timing_max[tt.tower.level]
tt.attacks.list[1].ray_timing_min = b.basic_attack.ray_timing_min[tt.tower.level]
tt.attacks.list[1].bullet_start_offset = {
	v(-26, 76),
	v(-10, 69),
	v(10, 69),
	v(26, 65)
}
tt.attacks.list[1].bullet_start_offset_safe = {
	v(-26, 76),
	v(-10, 69),
	v(0, 43),
	v(10, 69),
	v(26, 65)
}
tt.render.sprites[tt.render.sid_geode].prefix = "sparking_geode_tower_lvl3"
tt.render.sprites[tt.render.sid_base_back].scale = vv(1)
tt.render.sprites[tt.render.sid_base_electricity].scale = vv(1)
tt.render.sprites[tt.render.sid_base_front_rocks].hidden = true
tt.render.sprites[tt.render.sid_attack_fx].offset = v(0, 10)
tt.render.sprites[tt.render.sid_attack_fx].scale = vv(1)
tt.ui.click_rect = r(-37, 0, 80, 76)
tt = E:register_t("tower_sparking_geode_lvl4", "tower_sparking_geode_lvl1")
b = balance.towers.sparking_geode

E:add_comps(tt, "powers")

tt.info.i18n_key = "TOWER_SPARKING_GEODE_4"
tt.info.stat_damage = b.stats.damage
tt.info.stat_range = b.stats.range
tt.info.stat_cooldown = b.stats.cooldown
-- tt.info.damage_icon = "magic"
tt.tower.level = 4
tt.tower.price = b.price[4]
tt.tower.menu_offset = v(3, 28)
tt.attacks.range = b.basic_attack.range[4]
tt.powers.crystalize = CC("power")
tt.powers.crystalize.price = b.crystalize.price
tt.powers.crystalize.cooldown = b.crystalize.cooldown
tt.powers.crystalize.enc_icon = 37
tt.powers.crystalize.name = "crystalize"
tt.powers.crystalize.key = "CRYSTALIZE"
tt.powers.spike_burst = CC("power")
tt.powers.spike_burst.price = b.spike_burst.price
tt.powers.spike_burst.cooldown = b.spike_burst.cooldown
tt.powers.spike_burst.enc_icon = 38
tt.powers.spike_burst.name = "spike_burst"
tt.powers.spike_burst.key = "SPIKE_BURST"
tt.render.sprites[tt.render.sid_geode].prefix = "sparking_geode_tower_lvl4"
tt.render.sprites[tt.render.sid_base_back].scale = vv(1)
tt.render.sprites[tt.render.sid_base_electricity].scale = vv(1)
tt.render.sprites[tt.render.sid_base_front_rocks].hidden = true
tt.render.sprites[tt.render.sid_attack_fx].offset = v(0, 10)
tt.render.sprites[tt.render.sid_attack_fx].scale = vv(1)
tt.attacks.list[1].bullet = "tower_sparking_geode_ray_lvl4"
tt.attacks.list[1].ray_timing_max = b.basic_attack.ray_timing_max[tt.tower.level]
tt.attacks.list[1].ray_timing_min = b.basic_attack.ray_timing_min[tt.tower.level]
tt.attacks.list[1].bullet_start_offset = {
	v(-30, 90),
	v(-15, 105),
	v(15, 105),
	v(30, 90)
}
tt.attacks.list[1].bullet_start_offset_safe = {
	v(-30, 60),
	v(-30, 90),
	v(-15, 105),
	v(15, 105),
	v(30, 90),
	v(30, 60)
}
tt.attacks.list[2] = CC("custom_attack")
tt.attacks.list[2].animation = "hability_2"
tt.attacks.list[2].mod = "mod_tower_sparking_geode_stun"
tt.attacks.list[2].duration = b.crystalize.duration
tt.attacks.list[2].received_damage_factor = b.crystalize.received_damage_factor
tt.attacks.list[2].cooldown = nil
tt.attacks.list[2].vis_flags = bor(F_STUN, F_MOD, F_CUSTOM)
tt.attacks.list[2].vis_bans = bor(F_BOSS, F_MINIBOSS, F_NIGHTMARE, F_FLYING, F_STUN, F_CUSTOM)
tt.attacks.list[2].cast_time = fts(16)
tt.attacks.list[2].max_targets = b.crystalize.max_targets
tt.attacks.list[2].up_ray_fx = "fx_tower_sparking_geode_up_ray"
tt.attacks.list[2].sound_cast = "TowerSparkingGeodeCristalizeCast"
tt.attacks.list[3] = CC("custom_attack")
tt.attacks.list[3].animation = "hability_1"
tt.attacks.list[3].cast_time = fts(26)
tt.attacks.list[3].aura = "aura_tower_sparking_geode_spike_burst"
tt.attacks.list[3].cooldown = nil
tt.attacks.list[3].vis_flags = bor(F_MOD)
tt.attacks.list[3].vis_bans = bor(F_NIGHTMARE)
tt.attacks.list[3].duration = b.spike_burst.duration
tt.attacks.list[3].range = b.spike_burst.radius
tt.attacks.list[3].sound_cast = "TowerSparkingGeodeSpikeCast"
tt.attacks.list[3].sound_loop = "TowerSparkingGeodeSpikeLoop"
tt.ui.click_rect = r(-40, 0, 85, 83)

tt = E:register_t("tower_stage_13_sunray", "tower_KR5")
b = balance.specials.towers.stage_13_sunray
E:add_comps(tt, "user_selection", "attacks", "editor", "vis")
tt.tower.type = "tower_stage_13_sunray"
tt.tower.team = TEAM_DARK_ARMY
tt.tower.kind = TOWER_KIND_MAGE
tt.tower.price = b.price
tt.tower.menu_offset = v(0, 45)
tt.tower.can_be_sold = true
tt.tower.can_be_mod = true
tt.tower.terrain_style = nil
tt.render.sprites[1].prefix = "ray_sunraytowerDef"
tt.render.sprites[1].exo = true
tt.render.sprites[1].offset = v(0, 20)
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[2] = E:clone_c("sprite")
tt.info.portrait = "portraits_towers" .. "_0018"
tt.user_selection.can_select_point_fn = scripts.tower_stage_13_sunray.can_select_point
tt.main_script.update = scripts.tower_stage_13_sunray.update
tt.attacks.range = b.basic_attack.range
tt.attacks.attack_delay_on_spawn = fts(5)
tt.attacks.list[1] = E:clone_c("bullet_attack")
tt.attacks.list[1].animation_in = "attackin"
tt.attacks.list[1].animation_loop = "attackloop"
tt.attacks.list[1].animation_out = "attackout"
tt.attacks.list[1].bullet = "bullet_tower_stage_13_sunray"
tt.attacks.list[1].cooldown = b.basic_attack.cooldown
tt.attacks.list[1].bullet_start_offset = v(4, 108)
tt.attacks.list[1].ignore_out_of_range_check = 1
tt.attacks.list[1].vis_bans = bor(F_NIGHTMARE)
tt.attacks.list[1].duration = b.basic_attack.duration
tt.attacks.list[1].sound = "Stage13DarkRayAttack"
tt.attacks.list[2] = E:clone_c("bullet_attack")
tt.attacks.list[2].animation_in = "superattackin"
tt.attacks.list[2].animation_loop = "superattackloop"
tt.attacks.list[2].animation_out = "superattackinout"
tt.attacks.list[2].bullet = "bullet_tower_stage_13_sunray_special"
tt.attacks.list[2].cooldown = b.basic_attack.cooldown
tt.attacks.list[2].bullet_start_offset = v(4, 108)
tt.attacks.list[2].ignore_out_of_range_check = 1
tt.attacks.list[2].vis_bans = bor(F_NIGHTMARE)
tt.attacks.list[2].duration = b.special_attack.duration
tt.attacks.list[2].aura = "aura_tower_stage_13_sunray_special"
tt.attacks.list[2].decal = "decal_tower_stage_13_sunray"
tt.attacks.list[2].sound = "Stage13DarkRaySpecialAttack"
tt.attacks.list[2].sound_destroy = "Stage13DarkRayDestroy"
tt.min_attacks_before_special = b.attacks_before_special_min
tt.max_attacks_before_special = b.attacks_before_special_max
tt.min_attacks_before_special_iron = b.attacks_before_special_min_iron
tt.max_attacks_before_special_iron = b.attacks_before_special_max_iron
tt.repair = {}
tt.repair.cost = b.repair_cost[1]
tt.repair.active = nil
tt.repair.sound = "Stage13DarkRayTowerRepair"
tt.repair_cost_config = b.repair_cost
tt.repair_cost_config_iron = b.repair_cost_iron
tt.ui.click_rect = r(-50, -10, 100, 130)
tt.ui.hover_sprite_scale = vv(1.4)
tt.ui.hover_sprite_offset = v(0, 12)
tt.editor.props = {
	{
		"editor.game_mode",
		PT_NUMBER
	}
}

tt = E:register_t("tower_stage_17_weirdwood", "tower_KR5")
b = balance.specials.towers.stage_17_weirdwood

E:add_comps(tt, "attacks", "vis", "corruption_kr5")

tt.tower.type = "weirdwood"
tt.tower.level = 1
tt.tower.kind = TOWER_KIND_ENGINEER
tt.tower.can_be_sold = false
tt.tower.terrain_style = TERRAIN_STYLE_SEA_OF_TREES_6
tt.tower.range_offset = v(0, 10)
tt.tower.price = 0
tt.info.portrait = "portraits_towers_0021"
tt.main_script.update = scripts.tower_stage_17_weirdwood.update
tt.attacks.range = b.basic_attack.max_range
tt.attacks.load_time = fts(54)
tt.attacks.list[1] = E:clone_c("bullet_attack")
tt.attacks.list[1].animation = "attack_shoot"
tt.attacks.list[1].bullet = "bullet_tower_stage_17_weirdwood"
tt.attacks.list[1].cooldown = b.basic_attack.cooldown
tt.attacks.list[1].shoot_time = fts(1.5)
tt.attacks.list[1].bullet_start_offset = v(-38, 94)
tt.attacks.list[1].vis_bans = bor(F_FLYING)
tt.attacks.list[1].node_prediction = true
tt.attacks.list[1].min_range = b.basic_attack.min_range
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 10)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "tower_treeDef"
tt.render.sprites[2].name = "a_idle"
tt.render.sprites[2].animated = true
tt.render.sprites[2].exo = true
tt.render.sprites[2].offset = v(0, 10)
tt.tower_sid = 2
tt.sound_events.insert = nil
tt.corruption_kr5.corruption_phases = b.corruption_phases
tt.corruption_kr5.limit = b.corruption_limit
tt.corruption_kr5.on_corrupt = scripts.tower_stage_17_weirdwood.on_corrupt
tt.corruption_kr5.spawn = "enemy_deathwood"
tt.corruption_kr5.spawn_path = 2
tt.leafless_fx = "fx_tower_stage_17_weirdwood_leafless"
tt.transformation_fx = "fx_tower_stage_17_weirdwood_transformation"
tt.holder_cost = b.holder_cost
tt.editor.props = {
	{
		"corruption_kr5.spawn_path",
		PT_NUMBER
	}
}
tt.sound_corruption = "TowerWeirdwoodCorruption"
tt.sound_transform = "TowerWeirdwoodTransform"
tt = E:register_t("tower_stage_18_elven_barrack", "tower_KR5")
b = balance.specials.towers.stage_18_elven_barrack

E:add_comps(tt, "vis", "barrack", "corruption_kr5")

tt.tower.type = "tower_stage_18_elven_barrack"
tt.tower.level = 1
tt.tower.kind = TOWER_KIND_BARRACK
tt.tower.can_be_sold = false
tt.tower.can_be_mod = false
tt.tower.terrain_style = TERRAIN_STYLE_SEA_OF_TREES_6
tt.tower.menu_offset = v(0, 22)
tt.tower.price = 0
tt.info.portrait = "portraits_towers_0022"
tt.info.fn = scripts.tower_barrack_mercenaries.get_info
tt.main_script.update = scripts.tower_stage_18_elven_barrack.update
tt.main_script.remove = scripts.tower_stage_18_elven_barrack.remove

function tt.main_script.insert(this, store, script)
	if this.render.sprites[1].flip_x then
		this.barrack.respawn_offset.x = this.barrack.respawn_offset.x * -1
	end

	return scripts.tower_barrack.insert(this, store, script)
end

tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "terrains_%04i"
tt.render.sprites[1].offset = v(0, 8)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "elven_barracks_tower1"
tt.render.sprites[2].sort_y_offset = 10
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].prefix = "elven_barracks_tower_door"
tt.render.sprites[3].name = "close"
tt.render.sprites[3].loop = false
tt.render.sprites[3].sort_y_offset = 10
tt.render.door_sid = 3
tt.barrack.soldier_type = "soldier_tower_stage_18_elven_barrack"
tt.barrack.rally_range = b.rally_range
tt.barrack.respawn_offset = v(0, -8)
tt.barrack.max_soldiers = 0
tt.sound_events.change_rally_point = "TowerElvenBarrackUnitTaunt"
tt.corruption_kr5.corruption_phases = b.corruption_phases
tt.corruption_kr5.limit = b.corruption_limit
tt.corruption_kr5.on_corrupt = scripts.tower_stage_18_elven_barrack.on_corrupt
tt.corruption_kr5.spawn = "spawner_stage_18_elven_barrack"
tt.current_phase = 1
tt.phases = {
	"1",
	"2",
	"3"
}
tt.state_change_fx = "fx_tower_stage_18_elven_barrrack_state_change"
tt.transformation_fx = "fx_tower_stage_18_elven_barrrack_transformation"
tt.soldiers_bought = 0
tt = E:register_t("spawner_stage_18_elven_barrack", "decal_scripted")

E:add_comps(tt, "tween", "corruption_kr5")

b = balance.specials.towers.stage_18_elven_barrack
tt.main_script.update = scripts.spawner_stage_18_elven_barrack.update
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "terrains_0006"
tt.render.sprites[1].offset = v(0, 8)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "elven_barracks_tower4_base_0002"
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].animated = false
tt.render.sprites[3].name = "elven_barracks_tower4_top_0002"
tt.render.sprites[4] = E:clone_c("sprite")
tt.render.sprites[4].animated = false
tt.render.sprites[4].name = "elven_barracks_tower4_detail_0002"
tt.render.sprites[5] = table.deepclone(tt.render.sprites[2])
tt.render.sprites[5].name = "elven_barracks_tower4_base_0001"
tt.render.sprites[5].alpha = 0
tt.render.sprites[6] = table.deepclone(tt.render.sprites[3])
tt.render.sprites[6].name = "elven_barracks_tower4_top_0001"
tt.render.sprites[6].alpha = 0
tt.render.sprites[7] = table.deepclone(tt.render.sprites[4])
tt.render.sprites[7].name = "elven_barracks_tower4_detail_0001"
tt.render.sprites[7].alpha = 0

local floating_sprites = {
	3,
	4,
	6,
	7
}
local i = 1

for k, sid in pairs(floating_sprites) do
	tt.tween.props[i] = E:clone_c("tween_prop")
	tt.tween.props[i].name = "offset"

	local start_offset = tt.render.sprites[sid].offset
	local end_offset = v(start_offset.x, start_offset.y + 2.5)

	tt.tween.props[i].keys = {
		{
			0,
			start_offset
		},
		{
			1.5,
			end_offset
		},
		{
			3,
			start_offset
		}
	}
	tt.tween.props[i].sprite_id = sid
	tt.tween.props[i].loop = true
	tt.tween.props[i].interp = "sine"
	i = i + 1
end

tt.tween.remove = false
tt.corruption_kr5.on_corrupt = scripts.spawner_stage_18_elven_barrack.on_corrupt
tt.corruption_kr5.spawn = "enemy_animated_armor"
tt.corruption_kr5.enabled = false
tt.spawn_cd = b.spawn_cooldown

tt = E:register_t("tower_stage_20_arborean_oldtree", "tower_KR5")
b = balance.specials.towers.stage_20_arborean_oldtree

E:add_comps(tt, "attacks", "user_selection")

tt.tower.type = "arborean_oldtree"
tt.tower.level = 1
tt.tower.can_be_sold = false
tt.tower.can_be_mod = false
tt.tower.range_offset = v(0, 10)
tt.tower.price = 0
tt.tower.menu_offset = v(0, 30)
tt.info.fn = scripts.tower_stage_20_arborean_oldtree.get_info
tt.info.portrait = "portraits_towers_0028"
tt.info.desc = "TOWER_STAGE_20_ARBOREAN_OLDTREE_DESCRIPTION"
tt.main_script.update = scripts.tower_stage_20_arborean_oldtree.update
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "arborean_oldtree_decal_decal"
tt.render.sprites[1].z = Z_TOWER_BASES - 2
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "arborean_treeDef"
tt.render.sprites[2].name = "idle1"
tt.render.sprites[2].exo = true
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].prefix = "arborean_oldDef"
tt.render.sprites[3].name = "idle1"
tt.render.sprites[3].exo = true
tt.attacks.list[1] = E:clone_c("custom_attack")
tt.attacks.list[1].price = b.price
tt.attacks.list[1].price_iron = b.price_iron
tt.attacks.list[1].cast_time = fts(60)
tt.attacks.list[1].bullet = "bullet_stage_20_arborean_oldtree"
tt.attacks.list[1].path_index = b.path_index
tt.attacks.list[1].node_index = b.node_index
tt.attacks.list[1].path_index_iron = b.path_index_iron
tt.attacks.list[1].node_index_iron = b.node_index_iron
tt.attacks.list[1].cooldown = b.cooldown
tt.attacks.list[1].entity = "stage_20_arborean_oldtree_tree"
tt.user_selection.ignore_point = true
tt.ui.has_nav_mesh = true
tt.sound_wakeup = "Stage20TreeWakeup"
tt.sound_head_scratch = "Stage20TreeHeadScratch"
tt.ui.click_rect = r(-55, -15, 110, 100)
tt = RT("stage_20_arborean_oldtree_tree", "decal_scripted")
b = balance.specials.towers.stage_20_arborean_oldtree

AC(tt, "nav_path", "motion", "custom_attack")

tt.render.sprites[1].prefix = "arborean_woodDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].angles = {}
tt.render.sprites[1].angles.walk = {
	"idle",
	"idle",
	"idle"
}
tt.render.sprites[1].angles_stickiness = {
	walk = 10
}
tt.render.sprites[1].sort_y_offset = -50
tt.render.sprites[1].exo = true
tt.main_script.update = scripts.stage_20_arborean_oldtree_tree.update
tt.nav_path.dir = -1
tt.nav_path.pi = b.path_index
tt.nav_path.ni = b.node_index
tt.nav_path.spi = 1
tt.motion.max_speed = 5 * FPS
tt.custom_attack.max_range = b.max_range
tt.custom_attack.damage_min = b.damage_min
tt.custom_attack.damage_max = b.damage_max
tt.custom_attack.damage_type = b.damage_type
tt.custom_attack.hit_fx = "fx_tower_arborean_oldtree_hit"
tt.custom_attack.cycle_time = 0.3
tt.custom_attack.vis_flags = bor(F_RANGED)
tt.custom_attack.vis_bans = bor(F_FLYING)
tt.sound_hit_floor = "Stage20TreeHitFloor"
tt.sound_hit_floor_repeat = "Stage20TreeHitFloorRepeat"
tt = RT("stage_20_arborean_oldtree_tree_2", "decal_scripted")
b = balance.specials.towers.stage_20_arborean_oldtree

AC(tt, "nav_path", "motion", "custom_attack")

tt.render.sprites[1].prefix = "arborean_woodDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].angles = {}
tt.render.sprites[1].angles.walk = {
	"idle",
	"idle",
	"idle"
}
tt.render.sprites[1].angles_stickiness = {
	walk = 10
}
tt.render.sprites[1].sort_y_offset = -50
tt.render.sprites[1].exo = true
tt.main_script.update = scripts.stage_20_arborean_oldtree_tree.update
tt.nav_path.dir = -1
tt.nav_path.pi = b.path_index_iron
tt.nav_path.ni = b.node_index_iron
tt.nav_path.spi = 1
tt.motion.max_speed = 5 * FPS
tt.custom_attack.max_range = b.max_range
tt.custom_attack.damage_min = b.damage_min
tt.custom_attack.damage_max = b.damage_max
tt.custom_attack.damage_type = b.damage_type
tt.custom_attack.hit_fx = "fx_tower_arborean_oldtree_hit"
tt.custom_attack.cycle_time = 0.3
tt.custom_attack.vis_flags = bor(F_RANGED)
tt.custom_attack.vis_bans = bor(F_FLYING)
tt = E:register_t("tower_stage_20_arborean_honey", "tower_KR5")
b = balance.specials.towers.stage_20_arborean_honey

E:add_comps(tt, "attacks", "user_selection", "vis")

tt.tower.type = "arborean_honey"
tt.tower.team = TEAM_LINIREA
tt.tower.kind = TOWER_KIND_ENGINEER
tt.tower.level = 1
tt.tower.can_be_sold = true
tt.tower.can_be_mod = true
tt.tower.range_offset = v(0, 10)
tt.tower.price = 50
tt.tower.cooldown_idle = 10
tt.tower.menu_offset = v(0, 20)
tt.info.fn = scripts.tower_stage_20_arborean_honey.get_info
tt.info.portrait = "portraits_towers_0027"
tt.info.desc = "TOWER_STAGE_20_ARBOREAN_HONEY_DESCRIPTION"
tt.user_selection.can_select_point_fn = scripts.tower_stage_20_arborean_honey.can_select_point
tt.main_script.update = scripts.tower_stage_20_arborean_honey.update
tt.render.sprites[1].hidden = true
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = ""
tt.render.sprites[2].name = "arborean_honey_tower_tower_0001"
tt.render.sprites[2].animated = false
tt.render.sprites[2].offset.y = 0
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].loop = false
tt.render.sprites[3].prefix = "arborean_honey_tower_unit"
tt.render.sprites[3].name = "idle"
tt.render.sprites[3].hidden = true
tt.render.sprites[4] = E:clone_c("sprite")
tt.render.sprites[4].loop = false
tt.render.sprites[4].prefix = "arborean_honey_tower_deco_unit"
tt.render.sprites[4].name = "idle_1"
tt.render.sprites[4].hidden = true
tt.render.sprites[5] = E:clone_c("sprite")
tt.render.sprites[5].loop = false
tt.render.sprites[5].name = "arborean_honey_tower_smoke"
tt.render.sprites[5].hidden = true
tt.attacks.range = b.max_range
tt.attacks.list[1] = E:clone_c("custom_attack")
tt.attacks.list[1].bullet = "bullet_stage_20_arborean_honey"
tt.attacks.list[1].cooldown = b.cooldown
tt.attacks.list[1].disable = true
tt.attacks.list[1].vis_flags = bor(F_RANGED)
tt.attacks.list[1].vis_bans = bor(F_FLYING, F_NIGHTMARE)
tt.attacks.list[2] = E:clone_c("custom_attack")
tt.attacks.list[2].price = b.soldiers_price
tt.attacks.list[2].cooldown_min = b.spawn_cooldown_min
tt.attacks.list[2].cooldown_max = b.spawn_cooldown_max
tt.attacks.list[2].cooldown_disable = b.cooldown_disable
tt.attacks.list[2].entity = "soldier_arborean_barrack"
tt.attacks.list[2].vis_bans = bor(F_FLYING, F_CLIFF, F_WATER)
tt.attacks.list[2].vis_flags = 0
tt.attacks.list[2].spawns = b.spawns
tt.attacks.list[2].max_range = 160
tt.price_repair_heroic = b.price_heroic
tt.price_repair = b.price
tt.repair = {}
tt.repair.active = nil
tt.user_selection.ignore_point = true
tt.ui.has_nav_mesh = true
tt.sound_bee_fly_chance = 0.2
tt.sound_bee_fly = "Stage20BeesFly"
tt.sound_bee_throw = "Stage20BeesThrow"
tt = E:register_t("tower_stage_20_arborean_barrack", "tower_KR5")
b = balance.specials.towers.tower_stage_20_arborean_barrack

E:add_comps(tt, "vis", "user_selection", "attacks")

tt.tower.type = "arborean_barrack"
tt.tower.level = 1
tt.tower.can_be_sold = false
tt.tower.can_be_mod = false
tt.tower.range_offset = v(0, 10)
tt.tower.price = 0
tt.tower.menu_offset = v(0, 25)
tt.info.fn = scripts.tower_stage_20_arborean_barrack.get_info
tt.info.portrait = "portraits_towers_0026"
tt.info.desc = "TOWER_STAGE_20_ARBOREAN_BARRACK_DESCRIPTION"
tt.main_script.update = scripts.tower_stage_20_arborean_barrack.update
tt.render.sid_base = 1
tt.render.sid_tower = 2
tt.render.sid_door = 3
tt.render.sid_varitas = 4
tt.render.sprites[tt.render.sid_base] = E:clone_c("sprite")
tt.render.sprites[tt.render.sid_base].animated = false
tt.render.sprites[tt.render.sid_base].name = "arborean_warrior_barraca_decal"
tt.render.sprites[tt.render.sid_base].z = Z_TOWER_BASES - 2
tt.render.sprites[tt.render.sid_tower] = E:clone_c("sprite")
tt.render.sprites[tt.render.sid_tower].animated = true
tt.render.sprites[tt.render.sid_tower].prefix = "arborean_warrior_barraca_base"
tt.render.sprites[tt.render.sid_tower].name = "idle1"
tt.render.sprites[tt.render.sid_door] = E:clone_c("sprite")
tt.render.sprites[tt.render.sid_door].animated = true
tt.render.sprites[tt.render.sid_door].prefix = "arborean_warrior_barraca_door"
tt.render.sprites[tt.render.sid_door].name = "closed"
tt.render.sprites[tt.render.sid_varitas] = E:clone_c("sprite")
tt.render.sprites[tt.render.sid_varitas].animated = true
tt.render.sprites[tt.render.sid_varitas].prefix = "arborean_warrior_barraca_varitas"
tt.render.sprites[tt.render.sid_varitas].name = "idle1"
tt.explosion_fx = "fx_stage_20_arborean_barrack_explosion"
tt.explosion_fx2 = "fx_stage_20_arborean_barrack_explosion_2"
tt.life_thresholds = b.life_thresholds
tt.user_selection.ignore_point = true
tt.ui.has_nav_mesh = true
tt.attacks.list[1] = E:clone_c("custom_attack")
tt.attacks.list[1].price = b.price
tt.attacks.list[1].cast_time = fts(10)
tt.attacks.list[1].cooldown_min = b.spawn_cooldown_min
tt.attacks.list[1].cooldown_max = b.spawn_cooldown_max
tt.attacks.list[1].cooldown_disable = b.cooldown_disable
tt.attacks.list[1].entity = "soldier_arborean_barrack"
tt.attacks.list[1].vis_bans = bor(F_FLYING, F_CLIFF, F_WATER)
tt.attacks.list[1].vis_flags = 0
tt.attacks.list[1].spawns = b.spawns
tt.attacks.list[1].range_nodes = 100
tt.sound_get_hit = "Stage20HouseImpact"
tt.sound_destroyed = "Stage20HouseDestroyed"

E:add_comps(tt, "health", "health_bar")

tt.soldier = {}
tt.unit = {}
tt.unit.hit_offset = v(0, 15)
tt.health.hp_max = b.hp_max
tt.health.hp = b.hp_max
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 90)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM_LARGE
tt.health_bar.colors = {}
tt.health_bar.colors.fg = {
	255,
	128,
	255,
	255
}
tt.health_bar.colors.bg = {
	22,
	46,
	59,
	255
}
tt.health.ignore_delete_after = true
tt.vis.flags = bor(F_FRIEND, F_RANGED)
tt.vis.bans = bor(F_AREA, F_MOD)
tt = E:register_t("soldier_arborean_barrack", "unit")
b = balance.specials.towers.tower_stage_20_arborean_barrack

E:add_comps(tt, "soldier", "motion", "nav_path", "main_script", "vis", "info", "lifespan", "sound_events", "melee", "tween")

tt.info.portrait = "gui_bottom_info_image_soldiers_0051"
tt.health.armor = b.soldier_armor
tt.health.hp_max = b.soldier_hp_max
tt.health_bar.offset = v(0, ady(30))
tt.info.fn = scripts.soldier_charge.get_info
tt.info.i18n_key = "SOLDIER_ARBOREAN_BARRACK"
tt.lifespan.duration = nil
tt.main_script.insert = scripts.soldier_charge.insert
tt.main_script.update = scripts.soldier_charge.update
tt.melee.attacks[1].cooldown = 1
tt.melee.attacks[1].damage_max = b.soldier_damage_max
tt.melee.attacks[1].damage_min = b.soldier_damage_min
tt.melee.attacks[1].hit_time = fts(9)
tt.melee.attacks[1].vis_bans = bor(F_FLYING, F_CLIFF)
tt.melee.attacks[1].vis_flags = F_BLOCK
tt.melee.range = 64
tt.motion.max_speed = 60
tt.nav_path.dir = -1
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].prefix = "arborean_warrior_barraca_warrior"
tt.soldier.melee_slot_offset.x = 3
tt.unit.hit_offset = v(0, 12)
tt.unit.mod_offset = v(0, ady(22))
tt.vis.bans = bor(F_POISON, F_CANNIBALIZE, F_LYCAN)
tt.vis.flags = F_FRIEND
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	}
}
tt.tween.props[1].name = "alpha"
tt.tween.props[1].disabled = true
tt.tween.remove = false
tt.tween.reverse = false
tt.tween.disabled = false
tt = E:register_t("tower_stage_20_arborean_watchtower", "tower_KR5")
b = balance.specials.towers.stage_20_arborean_watchtower

E:add_comps(tt, "attacks", "vis", "idle_flip")

tt.tower.type = "weirdwood"
tt.tower.level = 1
tt.tower.can_be_sold = false
tt.tower.can_be_mod = false
tt.tower.range_offset = v(0, 10)
tt.tower.price = 0
tt.info.portrait = "portraits_towers_0021"
tt.main_script.update = scripts.tower_stage_20_arborean_watchtower.update
tt.attacks.range = b.basic_attack.max_range
tt.attacks.list[1] = E:clone_c("bullet_attack")
tt.attacks.list[1].bullet = "bullet_stage_20_arborean_watchtower"
tt.attacks.list[1].cooldown = b.basic_attack.cooldown
tt.attacks.list[1].shoot_time = fts(6)
tt.attacks.list[1].bullet_start_offset = {
	v(0, 25),
	v(0, 25),
	v(0, 25)
}
tt.attacks.list[1].vis_flags = bor(F_RANGED)

for i = 1, 4 do
	tt.render.sprites[i] = E:clone_c("sprite")
	tt.render.sprites[i].animated = true
	tt.render.sprites[i].prefix = "watchtower_arborean_tower_base_layer" .. i
	tt.render.sprites[i].name = "idle1"
	tt.render.sprites[i].group = "layers"
	tt.render.sprites[i].z = Z_OBJECTS
	tt.render.sprites[i].sort_y_offset = -50
end

tt.render.sprites[5] = E:clone_c("sprite")
tt.render.sprites[5].prefix = "stage_4_special_arborean_sentinels_spearer_soldier"
tt.render.sprites[5].name = "idle"
tt.render.sprites[5].angles = {}
tt.render.sprites[5].angles.idle = {
	"idle",
	"idle"
}
tt.render.sprites[5].angles.shoot = {
	"ranged_attack",
	"ranged_attack"
}
tt.render.sprites[5].offset = v(-13, 2)
tt.render.sprites[5].z = Z_OBJECTS_COVERS
tt.render.sprites[6] = table.deepclone(tt.render.sprites[5])
tt.render.sprites[6].offset = v(32, 41)
tt.render.sprites[7] = table.deepclone(tt.render.sprites[5])
tt.render.sprites[7].offset = v(-27, 60)
tt.explosion_fx = "fx_stage_20_watchtower_explosion"
tt.tower_group = "layers"
tt.shooter_sids = {
	5,
	6,
	7
}
tt.ui.click_rect = r(-45, -10, 95, 90)
tt.tunnel_spawns = {}
tt.tunnel_spawns[1] = {
	template = "tunnel_KR5_watchtower",
	place_pi = 10,
	pick_pi = 1
}
tt.tunnel_spawns[2] = {
	template = "tunnel_KR5_watchtower",
	place_pi = 11,
	pick_pi = 2
}
tt.picked_enemies_to_destroy = b.picked_enemies_to_destroy
tt.tunnel_check_cooldown = b.tunnel_check_cooldown
tt.vis.bans = bor(F_MOD)
tt = E:register_t("tower_stage_20_arborean_watchtower_2", "tower_stage_20_arborean_watchtower")
tt.tunnel_spawns = {}
tt.tunnel_spawns[1] = {
	template = "tunnel_KR5_watchtower",
	place_pi = 13,
	pick_pi = 3
}
tt = E:register_t("tower_stage_20_arborean_watchtower_3", "tower_stage_20_arborean_watchtower")
tt.tunnel_spawns = {}
tt.tunnel_spawns[1] = {
	template = "tunnel_KR5_watchtower",
	place_pi = 12,
	pick_pi = 7
}
tt.tunnel_spawns[2] = {
	template = "tunnel_KR5_watchtower",
	place_pi = 12,
	pick_pi = 5
}
tt.tunnel_spawns[3] = {
	template = "tunnel_KR5_watchtower",
	place_pi = 12,
	pick_pi = 13
}
tt = E:register_t("tower_stage_22_arborean_mages", "tower_KR5")
b = balance.specials.towers.stage_22_arborean_mages_tower

E:add_comps(tt, "attacks", "vis")

tt.tower.type = "weirdwood"
tt.tower.level = 1
tt.tower.can_be_sold = false
tt.tower.can_be_mod = false
tt.tower.range_offset = v(0, 10)
tt.tower.price = 0
tt.info.portrait = "portraits_towers_0023"
tt.main_script.update = scripts.tower_stage_22_arborean_mages.update
tt.attacks.range = b.basic_attack.max_range
tt.attacks.list[1] = E:clone_c("bullet_attack")
tt.attacks.list[1].bullet = "bullet_stage_22_arborean_mages"
tt.attacks.list[1].cooldown = b.basic_attack.cooldown
tt.attacks.list[1].animation = "ability"
tt.attacks.list[1].shoot_time = fts(9)
tt.attacks.list[1].prediction_time = fts(30)
tt.attacks.list[1].bullet_start_offset = v(20, 75)
tt.attacks.list[1].vis_flags = bor(F_RANGED)
tt.render.sid_rune = 1
tt.render.sprites[tt.render.sid_rune] = E:clone_c("sprite")
tt.render.sprites[tt.render.sid_rune].animated = true
tt.render.sprites[tt.render.sid_rune].prefix = "Shaman_baseDef"
tt.render.sprites[tt.render.sid_rune].z = Z_OBJECTS
tt.render.sprites[tt.render.sid_rune].name = "idleblue"
tt.render.sprites[tt.render.sid_rune].exo = true
tt.render.sprites[tt.render.sid_rune].offset = v(0, 4)
tt.render.sprites[tt.render.sid_rune].anchor = v(0.5, 0.528169014084507)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = true
tt.render.sprites[2].prefix = "Stage_22_shaman_shaman_unit"
tt.render.sprites[2].name = "idle"
tt.render.sprites[2].z = Z_OBJECTS
tt.render.sprites[2].offset = v(0, 5)
tt.attacks.list[1].bullet_start_offset.y = tt.attacks.list[1].bullet_start_offset.y + tt.render.sprites[2].offset.y
tt.render.sprites[2].anchor = v(0.5, 0.528169014084507)
tt.leave = false
tt.leave_anim = "out"
tt.appear = false
tt.appear_anim = "spawn"
tt.ui.click_rect = r(-35, -15, 70, 70)

tt = E:register_t("tower_stage_28_priests_barrack", "tower_KR5")
b = balance.specials.towers.tower_stage_28_priests_barrack

E:add_comps(tt, "vis", "barrack")

tt.tower.type = "tower_priests_barrack"
tt.tower.level = 1
tt.tower.team = TEAM_DARK_ARMY
tt.tower.kind = TOWER_KIND_BARRACK
tt.tower.can_be_sold = true
tt.tower.can_be_mod = true
tt.tower.range_offset = v(0, 10)
tt.tower.price = 0
tt.tower.menu_offset = v(0, 25)

function tt.info.fn(this)
	return {
		type = STATS_TYPE_TEXT,
		desc = this.info.desc
	}
end

tt.main_script.update = customScripts1.tower_special_mercenaries.update
tt.main_script.remove = scripts.tower_barrack.remove

function tt.main_script.insert(this, store, script)
	if this.render.sprites[1].flip_x == true then
		this.barrack.respawn_offset.x = this.barrack.respawn_offset.x * -1
	end

	return scripts.tower_barrack.insert(this, store, script)
end

tt.info.portrait = "portraits_towers_0029"
tt.info.desc = "SPECIAL_PRIESTS_SOLDIERS_DESCRIPTION"
tt.render.tower_sid = 2
tt.render.door_sid = 3
tt.render.candles_sid = 4
tt.render.sprites[tt.render.tower_sid] = E:clone_c("sprite")
tt.render.sprites[tt.render.tower_sid].animated = true
tt.render.sprites[tt.render.tower_sid].prefix = "redemeed_cultist_barraca_base"
tt.render.sprites[tt.render.tower_sid].name = "idle"
tt.render.sprites[tt.render.door_sid] = E:clone_c("sprite")
tt.render.sprites[tt.render.door_sid].animated = true
tt.render.sprites[tt.render.door_sid].prefix = "redemeed_cultist_barraca_door"
tt.render.sprites[tt.render.door_sid].name = "closed"
tt.render.sprites[tt.render.door_sid].offset = v(0, 14)
tt.render.sprites[tt.render.candles_sid] = E:clone_c("sprite")
tt.render.sprites[tt.render.candles_sid].animated = true
tt.render.sprites[tt.render.candles_sid].prefix = "redemeed_cultist_barraca_fire_candle"
tt.render.sprites[tt.render.candles_sid].name = "idle"
tt.barrack.soldier_type = "soldier_priests_barrack"
tt.barrack.rally_range = 209.28
tt.barrack.respawn_offset = v(0, 5)
tt.barrack.max_soldiers = b.max_soldiers
tt.sound_events.change_rally_point = nil
tt.ui.click_rect = r(-35, -15, 70, 70)
tt = E:register_t("soldier_priests_barrack", "soldier_militia")
b = balance.specials.towers.tower_stage_28_priests_barrack.priest

E:add_comps(tt, "nav_grid", "ranged", "death_spawns")

tt.health.armor = b.armor
tt.health.hp_max = b.hp_max
tt.regen.health = b.regen_health
tt.health_bar.offset = v(0, 35)
tt.health.dead_lifetime = 20
tt.nav_rally.delay_max = nil
tt.info.fn = scripts.soldier_priests_barrack.get_info
tt.info.damage_icon = b.melee.damage_type == DAMAGE_MAGICAL and "magic" or nil
tt.info.portrait = "gui_bottom_info_image_soldiers_0058"
tt.info.random_name_format = "SOLDIER_PRIESTS_BARRACK_%i_NAME"
tt.info.random_name_count = 9
tt.main_script.insert = scripts.soldier_barrack.insert
tt.main_script.update = scripts.soldier_priests_barrack.update
tt.melee.attacks[1].cooldown = b.melee.cooldown
tt.melee.attacks[1].damage_max = b.melee.damage_max
tt.melee.attacks[1].damage_min = b.melee.damage_min
tt.melee.attacks[1].damage_type = b.melee.damage_type
tt.melee.attacks[1].hit_time = fts(13)
tt.melee.attacks[1].animation = "melee_attack"
tt.melee.attacks[1].hit_fx = "fx_soldier_priests_barrack_melee_hit"
tt.melee.attacks[1].hit_offset = v(23, 13)
tt.motion.max_speed = b.max_speed
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].prefix = "redemeed_cultist_barraca_priest"
tt.render.sprites[1].angles = {}
tt.render.sprites[1].angles.walk = {
	"walk"
}
tt.render.sprites[1].angles_stickiness = {
	walk = 10
}
tt.render.sprites[1].anchor = v(0.5, 0.5172413793103449)
tt.ranged.attacks[1] = CC("bullet_attack")
tt.ranged.attacks[1].animation = "ranged_attack"
tt.ranged.attacks[1].max_range = b.ranged.range
tt.ranged.attacks[1].min_range = 0
tt.ranged.attacks[1].cooldown = b.ranged.cooldown
tt.ranged.attacks[1].damage_min = b.ranged.damage_min
tt.ranged.attacks[1].damage_max = b.ranged.damage_max
tt.ranged.attacks[1].bullet = "bullet_soldier_priests_barrack"
tt.ranged.attacks[1].bullet_start_offset = {
	v(0, 36)
}
tt.ranged.attacks[1].shoot_time = fts(24)
tt.ranged.attacks[1].node_prediction = fts(24)
tt.ranged.attacks[1].vis_bans = bor(F_NIGHTMARE)
tt.death_spawns.name = "soldier_abomination_priests_barrack"
tt.death_spawns.death_animation = "transformation_abomination"
tt.death_spawns.concurrent_with_death = false
tt.death_spawns.delay = nil
tt.death_spawns.offset = v(0, 2)
tt.death_spawns.dead_lifetime = 0
tt.transform_chances = b.transform_chances
tt.soldier.melee_slot_offset = v(5, 0)
tt.unit.price = b.price
tt.unit.fade_time_after_death = 1
tt.sound_events.insert = nil
tt = E:register_t("soldier_abomination_priests_barrack", "soldier_militia")
b = balance.specials.towers.tower_stage_28_priests_barrack.abomination

E:add_comps(tt, "nav_grid", "reinforcement", "tween")

tt.health.hp_max = b.hp_max
tt.health.armor = b.armor
tt.regen.health = b.regen_health
tt.health.dead_lifetime = 3
tt.health_bar.offset = v(0, 50)
tt.unit.hit_offset = v(0, 21)
tt.unit.head_offset = v(0, 21)
tt.unit.mod_offset = v(0, 16)
tt.unit.show_blood_pool = false
tt.unit.size = UNIT_SIZE_MEDIUM
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM_MEDIUM
tt.motion.max_speed = b.max_speed
tt.render.sprites[1].prefix = "redemeed_cultist_barraca_unblinded_abomination"
tt.render.sprites[1].angles = {}
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk",
	"walk"
}
tt.render.sprites[1].angles_stickiness = {
	walk = 0
}
tt.render.sprites[1].anchor = vv(0.5)
tt.info.enc_icon = 18
tt.info.portrait = "gui_bottom_info_image_soldiers_0059"
tt.info.fn = scripts.soldier_reinforcement.get_info
tt.eat = {}
tt.eat.hp_required = b.eat.hp_required
tt.main_script.insert = scripts.soldier_barrack.insert
tt.main_script.update = scripts.soldier_abomination_priests_barrack.update
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min
tt.melee.attacks[1].hit_time = fts(13)
tt.melee.attacks[1].hit_fx = "fx_soldier_priests_barrack_abomination_melee_hit"
tt.melee.attacks[1].hit_offset = v(30, 10)
tt.melee.attacks[2] = E:clone_c("melee_attack")
tt.melee.attacks[2].animation = "eat"
tt.melee.attacks[2].cooldown = b.eat.cooldown
tt.melee.attacks[2].damage_type = bor(DAMAGE_NONE, DAMAGE_NO_DODGE)
tt.melee.attacks[2].hit_time = fts(20)
tt.melee.attacks[2].mod = "mod_priests_abomination_eat"
tt.melee.attacks[2].vis_flags = bor(F_BLOCK, F_EAT, F_INSTAKILL)
tt.melee.attacks[2].vis_bans = bor(F_HERO)
tt.melee.attacks[2].sound = "EnemyAbominationInstakill"
tt.melee.attacks[2].fn_can = function(t, s, a, target)
	return target.health and target.health.hp <= target.health.hp_max * t.eat.hp_required
end
tt.sound_events.death = "EnemyAbominationDeath"
tt.ui.click_rect = r(-30, -3, 60, 50)
tt.reinforcement.duration = b.duration
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	}
}
tt.tween.props[1].name = "alpha"
tt.tween.disabled = true
tt.tween.remove = false
tt.tween.reverse = false
tt = E:register_t("decal_tentacle_priests_barrack", "decal_scripted")
b = balance.specials.towers.tower_stage_28_priests_barrack.tentacle

E:add_comps(tt, "area_attack")

tt.render.sprites[1].prefix = "redemeed_cultist_barraca_tentacle"
tt.render.sprites[1].name = "raise"
tt.render.sprites[1].sort_y_offset = 1
tt.render.sprites[1].anchor = vv(0.5)
tt.main_script.update = scripts.decal_tentacle_priests_barrack.update
tt.area_attack.aura = "priests_tentacle_aura"
tt.area_attack.hit_time = fts(14)
tt.area_attack.max_range = b.area_attack.radius
tt.area_attack.radius = b.area_attack.radius
tt.area_attack.cooldown_min = b.area_attack.cooldown_min
tt.area_attack.cooldown_max = b.area_attack.cooldown_max
tt.area_attack.animation = "attack01"
tt.area_attack.vis_bans = 0
tt.duration = b.duration

tt = E:register_t("soldier_reinforcement_basic", "soldier_militia")
b = balance.reinforcements

E:add_comps(tt, "reinforcement", "nav_grid", "tween")

tt.cooldown = b.soldier.cooldown
tt.health.armor = b.soldier.armor
tt.health.hp_max = b.soldier.hp_max
tt.health_bar.offset = v(0, 30)
tt.info.fn = scripts.soldier_reinforcement.get_info
tt.info.random_name_format = "SOLDIER_REINFORCEMENTS_M_%i_NAME"
tt.info.random_name_count = 10
tt.main_script.insert = scripts.soldier_reinforcement.insert
tt.main_script.update = scripts.soldier_reinforcement_kr5.update
tt.melee.attacks[1].cooldown = b.soldier.melee_attack.cooldown
tt.melee.attacks[1].damage_max = b.soldier.melee_attack.damage_max
tt.melee.attacks[1].damage_min = b.soldier.melee_attack.damage_min
tt.melee.attacks[1].hit_time = fts(11)
tt.melee.range = b.soldier.melee_attack.range
tt.motion.max_speed = b.soldier.max_speed
tt.regen.cooldown = 1
tt.regen.health = b.soldier.regen_health
tt.reinforcement.duration = b.soldier.duration
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].angles = {}
tt.render.sprites[1].angles.walk = {
	"walk"
}
tt.render.sprites[1].scale = vv(1.075)
tt.soldier.melee_slot_offset = v(3, 0)
tt.sound_events.insert = "ReinforcementTaunt"
tt.sound_events.change_rally_point = tt.sound_events.insert
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	}
}
tt.tween.props[1].name = "alpha"
tt.tween.remove = false
tt.tween.reverse = false
tt.unit.hit_offset = v(0, 5)
tt.unit.mod_offset = v(0, 14)
tt.unit.level = 0
tt.unit.fade_time_after_death = tt.health.dead_lifetime
tt.vis.bans = bor(F_SKELETON, F_CANNIBALIZE, F_LYCAN)
tt.ui.click_rect = r(-15, -5, 30, 35)
tt.ui.click_rect_offset_y = -10
tt.unit.marker_offset = v(0, ady(0))
tt.portrait_idxs = {
	10,
	11,
	12
}

for i = 1, 3 do
	local base_t = E:get_template("soldier_reinforcement_basic")
	local fn = "soldier_reinforcement_basic_0" .. i
	local t = E:register_t(fn, base_t)

	t.render.sprites[1].prefix = "reinforcements_lvl1_0" .. i
	t.info.portrait = "gui_bottom_info_image_soldiers_00" .. tt.portrait_idxs[i]

	if i == 3 then
		t.info.random_name_format = "SOLDIER_REINFORCEMENTS_F_%i_NAME"
		t.info.random_name_count = 4
	end

	E:set_template("re_current_" .. i, t)
end

tt = E:register_t("soldier_reinforcement_rebel_militia", "soldier_militia")
b = balance.upgrades.reinforcements_rebel_militia

E:add_comps(tt, "reinforcement", "nav_grid", "tween")

tt.cooldown = b.soldier.cooldown
tt.health.armor = b.soldier.armor
tt.health.hp_max = b.soldier.hp_max
tt.health_bar.offset = v(0, 30)
tt.info.fn = scripts.soldier_reinforcement.get_info
tt.info.portrait_idxs = {
	28,
	30
}
tt.info.random_name_format = "SOLDIER_REINFORCEMENTS_REBEL_MILITIA_M_%i_NAME"
tt.info.random_name_count = 5
tt.main_script.insert = scripts.soldier_reinforcement.insert
tt.main_script.update = scripts.soldier_reinforcement_kr5.update
tt.melee.attacks[1].cooldown = b.soldier.melee_attack.cooldown
tt.melee.attacks[1].damage_max = b.soldier.melee_attack.damage_max
tt.melee.attacks[1].damage_min = b.soldier.melee_attack.damage_min
tt.melee.attacks[1].hit_time = fts(11)
tt.melee.range = b.soldier.melee_attack.range
tt.motion.max_speed = b.soldier.max_speed
tt.regen.cooldown = 1
tt.regen.health = b.soldier.regen_health
tt.reinforcement.duration = b.soldier.duration
tt.render.sprites[1].prefix = "soldier_re_rebel_militia_lvl1_0"
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].angles = {}
tt.render.sprites[1].angles.walk = {
	"walk"
}
tt.soldier.melee_slot_offset = v(5, 0)
tt.sound_events.insert = "ReinforcementLinireaTaunt"
tt.sound_events.change_rally_point = tt.sound_events.insert
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	}
}
tt.tween.props[1].name = "alpha"
tt.tween.remove = false
tt.tween.reverse = false
tt.unit.hit_offset = v(0, 5)
tt.unit.mod_offset = v(0, 14)
tt.unit.level = 0
tt.vis.bans = bor(F_SKELETON, F_CANNIBALIZE, F_LYCAN)

for i = 1, 2 do
	local base_t = E:get_template("soldier_reinforcement_rebel_militia")
	local fn = "soldier_reinforcement_rebel_militia_0" .. i
	local t = E:register_t(fn, base_t)

	t.render.sprites[1].prefix = "reinforcements_lvl3_0" .. i
	t.info.portrait = "gui_bottom_info_image_soldiers_00" .. tt.info.portrait_idxs[i]

	if i == 2 then
		t.info.random_name_format = "SOLDIER_REINFORCEMENTS_REBEL_MILITIA_F_%i_NAME"
		t.info.random_name_count = 5
	end
end

tt = E:register_t("soldier_reinforcement_shadow_archer", "soldier_militia")
b = balance.upgrades.reinforcements_shadow_archer

E:add_comps(tt, "reinforcement", "nav_grid", "ranged", "tween", "dodge")

tt.cooldown = b.soldier.cooldown
tt.health.armor = b.soldier.armor
tt.health.hp_max = b.soldier.hp_max
tt.health_bar.offset = v(0, 30)
tt.info.fn = scripts.soldier_reinforcement.get_info
tt.info.portrait = "gui_bottom_info_image_soldiers_0029"
tt.info.random_name_format = "SOLDIER_REINFORCEMENTS_SHADOW_ARCHER_%i_NAME"
tt.info.random_name_count = 10
tt.main_script.insert = scripts.soldier_reinforcement.insert
tt.main_script.update = scripts.soldier_reinforcement_kr5.update
tt.melee.attacks[1].cooldown = b.soldier.melee_attack.cooldown
tt.melee.attacks[1].damage_max = b.soldier.melee_attack.damage_max
tt.melee.attacks[1].damage_min = b.soldier.melee_attack.damage_min
tt.melee.attacks[1].hit_time = fts(11)
tt.melee.attacks[1].animation = "melee"
tt.ranged.attacks[1] = CC("bullet_attack")
tt.ranged.attacks[1].animation = "attack"
tt.ranged.attacks[1].max_range = b.soldier.ranged_attack.max_range
tt.ranged.attacks[1].min_range = b.soldier.ranged_attack.min_range
tt.ranged.attacks[1].cooldown = b.soldier.ranged_attack.cooldown
tt.ranged.attacks[1].bullet = "arrow_soldier_re_shadow_archer"
tt.ranged.attacks[1].bullet_start_offset = {
	v(12, 23)
}
tt.ranged.attacks[1].shoot_time = fts(11)
tt.ranged.attacks[1].node_prediction = fts(12)
tt.ranged.attacks[1].vis_bans = bor(F_NIGHTMARE)
tt.melee.range = b.soldier.melee_attack.range
tt.motion.max_speed = b.soldier.max_speed
tt.regen.cooldown = 1
tt.regen.health = b.soldier.regen_health
tt.reinforcement.duration = b.soldier.duration
tt.render.sprites[1].prefix = "soldier_re_shadow_archer_lvl1_0"
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].angles = {}
tt.render.sprites[1].angles.walk = {
	"walk"
}
tt.soldier.melee_slot_offset = v(3, 0)
tt.sound_events.insert = "ReinforcementDarkArmyTaunt"
tt.sound_events.change_rally_point = tt.sound_events.insert
tt.dodge.disabled = true
tt.dodge.ranged = false
tt.dodge.chance = 0
tt.dodge.animation = "dodge"
tt.dodge.sound = "HeroVesperDisengageCast"
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	}
}
tt.tween.props[1].name = "alpha"
tt.tween.remove = false
tt.tween.reverse = false
tt.unit.hit_offset = v(0, 5)
tt.unit.mod_offset = v(0, 14)
tt.unit.level = 0
tt.vis.bans = bor(F_SKELETON, F_CANNIBALIZE, F_LYCAN)

for i = 1, 1 do
	local base_t = E:get_template("soldier_reinforcement_shadow_archer")
	local fn = "soldier_reinforcement_shadow_archer_0" .. i
	local t = E:register_t(fn, base_t)

	t.render.sprites[1].prefix = "reinforcements_lvl3_0" .. i + 2
end

tt = E:register_t("soldier_reinforcement_special_linirea", "soldier_militia")
b = balance.upgrades.reinforcements_special_linirea.soldier

E:add_comps(tt, "reinforcement", "nav_grid", "tween")

tt.cooldown = b.cooldown
tt.health.armor = b.armor
tt.health.hp_max = b.hp_max
tt.health.spiked_armor = b.spiked_armor
tt.health_bar.offset = v(3, 45)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM_MEDIUM
tt.info.fn = scripts.soldier_reinforcement.get_info
tt.info.portrait = "gui_bottom_info_image_soldiers_0036"
tt.info.random_name_format = "SOLDIER_REINFORCEMENTS_SPECIAL_LINIREA_%i_NAME"
tt.info.random_name_count = 1
tt.main_script.insert = scripts.soldier_reinforcement.insert
tt.main_script.update = scripts.soldier_reinforcement_kr5.update
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min
tt.melee.attacks[1].hit_time = fts(19)
tt.melee.attacks[1].hit_fx = "fx_soldier_reinforcement_special_linirea"
tt.melee.attacks[1].hit_offset = v(30, 10)
tt.melee.range = b.melee_attack.range
tt.motion.max_speed = b.max_speed
tt.regen.cooldown = 1
tt.regen.health = b.regen_health
tt.reinforcement.duration = b.duration
tt.render.sprites[1].prefix = "reinforcement_linirea_lvl_5_unit"
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].angles = {}
tt.render.sprites[1].angles.walk = {
	"walk"
}
tt.soldier.melee_slot_offset = v(18, 0)
tt.sound_events.change_rally_point = tt.sound_events.insert
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	}
}
tt.tween.props[1].name = "alpha"
tt.tween.remove = false
tt.tween.reverse = false
tt.unit.hit_offset = v(0, 5)
tt.unit.mod_offset = v(0, 14)
tt.unit.level = 0
tt.unit.size = UNIT_SIZE_MEDIUM
tt.vis.bans = bor(F_SKELETON, F_CANNIBALIZE, F_LYCAN)
tt = E:register_t("soldier_reinforcement_special_dark_army", "soldier_militia")
b = balance.upgrades.reinforcements_special_dark_army

E:add_comps(tt, "reinforcement", "nav_grid", "tween")

tt.cooldown = b.soldier.cooldown
tt.health.armor = b.soldier.armor
tt.health.hp_max = b.soldier.hp_max
tt.health_bar.offset = v(0, 38)
tt.info.fn = scripts.soldier_reinforcement.get_info
tt.info.portrait = "gui_bottom_info_image_soldiers_0035"
tt.info.random_name_format = "SOLDIER_REINFORCEMENTS_SPECIAL_DARK_ARMY_%i_NAME"
tt.info.random_name_count = 1
tt.main_script.insert = scripts.soldier_reinforcement.insert
tt.main_script.update = scripts.soldier_reinforcement_special_dark_army.update
tt.melee.attacks[1].cooldown = b.soldier.melee_attack.cooldown
tt.melee.attacks[1].damage_max = b.soldier.melee_attack.damage_max
tt.melee.attacks[1].damage_min = b.soldier.melee_attack.damage_min
tt.melee.attacks[1].hit_time = fts(10)
tt.melee.attacks[1].hit_fx = "fx_soldier_reinforcement_special_dark_army"
tt.melee.attacks[1].hit_offset = v(30, 15)
tt.melee.attacks[1].animation = "melee"
tt.melee.range = b.soldier.melee_attack.range
tt.motion.max_speed = b.soldier.max_speed
tt.regen.cooldown = 1
tt.regen.health = b.soldier.regen_health
tt.reinforcement.duration = b.soldier.duration
tt.render.sprites[1].prefix = "reinforcement_darkarmy_lvl_5_unit"
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].angles = {}
tt.render.sprites[1].angles.walk = {
	"run"
}
tt.soldier.melee_slot_offset = v(3, 0)
tt.sound_events.change_rally_point = tt.sound_events.insert
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	}
}
tt.tween.props[1].name = "alpha"
tt.tween.remove = false
tt.tween.reverse = false
tt.unit.hit_offset = v(0, 5)
tt.unit.mod_offset = v(0, 14)
tt.unit.level = 0
tt.vis.bans = bor(F_SKELETON, F_CANNIBALIZE, F_LYCAN)
tt.crow_entity = "crow_reinforcement_special_dark_army"
tt.crows_range = b.crow.target_range
tt = E:register_t("crow_reinforcement_special_dark_army", "decal_scripted")
b = balance.upgrades.reinforcements_special_dark_army.crow

E:add_comps(tt, "force_motion", "melee", "tween")

tt.main_script.update = scripts.crow_reinforcement_special_dark_army.update
tt.flight_height = 40
tt.force_motion.max_a = 1200
tt.force_motion.max_v = 180
tt.force_motion.ramp_radius = 30
tt.force_motion.fr = 0.05
tt.force_motion.a_step = 20
tt.start_ts = nil
tt.render.sprites[1].prefix = "reinforcement_darkarmy_lvl_5_crow"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_FLYING_HEROES
tt.render.sprites[1].offset = v(0, tt.flight_height)
tt.melee.attacks[1] = E:clone_c("bullet_attack")
tt.melee.attacks[1].animation = "attack"
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown
tt.melee.attacks[1].range = b.melee_attack.range
tt.melee.attacks[1].damage_type = b.melee_attack.damage_type
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max
tt.melee.attacks[1].hit_time = fts(6)
tt.melee.attacks[1].hit_fx = "fx_hit_crow_reinforcement_special_dark_army"
tt.melee.attacks[1].search_cooldown = 0.1
tt.melee.attacks[1].sound = "HeroBuilderBasicAttack"
tt.melee.attacks[1].sound_args = {
	delay = fts(14)
}
tt.melee.attacks[1].sound_chance = 0.5
tt.melee.attacks[1].vis_bans = bor(F_NIGHTMARE)
tt.melee.attacks[1].xp_gain_factor = b.melee_attack.xp_gain_factor
tt.melee.attacks[1].basic_attack = true
tt.tween.disabled = false
tt.tween.remove = false
tt.tween.props[1].name = "offset"
tt.tween.props[1].keys = {
	{
		0,
		v(0, 0)
	},
	{
		0.5,
		v(0, 3)
	},
	{
		1,
		v(0, 0)
	},
	{
		1.5,
		v(0, -3)
	},
	{
		2,
		v(0, 0)
	}
}
tt.tween.props[1].loop = true
tt.orbit_radius = 20
tt.orbit_speed = 5 * FPS * math.pi / 180
tt.target_range = b.target_range
tt.chase_range = b.chase_range
tt = E:register_t("soldier_reinforcement_stage_15_denas", "soldier_militia")

E:add_comps(tt, "melee", "nav_grid", "reinforcement", "tween")

b = balance.specials.stage15_denas
tt.health_bar.offset = v(0, 50)
tt.health.armor = b.armor
tt.health.hp_max = b.hp_max
tt.info.i18n_key = "SOLDIER_STAGE_15_DENAS"
tt.info.enc_icon = 12
tt.info.portrait = "gui_bottom_info_image_soldiers_0039"
tt.info.fn = scripts.soldier_reinforcement.get_info
tt.info.random_name_format = nil
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].prefix = "denas_hero"
tt.render.sprites[1].name = "spawn"
tt.render.sprites[1].draw_order = DO_SOLDIER_BIG
tt.render.sprites[1].hidden = true
tt.render.sprites[1].angles.walk = {
	"walk"
}
tt.sound_events.insert = "Stage15ReinforcementDenasSummon"
tt.sound_events.change_rally_point = tt.sound_events.insert
tt.unit.hit_offset = v(0, 16)
tt.unit.size = UNIT_SIZE_LARGE
tt.unit.fade_time_after_death = tt.health.dead_lifetime
tt.soldier.melee_slot_offset = v(20, 0)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.main_script.insert = scripts.soldier_reinforcement.insert
tt.main_script.update = scripts.soldier_reinforcement_stage_15_denas.update
tt.regen.cooldown = 1
tt.idle_flip.last_animation = "idle_a"
tt.idle_flip.chance = 0
tt.vis.bans = bor(F_SKELETON, F_CANNIBALIZE)
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	}
}
tt.tween.props[1].name = "alpha"
tt.tween.remove = false
tt.tween.reverse = false
tt.tween.disabled = true
tt.spawn_decal = "decal_soldier_reinforcement_stage_15_denas_spawn"
tt.floor_decal = "decal_soldier_reinforcement_stage_15_denas_floor"
tt.melee.attacks[1].vis_bans = bor(F_FLYING, F_CLIFF, F_WATER)
tt.melee.attacks[1].vis_flags = F_BLOCK
tt.melee.attacks[1].sound = "CommonNoSwordAttack"
tt.melee.attacks[1].sound_args = {
	delay = fts(8)
}
tt.melee.attacks[1].damage_min = b.damage_min
tt.melee.attacks[1].damage_max = b.damage_max
tt.melee.attacks[1].damage_type = b.damage_type
tt.melee.attacks[1].hit_time = fts(6)
tt.melee.attacks[1].hit_fx = "fx_soldier_reinforcement_stage_15_denas_hit"
tt.melee.attacks[1].hit_offset = v(30, 20)
tt.melee.attacks[1].animation = "attack_a"
tt.melee.attacks[1].shared_cooldown = true
tt.melee.attacks[1].sound = "Stage15ReinforcementDenasBasicAttack1"
tt.melee.attacks[2] = table.deepclone(tt.melee.attacks[1])
tt.melee.attacks[2].animation = "attack_b"
tt.melee.attacks[2].disabled = true
tt.melee.attacks[2].shared_cooldown = false
tt.melee.attacks[2].cooldown = 0
tt.melee.attacks[1].sound = "Stage15ReinforcementDenasBasicAttack2"
tt.melee.attacks[3] = table.deepclone(tt.melee.attacks[1])
tt.melee.attacks[3].animation = "attack_c"
tt.melee.attacks[3].damage_min = b.damage_special_min
tt.melee.attacks[3].damage_max = b.damage_special_max
tt.melee.attacks[3].hit_time = fts(18)
tt.melee.attacks[3].shared_cooldown = false
tt.melee.attacks[3].cooldown = b.attack_cooldown_special
tt.melee.attacks[3].hit_fx = "fx_soldier_reinforcement_stage_15_denas_floor"
tt.melee.attacks[3].hit_offset = v(tt.soldier.melee_slot_offset.x, 0)
tt.melee.attacks[3].sound = "Stage15ReinforcementDenasSpecialAttack"
tt.melee.range = b.range
tt.melee.cooldown = b.attack_cooldown
tt.melee.arrived_slot_animation = "idle_b"
tt.reinforcement.duration = b.duration
tt.reinforcement.fade = nil
tt.reinforcement.fade_out = nil
tt.ui.click_rect = r(-20, -5, 40, 50)
tt.power_cooldown = b.cooldown
tt.spawn_stun_radius = b.spawn_stun_radius
tt.spawn_stun_mod = "mod_soldier_reinforcement_stage_15_denas_spawn_stun"
tt.spawn_vis_bans = bor(F_FLYING, F_CLIFF, F_WATER)
tt.spawn_vis_flags = bor(F_AREA)
tt.spawn_sfx = "Stage15ReinforcementDenasSpawn"
tt.timeout_controller = "controller_soldier_reinforcement_stage_15_denas_timeout"
tt = E:register_t("controller_soldier_reinforcement_stage_15_denas_timeout")

E:add_comps(tt, "main_script")

tt.main_script.update = scripts.controller_soldier_reinforcement_stage_15_denas_timeout.update
tt = E:register_t("soldier_reinforcement_item_summon_blackburn", "soldier_militia")

E:add_comps(tt, "melee", "timed_attacks", "nav_grid", "reinforcement")

b = balance.items.summon_blackburn
tt.health_bar.offset = v(0, 80)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM_LARGE
tt.health.armor = b.armor
tt.health.hp_max = b.hp_max
tt.info.i18n_key = "SOLDIER_ITEM_SUMMON_BLACKBURN"
tt.info.enc_icon = 12
tt.info.portrait = "gui_bottom_info_image_soldiers_0044"
tt.info.fn = scripts.soldier_reinforcement.get_info
tt.info.random_name_format = nil
tt.motion.max_speed = b.speed
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].prefix = "item_summon_blackburn_blackburn"
tt.render.sprites[1].name = "in"
tt.render.sprites[1].draw_order = DO_SOLDIER_BIG
tt.render.sprites[1].hidden = true
tt.render.sprites[1].angles.walk = {
	"walk"
}
tt.sound_events.change_rally_point = tt.sound_events.insert
tt.unit.hit_offset = v(0, 25)
tt.unit.mod_offset = v(0, 25)
tt.unit.size = UNIT_SIZE_LARGE
tt.unit.fade_time_after_death = tt.health.dead_lifetime
tt.soldier.melee_slot_offset = v(20, 0)
tt.main_script.insert = scripts.soldier_reinforcement.insert
tt.main_script.update = scripts.soldier_reinforcement_item_summon_blackburn.update
tt.regen.cooldown = 1
tt.idle_flip.last_animation = "idle"
tt.idle_flip.chance = 0
tt.vis.bans = bor(F_POLYMORPH, F_DISINTEGRATED, F_CANNIBALIZE, F_SKELETON, F_BLOOD, F_POISON, F_EAT, F_NET, F_STUN)
tt.melee.range = b.range
tt.melee.attacks[1] = E:clone_c("area_attack")
tt.melee.attacks[1].vis_bans = bor(F_FLYING, F_CLIFF, F_WATER)
tt.melee.attacks[1].vis_flags = bor(F_BLOCK, F_AREA)
tt.melee.attacks[1].sound = "CommonNoSwordAttack"
tt.melee.attacks[1].sound_args = {
	delay = fts(8)
}
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_type = b.basic_attack.damage_type
tt.melee.attacks[1].damage_radius = b.basic_attack.damage_radius
tt.melee.attacks[1].hit_time = fts(13)
tt.melee.attacks[1].hit_fx = "fx_soldier_reinforcement_item_summon_blackburn_melee_attack_hit"
tt.melee.attacks[1].hit_offset = v(50, 20)
tt.melee.attacks[1].animation = "attack1"
tt.melee.attacks[1].sound = "ItemsBlackburnMeleeAttack"
tt.timed_attacks.list[1] = E:clone_c("custom_attack")
tt.timed_attacks.list[1].animation = "attack2"
tt.timed_attacks.list[1].cooldown = b.special_attack.cooldown
tt.timed_attacks.list[1].min_range = b.special_attack.min_range
tt.timed_attacks.list[1].max_range = b.special_attack.max_range
tt.timed_attacks.list[1].damage_min = b.special_attack.damage_min
tt.timed_attacks.list[1].damage_max = b.special_attack.damage_max
tt.timed_attacks.list[1].damage_type = b.special_attack.damage_type
tt.timed_attacks.list[1].damage_radius = b.special_attack.damage_radius
tt.timed_attacks.list[1].decal_time = fts(5)
tt.timed_attacks.list[1].hit_time = fts(25)
tt.timed_attacks.list[1].enemies_trigger_range = 90
tt.timed_attacks.list[1].vis_bans = bor(F_FLYING, F_NIGHTMARE, F_CLIFF)
tt.timed_attacks.list[1].vis_flags = bor(F_AREA)
tt.timed_attacks.list[1].decal = "decal_soldier_reinforcement_item_summon_blackburn_area_attack"
tt.timed_attacks.list[1].fx = "fx_soldier_reinforcement_item_summon_blackburn_area_attack"
tt.timed_attacks.list[1].hit_fx = "fx_soldier_reinforcement_item_summon_blackburn_area_attack_hit"
tt.timed_attacks.list[1].sound = "ItemsBlackburnRangedAttack"
tt.reinforcement.duration = b.duration
tt.reinforcement.fade = nil
tt.reinforcement.fade_out = nil
tt.ui.click_rect = r(-25, -5, 50, 70)
tt.spawn_damage_min = b.spawn.damage_min
tt.spawn_damage_max = b.spawn.damage_max
tt.spawn_damage_type = b.spawn.damage_type
tt.spawn_damage_radius = b.spawn.damage_radius
tt.spawn_mod = "mod_soldier_reinforcement_item_summon_blackburn_spawn_stun"
tt.spawn_vis_bans = bor(F_FLYING, F_CLIFF, F_WATER)
tt.spawn_vis_flags = bor(F_AREA)
tt = E:register_t("soldier_tower_demon_pit_basic_attack", "soldier_militia")
b = balance.towers.demon_pit

E:add_comps(tt, "reinforcement", "tween")

tt.health.armor = b.basic_attack.armor
tt.health_bar.offset = v(0, 27)
tt.health.dead_lifetime = 5
tt.info.fn = scripts.soldier_reinforcement.get_info
tt.info.portrait = "gui_bottom_info_image_soldiers_0007"
tt.info.i18n_key = "TOWER_DEMON_PIT_SOLDIER"
tt.info.random_name_format = false
tt.main_script.insert = scripts.soldier_reinforcement.insert
tt.main_script.update = scripts.soldier_tower_demon_pit.update
tt.melee.attacks[1].hit_time = fts(10)
tt.melee.range = b.basic_attack.melee_attack.range
tt.motion.max_speed = b.basic_attack.max_speed
tt.regen.cooldown = 1
tt.regen.health = b.basic_attack.regen_health
tt.reinforcement.duration = b.basic_attack.duration
tt.render.sprites[1].prefix = "demon_pit_tower_demon_minion"
tt.render.sprites[1].name = "raise"
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.soldier.melee_slot_offset = v(2, 0)
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(5),
		255
	}
}
tt.tween.props[1].name = "alpha"
tt.tween.disabled = true
tt.tween.remove = false
tt.tween.reverse = false
tt.unit.hit_offset = v(0, 5)
tt.unit.mod_offset = v(0, 14)
tt.unit.level = 0
tt.ui.click_rect = r(-15, 0, 30, 28)
tt.vis.bans = bor(F_SKELETON, F_CANNIBALIZE, F_LYCAN)
tt.decal_on_explosion = "decal_tower_demon_pit_demon_explosion_decal"
tt.explosion_sound = "TowerDemonPitDemonExplosion"
tt.explosion_range = b.demon_explosion.range
tt.explosion_damage_min = b.demon_explosion.damage_min
tt.explosion_damage_max = b.demon_explosion.damage_max
tt.explosion_damage_type = b.demon_explosion.damage_type
tt.explosion_mod_stun = "mod_soldier_tower_demon_pit_explosion"
tt.explosion_mod_stun_duration = b.demon_explosion.stun_duration
tt.patrol_pos_offset = v(15, 10)
tt.patrol_min_cd = 3
tt.patrol_max_cd = 6
tt = E:register_t("soldier_tower_demon_pit_basic_attack_lvl1", "soldier_tower_demon_pit_basic_attack")
tt.health.hp_max = b.basic_attack.hp_max[1]
tt.melee.attacks[1].cooldown = b.basic_attack.melee_attack.cooldown[1]
tt.melee.attacks[1].damage_max = b.basic_attack.melee_attack.damage_max[1]
tt.melee.attacks[1].damage_min = b.basic_attack.melee_attack.damage_min[1]
tt.level = 1
tt = E:register_t("soldier_tower_demon_pit_basic_attack_lvl2", "soldier_tower_demon_pit_basic_attack")
tt.health.hp_max = b.basic_attack.hp_max[2]
tt.melee.attacks[1].cooldown = b.basic_attack.melee_attack.cooldown[2]
tt.melee.attacks[1].damage_max = b.basic_attack.melee_attack.damage_max[2]
tt.melee.attacks[1].damage_min = b.basic_attack.melee_attack.damage_min[2]
tt.level = 2
tt = E:register_t("soldier_tower_demon_pit_basic_attack_lvl3", "soldier_tower_demon_pit_basic_attack")
tt.health.hp_max = b.basic_attack.hp_max[3]
tt.melee.attacks[1].cooldown = b.basic_attack.melee_attack.cooldown[3]
tt.melee.attacks[1].damage_max = b.basic_attack.melee_attack.damage_max[3]
tt.melee.attacks[1].damage_min = b.basic_attack.melee_attack.damage_min[3]
tt.level = 3
tt = E:register_t("soldier_tower_demon_pit_basic_attack_lvl4", "soldier_tower_demon_pit_basic_attack")
tt.health.hp_max = b.basic_attack.hp_max[4]
tt.melee.attacks[1].cooldown = b.basic_attack.melee_attack.cooldown[4]
tt.melee.attacks[1].damage_max = b.basic_attack.melee_attack.damage_max[4]
tt.melee.attacks[1].damage_min = b.basic_attack.melee_attack.damage_min[4]
tt.level = 4
tt = E:register_t("big_guy_tower_demon_pit_lvl4", "soldier_militia")
b = balance.towers.demon_pit

E:add_comps(tt, "reinforcement", "tween")

tt.health.armor = b.big_guy.armor
tt.health_bar.offset = v(0, 42)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.health_level = b.big_guy.hp_max
tt.explosion_damage = b.big_guy.explosion_damage
tt.explosion_range = b.big_guy.explosion_range
tt.explosion_damage_type = b.big_guy.explosion_damage_type
tt.explosion_sound = "TowerDemonPitDemonExplosion"
tt.info.fn = scripts.soldier_reinforcement.get_info
tt.info.portrait = "gui_bottom_info_image_soldiers_0006"
tt.info.i18n_key = "TOWER_DEMON_PIT_SOLDIER_BIG_GUY"
tt.info.random_name_format = false
tt.main_script.insert = scripts.soldier_reinforcement.insert
tt.main_script.update = scripts.big_guy_tower_demon_pit.update
tt.melee.attacks[1].hit_time = fts(5)
tt.melee.attacks[1].sound = "TowerDemonPitBigGuyBasicAttack"
tt.damage_max = b.big_guy.melee_attack.damage_max
tt.damage_min = b.big_guy.melee_attack.damage_min
tt.melee.range = b.big_guy.melee_attack.range
tt.motion.max_speed = b.big_guy.max_speed
tt.regen.cooldown = 1
tt.regen.health = b.big_guy.regen_health
tt.reinforcement.duration = b.big_guy.duration
tt.render.sprites[1].prefix = "demon_pit_tower_demon_big_guy"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.soldier.melee_slot_offset = v(15, 0)
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	}
}
tt.tween.props[1].name = "alpha"
tt.tween.disabled = true
tt.tween.remove = false
tt.tween.reverse = false
tt.unit.hit_offset = v(0, 5)
tt.unit.mod_offset = v(0, 14)
tt.unit.level = 0
tt.vis.bans = bor(F_SKELETON, F_CANNIBALIZE, F_LYCAN)
tt = E:register_t("soldier_hero_builder_worker", "soldier_militia")
b = balance.heroes.hero_builder

E:add_comps(tt, "reinforcement", "tween")

tt.health.armor = b.overtime_work.soldier.armor
tt.health.hp_max = nil
tt.health_bar.offset = v(0, 35)
tt.info.fn = scripts.soldier_reinforcement.get_info
tt.info.portrait = "gui_bottom_info_image_soldiers_0034"
tt.info.random_name_format = "SOLDIER_HERO_BUILDER_WORKER_%i_NAME"
tt.info.random_name_count = 8
tt.main_script.insert = scripts.soldier_reinforcement.insert
tt.main_script.update = scripts.soldier_reinforcement.update
tt.melee.attacks[1].cooldown = b.overtime_work.soldier.melee_attack.cooldown
tt.melee.attacks[1].damage_max = nil
tt.melee.attacks[1].damage_min = nil
tt.melee.attacks[1].hit_time = fts(11)
tt.melee.range = b.overtime_work.soldier.melee_attack.range
tt.motion.max_speed = b.overtime_work.soldier.max_speed
tt.regen.cooldown = 1
tt.regen.health = 0
tt.reinforcement.duration = b.overtime_work.soldier.duration
tt.render.sprites[1].prefix = "hero_obdul_skill_5_soldier"
tt.render.sprites[1].name = "raise"
tt.render.sprites[1].anchor = v(0.5, 0.36)
tt.soldier.melee_slot_offset = v(3, 0)
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	}
}
tt.tween.props[1].name = "alpha"
tt.tween.remove = false
tt.tween.reverse = false
tt.unit.hit_offset = v(0, 5)
tt.unit.mod_offset = v(0, 14)
tt.unit.level = 0
tt.vis.bans = bor(F_SKELETON, F_CANNIBALIZE, F_LYCAN)

tt = E:register_t("soldier_hero_witch_cat", "soldier_militia")
b = balance.heroes.hero_witch

E:add_comps(tt, "reinforcement", "tween")

tt.health.armor = b.skill_soldiers.soldier.armor
tt.health.hp_max = nil
tt.health_bar.offset = v(0, 30)
tt.info.fn = scripts.soldier_reinforcement.get_info
tt.info.portrait = "gui_bottom_info_image_soldiers_0046"
tt.info.random_name_format = "SOLDIER_HERO_WITCH_CAT_%i_NAME"
tt.info.random_name_count = 8
tt.main_script.insert = scripts.soldier_reinforcement.insert
tt.main_script.update = scripts.soldier_reinforcement.update
tt.melee.attacks[1].cooldown = b.skill_soldiers.soldier.melee_attack.cooldown
tt.melee.attacks[1].damage_max = nil
tt.melee.attacks[1].damage_min = nil
tt.melee.attacks[1].hit_time = fts(11)
tt.melee.attacks[1].sound = "CommonNoSwordAttack"
tt.melee.range = b.skill_soldiers.soldier.melee_attack.range
tt.motion.max_speed = b.skill_soldiers.soldier.max_speed
tt.regen.cooldown = 1
tt.regen.health = 0
tt.reinforcement.duration = b.skill_soldiers.soldier.duration
tt.render.sprites[1].prefix = "hero_witch_cat"
tt.render.sprites[1].name = "in"
tt.render.sprites[1].angles = {}
tt.render.sprites[1].angles.walk = {
	"walk"
}
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.soldier.melee_slot_offset = v(3, 0)
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	}
}
tt.tween.props[1].name = "alpha"
tt.tween.remove = false
tt.tween.reverse = false
tt.tween.disabled = true
tt.unit.hit_offset = v(0, 5)
tt.unit.mod_offset = v(0, 14)
tt.unit.level = 0
tt = E:register_t("soldier_hero_witch_decoy", "soldier_militia")
b = balance.heroes.hero_witch

E:add_comps(tt, "reinforcement", "tween", "death_spawns")

tt.health.armor = b.disengage.decoy.armor
tt.health.hp_max = nil
tt.health_bar.offset = v(0, 30)
tt.info.fn = scripts.soldier_reinforcement.get_info
tt.info.portrait = "gui_bottom_info_image_soldiers_0049"
tt.info.random_name_format = "SOLDIER_HERO_WITCH_DECOY_NAME"
tt.info.random_name_count = 8
tt.main_script.insert = scripts.soldier_reinforcement.insert
tt.main_script.update = scripts.soldier_hero_witch_decoy.update
tt.melee.attacks[1].cooldown = b.disengage.decoy.melee_attack.cooldown
tt.melee.attacks[1].damage_max = nil
tt.melee.attacks[1].damage_min = nil
tt.melee.attacks[1].hit_time = fts(11)
tt.melee.range = b.disengage.decoy.melee_attack.range
tt.motion.max_speed = b.disengage.decoy.max_speed
tt.regen.cooldown = 1
tt.regen.health = 0
tt.reinforcement.duration = b.disengage.decoy.duration
tt.reinforcement.fade = nil
tt.reinforcement.fade_out = nil
tt.fade_time_after_death = nil
tt.render.sprites[1].prefix = "hero_witch_decoy"
tt.render.sprites[1].name = "in"
tt.render.sprites[1].angles = {}
tt.render.sprites[1].angles.walk = {
	"walk"
}
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.soldier.melee_slot_offset = v(3, 0)
tt.tween.disabled = true
tt.unit.hit_offset = v(0, 5)
tt.unit.mod_offset = v(0, 14)
tt.unit.level = 0
tt.unit.fade_time_after_death = nil
tt.death_spawns.name = "aura_hero_witch_decoy_explotion"
tt.death_spawns.quantity = 1
tt.death_spawns.concurrent_with_death = true
tt.death_spawns.delay = fts(19)
tt.sound_death = "HeroWitchDazzlingDecoyExplosion"

tt = E:register_t("soldier_tower_rocket_gunners_lvl1", "soldier_militia")

E:add_comps(tt, "nav_grid")

b = balance.towers.rocket_gunners

E:add_comps(tt, "ranged", "tween")

tt.info.portrait = "gui_bottom_info_image_soldiers_0014"
tt.info.random_name_format = "SOLDIER_TOWER_ROCKET_GUNNERS_%i_NAME"
tt.info.random_name_count = 10
tt.main_script.insert = scripts.soldier_tower_rocket_gunners.insert
tt.main_script.update = scripts.soldier_tower_rocket_gunners.update
tt.idle_flip.last_animation = "idle_air"
tt.render.sprites[1].prefix = "rocket_gunners_tower_lvl1_gunner"
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].name = "take_off"
tt.render.sprites[1].angles.walk = {
	"idle_air"
}
tt.render.sprites[1].angles.attack_floor = {
	"attack_floor",
	"attack_floor_back",
	"attack_floor"
}
tt.render.sprites[1].angles.attack_air = {
	"attack_air",
	"attack_air_back",
	"attack_air"
}
tt.render.sprites[1].angles.idle_air = {
	"idle_air",
	"idle_air_back",
	"idle_air"
}
tt.render.sprites[1].angles.idle_floor = {
	"idle_floor",
	"idle_floor_back",
	"idle_floor"
}
tt.render.sprites[1].angles_flip_vertical = {
	attack_air = true,
	idle_air = true,
	attack_floor = true,
	idle_floor = true
}
tt.flight_height = 65
tt.unit.hit_offset = v(0, tt.flight_height + 12)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, tt.flight_height + 13)
tt.unit.level = 1
tt.unit.death_animation = "death_air"
tt.unit.show_blood_pool = false
tt.unit.hide_after_death = true
tt.soldier.melee_slot_spread = v(-10, -10)
tt.soldier.melee_slot_offset = v(10, 0)
tt.vis.bans = 0
tt.vis_bans_before_take_off = F_ALL
tt.vis_bans_after_take_off = 0
tt.health.hp_max = b.soldier.hp[1]
tt.health.armor = b.soldier.armor[1]
tt.health_bar.y_offset = 30
tt.health.dead_lifetime = b.soldier.dead_lifetime
tt.regen.health = b.soldier.regen_hp[1]
tt.motion.max_speed = b.soldier.speed_flight
tt.speed_flight = b.soldier.speed_flight
tt.speed_ground = b.soldier.speed_ground
tt.melee.range = b.soldier.melee_attack.range
tt.melee.attacks[1].cooldown = b.soldier.melee_attack.cooldown
tt.melee.attacks[1].damage_min = b.soldier.melee_attack.damage_min[1]
tt.melee.attacks[1].damage_max = b.soldier.melee_attack.damage_max[1]
tt.melee.attacks[1].hit_time = fts(10)
tt.melee.attacks[1].animation = "attack_floor"
tt.melee.attacks[1].hit_fx = "fx_bullet_soldier_tower_rocket_gunners_hit"
tt.melee.attacks[1].hit_decal = "fx_bullet_soldier_tower_rocket_gunners_floor"
tt.melee.attacks[1].hit_offset = v(34, 10)
tt.melee.arrived_slot_animation = "idle_floor"
tt.ranged.attacks[1].animation = "attack_air"
tt.ranged.attacks[1].bullet = "bullet_soldier_tower_rocket_gunners"
tt.ranged.attacks[1].cooldown = b.soldier.ranged_attack.cooldown
tt.ranged.attacks[1].max_range = b.soldier.ranged_attack.max_range[1]
tt.ranged.attacks[1].min_range = b.soldier.ranged_attack.min_range[1]
tt.ranged.attacks[1].shoot_time = fts(6)
tt.ranged.attacks[1].vis_bans = bor(F_NIGHTMARE)
tt.ui.click_rect = r(-13, 7, 25, 27)
tt.ui.click_rect_offset_y = 0
tt.drag_line_origin_offset = v(0, tt.flight_height)
tt.spawn_fx = "fx_tower_rocket_gunners_take_off"
tt.shadow_decal_t = "decal_soldier_tower_rocket_gunners_shadow"
tt.land_fx = "fx_soldier_tower_rocket_gunners_land"
tt.distance_to_land_fx = 10
tt.current_mode = 0
tt.arrive_epsilon = 0.5
tt.fly_strenght = 5
tt.fly_frequency = 13
tt.spawn_sort_y_offset = -9
tt.max_dist_walk = 100
tt.tween.disabled = true
tt.tween.remove = false
tt.tween.props[1].name = "offset"
tt.tween.props[1].interp = "sine"
tt.tween.props[1].keys = {
	{
		fts(0),
		v(0, tt.flight_height)
	},
	{
		fts(tt.fly_frequency),
		v(0, tt.flight_height - tt.fly_strenght)
	},
	{
		fts(tt.fly_frequency * 2),
		v(0, tt.flight_height)
	}
}
tt.tween.props[1].loop = true
tt.tween.props[1].disabled = true
tt.tween.props[1].remove = false
tt.sound_take_off = "TowerRocketGunnersTakeoff"
tt = E:register_t("soldier_tower_rocket_gunners_lvl2", "soldier_tower_rocket_gunners_lvl1")
b = balance.towers.rocket_gunners
tt.info.portrait = "gui_bottom_info_image_soldiers_0015"
tt.unit.level = 2
tt.render.sprites[1].prefix = "rocket_gunners_tower_lvl2_gunner"
tt.health.hp_max = b.soldier.hp[2]
tt.health.armor = b.soldier.armor[2]
tt.regen.health = b.soldier.regen_hp[2]
tt.melee.attacks[1].damage_min = b.soldier.melee_attack.damage_min[2]
tt.melee.attacks[1].damage_max = b.soldier.melee_attack.damage_max[2]
tt.ranged.attacks[1].max_range = b.soldier.ranged_attack.max_range[2]
tt.ranged.attacks[1].min_range = b.soldier.ranged_attack.min_range[2]
tt = E:register_t("soldier_tower_rocket_gunners_lvl3", "soldier_tower_rocket_gunners_lvl1")
b = balance.towers.rocket_gunners
tt.info.portrait = "gui_bottom_info_image_soldiers_0016"
tt.unit.level = 3
tt.render.sprites[1].prefix = "rocket_gunners_tower_lvl3_gunner"
tt.health.hp_max = b.soldier.hp[3]
tt.health.armor = b.soldier.armor[3]
tt.regen.health = b.soldier.regen_hp[3]
tt.melee.attacks[1].damage_min = b.soldier.melee_attack.damage_min[3]
tt.melee.attacks[1].damage_max = b.soldier.melee_attack.damage_max[3]
tt.ranged.attacks[1].max_range = b.soldier.ranged_attack.max_range[3]
tt.ranged.attacks[1].min_range = b.soldier.ranged_attack.min_range[3]
tt = E:register_t("soldier_tower_rocket_gunners_lvl4", "soldier_tower_rocket_gunners_lvl1")

E:add_comps(tt, "powers")

b = balance.towers.rocket_gunners
tt.info.portrait = "gui_bottom_info_image_soldiers_0017"
tt.unit.level = 4
tt.render.sprites[1].prefix = "rocket_gunners_tower_lvl4_gunner"
tt.health.hp_max = b.soldier.hp[4]
tt.health.armor = b.soldier.armor[4]
tt.health_bar.y_offset = 33
tt.regen.health = b.soldier.regen_hp[4]
tt.render.sprites[1].angles.phosphoric_coating_air = {
	"phosphoric_coating_air",
	"phosphoric_coating_air_back",
	"phosphoric_coating_air"
}
tt.render.sprites[1].angles.phosphoric_coating_floor = {
	"phosphoric_coating_floor",
	"phosphoric_coating_floor_back",
	"phosphoric_coating_floor"
}
tt.render.sprites[1].angles.attack_air = {
	"attack_air",
	"attack_air_back",
	"attack_air"
}
tt.render.sprites[1].angles.idle_air = {
	"idle_air",
	"idle_air_back",
	"idle_air"
}
tt.render.sprites[1].angles.idle_floor = {
	"idle_floor",
	"idle_floor_back",
	"idle_floor"
}
tt.render.sprites[1].angles_flip_vertical = {
	idle_air = true,
	phosphoric_coating_air = true,
	attack_air = true,
	phosphoric_coating_floor = true,
	idle_floor = true,
	attack_floor = true
}
tt.render.sprites[1].scale = v(1.1, 1.1)
tt.melee.attacks[1].damage_min = b.soldier.melee_attack.damage_min[4]
tt.melee.attacks[1].damage_max = b.soldier.melee_attack.damage_max[4]
tt.melee.attacks[2] = table.deepclone(tt.melee.attacks[1])
tt.melee.attacks[2].animation = "phosphoric_coating_floor"
tt.melee.attacks[2].disabled = true
tt.melee.attacks[2].hit_fx = "fx_bullet_soldier_tower_rocket_gunners_phosphoric_hit"
tt.melee.attacks[2].hit_decal = "fx_bullet_soldier_tower_rocket_gunners_phosphoric_floor"
tt.melee.attacks[2].damage_radius = b.soldier.phosphoric.damage_radius
tt.melee.attacks[2].damage_area_max = b.soldier.phosphoric.damage_area_max
tt.melee.attacks[2].damage_area_min = b.soldier.phosphoric.damage_area_min
tt.ranged.attacks[1].max_range = b.soldier.ranged_attack.max_range[4]
tt.ranged.attacks[1].min_range = b.soldier.ranged_attack.min_range[4]
tt.ranged.attacks[2] = table.deepclone(tt.ranged.attacks[1])
tt.ranged.attacks[2].animation = "phosphoric_coating_air"
tt.ranged.attacks[2].bullet = "bullet_soldier_tower_rocket_gunners_phosphoric"
tt.ranged.attacks[2].disabled = true
tt.ranged.attacks[2].bullet_start_offset = {
	v(0, 0),
	v(0, 0),
	v(0, 0)
}
tt.ranged.attacks[2].bullet_start_offset_relative = v(15, 14)
tt.ranged.attacks[2].shoot_time = fts(7)
tt.ranged.attacks[3] = E:clone_c("bullet_attack")
tt.ranged.attacks[3].animation = "sting_missiles_air"
tt.ranged.attacks[3].bullet = "bullet_soldier_tower_rocket_gunners_sting_missiles"
tt.ranged.attacks[3].disabled = true
tt.ranged.attacks[3].bullet_start_offset = nil
tt.ranged.attacks[3].bullet_start_offset_relative = v(0, 45)
tt.ranged.attacks[3].cooldown = 0
tt.ranged.attacks[3].max_range = nil
tt.ranged.attacks[3].min_range = nil
tt.ranged.attacks[3].shoot_time = fts(12)
tt.ranged.attacks[3].vis_flags = bor(F_INSTAKILL, F_RANGED, F_CUSTOM)
tt.ranged.attacks[3].vis_bans = bor(F_BOSS, F_MINIBOSS, F_NIGHTMARE)
tt.ranged.attacks[3].mark_mod = "mod_soldier_tower_rocket_gunners_sting_missiles_mark"
tt.powers.phosphoric = E:clone_c("power")
tt.powers.phosphoric.damage_factor = b.soldier.phosphoric.damage_factor
tt.powers.phosphoric.armor_reduction = b.soldier.phosphoric.armor_reduction
tt.powers.sting_missiles = E:clone_c("power")
tt.powers.sting_missiles.max_range = b.soldier.sting_missiles.max_range
tt.powers.sting_missiles.min_range = b.soldier.sting_missiles.min_range
tt.powers.sting_missiles.hp_max_target = b.soldier.sting_missiles.hp_max_target
tt = E:register_t("soldier_tower_necromancer_skeleton", "soldier_militia")
b = balance.towers.necromancer

E:add_comps(tt, "reinforcement", "count_group")

tt.health_bar.offset = v(0, 29)
tt.info.fn = scripts.soldier_reinforcement.get_info
tt.info.portrait = "gui_bottom_info_image_soldiers_0018"
tt.info.i18n_key = "SOLDIER_TOWER_NECROMANCER_SKELETON"
tt.info.random_name_count = nil
tt.info.random_name_format = nil
tt.main_script.insert = scripts.soldier_reinforcement.insert
tt.main_script.update = scripts.soldier_tower_necromancer_skeleton.update
tt.melee.attacks[1].hit_time = fts(8)
tt.melee.range = b.skeleton.melee_attack.range
tt.motion.max_speed = b.skeleton.max_speed
tt.regen.cooldown = 1
tt.regen.health = 0
tt.reinforcement.fade = false
tt.render.sprites[1].prefix = "necromancer_tower_skeleton_warrior"
tt.render.sprites[1].name = "spawn"
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].angles.walk = {
	"walk"
}
tt.soldier.melee_slot_offset = v(3, 0)
tt.unit.hit_offset = v(0, 5)
tt.unit.mod_offset = v(0, 11)
tt.unit.level = 0
tt.unit.fade_time_after_death = b.skeleton.dead_lifetime
tt.vis.bans = bor(F_SKELETON, F_CANNIBALIZE, F_LYCAN)
tt.spawn_fx = "fx_soldier_tower_necromancer_skeleton_spawn"
tt.spawn_fx_delay = 5
tt.spawn_delay_min = b.spawn_delay_min
tt.spawn_delay_max = b.spawn_delay_max
tt.spawn_sound = "TowerNecromancerSkeletonSummon"
tt.count_group.name = "necromancer_skeletons"
tt.count_group_type = COUNT_GROUP_CONCURRENT
tt.count_group_max = b.curse.max_units_total
tt.is_golem = false
tt.patrol_pos_offset = v(15, 10)
tt.patrol_min_cd = 5
tt.patrol_max_cd = 10
tt = E:register_t("soldier_tower_necromancer_skeleton_lvl1", "soldier_tower_necromancer_skeleton")
b = balance.towers.necromancer.skeleton
tt.health.armor = b.armor[1]
tt.health.hp_max = b.hp_max[1]
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown[1]
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max[1]
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min[1]
tt.unit.level = 1
tt = E:register_t("soldier_tower_necromancer_skeleton_lvl2", "soldier_tower_necromancer_skeleton")
b = balance.towers.necromancer.skeleton
tt.health.armor = b.armor[2]
tt.health.hp_max = b.hp_max[2]
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown[2]
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max[2]
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min[2]
tt.unit.level = 2
tt = E:register_t("soldier_tower_necromancer_skeleton_lvl3", "soldier_tower_necromancer_skeleton")
b = balance.towers.necromancer.skeleton
tt.health.armor = b.armor[3]
tt.health.hp_max = b.hp_max[3]
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown[3]
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max[3]
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min[3]
tt.unit.level = 3
tt = E:register_t("soldier_tower_necromancer_skeleton_lvl4", "soldier_tower_necromancer_skeleton")
b = balance.towers.necromancer.skeleton
tt.health.armor = b.armor[4]
tt.health.hp_max = b.hp_max[4]
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown[4]
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max[4]
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min[4]
tt.unit.level = 4
tt = E:register_t("soldier_tower_necromancer_skeleton_golem", "soldier_tower_necromancer_skeleton")
b = balance.towers.necromancer.skeleton_golem
tt.health_bar.offset = v(0, 47)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.info.portrait = "gui_bottom_info_image_soldiers_0019"
tt.info.i18n_key = "SOLDIER_TOWER_NECROMANCER_SKELETON_GOLEM"
tt.melee.range = b.melee_attack.range
tt.motion.max_speed = b.max_speed
tt.regen.cooldown = b.regen_cooldown
tt.regen.health = 0
tt.render.sprites[1].prefix = "necromancer_tower_bone_golem"
tt.soldier.melee_slot_offset = v(15, 0)
tt.unit.hit_offset = v(0, 5)
tt.unit.mod_offset = v(0, 15)
tt.unit.fade_time_after_death = b.dead_lifetime
tt.unit.size = UNIT_SIZE_LARGE
tt.spawn_fx = "fx_soldier_tower_necromancer_skeleton_golem_spawn"
tt.spawn_delay = 3
tt.is_golem = true
tt = E:register_t("soldier_tower_necromancer_skeleton_golem_lvl1", "soldier_tower_necromancer_skeleton_golem")
b = balance.towers.necromancer.skeleton_golem
tt.health.armor = b.armor[1]
tt.health.hp_max = b.hp_max[1]
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown[1]
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max[1]
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min[1]
tt.unit.level = 1
tt = E:register_t("soldier_tower_necromancer_skeleton_golem_lvl2", "soldier_tower_necromancer_skeleton_golem")
b = balance.towers.necromancer.skeleton_golem
tt.health.armor = b.armor[2]
tt.health.hp_max = b.hp_max[2]
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown[2]
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max[2]
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min[2]
tt.unit.level = 2
tt = E:register_t("soldier_tower_necromancer_skeleton_golem_lvl3", "soldier_tower_necromancer_skeleton_golem")
b = balance.towers.necromancer.skeleton_golem
tt.health.armor = b.armor[3]
tt.health.hp_max = b.hp_max[3]
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown[3]
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max[3]
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min[3]
tt.unit.level = 3
tt = E:register_t("soldier_tower_necromancer_skeleton_golem_lvl4", "soldier_tower_necromancer_skeleton_golem")
b = balance.towers.necromancer.skeleton_golem
tt.health.armor = b.armor[4]
tt.health.hp_max = b.hp_max[4]
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown[4]
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max[4]
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min[4]
tt.unit.level = 4

tt = E:register_t("soldier_tower_dark_elf", "soldier_militia")

E:add_comps(tt, "nav_grid", "dodge")

b = balance.towers.dark_elf.soldier
tt.info.portrait = "gui_bottom_info_image_soldiers_0045"
tt.info.random_name_count = 9
tt.info.random_name_format = "SOLDIER_TOWER_DARK_ELF_%i_NAME"
tt.main_script.update = scripts.soldier_barrack.update
tt.main_script.insert = scripts.soldier_barrack.insert
tt.render.sprites[1].prefix = "harrasser"
tt.render.sprites[1].angles.walk = {
	"run"
}
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.unit.hit_offset = v(0, 12)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, 13)
tt.health.hp_max = b.hp[1]
tt.health.armor = b.armor[1]
tt.health_bar.offset = v(0, 30)
tt.health.dead_lifetime = b.dead_lifetime
tt.regen.health = b.regen_hp[1]
tt.motion.max_speed = b.speed
tt.melee.range = b.basic_attack.range
tt.melee.cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].animation = "attack"
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min[1]
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max[1]
tt.melee.attacks[1].damage_type = b.basic_attack.damage_type
tt.melee.attacks[1].hit_time = fts(17)
tt.melee.attacks[1].shared_cooldown = true
tt.melee.attacks[2] = table.deepclone(tt.melee.attacks[1])
tt.melee.attacks[2].animation = "attack2"
tt.melee.attacks[2].shared_cooldown = true
tt.melee.attacks[2].chance = 0.5
tt.soldier.melee_slot_spread = v(-8, -8)
tt.dodge.chance = b.dodge_chance[1]
tt.dodge.animation = "evade"
tt.dodge.time_before_hit = fts(5)
tt.dodge.sound = "HeroVesperDisengageCast"
tt.ui.click_rect = r(-10, -2, 20, 25)

tt = E:register_t("soldier_tower_dwarf_lvl1", "soldier_militia")

E:add_comps(tt, "nav_grid")

b = balance.towers.dwarf.soldier

E:add_comps(tt, "ranged")

tt.info.portrait = "gui_bottom_info_image_soldiers_0052"
tt.info.random_name_format = "SOLDIER_TOWER_DWARF_%i_NAME"
tt.info.random_name_count = 10
tt.main_script.insert = scripts.soldier_tower_dwarf.insert
tt.main_script.update = scripts.soldier_tower_dwarf.update
tt.render.sprites[1].prefix = "tower_dwarf_dwarf_lvl1"
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].scale = vv(1.1)
tt.render.sprites[1].angles.walk = {
	"walk"
}
tt.render.sprites[1].angles.attack = {
	"attack_1_front",
	"attack_1_up",
	"attack_1_down"
}
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "decal_flying_shadow_hard"
tt.render.sprites[2].offset = v(-1, 0)
tt.render.sprites[2].z = Z_DECAL
tt.render.sprites[2].hidden = true
tt.render.sprites[2].scale = vv(1)
tt.unit.hit_offset = v(0, 12)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, 13)
tt._jump_explosion = "decal_tower_dwarf_jump_explosion"
tt._jump_asset_name = "tower_dwarf_dwarf_jump"
tt.unit.level = 1
tt.soldier.melee_slot_spread = v(-10, -10)
tt.soldier.melee_slot_offset = v(10, 0)
tt.vis.bans = 0
tt.health.hp_max = b.hp[1]
tt.health.armor = b.armor[1]
tt.health_bar.offset = v(0, 30)
tt.health.dead_lifetime = b.dead_lifetime
tt.regen.health = b.regen_hp[1]
tt.motion.max_speed = b.speed
tt.melee.range = b.melee_attack.range
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown
tt.melee.attacks[1].hit_time = fts(18)
tt.melee.attacks[1].animation = "attack_2"
tt.melee.attacks[1].hit_fx = "fx_soldier_tower_dwarf_melee_hit"
tt.melee.attacks[1].hit_offset = v(34, 10)
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min[1]
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max[1]
tt.ranged.attacks[1].animation = "attack"
tt.ranged.attacks[1].level = 1
tt.ranged.attacks[1].bullet = "bullet_soldier_tower_dwarf"
tt.ranged.attacks[1].cooldown = b.ranged_attack.cooldown
tt.ranged.attacks[1].max_range = b.ranged_attack.max_range[1]
tt.ranged.attacks[1].min_range = b.ranged_attack.min_range[1]
tt.ranged.attacks[1].shoot_time = fts(20)
tt.ranged.attacks[1].vis_bans = bor(F_NIGHTMARE)
tt.ui.click_rect = r(-13, 0, 25, 25)
tt.ui.click_rect_offset_y = 0
tt.max_dist_walk = 140
tt.sound_jump = "TowerDwarfIncendiaryJump"
tt.sound_events.death = "TowerDwarfUnitDeath"
tt = E:register_t("soldier_tower_dwarf_lvl2", "soldier_tower_dwarf_lvl1")
b = balance.towers.dwarf.soldier
tt.info.portrait = "gui_bottom_info_image_soldiers_0053"
tt.unit.level = 2
tt.render.sprites[1].prefix = "tower_dwarf_dwarf_lvl2"
tt.health.hp_max = b.hp[2]
tt.health.armor = b.armor[2]
tt.health_bar.offset = v(0, 33)
tt.regen.health = b.regen_hp[2]
tt.ranged.attacks[1].level = 2
tt.ranged.attacks[1].max_range = b.ranged_attack.max_range[2]
tt.ranged.attacks[1].min_range = b.ranged_attack.min_range[2]
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min[2]
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max[2]
tt.ui.click_rect = r(-13, 0, 25, 30)
tt = E:register_t("soldier_tower_dwarf_lvl3", "soldier_tower_dwarf_lvl1")
b = balance.towers.dwarf.soldier
tt.info.portrait = "gui_bottom_info_image_soldiers_0054"
tt.unit.level = 3
tt.render.sprites[1].prefix = "tower_dwarf_dwarf_lvl3"
tt.health.hp_max = b.hp[3]
tt.health.armor = b.armor[3]
tt.health_bar.offset = v(0, 35)
tt.regen.health = b.regen_hp[3]
tt.ranged.attacks[1].level = 3
tt.ranged.attacks[1].max_range = b.ranged_attack.max_range[3]
tt.ranged.attacks[1].min_range = b.ranged_attack.min_range[3]
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min[3]
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max[3]
tt.ui.click_rect = r(-13, 0, 25, 30)
tt = E:register_t("soldier_tower_dwarf_lvl4", "soldier_tower_dwarf_lvl1")

E:add_comps(tt, "powers")

b = balance.towers.dwarf.soldier
tt.info.portrait = "gui_bottom_info_image_soldiers_0055"
tt.unit.level = 4
tt.render.sprites[1].prefix = "tower_dwarf_dwarf_lvl4"
tt.health.hp_max = b.hp[4]
tt.health.armor = b.armor[4]
tt.health_bar.offset = v(0, 33)
tt.regen.health = b.regen_hp[4]
tt.ranged.attacks[1].level = 4
tt.ranged.attacks[1].max_range = b.ranged_attack.max_range[4]
tt.ranged.attacks[1].min_range = b.ranged_attack.min_range[4]
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min[4]
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max[4]
tt.ranged.attacks[2] = table.deepclone(tt.ranged.attacks[1])
tt.ranged.attacks[2].animation = "skill"
tt.ranged.attacks[2].bullet = "bullet_incendiary_soldier_tower_dwarf"
tt.ranged.attacks[2].disabled = true
tt.ranged.attacks[2].bullet_start_offset = {
	v(0, 0)
}
tt.ranged.attacks[2].bullet_start_offset_relative = v(15, 14)
tt.ranged.attacks[2].shoot_time = fts(35)
tt.ranged.attacks[2].node_prediction = fts(67)
tt.ranged.attacks[2].ignore_hit_offset = true
tt._jump_asset_name = "tower_dwarf_dwarf_jump_lvl_4"
b = balance.towers.dwarf
tt.powers.incendiary_ammo = E:clone_c("power")
tt.powers.incendiary_ammo.cooldown = b.incendiary_ammo.cooldown

tt = E:register_t("soldier_stage_10_ymca", "soldier_militia")
b = balance.specials.stage10_ymca

E:add_comps(tt, "reinforcement", "nav_grid", "tween")

tt.health.armor = b.soldier.armor
tt.health.hp_max = b.soldier.hp
tt.health_bar.offset = v(0, 30)
tt.info.fn = scripts.soldier_reinforcement.get_info
tt.info.random_name_format = nil
tt.info.random_name_count = nil
tt.main_script.insert = scripts.soldier_reinforcement.insert
tt.main_script.update = scripts.soldier_stage_10_ymca.update
tt.melee.attacks[1].cooldown = b.soldier.melee_attack.cooldown
tt.melee.attacks[1].damage_max = b.soldier.melee_attack.damage_max
tt.melee.attacks[1].damage_min = b.soldier.melee_attack.damage_min
tt.melee.attacks[1].hit_time = fts(11)
tt.melee.range = 72
tt.motion.max_speed = b.soldier.max_speed
tt.regen.cooldown = 1
tt.regen.health = 0
tt.reinforcement.duration = 1e+99
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].angles.walk = {
	"walk"
}
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].scale = vv(1.1)
tt.soldier.melee_slot_offset = v(3, 0)
tt.sound_events.insert = nil
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	}
}
tt.tween.props[1].name = "alpha"
tt.tween.remove = false
tt.tween.reverse = false
tt.unit.hit_offset = v(0, 5)
tt.unit.mod_offset = v(0, 14)
tt.unit.level = 0
tt.vis.bans = bor(F_SKELETON, F_CANNIBALIZE, F_LYCAN)
tt = E:register_t("soldier_stage_10_ymca_indio", "soldier_stage_10_ymca")
tt.render.sprites[1].prefix = "ymca_ymca_indio"
tt.info.portrait = "gui_bottom_info_image_soldiers_0020"
tt = E:register_t("soldier_stage_10_ymca_constructor", "soldier_stage_10_ymca")
tt.render.sprites[1].prefix = "ymca_ymca_constructor"
tt.render.sprites[1].anchor = v(0.5, 1)
tt.render.sprites[1].offset.y = 35
tt.info.portrait = "gui_bottom_info_image_soldiers_0023"
tt = E:register_t("soldier_stage_10_ymca_biker", "soldier_stage_10_ymca")
tt.render.sprites[1].prefix = "ymca_ymca_biker"
tt.info.portrait = "gui_bottom_info_image_soldiers_0022"
tt = E:register_t("soldier_stage_10_ymca_policia", "soldier_stage_10_ymca")
tt.render.sprites[1].prefix = "ymca_ymca_policia"
tt.info.portrait = "gui_bottom_info_image_soldiers_0021"
tt = E:register_t("soldier_stage_11_veznan_skill_soldiers", "soldier_militia")
b = balance.specials.stage11_veznan.skill_soldiers.soldier

E:add_comps(tt, "reinforcement", "tween")

tt.health.armor = b.armor
tt.health_bar.offset = v(0, 40)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.health.hp_max = b.hp_max
tt.info.fn = scripts.soldier_reinforcement.get_info
tt.info.portrait = "gui_bottom_info_image_soldiers_0024"
tt.info.i18n_key = "SOLDIER_STAGE11_VEZNAN_SKILL"
tt.main_script.insert = scripts.soldier_reinforcement.insert
tt.main_script.update = scripts.soldier_stage_11_veznan_skill_soldiers.update
tt.melee.attacks[1].hit_time = fts(8)
tt.melee.attacks[1].sound = "TowerDemonPitBigGuyBasicAttack"
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min
tt.melee.range = b.melee_attack.range
tt.motion.max_speed = b.max_speed
tt.regen.cooldown = 1
tt.regen.health = b.regen_health
tt.reinforcement.duration = 1e+99
tt.render.sprites[1].prefix = "reinforcement_demon_guard"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].anchor = v(0.5, 0.3)
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_up",
	"walk_down"
}
tt.soldier.melee_slot_offset = v(3, 0)
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	}
}
tt.tween.props[1].name = "alpha"
tt.tween.disabled = true
tt.tween.remove = false
tt.tween.reverse = false
tt.unit.hit_offset = v(0, 5)
tt.unit.mod_offset = v(0, 14)
tt.vis.bans = bor(F_SKELETON, F_CANNIBALIZE, F_LYCAN)
tt.spawn_fx = "fx_stage_11_veznan_soldiers_spawn"
tt.spawn_fx_top = "fx_stage_11_veznan_soldiers_spawn_top"
tt.spawn_delay = fts(2)
tt.idle_time = fts(8)
tt.nodes_from_start = b.nodes_from_start

tt = E:register_t("soldier_hero_hunter_beast", "decal_scripted")

E:add_comps(tt, "pos", "main_script", "attacks", "force_motion", "tween", "sound_events", "force_motion")

b = balance.heroes.hero_hunter.beasts
tt.flight_height = 50
tt.force_motion.max_a = 6000
tt.force_motion.max_v = 6000
tt.force_motion.ramp_radius = 30
tt.force_motion.fr = 0.1
tt.force_motion.a_step = 30
tt.main_script.update = scripts.soldier_hero_hunter_beast.update
tt.main_script.remove = scripts.soldier_hero_hunter_beast.remove
tt.max_distance_from_owner = b.max_distance_from_owner
tt.min_distance_to_attack = 60
tt.duration = nil
tt.attacks.list[1] = E:clone_c("custom_attack")
tt.mark_mod_duration = fts(30)
tt.attacks.list[1].cooldown = b.attack_cooldown
tt.attacks.list[1].shoot_time = fts(15)
tt.attacks.list[1].damage_type = b.damage_type
tt.attacks.list[1].vis_flags = F_RANGED
tt.attacks.list[1].vis_bans = bor(F_NIGHTMARE)
tt.attacks.list[1].range = b.attack_range
tt.render.sprites[1].prefix = "duskbeast"
tt.render.sprites[1].offset = v(0, 0)
tt.render.sprites[1].z = Z_FLYING_HEROES
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "decal_flying_shadow_hard"
tt.render.sprites[2].offset = v(0, 0)
tt.render.sprites[2].z = Z_DECALS
tt.render.sprites[2].scale = vv(0.7)
tt.tween.disabled = true
tt.tween.remove = false
tt.steal_fx = "fx_hero_hunter_steal"
tt.chance_to_steal = b.chance_to_steal
tt.gold_to_steal = nil
tt.fx_offset_y = 60
tt.tween.props[1].name = "offset"
tt.tween.props[1].interp = "sine"
tt.tween.props[1].keys = {
	{
		0,
		v(0, tt.flight_height)
	},
	{
		nil,
		v(0, tt.flight_height - 5)
	},
	{
		nil,
		v(0, tt.flight_height)
	}
}
tt.tween.props[1].sprite_id = 1
tt.tween.props[1].loop = true
tt.mark_mod = "mod_hero_hunter_beast_mark"
tt.idle_change_pos_cd = fts(8)
tt.idle_change_pos_offset = v(35, 35)
tt = E:register_t("soldier_hero_hunter_ultimate", "soldier_militia")

E:add_comps(tt, "nav_grid", "ranged", "reinforcement", "tween")

b = balance.heroes.hero_hunter
tt.health_bar.offset = v(0, 50)
tt.info.i18n_key = "HERO_HUNTER_ULTIMATE_ENTITY"
tt.info.enc_icon = 12
tt.info.portrait = "gui_bottom_info_image_soldiers_0038"
tt.info.fn = scripts.soldier_reinforcement.get_info
tt.info.random_name_format = nil
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].prefix = "dante"
tt.render.sprites[1].name = "Idle"
tt.render.sprites[1].draw_order = DO_SOLDIER_BIG
tt.render.sprites[1].angles.ranged = {
	"shoot",
	"shoot_diagonal_back",
	"shoot_diagonal"
}
tt.render.sprites[1].angles_custom = {
	ranged = {
		45,
		135,
		210,
		315
	}
}
tt.render.sprites[1].angles_flip_vertical = {
	ranged = true
}
tt.unit.hit_offset = v(0, 16)
tt.unit.size = UNIT_SIZE_LARGE
tt.unit.fade_time_after_death = tt.health.dead_lifetime
tt.soldier.melee_slot_offset = v(20, 0)
tt.health_bar.hidden = true
tt.health.immune_to = F_ALL
tt.main_script.insert = scripts.soldier_reinforcement.insert
tt.main_script.update = scripts.soldier_hero_hunter_ultimate.update
tt.regen.cooldown = 1
tt.vis.bans = bor(F_SKELETON, F_CANNIBALIZE, F_BLOCK, F_RANGED, F_MOD)
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	}
}
tt.tween.props[1].name = "alpha"
tt.tween.remove = false
tt.tween.reverse = false
tt.tween.disabled = true
tt.melee = nil
tt.ranged.attacks[1] = E:clone_c("bullet_attack")
tt.ranged.attacks[1].cooldown = b.ultimate.entity.basic_ranged.cooldown
tt.ranged.attacks[1].max_range = b.ultimate.entity.basic_ranged.max_range
tt.ranged.attacks[1].min_range = b.ultimate.entity.basic_ranged.min_range
tt.ranged.attacks[1].bullet = "bullet_hero_hunter_ultimate_ranged_attack"
tt.ranged.attacks[1].vis_flags = bor(F_RANGED)
tt.ranged.attacks[1].vis_bans = bor(F_NIGHTMARE)
tt.ranged.attacks[1].sound = "HeroHunterUltimateAttack"
tt.ranged.attacks[1].shoot_times = {
	fts(2),
	fts(9),
	fts(16)
}
tt.ranged.attacks[1].loops = 1
tt.ranged.attacks[1].animations = {
	nil,
	"ranged"
}
tt.ranged.attacks[1].damage_type = b.ultimate.entity.basic_ranged.damage_type
tt.reinforcement.duration = b.ultimate.duration
tt.reinforcement.fade = nil
tt.reinforcement.fade_out = nil
tt.ui.click_rect = r(-20, -5, 40, 50)
tt.distance_to_revive = b.ultimate.distance_to_revive

tt = E:register_t("soldier_hero_lava_double_trouble", "soldier_militia")
b = balance.heroes.hero_lava.double_trouble.soldier

E:add_comps(tt, "reinforcement")

tt.health.armor = b.armor
tt.health.hp_max = nil
tt.health_bar.offset = v(0, 30)
tt.info.i18n_key = "HERO_LAVA_DOUBLE_TROUBLE_SOLDIER"
tt.info.enc_icon = 12
tt.info.portrait = "gui_bottom_info_image_soldiers_0056"
tt.info.fn = scripts.soldier_reinforcement.get_info
tt.info.random_name_format = nil
tt.main_script.insert = scripts.soldier_reinforcement.insert
tt.main_script.update = scripts.soldier_hero_lava_double_trouble.update
tt.melee.attacks[1].cooldown = b.cooldown
tt.melee.attacks[1].damage_max = nil
tt.melee.attacks[1].damage_min = nil
tt.melee.attacks[1].hit_time = fts(14)
tt.melee.attacks[1].sound = "CommonNoSwordAttack"
tt.melee.attacks[1].sound_args = {
	delay = fts(14)
}
tt.melee.range = 72
tt.motion.max_speed = b.max_speed
tt.regen.cooldown = 1
tt.regen.health = 0
tt.reinforcement.duration = b.duration
tt.reinforcement.fade = false
tt.reinforcement.fade_out = false
tt.render.sprites[1].prefix = "hero_lava_skill_3_double"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].angles.walk = {
	"walk"
}
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].scale = vv(1.1)
tt.soldier.melee_slot_offset = v(3, 0)
tt.sound_events.insert = nil
tt.unit.hit_offset = v(0, 5)
tt.unit.mod_offset = v(0, 14)
tt.unit.fade_time_after_death = 1
tt.unit.level = 0
tt.vis.bans = bor(F_SKELETON, F_CANNIBALIZE, F_LYCAN)

tt = E:register_t("soldier_tower_stage_18_elven_barrack", "soldier_militia")

E:add_comps(tt, "nav_grid")

b = balance.specials.towers.stage_18_elven_barrack.soldier
tt.info.portrait = "gui_bottom_info_image_soldiers_0047"
tt.info.random_name_count = 6
tt.info.random_name_format = "SOLDIER_TOWER_ELVEN_BARRACK_%i_NAME"
tt.main_script.insert = scripts.soldier_barrack.insert
tt.main_script.update = scripts.soldier_barrack.update
tt.render.sprites[1].prefix = "elven_barracks_elven_soldier"
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].angles.walk = {
	"walk"
}
tt.unit.hit_offset = v(0, 12)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, 13)
tt.unit.price = b.price
tt.unit.fade_time_after_death = 4
tt.health.armor = b.armor
tt.health.hp_max = b.hp
tt.health_bar.offset = v(0, 33)
tt.health.dead_lifetime = b.dead_lifetime
tt.regen.health = b.regen_hp
tt.motion.max_speed = b.speed
tt.melee.range = b.basic_attack.range
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].hit_time = fts(12)
tt.soldier.melee_slot_spread = v(-8, -8)
tt.sound_events.insert = "TowerElvenBarrackUnitTaunt"
tt.sound_events.death = "TowerPaladinCovenantUnitDeath"
tt.ui.click_rect = r(-13, -2, 26, 28)

tt = E:register_t("boss_pig", "boss")

local b = balance.enemies.werebeasts.boss

E:add_comps(tt, "melee", "timed_attacks", "auras")

tt.enemy.gold = 1
tt.enemy.lives_cost = 999
tt.enemy.melee_slot = v(40, 0)
tt.health.armor = b.armor
tt.health.dead_lifetime = 100
tt.health.hp_max = b.hp
tt.health_bar.offset = v(0, 100)
tt.health_bar.type = HEALTH_BAR_SIZE_LARGE
tt.info.enc_icon = 26
tt.info.i18n_key = "ENEMY_BOSS_PIG"
tt.info.portrait = "gui_bottom_info_image_enemies_0010"
tt.info.portrait_boss = "boss_health_bar_icon_0001"
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.boss_pig.update
tt.motion.max_speed = b.speed
tt.render.sprites[1].exo = true
tt.render.sprites[1].prefix = "GoregrindDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].angles = {}
tt.render.sprites[1].angles.walk = {
	"walk1",
	"walk2",
	"walk2"
}
tt.ui.click_rect = r(-35, 0, 70, 80)
tt.unit.can_explode = false
tt.unit.hit_offset = v(0, 40)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, 30)
tt.unit.show_blood_pool = false
tt.unit.size = UNIT_SIZE_LARGE
tt.vis.bans = bor(F_RANGED)
tt.vis.flags_jumping = bor(F_ENEMY, F_BOSS)
tt.vis.bans_jumping = bor(F_RANGED, F_BLOCK, F_MOD)
tt.vis.flags_normal = bor(F_ENEMY, F_BOSS)
tt.vis.bans_normal = 0
tt.melee.attacks[1] = E:clone_c("area_attack")
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min
tt.melee.attacks[1].hit_time = fts(22)
tt.melee.attacks[1].damage_radius = b.melee_attack.damage_radius
tt.melee.attacks[1].damage_type = bor(DAMAGE_PHYSICAL, DAMAGE_NO_DODGE)
tt.melee.attacks[1].hit_decal = "decal_boss_pig_ground_attack"
tt.melee.attacks[1].hit_fx = "decal_boss_pig_attack_dust"
tt.melee.attacks[1].hit_time = fts(14)
tt.melee.attacks[1].hit_offset = v(50, 0)
tt.melee.attacks[1].uninterruptible = true
tt.melee.attacks[1].sound = "Stage06BossPigAttack"
tt.aura_damage_on_fall = "aura_boss_pig_damage_on_fall"
tt.shadow = "decal_werebeast_boss_shadow"
tt.sound_jump = "Stage06BossPigJump"
tt.sound_land = "Stage06BossPigLand"
tt.sound_falling = "Stage06BossPigFalling"
tt.sound_events.death = "Stage06BossPigDeath"
tt = E:register_t("decal_boss_pig_pool", "decal_scripted")

E:add_comps(tt, "taunts", "editor")

tt.render.sprites[1].exo = true
tt.render.sprites[1].prefix = "GoregrindPoolDef"
tt.render.sprites[1].name = "sleeping"
tt.main_script.update = scripts.decal_boss_pig_pool.update
tt.taunts.delay_min = 10
tt.taunts.delay_max = 20
tt.taunts.sets = {}
tt.taunts.sets.from_pool = CC("taunt_set")
tt.taunts.sets.from_pool.format = "LV06_BOSS_TAUNT_%02i"
tt.taunts.sets.from_pool.end_idx = 6
tt.sound_horn = "Stage06BossPigHorn"
tt = E:register_t("decal_boss_pig_flying", "decal")
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "GoregrindFlying_asst_goregrind_flying"
tt.render.sprites[1].hidden = true
tt.render.sprites[1].z = Z_FLYING_HEROES
tt = E:register_t("decal_boss_pig_smoke", "decal_tween")
tt.render.sprites[1].animated = true
tt.render.sprites[1].prefix = "werebeast_boss_death_and_fall_dust"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].loop = false
tt.tween.props[1].keys = {
	{
		1,
		255
	},
	{
		2.5,
		0
	}
}
tt = E:register_t("decal_boss_pig_attack_dust", "decal_tween")
tt.render.sprites[1].animated = true
tt.render.sprites[1].name = "werebeast_boss_attack_dust"
tt.render.sprites[1].loop = false
tt.tween.props[1].keys = {
	{
		1,
		255
	},
	{
		2.5,
		0
	}
}
tt.render.sprites[1].scale = v(0.5, 0.5)
tt = E:register_t("decal_boss_pig_ground_fall", "decal_tween")
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "werebeast_boss_decal"
tt.render.sprites[1].z = Z_DECALS
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		fts(22),
		255
	},
	{
		fts(22) + fts(5),
		0
	}
}
tt.tween.remove = true
tt = E:register_t("decal_boss_pig_ground_attack", "decal_boss_pig_ground_fall")
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		fts(18),
		255
	},
	{
		fts(18) + fts(5),
		0
	}
}
tt = E:register_t("decal_hero_mecha_ultimate", "decal_tween")
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "hero_onagro_ultimate_decal"
tt.render.sprites[1].z = Z_DECALS
tt.tween.props[1].keys = {
	{
		1,
		255
	},
	{
		9,
		255
	},
	{
		12,
		0
	}
}
tt.tween.run_once = true
tt = E:register_t("boss_corrupted_denas", "boss")

E:add_comps(tt, "melee", "timed_attacks")

b = balance.enemies.cult_of_the_overseer.boss_corrupted_denas
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.boss_corrupted_denas.update
tt.motion.max_speed = b.speed
tt.enemy.lives_cost = 999
tt.enemy.melee_slot = v(40, 0)
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health.dead_lifetime = 100
tt.health.hp_max = b.hp
tt.health_bar.offset = v(0, 100)
tt.health_bar.type = HEALTH_BAR_SIZE_LARGE
tt.render.sprites[1].prefix = "denas_character"
tt.render.sprites[1].angles = {}
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk",
	"walk_down"
}
tt.info.i18n_key = "ENEMY_BOSS_CORRUPTED_DENAS"
tt.info.portrait_boss = "boss_health_bar_icon_0002"
tt.info.portrait = "gui_bottom_info_image_enemies_0027"
tt.melee.attacks[1] = E:clone_c("area_attack")
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min
tt.melee.attacks[1].hit_time = fts(17)
tt.melee.attacks[1].damage_radius = b.melee_attack.damage_radius
tt.melee.attacks[1].damage_type = bor(b.melee_attack.damage_type, DAMAGE_NO_DODGE)
tt.melee.attacks[1].hit_fx_offset = v(20, -20)
tt.melee.attacks[1].hit_fx = "decal_boss_corrupted_denas_hit"
tt.melee.attacks[1].sound = "Stage11BossCorruptedDenasAttack"
tt.melee.attacks[1].hit_offset = v(20, 0)
tt.timed_attacks.list[1] = E:clone_c("custom_attack")
tt.timed_attacks.list[1].animation = "spawn_glareling"
tt.timed_attacks.list[1].cooldown = b.spawn_entities.cooldown
tt.timed_attacks.list[1].min_range = 60
tt.timed_attacks.list[1].max_range = b.spawn_entities.max_range
tt.timed_attacks.list[1].distance_between_entities = 40
tt.timed_attacks.list[1].entities_amount = 3
tt.timed_attacks.list[1].delay_between = fts(5)
tt.timed_attacks.list[1].idle_time = fts(6)
tt.timed_attacks.list[1].bullet_start_offset = v(0, 65)
tt.timed_attacks.list[1].bullet = "bullet_boss_corrupted_denas_spawn_entities"
tt.life_threshold_stun = b.life_threshold_stun
tt.cult_leader_template_name = "decal_stage_11_cult_leader"
tt.ui.click_rect = r(-35, 0, 70, 80)
tt.unit.can_explode = false
tt.unit.hit_offset = v(0, 40)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, 30)
tt.unit.show_blood_pool = false
tt.unit.size = UNIT_SIZE_LARGE
tt.sound_transform_in = "Stage11BossCorruptedDenasTransformationIn"
tt.sound_transform_out = "Stage11BossCorruptedDenasTransformationOut"
tt = E:register_t("boss_cult_leader", "boss")

E:add_comps(tt, "melee", "timed_attacks", "glare_kr5")

b = balance.enemies.void_beyond.boss_cult_leader
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.boss_cult_leader.update
tt.motion.max_speed = b.speed
tt.enemy.lives_cost = 999
tt.enemy.melee_slot = v(40, 0)
tt.health.armor = b.close_armor
tt.health.magic_armor = b.close_magic_armor
tt.health.dead_lifetime = 100
tt.health.hp_max = b.hp
tt.health_bar.offset = v(0, 100)
tt.health_bar.type = HEALTH_BAR_SIZE_LARGE
tt.render.sprites[1].prefix = "mutamydriasDef"
tt.render.sprites[1].exo = true
tt.render.sprites[1].flip_x = false
tt.render.sprites[1].angles = {}
tt.render.sprites[1].angles.idle = {
	"walk",
	"walk",
	"walk"
}
tt.info.i18n_key = "ENEMY_BOSS_CULT_LEADER"
tt.info.portrait_boss = "boss_health_bar_icon_0003"
tt.info.portrait = "gui_bottom_info_image_enemies_0040"
tt.melee.attacks[1] = E:clone_c("melee_attack")
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min
tt.melee.attacks[1].hit_time = fts(17)
tt.melee.attacks[1].damage_radius = b.melee_attack.damage_radius
tt.melee.attacks[1].damage_type = bor(b.melee_attack.damage_type, DAMAGE_NO_DODGE)
tt.melee.attacks[1].hit_fx_offset = v(20, -20)
tt.melee.attacks[2] = E:clone_c("area_attack")
tt.melee.attacks[2].animation = "areaattack"
tt.melee.attacks[2].cooldown = b.area_attack.cooldown
tt.melee.attacks[2].damage_max = b.area_attack.damage_max
tt.melee.attacks[2].damage_min = b.area_attack.damage_min
tt.melee.attacks[2].hit_time = fts(17)
tt.melee.attacks[2].damage_radius = b.area_attack.damage_radius
tt.melee.attacks[2].damage_type = bor(b.area_attack.damage_type, DAMAGE_NO_DODGE)
tt.melee.attacks[2].min_count = b.area_attack.min_count
tt.melee.attacks[2].hit_fx = "fx_stage_15_boss_cult_leader_ray"
tt.melee.attacks[2].hit_decal = "decal_stage_15_boss_cult_leader_ray"
tt.melee.attacks[2].hit_decal_offset = v(80, 0)
tt.melee.attacks[2].sound = "Stage15MydriasRay"
tt.life_threshold_teleport = b.life_threshold_teleport
tt.teleport_away_duration = b.life_threshold_teleport.away_duration
tt.teleport_pos = {
	v(746, 444),
	v(695, 290),
	v(460, 350)
}
tt.teleport_path = {
	2,
	4,
	3
}
tt.cult_leader_template_name = "controller_stage_15_cult_leader_tower"
tt.glare_template_name = "controller_terrain_3_stage_15_glare"
tt.ui.click_rect = r(-35, 0, 70, 80)
tt.unit.can_explode = false
tt.unit.hit_offset = v(0, 40)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, 30)
tt.unit.show_blood_pool = false
tt.unit.size = UNIT_SIZE_LARGE
tt.sound_transform_in = "Stage11BossCorruptedDenasTransformationIn"
tt.sound_transform_out = "Stage11BossCorruptedDenasTransformationOut"
tt.sound_burrow_in = "Stage15MydriasBurrowIn"
tt.sound_burrow_out = "Stage15MydriasBurrowOut"
tt.sound_uncloak = "Stage15MydriasUncloak"
tt.block_attack = {}
tt.block_attack.delay = fts(20)
tt.block_attack.damage_min = b.block_attack.damage_min
tt.block_attack.damage_max = b.block_attack.damage_max
tt.block_attack.damage_type = b.block_attack.damage_type
tt.block_attack.radius = b.block_attack.radius
tt.block_attack.vis = 0
tt.block_attack.bans = bor(F_FLYING)
tt.block_attack.min_targets = 1
tt.open_armor = b.open_armor
tt.close_armor = b.close_armor
tt.open_magic_armor = b.open_magic_armor
tt.close_magic_armor = b.close_magic_armor
tt.time_death = 3
tt.glare_kr5.regen_hp = b.glare.regen_hp
tt.denas_ray_resistance = b.denas_ray_resistance

tt = E:register_t("boss_navira", "boss")

E:add_comps(tt, "melee", "corruption_kr5", "tween")

b = balance.enemies.undying_hatred.boss_navira
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.boss_navira.update
tt.motion.max_speed = b.speed
tt.enemy.lives_cost = 999
tt.enemy.melee_slot = v(40, 0)
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health.dead_lifetime = 100
tt.health.hp_max = b.hp
tt.health_bar.offset = v(0, 70)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM_LARGE
tt.render.sprites[1].prefix = "navira_navira"
tt.render.sprites[1].animated = true
tt.render.sprites[1].angles = {}
tt.render.sprites[1].angles.idle = {
	"idle",
	"idle"
}
tt.render.sprites[1].angles.walk = {
	"idle",
	"idle"
}
tt.render.sprites[1].flip_x = true
tt.render.sprites[1].z = Z_OBJECTS_COVERS + 1
tt.info.i18n_key = "ENEMY_BOSS_NAVIRA"
tt.info.portrait_boss = "boss_health_bar_icon_0005"
tt.info.portrait = "gui_bottom_info_image_enemies_0054"
tt.melee.attacks[1] = E:clone_c("area_attack")
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min
tt.melee.attacks[1].damage_radius = b.melee_attack.damage_radius
tt.melee.attacks[1].hit_time = fts(20)
tt.melee.attacks[1].damage_type = bor(b.melee_attack.damage_type, DAMAGE_NO_DODGE)
tt.melee.attacks[1].hit_fx_offset = v(15, -10)
tt.melee.attacks[1].animation = "attack"
tt.melee.attacks[1].hit_offset = v(20, 0)
tt.ui.click_rect = r(-35, 0, 70, 80)
tt.unit.can_explode = false
tt.unit.hit_offset = v(0, 40)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, 30)
tt.unit.show_blood_pool = false
tt.unit.size = UNIT_SIZE_LARGE
tt.vis.flags = bor(F_ENEMY, F_BOSS)
tt.vis.bans = bor(F_STUN)
tt.tornado_hp_trigger = b.tornado.hp_trigger
tt.tornado_duration = b.tornado.duration
tt.tornado_speed_mult = b.tornado.speed_mult
tt.tornado_balls_count = b.tornado.fire_balls
tt.tornado_aura_t = "aura_boss_navira_tornado"
tt.fire_ball_bullet_t = "bullet_stage_19_navira_fire_ball_ray"
tt.corruption_kr5.enabled = false
tt.corruption_kr5.cooldown = b.corruption.cooldown
tt.corruption_kr5.hp = b.corruption.hp
tt.corruption_kr5.on_corrupt = scripts.boss_navira.on_corrupt
tt.tween.remove = false
tt.tween.props[1].name = "offset"
tt.tween.props[1].interp = "sine"
tt.tween.props[1].keys = {
	{
		0,
		v(43, 60)
	},
	{
		fts(30),
		v(0, 0)
	}
}
tt.mod_heal = "mod_bullet_stage_19_navira_heal"
tt.sound_transform_in = "Stage19NaviraTornadoIn"
tt.sound_transform_out = "Stage19NaviraTornadoOut"
tt.sound_death = "Stage19NaviraDeath"

tt = E:register_t("boss_machinist", "boss")

E:add_comps(tt, "ranged", "tween")

b = balance.enemies.hammer_and_anvil.boss_machinist
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.boss_machinist.update
tt.motion.max_speed = b.speed
tt.enemy.lives_cost = 999
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health.dead_lifetime = 100
tt.health.hp_max = b.hp
tt.health_bar.offset = v(0, 150)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM_LARGE
tt.flight_height = 80
tt.render.sprites[1].prefix = "dlcdwarfbossstage02Def"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].angles = {}
tt.render.sprites[1].angles.idle = {
	"run",
	"run"
}
tt.render.sprites[1].angles.walk = {
	"run",
	"run"
}
tt.render.sprites[1].z = Z_FLYING_HEROES
tt.render.sprites[1].offset = v(0, 500)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "decal_flying_hero_shadow"
tt.render.sprites[2].offset = v(0, 0)
tt.render.sprites[2].z = Z_DECALS + 1
tt.descend_duration = 2
tt.tween.remove = false
tt.tween.remove = false
tt.tween.props[1].keys = {
	{
		0,
		v(0, 500)
	},
	{
		tt.descend_duration,
		v(0, tt.flight_height)
	}
}
tt.tween.props[1].name = "offset"
tt.tween.props[1].interp = "sine"
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].keys = {
	{
		0,
		vv(3)
	},
	{
		tt.descend_duration,
		vv(1)
	}
}
tt.tween.props[2].name = "scale"
tt.tween.props[2].sprite_id = 2
tt.tween.props[2].interp = "sine"
tt.tween.props[3] = E:clone_c("tween_prop")
tt.tween.props[3].keys = {
	{
		0,
		0.1
	},
	{
		tt.descend_duration,
		255
	}
}
tt.tween.props[3].name = "alpha"
tt.tween.props[3].sprite_id = 2
tt.tween.props[3].interp = "sine"
tt.info.i18n_key = "ENEMY_BOSS_MACHINIST"
tt.info.portrait_boss = "boss_health_bar_icon_0006"
tt.info.portrait = "gui_bottom_info_image_enemies_0086"
tt.ranged.attacks[1] = E:clone_c("bullet_attack")
tt.ranged.attacks[1].cooldown = b.ranged_attack.cooldown
tt.ranged.attacks[1].shoot_time = fts(0)
tt.ranged.attacks[1].bullet = "bullet_boss_machinist"
tt.ranged.attacks[1].animation = "attackloop"
tt.ranged.attacks[1].min_range = b.ranged_attack.min_range
tt.ranged.attacks[1].max_range = b.ranged_attack.max_range
tt.ranged.attacks[1].vis_flags = bor(F_RANGED, F_AREA)
tt.ranged.attacks[1].vis_bans = bor(F_FLYING, F_ENEMY)
tt.ranged.attacks[1].bullet_start_offset = {
	v(0, tt.flight_height + 40),
	v(0, tt.flight_height + 40)
}
tt.ui.click_rect = r(-35, tt.flight_height - 20, 70, 70)
tt.unit.can_explode = false
tt.unit.hit_offset = v(8, tt.flight_height + 25)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, tt.flight_height + 20)
tt.unit.show_blood_pool = false
tt.unit.size = UNIT_SIZE_LARGE
tt.vis.flags = bor(F_ENEMY, F_BOSS, F_FLYING)
tt.vis.bans = bor(F_BLOCK, F_STUN)
tt.sound_death = "Stage24Outro"
tt.stop_cooldown = b.stop_cooldown
tt.attacks_count = b.attacks_count
tt.burn_aura_t = "aura_boss_machinist_burn"
tt.death_smoke_fx = "fx_boss_machinist_death_smoke"
tt.death_particle_fx = "fx_boss_machinist_death_particle"
tt = E:register_t("boss_deformed_grymbeard", "boss")
b = balance.enemies.hammer_and_anvil.boss_deformed_grymbeard
tt.motion.max_speed = 0
tt.enemy.lives_cost = 999
tt.health.immune_to = DAMAGE_ALL
tt.clones_to_die = b.clones_to_die
tt.main_script.update = scripts.boss_deformed_grymbeard.update
tt.on_clone_death_f = scripts.boss_deformed_grymbeard.on_clone_death
tt.render.sprites[1].hidden = true
tt.info.i18n_key = "ENEMY_BOSS_DEFORMED_GRYMBEARD"
tt.info.portrait_boss = "boss_health_bar_icon_0007"
tt.ui.click_rect = r(0, 0, 0, 0)
tt.ui.can_click = false
tt.vis.flags = bor(F_ENEMY, F_BOSS)
tt.vis.bans = bor(F_ALL)
tt.sound_damage = "Stage26BFGrymbeardDamaged"
tt.sound_death = "Stage19NaviraDeath"
tt.boss_decal_t = "decal_stage_26_boss"
tt = E:register_t("boss_grymbeard", "boss")

E:add_comps(tt, "melee", "ranged")

b = balance.enemies.hammer_and_anvil.boss_grymbeard
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.boss_grymbeard.update
tt.motion.max_speed = b.speed
tt.enemy.lives_cost = 999
tt.enemy.melee_slot = v(40, 0)
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health.dead_lifetime = 100
tt.health.hp_max = b.hp
tt.health_bar.offset = v(0, 110)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM_LARGE
tt.render.sprites[1].prefix = "dclenanos_stage05_grymbossDef"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].angles = {}
tt.render.sprites[1].angles.idle = {
	"idle",
	"idle"
}
tt.render.sprites[1].angles.walk = {
	"walkside",
	"walkdown",
	"walkdown"
}
tt.render.sprites[1].flip_x = true
tt.render.sprites[1].z = Z_OBJECTS
tt.info.i18n_key = "ENEMY_BOSS_GRYMBEARD"
tt.info.portrait_boss = "boss_health_bar_icon_0009"
tt.info.portrait = "gui_bottom_info_image_enemies_0088"
tt.melee.attacks[1] = E:clone_c("area_attack")
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min
tt.melee.attacks[1].damage_radius = b.melee_attack.damage_radius
tt.melee.attacks[1].hit_time = fts(27)
tt.melee.attacks[1].damage_type = bor(b.melee_attack.damage_type, DAMAGE_NO_DODGE)
tt.melee.attacks[1].hit_fx_offset = v(15, -10)
tt.melee.attacks[1].animation = "melee"
tt.melee.attacks[1].hit_decal = "decal_boss_grymbeard_area_attack"
tt.melee.attacks[1].hit_offset = v(60, 0)
tt.melee.attacks[1].sound = "Stage27BFGrymbeardMeleeAttack"
tt.ranged.attacks[1] = E:clone_c("bullet_attack")
tt.ranged.attacks[1].cooldown = b.ranged_attack.cooldown
tt.ranged.attacks[1].shoot_time = fts(25)
tt.ranged.attacks[1].bullet = "bullet_boss_grymbeard"
tt.ranged.attacks[1].animation = "ranged"
tt.ranged.attacks[1].min_range = b.ranged_attack.min_range
tt.ranged.attacks[1].max_range = b.ranged_attack.max_range
tt.ranged.attacks[1].vis_flags = bor(F_RANGED, F_AREA)
tt.ranged.attacks[1].vis_bans = bor(F_FLYING, F_ENEMY)
tt.ranged.attacks[1].bullet_start_offset = {
	v(-35, 125),
	v(35, 125)
}
tt.ui.click_rect = r(-40, 0, 80, 85)
tt.unit.can_explode = false
tt.unit.hit_offset = v(0, 30)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, 60)
tt.unit.blood_color = BLOOD_GRAY
tt.unit.show_blood_pool = false
tt.unit.size = UNIT_SIZE_LARGE
tt.vis.flags = bor(F_ENEMY, F_BOSS)
tt.vis.bans = bor(F_STUN)
tt.death_bullet_clone = "bullet_boss_grymbeard_death_clone"
tt.death_bullet_boss = "bullet_boss_grymbeard_death_boss"
tt.death_bullet_scrap = "bullet_boss_grymbeard_death_scrap_"
tt.sound_death = "Stage27BFGrymbeardDeath"

tt = E:register_t("soldier_hero_space_elf_astral_reflection", "soldier_militia")

E:add_comps(tt, "melee", "ranged", "reinforcement", "tween", "transfer", "timed_attacks")

b = balance.heroes.hero_space_elf
tt.info.i18n_key = "HERO_SPACE_ELF_ASTRAL_REFLECTION_ENTITY"
tt.info.enc_icon = 12
tt.info.portrait = "portraits_hero_0002ar"
tt.info.fn = scripts.soldier_reinforcement.get_info
tt.info.random_name_format = nil
tt.info.damage_icon = "magic"
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].prefix = "hero_therien_reflection"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].angles.walk = {
	"ability3"
}
tt.unit.hit_offset = v(0, 16)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.health_bar.offset = v(0, 38)
tt.main_script.insert = scripts.soldier_reinforcement.insert
tt.main_script.update = scripts.soldier_hero_space_elf_astral_reflection.update
tt.regen.cooldown = 1
tt.idle_flip.last_animation = "idle"
tt.vis.bans = bor(F_SKELETON, F_CANNIBALIZE)
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	}
}
tt.tween.props[1].name = "alpha"
tt.tween.remove = false
tt.tween.reverse = false
tt.tween.disabled = true
tt.melee.range = b.astral_reflection.entity.range
tt.melee.attacks[1].vis_bans = bor(F_FLYING, F_CLIFF, F_WATER)
tt.melee.attacks[1].vis_flags = F_BLOCK
tt.melee.attacks[1].damage_type = b.astral_reflection.entity.basic_melee.damage_type
tt.melee.attacks[1].cooldown = b.astral_reflection.entity.basic_melee.cooldown
tt.melee.attacks[1].hit_time = fts(8)
tt.melee.attacks[1].animation = "ability1"
tt.melee.attacks[1].hit_fx = "fx_hero_space_elf_melee_hit"
tt.melee.attacks[1].hit_offset = v(27, 15)
tt.ranged.attacks[1] = E:clone_c("bullet_attack")
tt.ranged.attacks[1].animation = "ability2"
tt.ranged.attacks[1].bullet = "bolt_hero_space_elf_basic_attack"
tt.ranged.attacks[1].bullet_start_offset = {
	v(-9, 42),
	v(9, 42)
}
tt.ranged.attacks[1].cooldown = b.astral_reflection.entity.basic_ranged.cooldown
tt.ranged.attacks[1].max_range = b.astral_reflection.entity.basic_ranged.max_range
tt.ranged.attacks[1].min_range = b.astral_reflection.entity.basic_ranged.min_range
tt.ranged.attacks[1].shoot_time = fts(10)
tt.ranged.attacks[1].vis_bans = bor(F_NIGHTMARE)
tt.ranged.attacks[1].vis_flags = bor(F_RANGED)
tt.ranged.attacks[1].xp_gain_factor = b.basic_ranged.xp_gain_factor
tt.reinforcement.duration = b.astral_reflection.entity.duration
tt.reinforcement.fade = nil
tt.reinforcement.fade_out = nil
tt.unit.fade_time_after_death = nil
tt.ui.click_rect = r(-20, -5, 40, 50)
tt.health.dead_lifetime = fts(15)
tt.spawn_fx = "fx_hero_space_elf_astral_reflection_spawn"
tt = E:register_t("soldier_hero_space_elf_astral_reflection_1", "soldier_hero_space_elf_astral_reflection")
b = balance.heroes.hero_space_elf
tt.health.hp_max = b.astral_reflection.entity.hp_max[1]
tt.melee.attacks[1].damage_min = b.astral_reflection.entity.basic_melee.damage_min[1]
tt.melee.attacks[1].damage_max = b.astral_reflection.entity.basic_melee.damage_max[1]
tt.ranged.attacks[1].damage_min = b.astral_reflection.entity.basic_ranged.damage_min[1]
tt.ranged.attacks[1].damage_max = b.astral_reflection.entity.basic_ranged.damage_max[1]
tt = E:register_t("soldier_hero_space_elf_astral_reflection_2", "soldier_hero_space_elf_astral_reflection")
b = balance.heroes.hero_space_elf
tt.health.hp_max = b.astral_reflection.entity.hp_max[2]
tt.melee.attacks[1].damage_min = b.astral_reflection.entity.basic_melee.damage_min[2]
tt.melee.attacks[1].damage_max = b.astral_reflection.entity.basic_melee.damage_max[2]
tt.ranged.attacks[1].damage_min = b.astral_reflection.entity.basic_ranged.damage_min[2]
tt.ranged.attacks[1].damage_max = b.astral_reflection.entity.basic_ranged.damage_max[2]
tt = E:register_t("soldier_hero_space_elf_astral_reflection_3", "soldier_hero_space_elf_astral_reflection")
b = balance.heroes.hero_space_elf
tt.health.hp_max = b.astral_reflection.entity.hp_max[3]
tt.melee.attacks[1].damage_min = b.astral_reflection.entity.basic_melee.damage_min[3]
tt.melee.attacks[1].damage_max = b.astral_reflection.entity.basic_melee.damage_max[3]
tt.ranged.attacks[1].damage_min = b.astral_reflection.entity.basic_ranged.damage_min[3]
tt.ranged.attacks[1].damage_max = b.astral_reflection.entity.basic_ranged.damage_max[3]
tt = E:register_t("hero5", "hero")
tt.relic_slot = {}
tt.relic_slot.relid_id = nil
tt.hero.tombstone_concurrent_with_death = nil
tt.hero.tombstone_force_over_path = nil
tt.hero.tombstone_respawn_animation = nil
tt.hero.respawn_animation = "respawn"
tt = E:register_t("hero_space_elf", "hero5")
b = balance.heroes.hero_space_elf

E:add_comps(tt, "melee", "ranged", "teleport", "transfer", "timed_attacks")

tt.hero.level_stats.armor = b.armor
tt.hero.level_stats.hp_max = b.hp_max
tt.hero.level_stats.melee_damage_max = b.basic_melee.damage_max
tt.hero.level_stats.melee_damage_min = b.basic_melee.damage_min
tt.hero.level_stats.ranged_damage_max = b.basic_ranged.damage_max
tt.hero.level_stats.ranged_damage_min = b.basic_ranged.damage_min
tt.hero.level_stats.regen_health = b.regen_health
tt.hero.skills.astral_reflection = E:clone_c("hero_skill")
tt.hero.skills.astral_reflection.cooldown = b.astral_reflection.cooldown
tt.hero.skills.astral_reflection.duration = b.astral_reflection.duration
tt.hero.skills.astral_reflection.hr_available = b.astral_reflection.available
tt.hero.skills.astral_reflection.hr_icon = "0016"
tt.hero.skills.astral_reflection.hr_order = 1
tt.hero.skills.astral_reflection.hr_cost = {
	3,
	2,
	1
}
tt.hero.skills.astral_reflection.xp_gain = b.astral_reflection.xp_gain
tt.hero.skills.astral_reflection.key = "ASTRAL_REFLECTION"
tt.hero.skills.black_aegis = E:clone_c("hero_skill")
tt.hero.skills.black_aegis.cooldown = b.black_aegis.cooldown
tt.hero.skills.black_aegis.duration = b.black_aegis.duration
tt.hero.skills.black_aegis.shield_base = b.black_aegis.shield_base
tt.hero.skills.black_aegis.explosion_damage = b.black_aegis.explosion_damage
tt.hero.skills.black_aegis.hr_available = true
tt.hero.skills.black_aegis.hr_icon = "0017"
tt.hero.skills.black_aegis.hr_order = 2
tt.hero.skills.black_aegis.hr_cost = {
	1,
	1,
	1
}
tt.hero.skills.black_aegis.xp_gain = b.black_aegis.xp_gain
tt.hero.skills.black_aegis.key = "BLACK_AEGIS"
tt.hero.skills.void_rift = E:clone_c("hero_skill")
tt.hero.skills.void_rift.cooldown = b.void_rift.cooldown
tt.hero.skills.void_rift.duration = b.void_rift.duration
tt.hero.skills.void_rift.damage_min = b.void_rift.damage_min
tt.hero.skills.void_rift.damage_max = b.void_rift.damage_max
tt.hero.skills.void_rift.cracks_amount = b.void_rift.cracks_amount
tt.hero.skills.void_rift.hr_available = true
tt.hero.skills.void_rift.hr_icon = "0020"
tt.hero.skills.void_rift.hr_order = 3
tt.hero.skills.void_rift.hr_cost = {
	3,
	3,
	3
}
tt.hero.skills.void_rift.xp_gain = b.void_rift.xp_gain
tt.hero.skills.void_rift.key = "VOID_RIFT"
tt.hero.skills.spatial_distortion = E:clone_c("hero_skill")
tt.hero.skills.spatial_distortion.cooldown = b.spatial_distortion.cooldown
tt.hero.skills.spatial_distortion.duration = b.spatial_distortion.duration
tt.hero.skills.spatial_distortion.range_factor = b.spatial_distortion.range_factor
tt.hero.skills.spatial_distortion.hr_available = true
tt.hero.skills.spatial_distortion.hr_icon = "0019"
tt.hero.skills.spatial_distortion.hr_order = 4
tt.hero.skills.spatial_distortion.hr_cost = {
	2,
	2,
	2
}
tt.hero.skills.spatial_distortion.xp_gain = b.spatial_distortion.xp_gain
tt.hero.skills.spatial_distortion.key = "SPATIAL_DISTORTION"
tt.hero.skills.ultimate = E:clone_c("hero_skill")
tt.hero.skills.ultimate.controller_name = "controller_hero_space_elf_ultimate"
tt.hero.skills.ultimate.cooldown = b.ultimate.cooldown
tt.hero.skills.ultimate.duration = b.ultimate.duration
tt.hero.skills.ultimate.damage = b.ultimate.damage
tt.hero.skills.ultimate.hr_available = true
tt.hero.skills.ultimate.hr_icon = "0018"
tt.hero.skills.ultimate.hr_order = 5
tt.hero.skills.ultimate.hr_cost = {
	1,
	4,
	4,
	4
}
tt.hero.skills.ultimate.key = "COSMIC_PRISON"
tt.hero.team = TEAM_DARK_ARMY
tt.health.dead_lifetime = b.dead_lifetime
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.hero.fn_level_up = scripts.hero_space_elf.level_up
tt.info.fn = scripts.hero_basic.get_info_ranged_with_damage_factor
tt.info.hero_portrait = "hero_portraits_0005"
tt.info.i18n_key = "HERO_SPACE_ELF"
tt.info.portrait = "portraits_hero_0002"
tt.info.ultimate_icon = "0002"
tt.info.stat_hp = b.stats.hp
tt.info.stat_armor = b.stats.armor
tt.info.stat_damage = b.stats.damage
tt.info.stat_cooldown = b.stats.cooldown
tt.info.damage_icon = "magic"
tt.main_script.insert = scripts.hero_space_elf.insert
tt.main_script.update = scripts.hero_space_elf.update
tt.motion.max_speed = b.speed
tt.regen.cooldown = b.regen_cooldown
tt.render.sprites[1].angles = {}
tt.render.sprites[1].angles.walk = {
	"walk"
}
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].prefix = "hero_therien_therien"
tt.render.sprites[1].draw_order = DO_HEROES
tt.sound_events.change_rally_point = "HeroSpaceElfTaunt"
tt.sound_events.death = "HeroSpaceElfDeath"
tt.sound_events.respawn = "HeroSpaceElfTauntIntro"
tt.sound_events.hero_room_select = "HeroSpaceElfTauntSelect"
tt.teleport.min_distance = b.teleport_min_distance
tt.teleport.sound_in = "HeroSpaceElfTeleportIn"
tt.teleport.sound_out = "HeroSpaceElfTeleportOut"
tt.teleport.animations = {
	"out",
	"in"
}
tt.transfer.animations = {
	"to_walk",
	"walk",
	"to_idle"
}
tt.transfer.extra_speed = 0
tt.soldier.melee_slot_offset = v(10, 0)
tt.health_bar.offset = v(0, 38)
tt.unit.hit_offset = v(0, 13)
tt.unit.mod_offset = v(0, 13)
tt.unit.marker_offset = v(0, 0)
tt.ui.click_rect = r(-17, -5, 37, 40)
tt.melee.range = 72.5
tt.melee.attacks[1] = E:clone_c("melee_attack")
tt.melee.attacks[1].cooldown = b.basic_melee.cooldown
tt.melee.attacks[1].hit_time = fts(10)
tt.melee.attacks[1].hit_fx = "fx_hero_space_elf_melee_hit"
tt.melee.attacks[1].sound = "HeroBuilderBasicAttack"
tt.melee.attacks[1].sound_args = {
	delay = fts(14)
}
tt.melee.attacks[1].xp_gain_factor = b.basic_melee.xp_gain_factor
tt.melee.attacks[1].hit_offset = v(27, 15)
tt.melee.attacks[1].animation = "ability1"
tt.melee.attacks[1].basic_attack = true
tt.ranged.attacks[1] = E:clone_c("bullet_attack")
tt.ranged.attacks[1].animation = "ability2"
tt.ranged.attacks[1].bullet = "bolt_hero_space_elf_basic_attack"
tt.ranged.attacks[1].bullet_start_offset = {
	v(-9, 42),
	v(9, 42)
}
tt.ranged.attacks[1].cooldown = b.basic_ranged.cooldown
tt.ranged.attacks[1].max_range = b.basic_ranged.max_range
tt.ranged.attacks[1].min_range = b.basic_ranged.min_range
tt.ranged.attacks[1].shoot_time = fts(10)
tt.ranged.attacks[1].vis_bans = bor(F_NIGHTMARE)
tt.ranged.attacks[1].vis_flags = bor(F_RANGED)
tt.ranged.attacks[1].xp_gain_factor = b.basic_ranged.xp_gain_factor
tt.ranged.attacks[1].basic_attack = true
tt.timed_attacks.list[1] = E:clone_c("custom_attack")
tt.timed_attacks.list[1].cooldown = nil
tt.timed_attacks.list[1].animation = "ability5"
tt.timed_attacks.list[1].max_range = b.astral_reflection.max_range
tt.timed_attacks.list[1].xp_gain_factor = b.basic_ranged.xp_gain_factor
tt.timed_attacks.list[1].vis_flags = bor(F_RANGED)
tt.timed_attacks.list[1].vis_bans = bor(F_FRIEND)
tt.timed_attacks.list[1].damage_type = b.basic_ranged.damage_type
tt.timed_attacks.list[1].cast_time = fts(6)
tt.timed_attacks.list[1].entity = nil
tt.timed_attacks.list[1].entity_prefix = "soldier_hero_space_elf_astral_reflection"
tt.timed_attacks.list[1].disabled = true
tt.timed_attacks.list[1].min_cooldown = 1
tt.timed_attacks.list[1].sound = "HeroSpaceElfAstralReflection"
tt.timed_attacks.list[2] = E:clone_c("mod_attack")
tt.timed_attacks.list[2].animation = "ability3"
tt.timed_attacks.list[2].cooldown = nil
tt.timed_attacks.list[2].range = b.black_aegis.range
tt.timed_attacks.list[2].mod = "mod_hero_space_elf_black_aegis"
tt.timed_attacks.list[2].disabled = true
tt.timed_attacks.list[2].cast_time = fts(8)
tt.timed_attacks.list[2].xp_from_skill = "black_aegis"
tt.timed_attacks.list[2].vis_bans = bor(F_FLYING)
tt.timed_attacks.list[2].min_cooldown = 1
tt.timed_attacks.list[2].sound = "HeroSpaceElfBlackAegis"
tt.timed_attacks.list[3] = E:clone_c("aura_attack")
tt.timed_attacks.list[3].animation = "ability6"
tt.timed_attacks.list[3].cooldown = nil
tt.timed_attacks.list[3].aura = "aura_hero_space_elf_void_rift"
tt.timed_attacks.list[3].max_range_trigger = b.void_rift.max_range_trigger
tt.timed_attacks.list[3].max_range_effect = b.void_rift.max_range_effect
tt.timed_attacks.list[3].min_targets = b.void_rift.min_targets
tt.timed_attacks.list[3].cast_time = fts(32)
tt.timed_attacks.list[3].xp_from_skill = "void_rift"
tt.timed_attacks.list[3].vis_flags = bor(F_RANGED)
tt.timed_attacks.list[3].vis_bans = bor(F_FLYING, F_CLIFF, F_WATER)
tt.timed_attacks.list[3].predict = fts(30)
tt.timed_attacks.list[3].disabled = true
tt.timed_attacks.list[3].cracks_distance = 4
tt.timed_attacks.list[3].border_cracks_distance = 2
tt.timed_attacks.list[3].crack_offset = 4
tt.timed_attacks.list[3].cast_decal = "decal_hero_space_elf_void_rift_therien"
tt.timed_attacks.list[3].min_cooldown = 1
tt.timed_attacks.list[3].sound = "HeroSpaceElfVoidRift"
tt.timed_attacks.list[4] = E:clone_c("custom_attack")
tt.timed_attacks.list[4].animation = "ability4"
tt.timed_attacks.list[4].cooldown = nil
tt.timed_attacks.list[4].cast_time = fts(11)
tt.timed_attacks.list[4].xp_from_skill = "spatial_distortion"
tt.timed_attacks.list[4].mod = "mod_hero_space_elf_spatial_distortion"
tt.timed_attacks.list[4].disabled = true
tt.timed_attacks.list[4].excluded_templates = {}
tt.timed_attacks.list[4].exclude_tower_kind = {
	TOWER_KIND_BARRACK
}
tt.timed_attacks.list[4].min_cooldown = 1
tt.timed_attacks.list[4].sound = "HeroSpaceElfSpatialDistortion"
tt = E:register_t("hero_muyrn", "hero5")
b = balance.heroes.hero_muyrn

E:add_comps(tt, "melee", "ranged", "timed_attacks")

tt.hero.level_stats.armor = b.armor
tt.hero.level_stats.hp_max = b.hp_max
tt.hero.level_stats.melee_damage_max = b.basic_melee.damage_max
tt.hero.level_stats.melee_damage_min = b.basic_melee.damage_min
tt.hero.level_stats.ranged_damage_max = b.basic_ranged.damage_max
tt.hero.level_stats.ranged_damage_min = b.basic_ranged.damage_min
tt.hero.level_stats.regen_health = b.regen_health
tt.hero.skills.sentinel_wisps = E:clone_c("hero_skill")
tt.hero.skills.sentinel_wisps.cooldown = b.sentinel_wisps.cooldown
tt.hero.skills.sentinel_wisps.max_summons = b.sentinel_wisps.max_summons
tt.hero.skills.sentinel_wisps.wisp_damage_max = b.sentinel_wisps.wisp.damage_max
tt.hero.skills.sentinel_wisps.wisp_damage_min = b.sentinel_wisps.wisp.damage_min
tt.hero.skills.sentinel_wisps.wisp_duration = b.sentinel_wisps.wisp.duration
tt.hero.skills.sentinel_wisps.hr_available = true
tt.hero.skills.sentinel_wisps.hr_icon = "0012"
tt.hero.skills.sentinel_wisps.hr_order = 1
tt.hero.skills.sentinel_wisps.hr_cost = {
	2,
	2,
	2
}
tt.hero.skills.sentinel_wisps.xp_gain = b.sentinel_wisps.xp_gain
tt.hero.skills.sentinel_wisps.key = "SENTINEL_WISPS"
tt.hero.skills.verdant_blast = E:clone_c("hero_skill")
tt.hero.skills.verdant_blast.cooldown = b.verdant_blast.cooldown
tt.hero.skills.verdant_blast.damage_max = b.verdant_blast.damage_max
tt.hero.skills.verdant_blast.damage_min = b.verdant_blast.damage_min
tt.hero.skills.verdant_blast.hr_available = true
tt.hero.skills.verdant_blast.hr_icon = "0014"
tt.hero.skills.verdant_blast.hr_order = 2
tt.hero.skills.verdant_blast.hr_cost = {
	3,
	3,
	3
}
tt.hero.skills.verdant_blast.xp_gain = b.verdant_blast.xp_gain
tt.hero.skills.verdant_blast.key = "VERDANT_BLAST"
tt.hero.skills.leaf_whirlwind = E:clone_c("hero_skill")
tt.hero.skills.leaf_whirlwind.cooldown = b.leaf_whirlwind.cooldown
tt.hero.skills.leaf_whirlwind.duration = b.leaf_whirlwind.duration
tt.hero.skills.leaf_whirlwind.damage_max = b.leaf_whirlwind.damage_max
tt.hero.skills.leaf_whirlwind.damage_min = b.leaf_whirlwind.damage_min
tt.hero.skills.leaf_whirlwind.heal_min = b.leaf_whirlwind.heal_min
tt.hero.skills.leaf_whirlwind.heal_max = b.leaf_whirlwind.heal_max
tt.hero.skills.leaf_whirlwind.hr_available = true
tt.hero.skills.leaf_whirlwind.hr_icon = "0013"
tt.hero.skills.leaf_whirlwind.hr_order = 3
tt.hero.skills.leaf_whirlwind.hr_cost = {
	2,
	2,
	2
}
tt.hero.skills.leaf_whirlwind.xp_gain = b.leaf_whirlwind.xp_gain
tt.hero.skills.leaf_whirlwind.key = "LEAF_WHIRLWIND"
tt.hero.skills.faery_dust = E:clone_c("hero_skill")
tt.hero.skills.faery_dust.cooldown = b.faery_dust.cooldown
tt.hero.skills.faery_dust.damage_factor = b.faery_dust.damage_factor
tt.hero.skills.faery_dust.duration = b.faery_dust.duration
tt.hero.skills.faery_dust.hr_available = true
tt.hero.skills.faery_dust.hr_icon = "0011"
tt.hero.skills.faery_dust.hr_order = 4
tt.hero.skills.faery_dust.hr_cost = {
	1,
	1,
	1
}
tt.hero.skills.faery_dust.xp_gain = b.faery_dust.xp_gain
tt.hero.skills.faery_dust.key = "FAERY_DUST"
tt.hero.skills.ultimate = E:clone_c("hero_skill")
tt.hero.skills.ultimate.controller_name = "hero_muyrn_ultimate"
tt.hero.skills.ultimate.slow_factor = b.ultimate.slow_factor
tt.hero.skills.ultimate.damage_min = b.ultimate.damage_min
tt.hero.skills.ultimate.damage_max = b.ultimate.damage_max
tt.hero.skills.ultimate.hr_available = true
tt.hero.skills.ultimate.hr_icon = "0015"
tt.hero.skills.ultimate.hr_order = 5
tt.hero.skills.ultimate.hr_cost = {
	1,
	4,
	4,
	4
}
tt.hero.skills.ultimate.key = "ROOT_DEFENDER"
tt.hero.skills.ultimate.cooldown = b.ultimate.cooldown
tt.hero.skills.ultimate.entity = b.ultimate.entity
tt.hero.team = TEAM_LINIREA
tt.health.dead_lifetime = b.dead_lifetime
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.hero.fn_level_up = scripts.hero_muyrn.level_up
tt.info.fn = scripts.hero_basic.get_info_ranged_with_damage_factor
tt.info.hero_portrait = "hero_portraits_0003"
tt.info.i18n_key = "HERO_MUYRN"
tt.info.portrait = "portraits_hero" .. "_0005"
tt.info.ultimate_icon = "0003"
tt.info.stat_hp = b.stats.hp
tt.info.stat_armor = b.stats.armor
tt.info.stat_damage = b.stats.damage
tt.info.stat_cooldown = b.stats.cooldown
tt.info.damage_icon = "magic"
tt.main_script.insert = scripts.hero_muyrn.insert
tt.main_script.update = scripts.hero_muyrn.update
tt.motion.max_speed = b.speed
tt.regen.cooldown = b.regen_cooldown
tt.sound_events.change_rally_point = "HeroNyruTaunt"
tt.sound_events.death = "HeroNyruDeath"
tt.sound_events.respawn = "HeroNyruTauntIntro"
tt.sound_events.hero_room_select = "HeroNyruTauntSelect"
tt.soldier.melee_slot_offset = v(10, 0)
tt.health_bar.offset = v(0, 38)
tt.unit.hit_offset = v(0, 16)
tt.unit.mod_offset = v(0, 22)
tt.ui.click_rect = r(-25, -3, 50, 43)
tt.treewalk = {}
tt.treewalk.min_distance = b.distance_to_treewalk
tt.treewalk.extra_speed = b.treewalk_speed
tt.treewalk.animations = {
	"treewalk",
	"treewalk_end"
}
tt.treewalk.trail = "hero_muyrn_treewalk_trail"
tt.treewalk.sound = "HeroNyruTreewalk"
tt.render.sprites[1].prefix = "hero_nyru_muyrn"
tt.render.sprites[1].angles.ranged = {
	"shoot",
	"shootUp",
	"shoot"
}
tt.render.sprites[1].angles_custom = {
	ranged = {
		45,
		135,
		210,
		315
	}
}
tt.render.sprites[1].angles_flip_vertical = {
	ranged = true
}
tt.render.sprites[1].scale = v(1.15, 1.15)
tt.render.sprites[1].draw_order = DO_HEROES
tt.melee.range = balance.heroes.common.melee_attack_range
tt.melee.attacks[1] = E:clone_c("melee_attack")
tt.melee.attacks[1].cooldown = b.basic_melee.cooldown
tt.melee.attacks[1].hit_time = fts(9)
tt.melee.attacks[1].hit_fx = "hero_muyrn_melee_attack_hit_fx"
tt.melee.attacks[1].hit_offset = v(24, 0)
tt.melee.attacks[1].sound = "HeroNyruBasicAttackMelee"
tt.melee.attacks[1].xp_gain_factor = b.basic_melee.xp_gain_factor
tt.melee.attacks[1].basic_attack = true
tt.melee.attacks[1].animation = "melee_attack"
tt.ranged.attacks[1] = E:clone_c("bullet_attack")
tt.ranged.attacks[1].max_range = b.basic_ranged.max_range
tt.ranged.attacks[1].min_range = b.basic_ranged.min_range
tt.ranged.attacks[1].cooldown = b.basic_ranged.cooldown
tt.ranged.attacks[1].bullet = "hero_muyrn_bullet"
tt.ranged.attacks[1].bullet_start_offset = {
	v(12, 32)
}
tt.ranged.attacks[1].shoot_time = fts(7)
tt.ranged.attacks[1].vis_bans = bor(F_NIGHTMARE)
tt.ranged.attacks[1].animation = "ranged_attack"
tt.ranged.attacks[1].sound = "HeroNyruBasicAttackRanged"
tt.ranged.attacks[1].basic_attack = true
tt.timed_attacks.list[1] = E:clone_c("custom_attack")
tt.timed_attacks.list[1].animation = "sentinel_wisps"
tt.timed_attacks.list[1].cooldown = nil
tt.timed_attacks.list[1].max_summons = nil
tt.timed_attacks.list[1].max_range_trigger = b.sentinel_wisps.max_range_trigger
tt.timed_attacks.list[1].min_targets = b.sentinel_wisps.min_targets
tt.timed_attacks.list[1].disabled = true
tt.timed_attacks.list[1].cast_time = fts(6)
tt.timed_attacks.list[1].xp_from_skill = "sentinel_wisps"
tt.timed_attacks.list[1].sound = "HeroNyruSentinelWispsCast"
tt.timed_attacks.list[1].entity = "hero_muyrn_sentinel_wisps_entity"
tt.timed_attacks.list[2] = E:clone_c("custom_attack")
tt.timed_attacks.list[2].cooldown = nil
tt.timed_attacks.list[2].max_range_trigger = b.leaf_whirlwind.max_range_trigger
tt.timed_attacks.list[2].min_targets = b.leaf_whirlwind.min_targets
tt.timed_attacks.list[2].disabled = true
tt.timed_attacks.list[2].cast_time = fts(5)
tt.timed_attacks.list[2].xp_from_skill = "leaf_whirlwind"
tt.timed_attacks.list[2].sound = "HeroNyruLeafWhirlwindCast"
tt.timed_attacks.list[2].aura = "hero_muyrn_leaf_whirlwind_aura"
tt.timed_attacks.list[2].aura_decal = "hero_muyrn_leaf_whirlwind_decal"
tt.timed_attacks.list[2].mod = "hero_muyrn_leaf_whirlwind_heal_mod"
tt.timed_attacks.list[2].vis_flags = F_RANGED
tt.timed_attacks.list[2].vis_bans = bor(F_FLYING)
tt.timed_attacks.list[3] = E:clone_c("aura_attack")
tt.timed_attacks.list[3].animation = "fairy_dust"
tt.timed_attacks.list[3].cooldown = nil
tt.timed_attacks.list[3].max_range_trigger = b.faery_dust.max_range_trigger
tt.timed_attacks.list[3].max_range_effect = b.faery_dust.max_range_effect
tt.timed_attacks.list[3].min_targets = b.faery_dust.min_targets
tt.timed_attacks.list[3].disabled = true
tt.timed_attacks.list[3].cast_time = fts(10)
tt.timed_attacks.list[3].xp_from_skill = "faery_dust"
tt.timed_attacks.list[3].sound = "HeroNyruFairyDustCast"
tt.timed_attacks.list[3].aura = "aura_hero_muyrn_faery_dust"
tt.timed_attacks.list[3].vis_flags = F_RANGED
tt.timed_attacks.list[3].vis_bans = bor(F_FLYING)
tt.timed_attacks.list[3].node_prediction = fts(10)
tt.timed_attacks.list[4] = E:clone_c("bullet_attack")
tt.timed_attacks.list[4].disabled = true
tt.timed_attacks.list[4].max_range = b.verdant_blast.max_range
tt.timed_attacks.list[4].min_range = b.verdant_blast.min_range
tt.timed_attacks.list[4].cooldown = nil
tt.timed_attacks.list[4].bullet = "bullet_hero_muyrn_verdant_blast"
tt.timed_attacks.list[4].bullet_start_offset = v(-7, 50)
tt.timed_attacks.list[4].vis_bans = bor(F_NIGHTMARE)
tt.timed_attacks.list[4].vis_flags = F_RANGED
tt.timed_attacks.list[4].animation = "verdant_blast"
tt.timed_attacks.list[4].shoot_time = fts(43)
tt.timed_attacks.list[4].node_prediction = fts(43)
tt.timed_attacks.list[4].reset_to_target_pos = true
tt.timed_attacks.list[4].sound = "HeroNyruVerdantBlastCast"
tt = E:register_t("hero_muyrn_bullet", "bullet")

E:add_comps(tt, "force_motion")

tt.render.sprites[1].name = "hero_nyru_ranged_attack_projectile"
tt.render.sprites[1].animated = false
tt.bullet.damage_min = nil
tt.bullet.damage_max = nil
tt.bullet.hit_fx = "hero_muyrn_bolt_hit_fx"
tt.bullet.particles_name = "hero_muyrn_bullet_trail"
tt.bullet.miss_decal = nil
tt.bullet.vis_flags = F_RANGED
tt.bullet.vis_bans = 0
tt.bullet.xp_gain_factor = b.basic_ranged.xp_gain_factor
tt.bullet.damage_type = b.basic_ranged.damage_type
tt.bullet.max_speed = 300
tt.bullet.min_speed = 30
tt.bullet.use_unit_damage_factor = true
tt.initial_impulse = 15000
tt.initial_impulse_duration = 0.15
tt.initial_impulse_angle_abs = math.pi / 2
tt.force_motion.a_step = 5
tt.force_motion.max_a = 3000
tt.force_motion.max_v = 300
tt.main_script.update = scripts.hero_muyrn_ranged_attack_bullet.update
tt = E:register_t("hero_muyrn_melee_attack_hit_fx", "fx")
tt.render.sprites[1].name = "hero_nyru_ranged_attack_hit"
tt = E:register_t("hero_muyrn_bolt_hit_fx", "fx")
tt.render.sprites[1].name = "hero_nyru_ranged_attack_hit"
tt = E:register_t("hero_muyrn_bullet_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "hero_nyru_ranged_attack_particle"
tt.particle_system.animated = true
tt.particle_system.alphas = {
	255,
	0
}
tt.particle_system.particle_lifetime = {
	fts(16),
	fts(16)
}
tt.particle_system.scales_y = {
	0.8,
	0.8
}
tt.particle_system.scales_x = {
	0.8,
	0.8
}
tt.particle_system.emission_rate = 70
tt = E:register_t("hero_muyrn_sentinel_wisps_entity")

E:add_comps(tt, "main_script", "pos", "render", "force_motion", "ranged", "tween")

tt.duration = nil
tt.hero_max_distance = b.sentinel_wisps.wisp.hero_max_distance
tt.flight_height = 40
tt.force_motion.max_a = 135000
tt.force_motion.max_v = 300
tt.force_motion.ramp_radius = 10
tt.main_script.insert = scripts.hero_muyrn_sentinel_wisps_entity.insert
tt.main_script.update = scripts.hero_muyrn_sentinel_wisps_entity.update
tt.ranged.attacks[1].bullet = "hero_muyrn_sentinel_wisps_entity_bullet"
tt.ranged.attacks[1].shoot_time = fts(6)
tt.ranged.attacks[1].cooldown = b.sentinel_wisps.wisp.cooldown
tt.ranged.attacks[1].max_range = b.sentinel_wisps.wisp.shoot_range
tt.ranged.attacks[1].min_range = 0
tt.ranged.attacks[1].animation = "shoot"
tt.ranged.attacks[1].vis_flags = F_RANGED
tt.ranged.attacks[1].vis_bans = 0
tt.render.sprites[1].prefix = "hero_nyru_sentinel_wisps_wisp"
tt.render.sprites[1].name = "spawn"
tt.render.sprites[1].z = Z_FLYING_HEROES
tt.render.sprites[1].offset = v(0, tt.flight_height)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "decal_flying_shadow_hard"
tt.render.sprites[2].offset = v(0, 0)
tt.render.sprites[2].hidden = false
tt.render.sprites[2].scale = vv(0.5)
tt.flight_offset = 5
tt.attack_fx = "fx_hero_muyrn_sentinel_wisps_attack"
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	}
}
tt.tween.props[1].name = "alpha"
tt.tween.props[1].sprite_id = 2
tt.tween.remove = false
tt.tween.reverse = false
tt.tween.disabled = true
tt.hp = 40
tt.sound = "HeroNyruSentinelWispsSpawn"
tt = E:register_t("hero_muyrn_sentinel_wisps_entity_bullet", "bullet")
tt.image_width = 75
tt.main_script.update = scripts.ray_simple.update
tt.render.sprites[1].name = "hero_nyru_sentinel_wisps_ray"
tt.render.sprites[1].loop = false
tt.render.sprites[1].anchor = v(0.05, 0.5)
tt.bullet.damage_min = nil
tt.bullet.damage_max = nil
tt.bullet.damage_type = b.sentinel_wisps.wisp.damage_type
tt.bullet.hit_time = fts(4)
tt.bullet.hit_fx = "hero_muyrn_sentinel_wisps_hit_fx"
tt.sound_events.insert = "HeroNyruSentinelWispsShoot"
tt = E:register_t("hero_muyrn_sentinel_wisps_entity_bullet_fx_mod", "mod_track_target_fx")
tt.render.sprites[1].name = "hero_nyru_sentinel_wisps_hit"
tt.render.sprites[1].loop = false
tt.render.sprites[1].hide_after_runs = 1
tt.modifier.duration = fts(11)
tt = E:register_t("hero_muyrn_verdant_blast_bolt_hit_fx", "fx")
tt.render.sprites[1].name = "hero_nyru_verdant_blast_explosion"
tt = E:register_t("hero_muyrn_verdant_blast_bolt_flying_hit_fx", "fx")
tt.render.sprites[1].name = "hero_nyru_verdant_blast_explosion_air"
tt = E:register_t("hero_muyrn_leaf_whirlwind_aura", "aura")
tt.aura.duration = nil
tt.aura.damage_min = nil
tt.aura.damage_max = nil
tt.aura.damage_type = b.leaf_whirlwind.damage_type
tt.aura.track_source = true
tt.aura.cycle_time = b.leaf_whirlwind.damage_every
tt.aura.radius = b.leaf_whirlwind.radius
tt.aura.vis_bans = bor(F_FLYING, F_FRIEND)
tt.aura.vis_flags = F_RANGED
tt.main_script.update = scripts.aura_apply_damage.update
tt.aura.mods = {
	"hero_muyrn_leaf_whirlwind_enemy_hit_fx_mod"
}
tt = E:register_t("hero_muyrn_leaf_whirlwind_enemy_hit_fx_mod", "modifier")

E:add_comps(tt, "render")

tt.render.sprites[1].name = "hero_nyru_leaf_whirlwind_hit"
tt.render.sprites[1].sort_y_offset = -1
tt.main_script.insert = scripts.mod_track_target.insert
tt.main_script.remove = scripts.mod_track_target.remove
tt.main_script.update = scripts.mod_track_target.update
tt.modifier.duration = fts(20)
tt = E:register_t("hero_muyrn_leaf_whirlwind_heal_mod", "modifier")

E:add_comps(tt, "hps")

tt.modifier.duration = nil
tt.hps.heal_min = nil
tt.hps.heal_max = nil
tt.hps.heal_every = b.leaf_whirlwind.heal_every
tt.main_script.insert = scripts.mod_track_target.insert
tt.main_script.update = scripts.mod_hps.update
tt = E:register_t("hero_muyrn_leaf_whirlwind_decal", "decal_scripted")

E:add_comps(tt, "render", "sound_events")

tt.main_script.update = scripts.hero_muyrn_leaf_whirlwind_decal.update
tt.render.sprites[1].prefix = "hero_nyru_leaf_whirlwind"
tt.render.sprites[1].name = "start"
tt.render.sprites[1].draw_order = DO_MOD_FX
tt.duration = nil
tt = E:register_t("hero_muyrn_ultimate")

E:add_comps(tt, "pos", "main_script", "sound_events")

tt.can_fire_fn = scripts.hero_muyrn_ultimate.can_fire_fn
tt.main_script.update = scripts.hero_muyrn_ultimate.update
tt.cooldown = nil
tt.aura = "aura_hero_muyrn_ultimate"
tt.aura_sides = "aura_hero_muyrn_ultimate_sides"
tt.sound_events.insert = nil
tt.sounds = {
	"HeroNyruRootDefenderStartLvl1",
	"HeroNyruRootDefenderStartLvl2",
	"HeroNyruRootDefenderStartLvl3"
}
tt = E:register_t("hero_lumenir", "hero5")

E:add_comps(tt, "ranged", "timed_attacks", "tween")

b = balance.heroes.hero_lumenir
tt.hero.level_stats.armor = b.armor
tt.hero.level_stats.hp_max = b.hp_max
tt.hero.level_stats.melee_damage_max = {
	1,
	2,
	4,
	4,
	5,
	6,
	7,
	8,
	9,
	10
}
tt.hero.level_stats.melee_damage_min = {
	1,
	2,
	3,
	4,
	5,
	6,
	7,
	8,
	9,
	10
}
tt.hero.level_stats.regen_health = b.regen_health
tt.hero.level_stats.ranged_damage_min = b.basic_ranged_shot.damage_min
tt.hero.level_stats.ranged_damage_max = b.basic_ranged_shot.damage_max
tt.hero.level_stats.mini_dragon_death_ranged_damage_min = b.mini_dragon_death.damage_min
tt.hero.level_stats.mini_dragon_death_ranged_damage_max = b.mini_dragon_death.damage_max
tt.hero.skills.shield = E:clone_c("hero_skill")
tt.hero.skills.shield.hr_cost = {
	1,
	1,
	1
}
tt.hero.skills.shield.hr_icon = "0041"
tt.hero.skills.shield.hr_order = 3
tt.hero.skills.shield.hr_available = true
tt.hero.skills.shield.spiked_armor = b.shield.spiked_armor
tt.hero.skills.shield.armor = b.shield.armor
tt.hero.skills.shield.duration = b.shield.duration
tt.hero.skills.shield.cooldown = b.shield.cooldown
tt.hero.skills.shield.xp_gain = b.shield.xp_gain
tt.hero.skills.shield.key = "SHIELD"
tt.hero.skills.celestial_judgement = E:clone_c("hero_skill")
tt.hero.skills.celestial_judgement.cooldown = b.celestial_judgement.cooldown
tt.hero.skills.celestial_judgement.hr_cost = {
	3,
	3,
	3
}
tt.hero.skills.celestial_judgement.hr_icon = "0042"
tt.hero.skills.celestial_judgement.hr_order = 4
tt.hero.skills.celestial_judgement.hr_available = true
tt.hero.skills.celestial_judgement.xp_gain = b.celestial_judgement.xp_gain
tt.hero.skills.celestial_judgement.key = "CELESTIAL_JUDGEMENT"
tt.hero.skills.mini_dragon = E:clone_c("hero_skill")
tt.hero.skills.mini_dragon.cooldown = b.mini_dragon.cooldown
tt.hero.skills.mini_dragon.duration = b.mini_dragon.dragon.duration
tt.hero.skills.mini_dragon.hr_cost = {
	2,
	2,
	2
}
tt.hero.skills.mini_dragon.hr_icon = "0043"
tt.hero.skills.mini_dragon.hr_order = 2
tt.hero.skills.mini_dragon.hr_available = true
tt.hero.skills.mini_dragon.xp_gain = b.mini_dragon.xp_gain
tt.hero.skills.mini_dragon.damage_min = b.mini_dragon.dragon.ranged_attack.damage_min
tt.hero.skills.mini_dragon.damage_max = b.mini_dragon.dragon.ranged_attack.damage_max
tt.hero.skills.mini_dragon.key = "MINI_DRAGON"
tt.hero.skills.fire_balls = E:clone_c("hero_skill")
tt.hero.skills.fire_balls.cooldown = b.fire_balls.cooldown
tt.hero.skills.fire_balls.hr_cost = {
	2,
	2,
	2
}
tt.hero.skills.fire_balls.hr_icon = "0044"
tt.hero.skills.fire_balls.hr_order = 1
tt.hero.skills.fire_balls.hr_available = true
tt.hero.skills.fire_balls.flames_count = b.fire_balls.flames_count
tt.hero.skills.fire_balls.mod_damage = b.fire_balls.flame_damage
tt.hero.skills.fire_balls.xp_gain = b.fire_balls.xp_gain
tt.hero.skills.fire_balls.key = "FIRE_BALLS"
tt.hero.skills.ultimate = E:clone_c("hero_skill")
tt.hero.skills.ultimate.controller_name = "hero_lumenir_ultimate"
tt.hero.skills.ultimate.hr_available = false
tt.hero.skills.ultimate.hr_icon = "0006"
tt.hero.skills.ultimate.hr_order = 5
tt.hero.skills.ultimate.hr_cost = {
	1,
	4,
	4,
	4
}
tt.hero.skills.ultimate.hr_available = true
tt.hero.skills.ultimate.key = "ARROW_STORM"
tt.hero.skills.ultimate.count = b.ultimate.soldier_count
tt.hero.skills.ultimate.max_attack_count = b.ultimate.max_attack_count
tt.hero.skills.ultimate.damage_max = b.ultimate.damage_max
tt.hero.skills.ultimate.damage_min = b.ultimate.damage_min
tt.hero.skills.ultimate.cooldown = b.ultimate.cooldown
tt.hero.team = TEAM_LINIREA
tt.health.dead_lifetime = 30
tt.health_bar.draw_order = -1
tt.health_bar.offset = v(0, 170)
tt.health_bar.sort_y_offset = -171
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM_LARGE
tt.health_bar.z = Z_FLYING_HEROES
tt.hero.fn_level_up = scripts.hero_lumenir.level_up
tt.hero.tombstone_show_time = nil
tt.hero.use_custom_spawn_point = true
tt.idle_flip.cooldown = 10
tt.info.damage_icon = "magic"
tt.info.fn = scripts.hero_basic.get_info_ranged_with_damage_factor
tt.info.hero_portrait = "hero_portraits_0007"
tt.info.i18n_key = "HERO_LUMENIR"
tt.info.portrait = "portraits_hero" .. "_0007"
tt.info.ultimate_icon = "0006"
tt.info.ultimate_pointer_style = "area"
tt.info.stat_hp = b.stats.hp
tt.info.stat_armor = b.stats.armor
tt.info.stat_damage = b.stats.damage
tt.info.stat_cooldown = b.stats.cooldown
tt.main_script.insert = scripts.hero_lumenir.insert
tt.main_script.update = scripts.hero_lumenir.update
tt.motion.max_speed = b.speed
tt.nav_rally.requires_node_nearby = false
tt.nav_grid.ignore_waypoints = true
tt.all_except_flying_nowalk = bor(TERRAIN_NONE, TERRAIN_LAND, TERRAIN_WATER, TERRAIN_CLIFF, TERRAIN_NOWALK, TERRAIN_SHALLOW, TERRAIN_FAERIE, TERRAIN_ICE)
tt.nav_grid.valid_terrains = tt.all_except_flying_nowalk
tt.nav_grid.valid_terrains_dest = tt.all_except_flying_nowalk
tt.drag_line_origin_offset = v(0, 100)
tt.regen.cooldown = 1
tt.render.sprites[1].anchor.y = 0.065
tt.render.sprites[1].animated = true
tt.render.sprites[1].prefix = "hero_lumenir_hero"
tt.render.sprites[1].name = "respawn"
tt.render.sprites[1].angles.walk = {
	"walk"
}
tt.render.sprites[1].z = Z_FLYING_HEROES
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "hero_lumenir_hero_shadow"
tt.render.sprites[2].offset = v(0, 0)
tt.render.sprites[2].z = Z_DECALS + 1
tt.soldier.melee_slot_offset = v(0, 0)
tt.sound_events.change_rally_point = "HeroLumenirTaunt"
tt.sound_events.death = "HeroLumenirDeath"
tt.sound_events.respawn = "HeroLumenirTauntIntro"
tt.sound_events.hero_room_select = "HeroLumenirTauntSelect"
tt.ui.click_rect = r(-37, 68, 90, 85)
tt.unit.hit_offset = v(0, 110)
tt.unit.hide_after_death = true
tt.unit.mod_offset = v(0, 110)
tt.vis.bans = bor(tt.vis.bans, F_EAT, F_NET, F_POISON)
tt.vis.flags = bor(tt.vis.flags, F_FLYING)
tt.mini_dragon = "mini_dragon_death_hero_lumenir"
tt.ranged.attacks[1] = E:clone_c("bullet_attack")
tt.ranged.attacks[1].bullet = "bolt_lumenir"
tt.ranged.attacks[1].bullet_start_offset = {
	v(44, 80)
}
tt.ranged.attacks[1].cooldown = 1
tt.ranged.attacks[1].bullet_count = 3
tt.ranged.attacks[1].min_range = b.basic_ranged_shot.min_range
tt.ranged.attacks[1].max_range = b.basic_ranged_shot.max_range
tt.ranged.attacks[1].shoot_time = fts(14)
tt.ranged.attacks[1].sync_animation = true
tt.ranged.attacks[1].animation = "attack"
tt.ranged.attacks[1].start_fx = "fx_lumenir_start_attack"
tt.ranged.attacks[1].sound = "HeroLumenirBasicAttack"
tt.ranged.attacks[1].vis_bans = bor(F_NIGHTMARE)
tt.ranged.attacks[1].ignore_offset = v(0, 110)
tt.ranged.attacks[1].radius = 100
tt.ranged.attacks[1].basic_attack = true
tt.ranged.attacks[2] = E:clone_c("aura_attack")
tt.ranged.attacks[2].disabled = true
tt.ranged.attacks[2].mod = "mod_hero_dragon_shield"
tt.ranged.attacks[2].cooldown = 25
tt.ranged.attacks[2].animation = "hero_lumenir_hero_blessing_of_retribution"
tt.ranged.attacks[2].shoot_time = fts(12)
tt.ranged.attacks[2].min_count = b.shield.min_targets
tt.ranged.attacks[2].sync_animation = true
tt.ranged.attacks[2].animation = "blessing_of_retribution"
tt.ranged.attacks[2].start_fx = "fx_lumenir_start_lance"
tt.ranged.attacks[2].sound = "HeroLumenirBlessingOfRetributionCast"
tt.ranged.attacks[2].start_sound_args = {
	delay = fts(12)
}
tt.ranged.attacks[2].xp_from_skill = "shield"
tt.ranged.attacks[2].vis_flags = bor(F_RANGED, F_ENEMY, F_MOD)
tt.ranged.attacks[2].vis_bans = bor(F_ENEMY, F_FLYING)
tt.ranged.attacks[2].range = b.shield.range
tt.ranged.attacks[3] = E:clone_c("aura_attack")
tt.ranged.attacks[3].disabled = true
tt.ranged.attacks[3].mod = "mod_hero_lumenir_sword_hit"
tt.ranged.attacks[3].min_nodes = 20
tt.ranged.attacks[3].cooldown = nil
tt.ranged.attacks[3].shoot_time = fts(24)
tt.ranged.attacks[3].sync_animation = true
tt.ranged.attacks[3].animation = "celestial_judgement"
tt.ranged.attacks[3].sound = "HeroLumenirCelestialJudgementCast"
tt.ranged.attacks[3].start_sound_args = {
	delay = fts(12)
}
tt.ranged.attacks[3].estimated_flight_time = 1
tt.ranged.attacks[3].vis_flags = bor(F_RANGED)
tt.ranged.attacks[3].vis_bans = bor(F_NIGHTMARE, F_CLIFF)
tt.ranged.attacks[3].range = b.celestial_judgement.range
tt.ranged.attacks[3].xp_from_skill = "celestial_judgement"
tt.ranged.attacks[4] = E:clone_c("aura_attack")
tt.ranged.attacks[4].disabled = true
tt.ranged.attacks[4].cooldown = nil
tt.ranged.attacks[4].spawn_pos_offset = v(0, 0)
tt.ranged.attacks[4].shoot_time = fts(4)
tt.ranged.attacks[4].sync_animation = true
tt.ranged.attacks[4].entity = "mini_dragon_hero_lumenir"
tt.ranged.attacks[4].animation = "blessing_of_retribution"
tt.ranged.attacks[4].start_fx = "fx_lumenir_start_enervation"
tt.ranged.attacks[4].sound = "HeroLumenirLightCompanionCast"
tt.ranged.attacks[4].estimated_flight_time = 0
tt.ranged.attacks[4].vis_flags = bor(F_RANGED, F_SPELLCASTER)
tt.ranged.attacks[4].vis_bans = bor(F_BOSS)
tt.ranged.attacks[4].xp_from_skill = "mini_dragon"
tt.ranged.attacks[5] = E:clone_c("spawn_attack")
tt.ranged.attacks[5].animation = "radiant_wave"
tt.ranged.attacks[5].cooldown = 20
tt.ranged.attacks[5].disabled = true
tt.ranged.attacks[5].entity = "aura_fire_balls_hero_lumenir"
tt.ranged.attacks[5].spawn_offset = v(43, 81)
tt.ranged.attacks[5].spawn_time = fts(12)
tt.ranged.attacks[5].vis_flags = bor(F_RANGED)
tt.ranged.attacks[5].vis_bans = bor(F_FLYING)
tt.ranged.attacks[5].range_nodes_max = 50
tt.ranged.attacks[5].range_nodes_min = 10
tt.ranged.attacks[5].sound = "HeroLumenirRadiantWaveCast"
tt.ranged.attacks[5].count = nil
tt.ranged.attacks[5].xp_from_skill = "fire_balls"
tt.ranged.attacks[5].min_targets = b.fire_balls.min_targets
tt.tween.disabled = true
tt.tween.remove = false
tt.tween.props[1].sprite_id = 2
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.5,
		255
	}
}
tt = E:register_t("mini_dragon_hero_lumenir", "decal_scripted")
b = balance.heroes.hero_lumenir.mini_dragon.dragon

E:add_comps(tt, "force_motion", "ranged", "tween", "idle_flip")

tt.main_script.update = scripts.mini_dragon_hero_lumenir.update
tt.flight_height = 60
tt.custom_height = {
	hero_vesper = 60,
	hero_dragon_gem = 40,
	hero_lumenir = 100,
	hero_dragon_bone = 40
}
tt.force_motion.max_a = 1200
tt.force_motion.max_v = 360
tt.force_motion.ramp_radius = 30
tt.force_motion.fr = 0.05
tt.force_motion.a_step = 20
tt.offset = v(0, 0)
tt.start_ts = nil
tt.render.sprites[1].prefix = "hero_lumenir_light_companion"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_FLYING_HEROES + 1
tt.render.sprites[1].offset = v(0, tt.flight_height)
tt.render.sprites[1].scale = v(0.75, 0.75)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].alpha = 100
tt.render.sprites[2].name = "hero_lumenir_light_companion_shadow"
tt.ranged.attacks[1] = E:clone_c("bullet_attack")
tt.ranged.attacks[1].animation = "attack"
tt.ranged.attacks[1].cooldown = b.cooldown
tt.ranged.attacks[1].max_range = b.ranged_attack.max_range
tt.ranged.attacks[1].min_range = b.ranged_attack.min_range
tt.ranged.attacks[1].damage_type = b.damage_type
tt.ranged.attacks[1].hit_time = fts(2)
tt.ranged.attacks[1].hit_cycles = 3
tt.ranged.attacks[1].bullet = "bolt_lumenir_mini"
tt.ranged.attacks[1].hit_delay = fts(2)
tt.ranged.attacks[1].search_cooldown = 0.1
tt.ranged.attacks[1].shoot_time = fts(11)
tt.ranged.attacks[1].shoot_range = 25
tt.ranged.attacks[1].vis_bans = bor(F_NIGHTMARE)
tt.ranged.attacks[1].xp_gain_factor = b.ranged_attack.xp_gain_factor
tt.ranged.attacks[1].basic_attack = true
tt.ranged.attacks[1].bullet_start_offset = v(16, -16)
tt.tween.disabled = true
tt.tween.remove = false
tt.tween.props[1].name = "offset"
tt.tween.props[1].loop = true
tt.tween.props[1].interp = "sine"
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].sprite_id = 2
tt.tween.props[2].name = "alpha"
tt.tween.props[2].keys = {
	{
		1,
		0
	},
	{
		1.5,
		255
	}
}
tt = E:register_t("mini_dragon_death_hero_lumenir", "mini_dragon_hero_lumenir")
b = balance.heroes.hero_lumenir.mini_dragon_death
tt.ranged.attacks[1].max_range = b.max_range
tt.ranged.attacks[1].min_range = b.min_range
tt.ranged.attacks[1].cooldown = b.cooldown
tt.ranged.attacks[1].bullet = "bolt_lumenir_mini_death"
tt = E:register_t("hero_lumenir_ultimate")
b = balance.heroes.hero_lumenir.ultimate

E:add_comps(tt, "pos", "main_script", "sound_events")

tt.can_fire_fn = scripts.hero_lumenir_ultimate.can_fire_fn
tt.main_script.update = scripts.hero_lumenir_ultimate.update
tt.cooldown = 30
tt.range = b.range
tt.spawn_delay = 0.5
tt.count = 6
tt.vis_flags = bor(F_RANGED)
tt.vis_bans = bor(F_FRIEND)
tt.entity = "soldier_lumenir_ultimate"
tt = E:register_t("soldier_lumenir_ultimate", "soldier")

E:add_comps(tt, "melee")

b = balance.heroes.hero_lumenir.ultimate
tt.health.armor = 0
tt.health.hp_max = 50
tt.health.ignore_damage = true
tt.health_bar.hidden = true
tt.info.random_name_format = nil
tt.min_wait = 0.1
tt.max_wait = 0.4
tt.main_script.insert = scripts.soldier_lumenir_ultimate.insert
tt.main_script.update = scripts.soldier_lumenir_ultimate.update
tt.motion.max_speed = 90
tt.max_attack_count = 2
tt.stun_range = b.stun_range
tt.stun_bans = bor(F_BOSS)
tt.stun_flags = bor(F_RANGED)
tt.stun_duration = b.stun_duration
tt.sound_events.death = "HeroLumenirCallOfTriumphOut"
tt.regen.cooldown = 1
tt.regen.health = 0
tt.render.sprites[1].prefix = "hero_lumenir_call_of_triumph"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].hidden = true
tt.render.sprites[1].sort_y_offset = -2
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].loop = false
tt.render.sprites[2].prefix = "hero_lumenir_call_of_triumph_spawn_fx"
tt.render.sprites[2].name = "idle"
tt.render.sprites[2].sort_y_offset = -3
tt.soldier.melee_slot_offset = v(5, 0)
tt.sound_events.insert = "HeroLumenirCallOfTriumphCast"
tt.ui.can_click = false
tt.ui.can_select = false
tt.unit.level = 0
tt.unit.mod_offset = v(0, 15)
tt.vis.flags = bor(F_FRIEND)
tt.vis.bans = bor(F_ALL)
tt.melee.attacks[1].damage_max = nil
tt.melee.attacks[1].damage_min = nil
tt.melee.attacks[1].hit_times = {
	fts(7),
	fts(15),
	fts(24)
}
tt.melee.attacks[1].shared_cooldown = true
tt.melee.attacks[1].xp_gain_factor = 0
tt.melee.attacks[1].chance = 1
tt.melee.attacks[1].damage_type = b.damage_type
tt.melee.attacks[1].sound_hit = "MeleeSword"
tt.melee.cooldown = fts(15)
tt.melee.range = 60
tt = E:register_t("hero_vesper", "hero5")
b = balance.heroes.hero_vesper

E:add_comps(tt, "melee", "ranged", "dodge", "timed_attacks")

tt.hero.level_stats.armor = b.armor
tt.hero.level_stats.hp_max = b.hp_max
tt.hero.level_stats.melee_damage_max = b.basic_melee.damage_max
tt.hero.level_stats.melee_damage_min = b.basic_melee.damage_min
tt.hero.level_stats.ranged_short_damage_max = b.basic_ranged_short.damage_max
tt.hero.level_stats.ranged_short_damage_min = b.basic_ranged_short.damage_min
tt.hero.level_stats.ranged_long_damage_max = b.basic_ranged_long.damage_max
tt.hero.level_stats.ranged_long_damage_min = b.basic_ranged_long.damage_min
tt.hero.level_stats.regen_health = b.regen_health
tt.hero.skills.arrow_to_the_knee = E:clone_c("hero_skill")
tt.hero.skills.arrow_to_the_knee.cooldown = b.arrow_to_the_knee.cooldown
tt.hero.skills.arrow_to_the_knee.damage_min = b.arrow_to_the_knee.damage_min
tt.hero.skills.arrow_to_the_knee.damage_max = b.arrow_to_the_knee.damage_max
tt.hero.skills.arrow_to_the_knee.stun_duration = b.arrow_to_the_knee.stun_duration
tt.hero.skills.arrow_to_the_knee.hr_available = b.arrow_to_the_knee.available
tt.hero.skills.arrow_to_the_knee.hr_icon = "0001"
tt.hero.skills.arrow_to_the_knee.hr_order = 1
tt.hero.skills.arrow_to_the_knee.hr_cost = {
	2,
	2,
	2
}
tt.hero.skills.arrow_to_the_knee.xp_gain = b.arrow_to_the_knee.xp_gain
tt.hero.skills.arrow_to_the_knee.key = "ARROW_TO_THE_KNEE"
tt.hero.skills.ricochet = E:clone_c("hero_skill")
tt.hero.skills.ricochet.cooldown = b.ricochet.cooldown
tt.hero.skills.ricochet.damage_min = b.ricochet.damage_min
tt.hero.skills.ricochet.damage_max = b.ricochet.damage_max
tt.hero.skills.ricochet.bounces = b.ricochet.bounces
tt.hero.skills.ricochet.hr_available = b.ricochet.available
tt.hero.skills.ricochet.hr_icon = "0004"
tt.hero.skills.ricochet.hr_order = 2
tt.hero.skills.ricochet.hr_cost = {
	3,
	3,
	3
}
tt.hero.skills.ricochet.xp_gain = b.ricochet.xp_gain
tt.hero.skills.ricochet.key = "RICOCHET"
tt.hero.skills.martial_flourish = E:clone_c("hero_skill")
tt.hero.skills.martial_flourish.cooldown = b.martial_flourish.cooldown
tt.hero.skills.martial_flourish.damage_min = b.martial_flourish.damage_min
tt.hero.skills.martial_flourish.damage_max = b.martial_flourish.damage_max
tt.hero.skills.martial_flourish.hr_available = b.martial_flourish.available
tt.hero.skills.martial_flourish.hr_icon = "0002"
tt.hero.skills.martial_flourish.hr_order = 3
tt.hero.skills.martial_flourish.hr_cost = {
	2,
	2,
	2
}
tt.hero.skills.martial_flourish.xp_gain = b.martial_flourish.xp_gain
tt.hero.skills.martial_flourish.key = "MARTIAL_FLOURISH"
tt.hero.skills.disengage = E:clone_c("hero_skill")
tt.hero.skills.disengage.cooldown = b.disengage.cooldown
tt.hero.skills.disengage.damage_min = b.disengage.damage_min
tt.hero.skills.disengage.damage_max = b.disengage.damage_max
tt.hero.skills.disengage.min_distance_from_end = b.disengage.min_distance_from_end
tt.hero.skills.disengage.distance = b.disengage.distance
tt.hero.skills.disengage.hr_available = b.disengage.available
tt.hero.skills.disengage.hr_icon = "0003"
tt.hero.skills.disengage.hr_order = 4
tt.hero.skills.disengage.hr_cost = {
	1,
	1,
	1
}
tt.hero.skills.disengage.xp_gain = b.disengage.xp_gain
tt.hero.skills.disengage.key = "DISENGAGE"
tt.hero.skills.ultimate = E:clone_c("hero_skill")
tt.hero.skills.ultimate.controller_name = "hero_vesper_ultimate"
tt.hero.skills.ultimate.hr_available = false
tt.hero.skills.ultimate.hr_icon = "0005"
tt.hero.skills.ultimate.hr_order = 5
tt.hero.skills.ultimate.hr_cost = {
	1,
	4,
	4,
	4
}
tt.hero.skills.ultimate.key = "ARROW_STORM"
tt.hero.skills.ultimate.duration = b.ultimate.duration
tt.hero.skills.ultimate.cooldown = b.ultimate.cooldown
tt.hero.skills.ultimate.entity = b.ultimate.entity
tt.hero.team = TEAM_LINIREA
tt.health.armor = nil
tt.health.dead_lifetime = b.dead_lifetime
tt.health.hp_max = nil
tt.health_bar.offset = v(0, 39)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.hero.fn_level_up = scripts.hero_vesper.level_up
tt.idle_flip.chance = 0.4
tt.idle_flip.cooldown = 4
tt.info.fn = scripts.hero_basic.get_info_ranged_with_damage_factor
tt.info.hero_portrait = "hero_portraits_0001"
tt.info.portrait = "portraits_hero" .. "_0001"
tt.info.ultimate_icon = "0001"
tt.info.ultimate_pointer_style = "area"
tt.info.stat_hp = b.stats.hp
tt.info.stat_armor = b.stats.armor
tt.info.stat_damage = b.stats.damage
tt.info.stat_cooldown = b.stats.cooldown
tt.main_script.insert = scripts.hero_vesper.insert
tt.main_script.update = scripts.hero_vesper.update
tt.motion.max_speed = 75
tt.regen.cooldown = 1
tt.regen.health = tt.hero.level_stats.regen_health[1]
tt.render.sprites[1] = E:clone_c("sprite")
tt.render.sprites[1].angles = {}
tt.render.sprites[1].angles.walk = {
	"walk"
}
tt.render.sprites[1].angles.ranged = {
	"shoot"
}
tt.render.sprites[1].name = "idle_1"
tt.render.sprites[1].prefix = "hero_vesper_vesper"
tt.render.sprites[1].scale = v(1.05, 1.05)
tt.render.sprites[1].draw_order = DO_HEROES
tt.sound_events.change_rally_point = "HeroVesperTaunt"
tt.sound_events.death = "HeroVesperDeath"
tt.sound_events.respawn = "HeroVesperTauntIntro"
tt.sound_events.hero_room_select = "HeroVesperTauntSelect"
tt.soldier.melee_slot_offset.x = 5
tt.unit.hit_offset = v(0, 12)
tt.unit.marker_offset = v(0, -1)
tt.unit.mod_offset = v(0, 19.9)
tt.dodge.disabled = true
tt.dodge.ranged = false
tt.dodge.cooldown = nil
tt.dodge.chance = 1
tt.dodge.bullet = "arrow_hero_vesper_disengage"
tt.dodge.animation_dissapear = "disengage_disappear"
tt.dodge.animation_appear = "disengage_appear"
tt.dodge.animation_attack_start = "disengage_attack_start"
tt.dodge.animation_attack_end = "disengage_attack_end"
tt.dodge.animation_end = "disengage_end"
tt.dodge.total_shoots = b.disengage.total_shoots
tt.dodge.can_dodge = scripts.hero_vesper.can_dodge
tt.dodge.bullet_start_offset = {
	v(9, 28)
}
tt.dodge.shoot_time = fts(2)
tt.dodge.sound = "HeroVesperDisengageCast"
tt.dodge.hp_to_trigger = b.disengage.hp_to_trigger
tt.melee.attacks[1] = E:clone_c("melee_attack")
tt.melee.attacks[1].animation = "melee_attack_2"
tt.melee.attacks[1].damage_max = nil
tt.melee.attacks[1].damage_min = nil
tt.melee.attacks[1].hit_time = fts(10)
tt.melee.attacks[1].shared_cooldown = true
tt.melee.attacks[1].sound = "MeleeSword"
tt.melee.attacks[1].vis_bans = bor(F_CLIFF)
tt.melee.attacks[1].vis_flags = F_BLOCK
tt.melee.attacks[1].xp_gain_factor = b.basic_melee.xp_gain_factor
tt.melee.attacks[1].hit_fx = "fx_hero_vesper_attack_hit"
tt.melee.attacks[1].hit_offset = v(30, 20)
tt.melee.attacks[1].basic_attack = true
tt.melee.attacks[2] = table.deepclone(tt.melee.attacks[1])
tt.melee.attacks[2].animation = "melee_attack_1"
tt.melee.attacks[2].chance = 0.2
tt.melee.attacks[2].hit_time = fts(16)
tt.melee.attacks[2].hit_offset = v(30, 15)
tt.melee.attacks[2].basic_attack = true
tt.melee.attacks[3] = E:clone_c("melee_attack")
tt.melee.attacks[3].animations = {
	nil,
	"martial_flourish"
}
tt.melee.attacks[3].cooldown = nil
tt.melee.attacks[3].damage_max = nil
tt.melee.attacks[3].damage_min = nil
tt.melee.attacks[3].damage_type = b.martial_flourish.damage_type
tt.melee.attacks[3].disabled = true
tt.melee.attacks[3].xp_from_skill = "martial_flourish"
tt.melee.attacks[3].sound = "HeroVesperMartialFlourishCast"
tt.melee.attacks[3].hit_times = {
	fts(8),
	fts(15),
	fts(23)
}
tt.melee.attacks[3].loops = 1
tt.melee.attacks[3].mod = "mod_hero_vesper_martial_flourish_fx"
tt.melee.cooldown = 1
tt.melee.range = balance.heroes.common.melee_attack_range
tt.ranged.attacks[1] = E:clone_c("bullet_attack")
tt.ranged.attacks[1].animation = "ranged_attack"
tt.ranged.attacks[1].bullet = "arrow_hero_vesper_short_arrow"
tt.ranged.attacks[1].bullet_start_offset = {
	v(7, 26)
}
tt.ranged.attacks[1].cooldown = b.basic_ranged_short.cooldown
tt.ranged.attacks[1].max_range = b.basic_ranged_short.max_range
tt.ranged.attacks[1].min_range = b.basic_ranged_short.min_range
tt.ranged.attacks[1].shoot_time = fts(8)
tt.ranged.attacks[1].vis_bans = bor(F_NIGHTMARE)
tt.ranged.attacks[1].shared_cooldown = true
tt.ranged.attacks[1].chance = 1
tt.ranged.attacks[1].node_prediction = fts(8) + fts(15)
tt.ranged.attacks[1].basic_attack = true
tt.ranged.attacks[2] = E:clone_c("bullet_attack")
tt.ranged.attacks[2].animation = "ranged_attack"
tt.ranged.attacks[2].bullet = "arrow_hero_vesper_long_arrow"
tt.ranged.attacks[2].bullet_start_offset = {
	v(7, 26)
}
tt.ranged.attacks[2].cooldown = b.basic_ranged_long.cooldown
tt.ranged.attacks[2].max_range = b.basic_ranged_long.max_range
tt.ranged.attacks[2].min_range = b.basic_ranged_long.min_range
tt.ranged.attacks[2].shoot_time = fts(8)
tt.ranged.attacks[2].vis_bans = bor(F_NIGHTMARE)
tt.ranged.attacks[2].shared_cooldown = true
tt.ranged.attacks[2].chance = 1
tt.ranged.attacks[2].node_prediction = fts(8) + fts(15)
tt.ranged.attacks[2].basic_attack = true
tt.ranged.attacks[3] = E:clone_c("bullet_attack")
tt.ranged.attacks[3].animation = "arrow_to_the_knee"
tt.ranged.attacks[3].bullet = "hero_vesper_arrow_to_the_knee_arrow"
tt.ranged.attacks[3].bullet_start_offset = {
	v(0, 20),
	v(0, 20)
}
tt.ranged.attacks[3].cooldown = nil
tt.ranged.attacks[3].disabled = true
tt.ranged.attacks[3].max_range = b.arrow_to_the_knee.max_range
tt.ranged.attacks[3].min_range = b.arrow_to_the_knee.min_range
tt.ranged.attacks[3].xp_from_skill = "arrow_to_the_knee"
tt.ranged.attacks[3].vis_flag = bor(F_STUN)
tt.ranged.attacks[3].vis_bans = bor(F_BOSS, F_NIGHTMARE)
tt.ranged.attacks[3].shoot_time = fts(16)
tt.ranged.attacks[3].node_prediction = fts(10)
tt.ranged.attacks[3].sound = "HeroVesperArrowToTheKneeCast"
tt.timed_attacks.list[1] = E:clone_c("custom_attack")
tt.timed_attacks.list[1].animation = "ricochet"
tt.timed_attacks.list[1].bullet = "arrow_hero_vesper_ricochet"
tt.timed_attacks.list[1].bullet_start_offset = {
	v(0, 20)
}
tt.timed_attacks.list[1].cooldown = nil
tt.timed_attacks.list[1].disabled = true
tt.timed_attacks.list[1].max_range = b.ricochet.max_range
tt.timed_attacks.list[1].min_range = b.ricochet.min_range
tt.timed_attacks.list[1].xp_from_skill = "ricochet"
tt.timed_attacks.list[1].vis_bans = 0
tt.timed_attacks.list[1].shoot_time = fts(19)
tt.timed_attacks.list[1].min_targets = b.ricochet.min_targets
tt.timed_attacks.list[1].max_range_trigger = b.ricochet.max_range_trigger
tt.timed_attacks.list[1].sound = "HeroVesperRicochetCast"
tt.ui.click_rect = r(-19, -5, 38, 43)
tt = E:register_t("hero_vesper_arrow_to_the_knee_arrow_mod", "mod_stun")
tt.modifier.duration = nil
tt = E:register_t("hero_vesper_arrow_to_the_knee_hit", "fx")
tt.render.sprites[1].name = "hero_vesper_arrow_to_the_knee_hit"
tt = E:register_t("hero_vesper_ricochet_bullet_hit_fx", "fx")
tt.render.sprites[1].name = "hero_vesper_ricochet_hit"
tt = E:register_t("hero_vesper_ultimate")

E:add_comps(tt, "pos", "main_script")

b = balance.heroes.hero_vesper
tt.can_fire_fn = scripts.hero_vesper_ultimate.can_fire_fn
tt.main_script.update = scripts.hero_vesper_ultimate.update
tt.cooldown = nil
tt.bullet = "hero_vesper_ultimate_arrow"
tt.offset_back = -2
tt.spread = b.ultimate.spread
tt.damage = b.ultimate.damage
tt.duration = b.ultimate.duration
tt.enemies_range = b.ultimate.enemies_range
tt.node_prediction_offset = b.ultimate.node_prediction_offset
tt.vis_flags = F_RANGED
tt.vis_bans = 0
tt.sounds = {
	"HeroVesperUltimateLvl1",
	"HeroVesperUltimateLvl2",
	"HeroVesperUltimateLvl3"
}
tt = E:register_t("hero_vesper_ultimate_arrow", "bullet")
tt.main_script.update = scripts.hero_vesper_ultimate_arrow.update
tt.bullet.damage_radius = 35
tt.bullet.damage_flags = F_AREA
tt.bullet.damage_bans = F_FRIEND
tt.bullet.damage_type = DAMAGE_TRUE
tt.bullet.arrive_decal = "hero_vesper_ultimate_decal"
tt.bullet.max_speed = 1500
tt.bullet.mod = "hero_vesper_ultimate_mod"
tt.render.sprites[1].name = "hero_vesper_ultimate_arrow"
tt.render.sprites[1].animated = false
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.sound_events.insert = "ArrowSound"
tt = E:register_t("hero_vesper_ultimate_mod", "mod_slow")
tt.modifier.duration = 0.1
tt.slow.factor = 0.5
tt = E:register_t("hero_vesper_ultimate_decal", "decal_tween")

AC(tt, "main_script")

tt.main_script.insert = scripts.hero_vesper_ultimate_decal.insert
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		2,
		255
	},
	{
		3,
		0
	}
}
tt.tween.props[2] = table.deepclone(tt.tween.props[1])
tt.tween.props[2].sprite_id = 1
tt.render.sprites[1].name = "hero_vesper_ultimate_arrow_decal"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = false
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("hero_raelyn", "hero5")
b = balance.heroes.hero_raelyn

E:add_comps(tt, "melee", "ranged", "timed_attacks")

tt.hero.level_stats.armor = b.armor
tt.hero.level_stats.hp_max = b.hp_max
tt.hero.level_stats.melee_damage_max = b.melee_damage_max
tt.hero.level_stats.melee_damage_min = b.melee_damage_min
tt.hero.level_stats.regen_health = b.regen_health
tt.hero.skills.unbreakable = E:clone_c("hero_skill")
tt.hero.skills.unbreakable.cooldown = b.unbreakable.cooldown
tt.hero.skills.unbreakable.duration = b.unbreakable.duration
tt.hero.skills.unbreakable.shield_base = b.unbreakable.shield_base
tt.hero.skills.unbreakable.shield_per_enemy = b.unbreakable.shield_per_enemy
tt.hero.skills.unbreakable.max_soldiers = b.unbreakable.max_soldiers
tt.hero.skills.unbreakable.hr_available = true
tt.hero.skills.unbreakable.hr_icon = "0024"
tt.hero.skills.unbreakable.hr_order = 1
tt.hero.skills.unbreakable.hr_cost = {
	3,
	3,
	3
}
tt.hero.skills.unbreakable.xp_gain = b.unbreakable.xp_gain
tt.hero.skills.unbreakable.key = "UNBREAKABLE"
tt.hero.skills.inspire_fear = E:clone_c("hero_skill")
tt.hero.skills.inspire_fear.cooldown = b.inspire_fear.cooldown
tt.hero.skills.inspire_fear.damage_duration = b.inspire_fear.damage_duration
tt.hero.skills.inspire_fear.stun_duration = b.inspire_fear.stun_duration
tt.hero.skills.inspire_fear.slow_factor = b.inspire_fear.slow_factor
tt.hero.skills.inspire_fear.inflicted_damage_factor = b.inspire_fear.inflicted_damage_factor
tt.hero.skills.inspire_fear.hr_available = true
tt.hero.skills.inspire_fear.hr_icon = "0022"
tt.hero.skills.inspire_fear.hr_order = 2
tt.hero.skills.inspire_fear.hr_cost = {
	3,
	2,
	1
}
tt.hero.skills.inspire_fear.xp_gain = b.inspire_fear.xp_gain
tt.hero.skills.inspire_fear.key = "INSPIRE_FEAR"
tt.hero.skills.brutal_slash = E:clone_c("hero_skill")
tt.hero.skills.brutal_slash.cooldown = b.brutal_slash.cooldown
tt.hero.skills.brutal_slash.damage_max = b.brutal_slash.damage_max
tt.hero.skills.brutal_slash.damage_min = b.brutal_slash.damage_min
tt.hero.skills.brutal_slash.hr_available = true
tt.hero.skills.brutal_slash.hr_icon = "0023"
tt.hero.skills.brutal_slash.hr_order = 3
tt.hero.skills.brutal_slash.hr_cost = {
	2,
	2,
	2
}
tt.hero.skills.brutal_slash.xp_gain = b.brutal_slash.xp_gain
tt.hero.skills.brutal_slash.key = "BRUTAL_SLASH"
tt.hero.skills.onslaught = E:clone_c("hero_skill")
tt.hero.skills.onslaught.hr_available = b.onslaught.available
tt.hero.skills.onslaught.damage_factor = b.onslaught.damage_factor
tt.hero.skills.onslaught.melee_cooldown = b.onslaught.melee_cooldown
tt.hero.skills.onslaught.duration = b.onslaught.duration
tt.hero.skills.onslaught.cooldown = b.onslaught.cooldown
tt.hero.skills.onslaught.hit_aura = "hero_raelyn_onslaught_aura"
tt.hero.skills.onslaught.hr_icon = "0025"
tt.hero.skills.onslaught.hr_order = 4
tt.hero.skills.onslaught.hr_cost = {
	1,
	2,
	3
}
tt.hero.skills.onslaught.xp_gain = b.onslaught.xp_gain
tt.hero.skills.onslaught.key = "ONSLAUGHT"
tt.hero.skills.ultimate = E:clone_c("hero_skill")
tt.hero.skills.ultimate.controller_name = "hero_raelyn_ultimate"
tt.hero.skills.ultimate.hr_available = false
tt.hero.skills.ultimate.hr_icon = "0056"
tt.hero.skills.ultimate.hr_order = 5
tt.hero.skills.ultimate.hr_cost = {
	1,
	3,
	3,
	3
}
tt.hero.skills.ultimate.key = "COMMAND_ORDERS"
tt.hero.skills.ultimate.duration = b.ultimate.duration
tt.hero.skills.ultimate.cooldown = b.ultimate.cooldown
tt.hero.skills.ultimate.damage_min = b.ultimate.damage_min
tt.hero.skills.ultimate.damage_max = b.ultimate.damage_max
tt.hero.team = TEAM_DARK_ARMY
tt.health.dead_lifetime = b.dead_lifetime
tt.health_bar.offset = v(0, 40)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.hero.fn_level_up = scripts.hero_raelyn.level_up
tt.info.fn = scripts.hero_basic.get_info_melee
tt.info.hero_portrait = "hero_portraits_0002"
tt.info.i18n_key = "HERO_RAELYN"
tt.info.portrait = "portraits_hero" .. "_0003"
tt.info.ultimate_icon = "0005"
tt.info.stat_hp = b.stats.hp
tt.info.stat_armor = b.stats.armor
tt.info.stat_damage = b.stats.damage
tt.info.stat_cooldown = b.stats.cooldown
tt.main_script.insert = scripts.hero_raelyn.insert
tt.main_script.update = scripts.hero_raelyn.update
tt.motion.max_speed = b.speed
tt.regen.cooldown = b.regen_cooldown
tt.render.sprites[1].angles = {}
tt.render.sprites[1].angles.walk = {
	"walk"
}
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].prefix = "hero_raelyn_hero"
tt.render.sprites[1].scale = v(1.05, 1.05)
tt.render.sprites[1].draw_order = DO_HEROES
tt.soldier.melee_slot_offset = v(10, 0)
tt.sound_events.change_rally_point = "HeroRaelynTaunt"
tt.sound_events.death = "HeroRaelynDeath"
tt.sound_events.respawn = "HeroRaelynTauntIntro"
tt.sound_events.hero_room_select = "HeroRaelynTauntSelect"
tt.unit.hit_offset = v(0, 14)
tt.unit.mod_offset = v(0, 13)
tt.melee.range = balance.heroes.common.melee_attack_range
tt.melee.attacks[1] = E:clone_c("melee_attack")
tt.melee.attacks[1].animation = "melee_attack"
tt.melee.attacks[1].cooldown = b.basic_melee.cooldown
tt.melee.attacks[1].hit_time = fts(10)
tt.melee.attacks[1].hit_fx = "hero_raelyn_melee_attack_hit"
tt.melee.attacks[1].hit_offset = v(35, 15)
tt.melee.attacks[1].sound = "HeroRaelynBasicAttack"
tt.melee.attacks[1].xp_gain_factor = b.basic_melee.xp_gain_factor
tt.melee.attacks[1].basic_attack = true
tt.melee.attacks[2] = E:clone_c("melee_attack")
tt.melee.attacks[2].disabled = true
tt.melee.attacks[2].cooldown = nil
tt.melee.attacks[2].damage_max = nil
tt.melee.attacks[2].damage_min = nil
tt.melee.attacks[2].hit_time = fts(18)
tt.melee.attacks[2].sound = "HeroRaelynBrutalSlashCast"
tt.melee.attacks[2].animation = "brutal_slash"
tt.melee.attacks[2].damage_type = bor(b.brutal_slash.damage_type, DAMAGE_FX_EXPLODE)
tt.melee.attacks[2].xp_gain_factor = b.brutal_slash.xp_gain_factor
tt.melee.attacks[2].xp_from_skill = "brutal_slash"
tt.melee.attacks[2].pop = {
	"pop_whaam",
	"pop_kapow"
}
tt.melee.attacks[2].pop_chance = 0.3
tt.melee.attacks[2].hit_decal = "hero_raelyn_brutal_slash_decal"
tt.melee.attacks[2].hit_offset = v(35, 0)
tt.timed_attacks.list[1] = E:clone_c("mod_attack")
tt.timed_attacks.list[1].animation = "unbreakable"
tt.timed_attacks.list[1].cooldown = nil
tt.timed_attacks.list[1].max_range_trigger = b.unbreakable.max_range_trigger
tt.timed_attacks.list[1].max_range_effect = b.unbreakable.max_range_effect
tt.timed_attacks.list[1].min_targets = b.unbreakable.min_targets
tt.timed_attacks.list[1].max_targets = b.unbreakable.max_targets
tt.timed_attacks.list[1].mod = "hero_raelyn_unbreakable_mod"
tt.timed_attacks.list[1].disabled = true
tt.timed_attacks.list[1].cast_time = fts(8)
tt.timed_attacks.list[1].xp_from_skill = "unbreakable"
tt.timed_attacks.list[1].sound = "HeroRaelynUnbreakableCast"
tt.timed_attacks.list[1].mod_decal = "hero_raelyn_unbreakable_floor_decal_mod"
tt.timed_attacks.list[1].vis_bans = bor(F_FLYING)
tt.timed_attacks.list[2] = E:clone_c("mod_attack")
tt.timed_attacks.list[2].animation = "inspire_fear"
tt.timed_attacks.list[2].cooldown = nil
tt.timed_attacks.list[2].cast_time = fts(13)
tt.timed_attacks.list[2].disabled = true
tt.timed_attacks.list[2].vis_bans = bor(F_FRIEND)
tt.timed_attacks.list[2].vis_flags = bor(F_RANGED, F_STUN)
tt.timed_attacks.list[2].max_range_trigger = b.inspire_fear.max_range_trigger
tt.timed_attacks.list[2].min_range_trigger = 0
tt.timed_attacks.list[2].max_range_effect = b.inspire_fear.max_range_effect
tt.timed_attacks.list[2].min_range_effect = 0
tt.timed_attacks.list[2].min_targets = b.inspire_fear.min_targets
tt.timed_attacks.list[2].mods = {
	"hero_raelyn_inspire_fear_damage_mod",
	"hero_raelyn_inspire_fear_stun_mod",
	"hero_raelyn_inspire_fear_fx_mod",
	"hero_raelyn_inspire_fear_slow_mod"
}
tt.timed_attacks.list[2].sound = "HeroRaelynInspireFearCast"
tt.timed_attacks.list[2].xp_from_skill = "inspire_fear"
tt.timed_attacks.list[2].mod_decal = "hero_raelyn_inspire_fear_floor_decal_mod"
tt.timed_attacks.list[3] = E:clone_c("custom_attack")
tt.timed_attacks.list[3].animation = nil
tt.timed_attacks.list[3].cooldown = nil
tt.timed_attacks.list[3].melee_cooldown = nil
tt.timed_attacks.list[3].duration = nil
tt.timed_attacks.list[3].max_range_trigger = b.onslaught.max_range_trigger
tt.timed_attacks.list[3].min_targets = b.onslaught.min_targets
tt.timed_attacks.list[3].disabled = true
tt.timed_attacks.list[3].vis_bans = bor(F_FLYING)
tt.timed_attacks.list[3].hit_decal = "decal_hero_raelyn_onslaught_decal"
tt.timed_attacks.list[3].hit_offset = v(35, 0)
tt.timed_attacks.list[3].sound = "HeroRaelynOnslaughtCast"
tt.ui.click_rect = r(-20, -5, 40, 43)
tt = E:register_t("hero_raelyn_melee_attack_hit", "fx")
tt.render.sprites[1].name = "hero_raelyn_melee_attack_hit"
tt = E:register_t("hero_raelyn_brutal_slash_decal", "decal_tween")
tt.render.sprites[1].name = "hero_raelyn_brutal_slash_decal"
tt.render.sprites[1].animated = false
tt.tween.props[1].keys = {
	{
		1,
		255
	},
	{
		2.5,
		0
	}
}
tt = E:register_t("hero_raelyn_unbreakable_floor_decal_mod", "modifier")

E:add_comps(tt, "render")

tt.main_script.update = scripts.mod_track_target.update
tt.render.sprites[1].name = "hero_raelyn_unbreakable_fx_idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = false
tt.render.sprites[1].hide_after_runs = 1
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "hero_raelyn_unbreakable_shield_floor_glow"
tt.render.sprites[2].offset = v(0, 0)
tt.render.sprites[2].hidden = false
tt.modifier.use_mod_offset = false
tt.modifier.duration = fts(17)
tt = E:register_t("hero_raelyn_unbreakable_mod", "modifier")

E:add_comps(tt, "render", "health_bar", "health")

tt.modifier.vis_flags = bor(F_MOD)
tt.modifier.duration = nil
tt.modifier.use_mod_offset = false
tt.shield_base = nil
tt.shield_per_enemy = nil
tt.shield_max_damage = nil
tt.damage_taken = 0
tt.main_script.insert = scripts.hero_raelyn_unbreakable_mod.insert
tt.main_script.remove = scripts.hero_raelyn_unbreakable_mod.remove
tt.main_script.update = scripts.hero_raelyn_unbreakable_mod.update
tt.health_bar.offset = v(0, 42)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.health_bar.colors = {}
tt.health_bar.colors.fg = {
	255,
	255,
	0,
	255
}
tt.health_bar.colors.bg = {
	0,
	0,
	0,
	255
}
tt.health_bar.sort_y_offset = -2
tt.health_bar.disable_fade = true
tt.sprites_per_enemies = {
	"hero_raelyn_unbreakable_shield_lvl1",
	"hero_raelyn_unbreakable_shield_lvl2",
	"hero_raelyn_unbreakable_shield_lvl3"
}
tt.animation_start = "start"
tt.animation_loop = "idle"
tt.animation_end = "end"
tt.render.sprites[1].prefix = nil
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].loop = true
tt = E:register_t("hero_raelyn_inspire_fear_floor_decal_mod", "modifier")

E:add_comps(tt, "render")

tt.main_script.update = scripts.mod_track_target.update
tt.render.sprites[1].name = "hero_raelyn_inspire_fear_fx_area_idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = false
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].hide_after_runs = 1
tt.modifier.use_mod_offset = false
tt.modifier.duration = fts(28)

tt = E:register_t("hero_raelyn_inspire_fear_damage_mod", "modifier")

E:add_comps(tt, "render")

tt.main_script.insert = scripts.mod_damage_factors.insert
tt.main_script.remove = scripts.mod_damage_factors.remove
tt.main_script.update = scripts.mod_track_target.update
tt.inflicted_damage_factor = nil
tt.modifier.duration = nil
tt.render.sprites[1] = E:clone_c("sprite")
tt.render.sprites[1].name = "hero_raelyn_inspire_fear_decal"
tt.render.sprites[1].draw_order = 20
tt.modifier.use_mod_offset = false

tt = E:register_t("hero_raelyn_inspire_fear_slow_mod", "modifier")
tt.main_script.insert = scripts.mod_fury.insert
tt.main_script.remove = scripts.mod_fury.remove
tt.main_script.update = scripts.mod_track_target.update

tt = E:register_t("hero_raelyn_inspire_fear_stun_mod", "mod_stun")
tt.modifier.duration = nil
tt.render.sprites[1].hidden = true
tt.modifier.vis_bans = bor(F_BOSS)

tt = E:register_t("hero_raelyn_inspire_fear_fx_mod", "modifier")
tt.main_script.update = scripts.mod_track_target.update
tt.modifier.duration = nil

tt = E:register_t("hero_raelyn_onslaught_aura", "aura")

E:add_comps(tt, "render")

tt.aura.duration = fts(11)
tt.aura.cycle_time = fts(11)
tt.aura.damage_min = nil
tt.aura.damage_max = nil
tt.aura.damage_type = b.onslaught.damage_type
tt.aura.radius = b.onslaught.radius
tt.aura.vis_bans = bor(F_FRIEND)
tt.aura.vis_flags = bor(F_RANGED)
tt.aura.excluded_entities = nil
tt.main_script.update = scripts.aura_apply_damage.update

function tt.main_script.insert(this, store, script)
	if this.render then
		for _, s in pairs(this.render.sprites) do
			s.ts = store.tick_ts
		end
	end
	-- this.aura.excluded_entities = {
	-- 	this.aura.target_id
	-- }
	return true
end

tt = E:register_t("hero_raelyn_ultimate")

E:add_comps(tt, "pos", "main_script", "sound_events")

tt.can_fire_fn = scripts.hero_raelyn_ultimate.can_fire_fn
tt.cooldown = nil
tt.entity = nil
tt.entity_prefix = "hero_raelyn_ultimate_entity"
tt.soldier_prefix = "dark_army_soldier_knight"
tt.main_script.update = scripts.hero_raelyn_ultimate.update
tt.sound_events.insert = "HeroRaelynUltimateCast"
tt = E:register_t("hero_raelyn_ultimate_entity", "soldier_militia")

E:add_comps(tt, "melee", "nav_grid", "reinforcement", "tween")

b = balance.heroes.hero_raelyn
tt.health_bar.offset = v(0, 50)
tt.info.i18n_key = "HERO_RAELYN_ULTIMATE_ENTITY"
tt.info.enc_icon = 12
tt.info.portrait = "gui_bottom_info_image_soldiers_0009"
tt.info.fn = scripts.soldier_reinforcement.get_info
tt.info.random_name_format = nil
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].prefix = "hero_raelyn_command_orders_dark_knight"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].draw_order = DO_SOLDIER_BIG
tt.sound_events.insert = "HeroRaelynUltimateTaunt"
tt.sound_events.death = "HeroRaelynUltimateDeath"
tt.unit.hit_offset = v(0, 16)
tt.unit.size = UNIT_SIZE_LARGE
tt.health.spiked_armor_damage_type = b.ultimate.entity.spiked_armor_damage_type
tt.health.dead_lifetime = 2
tt.unit.fade_time_after_death = tt.health.dead_lifetime
tt.soldier.melee_slot_offset = v(20, 0)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.main_script.insert = scripts.soldier_reinforcement.insert
tt.main_script.update = scripts.hero_raelyn_command_orders_dark_knight.update
tt.regen.cooldown = 1
tt.vis.bans = bor(F_SKELETON, F_CANNIBALIZE)
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	}
}
tt.tween.props[1].name = "alpha"
tt.tween.remove = false
tt.tween.reverse = false
tt.tween.disabled = true
tt.spawn_mod_decal = "hero_raelyn_ultimate_entity_spawn_mod_decal"
tt.melee.attacks[1] = CC("area_attack")
tt.melee.attacks[1].vis_bans = bor(F_FLYING, F_CLIFF, F_WATER)
tt.melee.attacks[1].vis_flags = F_BLOCK
tt.melee.attacks[1].sound = "CommonNoSwordAttack"
tt.melee.attacks[1].sound_args = {
	delay = fts(8)
}
tt.melee.attacks[1].damage_type = b.ultimate.entity.damage_type
tt.melee.attacks[1].hit_times = {
	fts(16),
	fts(28)
}
tt.melee.attacks[1].loops = 1
tt.melee.attacks[1].hit_fx = "hero_raelyn_command_orders_hit_fx"
tt.melee.attacks[1].hit_offset = v(30, 20)
tt.melee.attacks[1].animations = {
	nil,
	"attack_1"
}
tt.melee.attacks[1].shared_cooldown = true
tt.melee.attacks[1].damage_radius = 50
tt.melee.range = b.ultimate.entity.range
tt.reinforcement.duration = b.ultimate.entity.duration
tt.reinforcement.fade = nil
tt.reinforcement.fade_out = nil
tt.ui.click_rect = r(-20, -5, 40, 50)
tt = E:register_t("hero_raelyn_ultimate_entity_1", "hero_raelyn_ultimate_entity")
tt.motion.max_speed = b.ultimate.entity.speed[1]

for _, attack in ipairs(tt.melee.attacks) do
	attack.cooldown = b.ultimate.entity.cooldown[1]
	attack.damage_max = b.ultimate.entity.damage_max[1]
	attack.damage_min = b.ultimate.entity.damage_min[1]
end

tt.health.hp_max = b.ultimate.entity.hp_max[1]
tt.regen.health = b.ultimate.entity.regen_health[1]
tt.health.spiked_armor_damage = b.ultimate.entity.spiked_armor_damage[1]
tt.health.armor = b.ultimate.entity.armor[1]
tt = E:register_t("hero_raelyn_ultimate_entity_2", "hero_raelyn_ultimate_entity")
tt.motion.max_speed = b.ultimate.entity.speed[2]

for _, attack in ipairs(tt.melee.attacks) do
	attack.cooldown = b.ultimate.entity.cooldown[2]
	attack.damage_max = b.ultimate.entity.damage_max[2]
	attack.damage_min = b.ultimate.entity.damage_min[2]
end

tt.health.hp_max = b.ultimate.entity.hp_max[2]
tt.regen.health = b.ultimate.entity.regen_health[2]
tt.health.spiked_armor_damage = b.ultimate.entity.spiked_armor_damage[2]
tt.health.armor = b.ultimate.entity.armor[2]
tt = E:register_t("hero_raelyn_ultimate_entity_3", "hero_raelyn_ultimate_entity")
tt.motion.max_speed = b.ultimate.entity.speed[3]

for _, attack in ipairs(tt.melee.attacks) do
	attack.cooldown = b.ultimate.entity.cooldown[3]
	attack.damage_max = b.ultimate.entity.damage_max[3]
	attack.damage_min = b.ultimate.entity.damage_min[3]
end

tt.health.hp_max = b.ultimate.entity.hp_max[3]
tt.regen.health = b.ultimate.entity.regen_health[3]
tt.health.spiked_armor_damage = b.ultimate.entity.spiked_armor_damage[3]
tt.health.armor = b.ultimate.entity.armor[3]
tt = E:register_t("hero_raelyn_ultimate_entity_4", "hero_raelyn_ultimate_entity")
tt.motion.max_speed = b.ultimate.entity.speed[4]

for _, attack in ipairs(tt.melee.attacks) do
	attack.cooldown = b.ultimate.entity.cooldown[4]
	attack.damage_max = b.ultimate.entity.damage_max[4]
	attack.damage_min = b.ultimate.entity.damage_min[4]
end

tt.health.hp_max = b.ultimate.entity.hp_max[4]
tt.regen.health = b.ultimate.entity.regen_health[4]
tt.health.spiked_armor_damage = b.ultimate.entity.spiked_armor_damage[4]
tt.health.armor = b.ultimate.entity.armor[4]
tt = E:register_t("hero_raelyn_command_orders_hit_fx", "fx")
tt.render.sprites[1].name = "hero_raelyn_command_orders_hit_fx_Idle1_1"
tt = E:register_t("hero_raelyn_ultimate_entity_spawn_mod_decal", "modifier")

E:add_comps(tt, "render")

tt.modifier.duration = fts(21)
tt.render.sprites[1].name = "hero_raelyn_command_orders_spawn_fx_Idle1_1"
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].loop = false
tt.modifier.use_mod_offset = false
tt.main_script.update = scripts.mod_track_target.update
tt = E:register_t("hero_builder", "hero5")
b = balance.heroes.hero_builder

E:add_comps(tt, "melee", "ranged", "timed_attacks")

tt.hero.level_stats.armor = b.armor
tt.hero.level_stats.hp_max = b.hp_max
tt.hero.level_stats.melee_damage_max = b.melee_damage_max
tt.hero.level_stats.melee_damage_min = b.melee_damage_min
tt.hero.level_stats.regen_health = b.regen_health
tt.hero.skills.overtime_work = E:clone_c("hero_skill")
tt.hero.skills.overtime_work.cooldown = b.overtime_work.cooldown
tt.hero.skills.overtime_work.damage_min = b.overtime_work.soldier.melee_attack.damage_min
tt.hero.skills.overtime_work.damage_max = b.overtime_work.soldier.melee_attack.damage_max
tt.hero.skills.overtime_work.hp_max = b.overtime_work.soldier.hp_max
tt.hero.skills.overtime_work.hr_available = true
tt.hero.skills.overtime_work.hr_icon = "0006"
tt.hero.skills.overtime_work.hr_order = 1
tt.hero.skills.overtime_work.hr_cost = {
	3,
	3,
	3
}
tt.hero.skills.overtime_work.xp_gain = b.overtime_work.xp_gain
tt.hero.skills.overtime_work.key = "OVERTIME_WORK"
tt.hero.skills.lunch_break = E:clone_c("hero_skill")
tt.hero.skills.lunch_break.cooldown = b.lunch_break.cooldown
tt.hero.skills.lunch_break.heal_hp = b.lunch_break.heal_hp
tt.hero.skills.lunch_break.hr_available = true
tt.hero.skills.lunch_break.hr_icon = "0007"
tt.hero.skills.lunch_break.hr_order = 2
tt.hero.skills.lunch_break.hr_cost = {
	1,
	1,
	1
}
tt.hero.skills.lunch_break.xp_gain = b.lunch_break.xp_gain
tt.hero.skills.lunch_break.key = "LUNCH_BREAK"
tt.hero.skills.demolition_man = E:clone_c("hero_skill")
tt.hero.skills.demolition_man.cooldown = b.demolition_man.cooldown
tt.hero.skills.demolition_man.duration = b.demolition_man.duration
tt.hero.skills.demolition_man.damage_min = b.demolition_man.damage_min
tt.hero.skills.demolition_man.damage_max = b.demolition_man.damage_max
tt.hero.skills.demolition_man.hr_available = true
tt.hero.skills.demolition_man.hr_icon = "0008"
tt.hero.skills.demolition_man.hr_order = 3
tt.hero.skills.demolition_man.hr_cost = {
	2,
	2,
	2
}
tt.hero.skills.demolition_man.xp_gain = b.demolition_man.xp_gain
tt.hero.skills.demolition_man.key = "DEMOLITION_MAN"
tt.hero.skills.defensive_turret = E:clone_c("hero_skill")
tt.hero.skills.defensive_turret.cooldown = b.defensive_turret.cooldown
tt.hero.skills.defensive_turret.attack_cooldown = b.defensive_turret.attack.cooldown
tt.hero.skills.defensive_turret.duration = b.defensive_turret.duration
tt.hero.skills.defensive_turret.damage_min = b.defensive_turret.attack.damage_min
tt.hero.skills.defensive_turret.damage_max = b.defensive_turret.attack.damage_max
tt.hero.skills.defensive_turret.hr_available = true
tt.hero.skills.defensive_turret.hr_icon = "0009"
tt.hero.skills.defensive_turret.hr_order = 4
tt.hero.skills.defensive_turret.hr_cost = {
	2,
	2,
	2
}
tt.hero.skills.defensive_turret.xp_gain = b.defensive_turret.xp_gain
tt.hero.skills.defensive_turret.key = "DEFENSIVE_TURRET"
tt.hero.skills.ultimate = E:clone_c("hero_skill")
tt.hero.skills.ultimate.controller_name = "controller_hero_builder_ultimate"
tt.hero.skills.ultimate.damage = b.ultimate.damage
tt.hero.skills.ultimate.stun_duration = b.ultimate.stun_duration
tt.hero.skills.ultimate.hr_available = false
tt.hero.skills.ultimate.hr_icon = "0010"
tt.hero.skills.ultimate.hr_order = 5
tt.hero.skills.ultimate.hr_cost = {
	1,
	4,
	4,
	4
}
tt.hero.skills.ultimate.key = "WRECKING_BALL"
tt.hero.skills.ultimate.duration = b.ultimate.duration
tt.hero.skills.ultimate.cooldown = b.ultimate.cooldown
tt.hero.team = TEAM_LINIREA
tt.health.dead_lifetime = b.dead_lifetime
tt.health_bar.offset = v(0, 53)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.hero.fn_level_up = scripts.hero_builder.level_up
tt.info.fn = scripts.hero_basic.get_info_melee
tt.info.hero_portrait = "hero_portraits_0004"
tt.info.ultimate_icon = "0004"
tt.info.i18n_key = "HERO_BUILDER"
tt.info.portrait = "portraits_hero" .. "_0004"
tt.info.ultimate_icon = "0004"
tt.info.stat_hp = b.stats.hp
tt.info.stat_armor = b.stats.armor
tt.info.stat_damage = b.stats.damage
tt.info.stat_cooldown = b.stats.cooldown
tt.main_script.insert = scripts.hero_builder.insert
tt.main_script.update = scripts.hero_builder.update
tt.motion.max_speed = b.speed
tt.regen.cooldown = b.regen_cooldown
tt.render.sprites[1].angles = {}
tt.render.sprites[1].angles.walk = {
	"walk"
}
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].prefix = "hero_obdul_hero"
tt.render.sprites[1].draw_order = DO_HEROES
tt.render.sprites[1].scale = v(0.9, 0.9)
tt.ui.click_rect = r(-30, -4, 60, 50)
tt.soldier.melee_slot_offset = v(20, 0)
tt.sound_events.change_rally_point = "HeroBuilderTaunt"
tt.sound_events.death = "HeroBuilderDeath"
tt.sound_events.respawn = "HeroBuilderTauntIntro"
tt.sound_events.hero_room_select = "HeroBuilderTauntSelect"
tt.unit.hit_offset = v(0, 14)
tt.unit.mod_offset = v(0, 13)
tt.unit.size = UNIT_SIZE_MEDIUM
tt.melee.range = balance.heroes.common.melee_attack_range
tt.melee.attacks[1] = E:clone_c("melee_attack")
tt.melee.attacks[1].animation = "attack"
tt.melee.attacks[1].cooldown = b.basic_melee.cooldown
tt.melee.attacks[1].hit_time = fts(14)
tt.melee.attacks[1].hit_fx = "fx_hero_builder_melee_attack_hit"
tt.melee.attacks[1].hit_offset = v(45, 15)
tt.melee.attacks[1].sound = "HeroBuilderBasicAttack"
tt.melee.attacks[1].sound_args = {
	delay = fts(14)
}
tt.melee.attacks[1].xp_gain_factor = b.basic_melee.xp_gain_factor
tt.melee.attacks[1].basic_attack = true
tt.timed_attacks.list[1] = E:clone_c("custom_attack")
tt.timed_attacks.list[1].animation = "skill_5"
tt.timed_attacks.list[1].cast_time = fts(10)
tt.timed_attacks.list[1].cooldown = nil
tt.timed_attacks.list[1].entity = "soldier_hero_builder_worker"
tt.timed_attacks.list[1].max_range = b.overtime_work.max_range
tt.timed_attacks.list[1].min_targets = b.overtime_work.min_targets
tt.timed_attacks.list[1].disabled = true
tt.timed_attacks.list[1].vis_bans = bor(F_FLYING)
tt.timed_attacks.list[1].sound = "HeroBuilderMenAtWork"
tt.timed_attacks.list[1].min_cooldown = 1
tt.timed_attacks.list[1].spawn_fx = "fx_hero_builder_overtime_work_raise"
tt.timed_attacks.list[2] = E:clone_c("mod_attack")
tt.timed_attacks.list[2].animation = "skill_2"
tt.timed_attacks.list[2].cooldown = nil
tt.timed_attacks.list[2].disabled = true
tt.timed_attacks.list[2].lost_health = b.lunch_break.lost_health
tt.timed_attacks.list[2].cast_time = fts(15)
tt.timed_attacks.list[2].mod = "mod_hero_builder_lunch_break"
tt.timed_attacks.list[2].sound = "HeroBuilderLunchBreak"
tt.timed_attacks.list[2].min_cooldown = 1
tt.timed_attacks.list[3] = E:clone_c("custom_attack")
tt.timed_attacks.list[3].animation = "skill_3"
tt.timed_attacks.list[3].cooldown = nil
tt.timed_attacks.list[3].disabled = true
tt.timed_attacks.list[3].cast_time = fts(15)
tt.timed_attacks.list[3].sound = "HeroBuilderDemolitionMan"
tt.timed_attacks.list[3].max_range = b.demolition_man.max_range
tt.timed_attacks.list[3].min_targets = b.demolition_man.min_targets
tt.timed_attacks.list[3].aura = "aura_hero_builder_demolition_man"
tt.timed_attacks.list[3].vis_bans = bor(F_CLIFF, F_NIGHTMARE)
tt.timed_attacks.list[3].fx = "fx_hero_builder_demolition_man"
tt.timed_attacks.list[3].min_cooldown = 1
tt.timed_attacks.list[3].min_fight_cooldown = 2
tt.timed_attacks.list[4] = E:clone_c("custom_attack")
tt.timed_attacks.list[4].animation = "skill_4"
tt.timed_attacks.list[4].cooldown = nil
tt.timed_attacks.list[4].disabled = true
tt.timed_attacks.list[4].cast_time = fts(14)
tt.timed_attacks.list[4].sound_cast = "HeroBuilderDefensiveTurretCast"
tt.timed_attacks.list[4].sound_destroy = "HeroBuilderDefensiveTurretDestroy"
tt.timed_attacks.list[4].entity = "decal_hero_builder_defensive_turret"
tt.timed_attacks.list[4].max_range = b.defensive_turret.max_range
tt.timed_attacks.list[4].build_speed = b.defensive_turret.build_speed
tt.timed_attacks.list[4].min_targets = b.defensive_turret.min_targets
tt.timed_attacks.list[4].spawn_offset = v(51, 0)
tt.timed_attacks.list[4].min_cooldown = 1
tt.timed_attacks.list[4].min_distance_from_border = 100
tt = E:register_t("hero_mecha", "hero5")
b = balance.heroes.hero_mecha

E:add_comps(tt, "ranged", "timed_attacks")

tt.hero.level_stats.armor = b.armor
tt.hero.level_stats.hp_max = b.hp_max
tt.hero.level_stats.ranged_damage_min = b.basic_ranged.damage_min
tt.hero.level_stats.ranged_damage_max = b.basic_ranged.damage_max
tt.hero.level_stats.regen_health = b.regen_health
tt.hero.skills.goblidrones = E:clone_c("hero_skill")
tt.hero.skills.goblidrones.cooldown = b.goblidrones.cooldown
tt.hero.skills.goblidrones.units = b.goblidrones.units
tt.hero.skills.goblidrones.spawn_range = b.goblidrones.spawn_range
tt.hero.skills.goblidrones.min_targets = b.goblidrones.min_targets
tt.hero.skills.goblidrones.attack_cooldown = b.goblidrones.drone.cooldown
tt.hero.skills.goblidrones.min_range = b.goblidrones.drone.ranged_attack.min_range
tt.hero.skills.goblidrones.max_range = b.goblidrones.drone.ranged_attack.max_range
tt.hero.skills.goblidrones.damage_type = b.goblidrones.drone.ranged_attack.damage_type
tt.hero.skills.goblidrones.damage_min = b.goblidrones.drone.ranged_attack.damage_min
tt.hero.skills.goblidrones.damage_max = b.goblidrones.drone.ranged_attack.damage_max
tt.hero.skills.goblidrones.hr_available = true
tt.hero.skills.goblidrones.hr_icon = "0006"
tt.hero.skills.goblidrones.hr_order = 1
tt.hero.skills.goblidrones.hr_cost = {
	3,
	3,
	3
}
tt.hero.skills.goblidrones.xp_gain = b.goblidrones.xp_gain
tt.hero.skills.goblidrones.key = "GOBLIDRONES"
tt.hero.skills.tar_bomb = E:clone_c("hero_skill")
tt.hero.skills.tar_bomb.cooldown = b.tar_bomb.cooldown
tt.hero.skills.tar_bomb.duration = b.tar_bomb.duration
tt.hero.skills.tar_bomb.min_range = b.tar_bomb.min_range
tt.hero.skills.tar_bomb.max_range = b.tar_bomb.max_range
tt.hero.skills.tar_bomb.min_targets = b.tar_bomb.min_targets
tt.hero.skills.tar_bomb.xp_gain = b.tar_bomb.xp_gain
tt.hero.skills.tar_bomb.hr_available = true
tt.hero.skills.tar_bomb.hr_icon = "0007"
tt.hero.skills.tar_bomb.hr_order = 2
tt.hero.skills.tar_bomb.hr_cost = {
	1,
	1,
	1
}
tt.hero.skills.tar_bomb.key = "TAR_BOMB"
tt.hero.skills.power_slam = E:clone_c("hero_skill")
tt.hero.skills.power_slam.cooldown = b.power_slam.cooldown
tt.hero.skills.power_slam.damage_type = b.power_slam.damage_type
tt.hero.skills.power_slam.damage_radius = b.power_slam.damage_radius
tt.hero.skills.power_slam.damage_min = b.power_slam.damage_min
tt.hero.skills.power_slam.damage_max = b.power_slam.damage_max
tt.hero.skills.power_slam.stun_time = b.power_slam.stun_time
tt.hero.skills.power_slam.xp_gain = b.power_slam.xp_gain
tt.hero.skills.power_slam.hr_available = true
tt.hero.skills.power_slam.hr_icon = "0008"
tt.hero.skills.power_slam.hr_order = 3
tt.hero.skills.power_slam.hr_cost = {
	2,
	2,
	2
}
tt.hero.skills.power_slam.key = "POWER_SLAM"
tt.hero.skills.mine_drop = E:clone_c("hero_skill")
tt.hero.skills.mine_drop.cooldown = b.mine_drop.cooldown
tt.hero.skills.mine_drop.max_mines = b.mine_drop.max_mines
tt.hero.skills.mine_drop.min_range = b.mine_drop.min_range
tt.hero.skills.mine_drop.max_range = b.mine_drop.max_range
tt.hero.skills.mine_drop.damage_min = b.mine_drop.damage_min
tt.hero.skills.mine_drop.damage_max = b.mine_drop.damage_max
tt.hero.skills.mine_drop.hr_available = true
tt.hero.skills.mine_drop.hr_icon = "0009"
tt.hero.skills.mine_drop.hr_order = 4
tt.hero.skills.mine_drop.hr_cost = {
	2,
	2,
	2
}
tt.hero.skills.mine_drop.xp_gain = b.mine_drop.xp_gain
tt.hero.skills.mine_drop.key = "MINE_DROP"
tt.hero.skills.ultimate = E:clone_c("hero_skill")
tt.hero.skills.ultimate.controller_name = "controller_hero_mecha_ultimate"
tt.hero.skills.ultimate.cooldown = b.ultimate.cooldown
tt.hero.skills.ultimate.min_range = b.ultimate.ranged_attack.min_range
tt.hero.skills.ultimate.max_range = b.ultimate.ranged_attack.max_range
tt.hero.skills.ultimate.damage_min = b.ultimate.ranged_attack.damage_min
tt.hero.skills.ultimate.damage_max = b.ultimate.ranged_attack.damage_max
tt.hero.skills.ultimate.hr_available = false
tt.hero.skills.ultimate.hr_icon = "0010"
tt.hero.skills.ultimate.hr_order = 5
tt.hero.skills.ultimate.hr_cost = {
	1,
	4,
	4,
	4
}
tt.hero.skills.ultimate.key = "DEATH_FROM_ABOVE"
tt.hero.team = TEAM_DARK_ARMY
tt.hero.fn_level_up = scripts.hero_mecha.level_up
tt.health.dead_lifetime = b.dead_lifetime
tt.health_bar.offset = v(0, 62)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM_MEDIUM
tt.info.fn = scripts.hero_basic.get_info_ranged_with_damage_factor
tt.info.hero_portrait = "hero_portraits_0006"
tt.info.ultimate_icon = "0007"
tt.info.i18n_key = "HERO_MECHA"
tt.info.portrait = "portraits_hero" .. "_0006"
tt.info.stat_hp = b.stats.hp
tt.info.stat_armor = b.stats.armor
tt.info.stat_damage = b.stats.damage
tt.info.stat_cooldown = b.stats.cooldown
tt.info.damage_icon = "shot"
tt.main_script.insert = scripts.hero_mecha.insert
tt.main_script.update = scripts.hero_mecha.update
tt.motion.max_speed = b.speed
tt.regen.cooldown = b.regen_cooldown
tt.render.sprites[1].angles = {}
tt.render.sprites[1].angles.walk = {
	"walk"
}
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].prefix = "hero_onagro_hero"
tt.render.sprites[1].draw_order = DO_HEROES
tt.render.sprites[1].scale = vv(1.15)
tt.ui.click_rect = r(-30, -4, 60, 60)
tt.particles_name_1 = "ps_hero_mecha_smoke_1"
tt.particles_name_2 = "ps_hero_mecha_smoke_2"
tt.soldier.melee_slot_offset = v(20, 0)
tt.sound_events.change_rally_point = "HeroMechaTaunt"
tt.sound_events.death = "HeroMechaDeath"
tt.sound_events.respawn = "HeroMechaTauntIntro"
tt.sound_events.hero_room_select = "HeroMechaTauntSelect"
tt.unit.hit_offset = v(0, 14)
tt.unit.mod_offset = v(0, 13)
tt.unit.size = UNIT_SIZE_MEDIUM
tt.ranged.attacks[1] = E:clone_c("bullet_attack")
tt.ranged.attacks[1].animation = "attack_1"
tt.ranged.attacks[1].bullet = "bullet_hero_mecha"
tt.ranged.attacks[1].bullet_start_offset = {
	v(10, 24)
}
tt.ranged.attacks[1].cooldown = b.basic_ranged.cooldown
tt.ranged.attacks[1].max_range = b.basic_ranged.max_range
tt.ranged.attacks[1].min_range = b.basic_ranged.min_range
tt.ranged.attacks[1].shoot_time = fts(8)
tt.ranged.attacks[1].sound = "HeroMechaBasicAttack"
tt.ranged.attacks[1].vis_bans = bor(F_NIGHTMARE)
tt.ranged.attacks[1].xp_gain_factor = b.basic_ranged.xp_gain_factor
tt.ranged.attacks[1].basic_attack = true
tt.ranged.attacks[2] = table.deepclone(tt.ranged.attacks[1])
tt.ranged.attacks[2].animation = "attack_2"
tt.ranged.attacks[2].bullet_start_offset = {
	v(40, 26)
}
tt.ranged.attacks[2].disabled = true
tt.timed_attacks.list[1] = E:clone_c("custom_attack")
tt.timed_attacks.list[1].animation = "skill_1"
tt.timed_attacks.list[1].cast_time = fts(32)
tt.timed_attacks.list[1].cooldown = nil
tt.timed_attacks.list[1].entity = "drone_hero_mecha"
tt.timed_attacks.list[1].spawn_pos_offset = v(-10, 0)
tt.timed_attacks.list[1].disabled = true
tt.timed_attacks.list[1].sound = "HeroMechaGoblidroneCast"
tt.timed_attacks.list[1].min_cooldown = 1
tt.timed_attacks.list[1].spawn_range = b.goblidrones.spawn_range
tt.timed_attacks.list[1].min_targets = b.goblidrones.min_targets
tt.timed_attacks.list[1].vis_bans = bor(F_NIGHTMARE)
tt.timed_attacks.list[2] = E:clone_c("custom_attack")
tt.timed_attacks.list[2].animation = "skill_2"
tt.timed_attacks.list[2].bullet = "bullet_hero_mecha_tar_bomb"
tt.timed_attacks.list[2].bullet_start_offset = {
	v(15, 22)
}
tt.timed_attacks.list[2].cooldown = nil
tt.timed_attacks.list[2].disabled = true
tt.timed_attacks.list[2].cast_time = fts(20)
tt.timed_attacks.list[2].node_prediction = fts(b.tar_bomb.node_prediction)
tt.timed_attacks.list[2].max_range = b.tar_bomb.max_range
tt.timed_attacks.list[2].min_targets = b.tar_bomb.min_targets
tt.timed_attacks.list[2].vis_bans = bor(F_FLYING, F_NIGHTMARE, F_CLIFF)
tt.timed_attacks.list[2].sound = "HeroMechaTarBombCast"
tt.timed_attacks.list[2].min_cooldown = 1
tt.timed_attacks.list[3] = E:clone_c("custom_attack")
tt.timed_attacks.list[3].animation = "skill_3"
tt.timed_attacks.list[3].cooldown = nil
tt.timed_attacks.list[3].disabled = true
tt.timed_attacks.list[3].cast_time = fts(25)
tt.timed_attacks.list[3].damage_type = b.power_slam.damage_type
tt.timed_attacks.list[3].damage_radius = b.power_slam.damage_radius
tt.timed_attacks.list[3].damage_max = b.power_slam.damage_max
tt.timed_attacks.list[3].damage_min = b.power_slam.damage_min
tt.timed_attacks.list[3].min_targets = b.power_slam.min_targets
tt.timed_attacks.list[3].mod = "mod_hero_mecha_power_slam_stun"
tt.timed_attacks.list[3].vis_bans_trigger = bor(F_FLYING, F_NIGHTMARE)
tt.timed_attacks.list[3].vis_bans_damage = bor(F_FRIEND)
tt.timed_attacks.list[3].sound = "HeroMechaPowerSlamCast"
tt.timed_attacks.list[3].min_cooldown = 1
tt.timed_attacks.list[4] = E:clone_c("custom_attack")
tt.timed_attacks.list[4].animation = "skill_4"
tt.timed_attacks.list[4].bullet = "bullet_hero_mecha_mine"
tt.timed_attacks.list[4].bullet_start_offset = {
	v(0, 60)
}
tt.timed_attacks.list[4].cooldown = nil
tt.timed_attacks.list[4].disabled = true
tt.timed_attacks.list[4].cast_time = fts(23.25)
tt.timed_attacks.list[4].min_range = b.mine_drop.min_range
tt.timed_attacks.list[4].max_range = b.mine_drop.max_range
tt.timed_attacks.list[4].min_targets = b.mine_drop.min_targets
tt.timed_attacks.list[4].min_dist_between_mines = b.mine_drop.min_dist_between_mines
tt.timed_attacks.list[4].spawn_offset = v(51, 0)
tt.timed_attacks.list[4].sound_cast = "HeroMechaMineDropCast"
tt.timed_attacks.list[4].min_cooldown = 1
tt.timed_attacks.list[4].min_distance_from_border = 100
tt = E:register_t("drone_hero_mecha", "decal_scripted")
b = balance.heroes.hero_mecha.goblidrones.drone

E:add_comps(tt, "force_motion", "ranged", "tween")

tt.main_script.update = scripts.drone_hero_mecha.update
tt.flight_height = 60
tt.force_motion.max_a = 1200
tt.force_motion.max_v = 360
tt.force_motion.ramp_radius = 30
tt.force_motion.fr = 0.05
tt.force_motion.a_step = 20
tt.duration = b.duration
tt.start_ts = nil
tt.render.sprites[1].prefix = "hero_onagro_skill_1_drone"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].offset = v(0, tt.flight_height)
tt.render.sprites[1].scale = v(0.75, 0.75)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].name = "hero_onagro_ultimate_layer1_idle"
tt.render.sprites[2].z = Z_DECALS
tt.render.sprites[2].scale = vv(0.2)
tt.ranged.attacks[1] = E:clone_c("bullet_attack")
tt.ranged.attacks[1].animation = "attack"
tt.ranged.attacks[1].cooldown = b.ranged_attack.cooldown
tt.ranged.attacks[1].max_range = b.ranged_attack.max_range
tt.ranged.attacks[1].min_range = b.ranged_attack.min_range
tt.ranged.attacks[1].damage_type = b.ranged_attack.damage_type
tt.ranged.attacks[1].damage_min_config = b.ranged_attack.damage_min
tt.ranged.attacks[1].damage_max_config = b.ranged_attack.damage_max
tt.ranged.attacks[1].hit_time = fts(2)
tt.ranged.attacks[1].hit_cycles = 3
tt.ranged.attacks[1].hit_delay = fts(2)
tt.ranged.attacks[1].hit_fx = "fx_bullet_drone_hero_mecha"
tt.ranged.attacks[1].search_cooldown = 0.1
tt.ranged.attacks[1].shoot_time = fts(8)
tt.ranged.attacks[1].shoot_range = 25
tt.ranged.attacks[1].sound = "HeroMechaGoblidroneAttack"
tt.ranged.attacks[1].sound_args = {
	delay = fts(14)
}
tt.ranged.attacks[1].sound_chance = 0.5
tt.ranged.attacks[1].vis_bans = bor(F_NIGHTMARE)
tt.ranged.attacks[1].xp_gain_factor = b.ranged_attack.xp_gain_factor
tt.ranged.attacks[1].basic_attack = true
tt.tween.disabled = true
tt.tween.remove = false
tt.tween.props[1].name = "offset"
tt.tween.props[1].loop = true
tt.tween.props[1].keys = {
	{
		0,
		v(0, tt.flight_height + 2)
	},
	{
		0.4,
		v(0, tt.flight_height - 2)
	},
	{
		0.8,
		v(0, tt.flight_height + 2)
	}
}
tt.tween.props[1].interp = "sine"
tt = E:register_t("zeppelin_hero_mecha", "decal_scripted")
b = balance.heroes.hero_mecha.ultimate

E:add_comps(tt, "force_motion", "ranged", "tween")

tt.decal = "decal_hero_mecha_ultimate"
tt.main_script.update = scripts.zeppelin_hero_mecha.update
tt.force_motion.max_a = 900
tt.force_motion.max_v = b.speed_out_of_range
tt.force_motion.ramp_radius = 30
tt.force_motion.fr = 0.05
tt.force_motion.a_step = 20
tt.flight_height = 60
tt.flight_height_attack = 30
tt.duration = b.duration
tt.start_ts = nil

for i = 1, 5 do
	tt.render.sprites[i] = E:clone_c("sprite")
	tt.render.sprites[i].prefix = "hero_onagro_ultimate_layer" .. i
	tt.render.sprites[i].name = "idle"
	tt.render.sprites[i].group = "layers"
	tt.render.sprites[i].offset = v(0, tt.flight_height)
	tt.render.sprites[i].z = Z_FLYING_HEROES
end

tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].offset = v(0, 0)
tt.render.sprites[1].scale = v(0.5, 0.5)
tt.render.sprites[4].z = Z_BULLETS + 1
tt.ranged.attacks[1] = E:clone_c("bullet_attack")
tt.ranged.attacks[1].animation = "attack"
tt.ranged.attacks[1].bullet = "bullet_zeppelin_hero_mecha"
tt.ranged.attacks[1].bullet_start_offset = {
	v(0, 120)
}
tt.ranged.attacks[1].cooldown = b.ranged_attack.cooldown
tt.ranged.attacks[1].max_range = b.ranged_attack.max_range
tt.ranged.attacks[1].min_range = b.ranged_attack.min_range
tt.ranged.attacks[1].damage_type = b.ranged_attack.damage_type
tt.ranged.attacks[1].damage_min_config = b.ranged_attack.damage_min
tt.ranged.attacks[1].damage_max_config = b.ranged_attack.damage_max
tt.ranged.attacks[1].shoot_time = fts(4)
tt.ranged.attacks[1].sound_args = {
	delay = fts(14)
}
tt.ranged.attacks[1].sound_chance = 0.5
tt.ranged.attacks[1].vis_bans = bor(F_NIGHTMARE)
tt.ranged.attacks[1].xp_gain_factor = b.ranged_attack.xp_gain_factor
tt.ranged.attacks[1].basic_attack = true
tt.tween.disabled = true
tt.tween.remove = false
tt.tween.props[1].name = "offset"
tt.tween.props[1].loop = false
tt.tween.props[1].keys = {
	{
		0,
		v(0, tt.flight_height)
	},
	{
		2,
		v(0, tt.flight_height_attack)
	}
}
tt.tween.props[1].interp = "linear"
tt.tween.props[1].sprite_id = 2
tt.tween.props[2] = table.deepclone(tt.tween.props[1])
tt.tween.props[2].sprite_id = 3
tt.tween.props[3] = table.deepclone(tt.tween.props[1])
tt.tween.props[3].sprite_id = 4
tt.tween.props[4] = table.deepclone(tt.tween.props[1])
tt.tween.props[4].sprite_id = 5
tt.tween.props[5] = table.deepclone(tt.tween.props[1])
tt.tween.props[5].name = "scale"
tt.tween.props[5].keys = {
	{
		0,
		v(0.5, 0.5)
	},
	{
		2,
		v(1, 1)
	}
}
tt.tween.props[5].sprite_id = 1
tt.speed_out_of_range = b.speed_out_of_range
tt.speed_in_range = b.speed_in_range
tt.attack_radius = b.attack_radius
tt = E:register_t("hero_venom", "hero5")
b = balance.heroes.hero_venom

E:add_comps(tt, "melee", "ranged", "timed_attacks")

tt.hero.level_stats.armor = b.armor
tt.hero.level_stats.hp_max = b.hp_max
tt.hero.level_stats.melee_damage_min = b.basic_melee.damage_min
tt.hero.level_stats.melee_damage_max = b.basic_melee.damage_max
tt.hero.level_stats.regen_health = b.regen_health
tt.hero.skills.ranged_tentacle = E:clone_c("hero_skill")
tt.hero.skills.ranged_tentacle.cooldown = b.ranged_tentacle.cooldown
tt.hero.skills.ranged_tentacle.damage_min = b.ranged_tentacle.damage_min
tt.hero.skills.ranged_tentacle.damage_max = b.ranged_tentacle.damage_max
tt.hero.skills.ranged_tentacle.bleed_chance = b.ranged_tentacle.bleed_chance
tt.hero.skills.ranged_tentacle.bleed_damage_min = b.ranged_tentacle.bleed_damage_min
tt.hero.skills.ranged_tentacle.bleed_damage_max = b.ranged_tentacle.bleed_damage_max
tt.hero.skills.ranged_tentacle.bleed_every = b.ranged_tentacle.bleed_every
tt.hero.skills.ranged_tentacle.bleed_duration = b.ranged_tentacle.bleed_duration
tt.hero.skills.ranged_tentacle.hr_available = true
tt.hero.skills.ranged_tentacle.hr_icon = "0006"
tt.hero.skills.ranged_tentacle.hr_order = 1
tt.hero.skills.ranged_tentacle.hr_cost = {
	1,
	1,
	1
}
tt.hero.skills.ranged_tentacle.xp_gain = b.ranged_tentacle.xp_gain
tt.hero.skills.ranged_tentacle.key = "RANGED_TENTACLE"
tt.hero.skills.inner_beast = E:clone_c("hero_skill")
tt.hero.skills.inner_beast.cooldown = b.inner_beast.cooldown
tt.hero.skills.inner_beast.duration = b.inner_beast.duration
tt.hero.skills.inner_beast.damage_factor = b.inner_beast.basic_melee.damage_factor
tt.hero.skills.inner_beast.trigger_hp = b.inner_beast.trigger_hp
tt.hero.skills.inner_beast.xp_gain = b.inner_beast.xp_gain
tt.hero.skills.inner_beast.hr_available = true
tt.hero.skills.inner_beast.hr_icon = "0007"
tt.hero.skills.inner_beast.hr_order = 2
tt.hero.skills.inner_beast.hr_cost = {
	3,
	2,
	1
}
tt.hero.skills.inner_beast.key = "INNER_BEAST"
tt.hero.skills.floor_spikes = E:clone_c("hero_skill")
tt.hero.skills.floor_spikes.cooldown = b.floor_spikes.cooldown
tt.hero.skills.floor_spikes.damage_type = b.floor_spikes.damage_type
tt.hero.skills.floor_spikes.damage_radius = b.floor_spikes.damage_radius
tt.hero.skills.floor_spikes.damage_min = b.floor_spikes.damage_min
tt.hero.skills.floor_spikes.damage_max = b.floor_spikes.damage_max
tt.hero.skills.floor_spikes.spikes = b.floor_spikes.spikes
tt.hero.skills.floor_spikes.xp_gain = b.floor_spikes.xp_gain
tt.hero.skills.floor_spikes.hr_available = true
tt.hero.skills.floor_spikes.hr_icon = "0008"
tt.hero.skills.floor_spikes.hr_order = 3
tt.hero.skills.floor_spikes.hr_cost = {
	2,
	2,
	2
}
tt.hero.skills.floor_spikes.key = "FLOOR_SPIKES"
tt.hero.skills.eat_enemy = E:clone_c("hero_skill")
tt.hero.skills.eat_enemy.cooldown = b.eat_enemy.cooldown
tt.hero.skills.eat_enemy.hp_trigger = b.eat_enemy.hp_trigger
tt.hero.skills.eat_enemy.regen = b.eat_enemy.regen
tt.hero.skills.eat_enemy.cooldown = b.eat_enemy.cooldown
tt.hero.skills.eat_enemy.hr_available = true
tt.hero.skills.eat_enemy.hr_icon = "0009"
tt.hero.skills.eat_enemy.hr_order = 4
tt.hero.skills.eat_enemy.hr_cost = {
	3,
	3,
	3
}
tt.hero.skills.eat_enemy.xp_gain = b.eat_enemy.xp_gain
tt.hero.skills.eat_enemy.key = "EAT_ENEMY"
tt.hero.skills.ultimate = E:clone_c("hero_skill")
tt.hero.skills.ultimate.controller_name = "controller_hero_venom_ultimate"
tt.hero.skills.ultimate.cooldown = b.ultimate.cooldown
tt.hero.skills.ultimate.duration = b.ultimate.duration
tt.hero.skills.ultimate.damage_min = b.ultimate.damage_min
tt.hero.skills.ultimate.damage_max = b.ultimate.damage_max
tt.hero.skills.ultimate.hr_available = false
tt.hero.skills.ultimate.hr_icon = "0010"
tt.hero.skills.ultimate.hr_order = 5
tt.hero.skills.ultimate.hr_cost = {
	1,
	4,
	4,
	4
}
tt.hero.skills.ultimate.key = "CREEPING_DEATH"
tt.hero.team = TEAM_DARK_ARMY
tt.hero.fn_level_up = scripts.hero_venom.level_up
tt.health.dead_lifetime = b.dead_lifetime
tt.health_bar.offset = v(0, 40)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM_MEDIUM
tt.info.fn = scripts.hero_venom.get_info
tt.info.hero_portrait = "hero_portraits_0008"
tt.info.ultimate_icon = "0008"
tt.info.i18n_key = "HERO_VENOM"
tt.info.portrait = "portraits_hero" .. "_0008"
tt.info.stat_hp = b.stats.hp
tt.info.stat_armor = b.stats.armor
tt.info.stat_damage = b.stats.damage
tt.info.stat_cooldown = b.stats.cooldown
tt.main_script.insert = scripts.hero_venom.insert
tt.main_script.update = scripts.hero_venom.update
tt.motion.max_speed = b.speed
tt.regen.cooldown = b.regen_cooldown
tt.slimewalk = {}
tt.slimewalk.min_distance = b.distance_to_slimewalk
tt.slimewalk.extra_speed = b.slimewalk_speed
tt.slimewalk.animations = {
	"run_in",
	"run",
	"run_out"
}
tt.slimewalk.decal = "decal_hero_venom_slimewalk"
tt.slimewalk.sound = nil
tt.beast = {}
tt.beast.health_bar_offset = v(0, 55)
tt.beast.health_bar_type = HEALTH_BAR_SIZE_MEDIUM_LARGE
tt.beast.click_rect = r(-30, -5, 60, 60)
tt.beast.hit_mod_offset = v(0, 25)
tt.beast.regen_health = b.inner_beast.basic_melee.regen_health
tt.beast.lvl_up_fx = "fx_hero_venom_beast_lvl_up"
tt.render.sprites[1].angles = {}
tt.render.sprites[1].angles.walk = {
	"walk"
}
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].prefix = "hero_venom_hero"
tt.render.sprites[1].draw_order = DO_HEROES
tt.soldier.melee_slot_offset = v(20, 0)
tt.sound_events.change_rally_point = "HeroVenomTaunt"
tt.sound_events.death = "HeroVenomDeath"
tt.sound_events.respawn = "HeroVenomTauntIntro"
tt.sound_events.hero_room_select = "HeroVenomTauntSelect"
tt.unit.hit_offset = v(0, 14)
tt.unit.mod_offset = v(0, 14)
tt.melee.range = balance.heroes.common.melee_attack_range
tt.melee.attacks[1] = E:clone_c("melee_attack")
tt.melee.attacks[1].animation = "attack_1"
tt.melee.attacks[1].cooldown = b.basic_melee.cooldown
tt.melee.attacks[1].shared_cooldown = b.basic_melee.cooldown
tt.melee.attacks[1].hit_time = fts(16)
tt.melee.attacks[1].hit_fx = "fx_hero_venom_melee_attack_hit"
tt.melee.attacks[1].hit_offset = v(45, 15)
tt.melee.attacks[1].sound = "HeroVenomBasicAttack"
tt.melee.attacks[1].sound_args = {
	delay = fts(14)
}
tt.melee.attacks[1].xp_gain_factor = b.basic_melee.xp_gain_factor
tt.melee.attacks[1].basic_attack = true
tt.melee.attacks[2] = table.deepclone(tt.melee.attacks[1])
tt.melee.attacks[2].animation = "attack_2"
tt.melee.attacks[2].chance = 0.2
tt.melee.attacks[2].hit_time = fts(20)
tt.melee.attacks[3] = table.deepclone(tt.melee.attacks[1])
tt.melee.attacks[3].animation = "attack_1"
tt.melee.attacks[3].cooldown = b.inner_beast.basic_melee.cooldown
tt.melee.attacks[3].shared_cooldown = nil
tt.melee.attacks[3].hit_time = fts(10)
tt.melee.attacks[3].disabled = true
tt.melee.attacks[3].xp_gain_factor = b.inner_beast.basic_melee.xp_gain_factor
tt.melee.attacks[4] = table.deepclone(tt.melee.attacks[3])
tt.melee.attacks[4].animation = "attack_2"
tt.melee.attacks[4].hit_time = fts(8)
tt.melee.attacks[5] = table.deepclone(tt.melee.attacks[3])
tt.melee.attacks[5].animation = "attack_3"
tt.melee.attacks[5].hit_time = fts(8)
tt.melee.attacks[6] = E:clone_c("melee_attack")
tt.melee.attacks[6].vis_bans = bor(F_FLYING, F_BOSS, F_MINIBOSS, F_NIGHTMARE)
tt.melee.attacks[6].animation = "instakill"
tt.melee.attacks[6].cooldown = nil
tt.melee.attacks[6].hp_trigger = b.eat_enemy.hp_trigger[1]
tt.melee.attacks[6].hit_time = fts(23)
tt.melee.attacks[6].sound_hit = nil
tt.melee.attacks[6].sound_hit_args = {
	delay = fts(14)
}
tt.melee.attacks[6].xp_from_skill = "eat_enemy"
tt.melee.attacks[6].basic_attack = false
tt.melee.attacks[6].instakill = true
tt.melee.attacks[6].disabled = true
tt.melee.attacks[6].fn_can = function(t, s, a, target)
	return target.health and target.health.hp <= target.health.hp_max * a.hp_trigger and band(a.vis_bans, target.vis.flags) == 0 and not t.is_transformed
end
tt.melee.attacks[6].mod_regen = "mod_hero_venom_eat_enemy_regen"
tt.melee.attacks[6].sound = "HeroVenomRenewFleshCast"
tt.melee.attacks[6].sound_args = {
	delay = fts(10)
}
tt.timed_attacks.list[1] = E:clone_c("bullet_attack")
tt.timed_attacks.list[1].animation = "ranged_skill"
tt.timed_attacks.list[1].min_range = b.ranged_tentacle.min_range
tt.timed_attacks.list[1].max_range = b.ranged_tentacle.max_range
tt.timed_attacks.list[1].bullet = "bullet_hero_venom_ranged_tentacle"
tt.timed_attacks.list[1].shoot_time = fts(4)
tt.timed_attacks.list[1].bullet_start_offset = v(8, 15)
tt.timed_attacks.list[1].cooldown = nil
tt.timed_attacks.list[1].disabled = true
tt.timed_attacks.list[1].ignore_out_of_range_check = 1
tt.timed_attacks.list[1].sound = "HeroVenomHeartseekerCast"
tt.timed_attacks.list[1].min_cooldown = b.shared_cooldown
tt.timed_attacks.list[1].vis_bans = bor(F_NIGHTMARE)
tt.timed_attacks.list[2] = E:clone_c("custom_attack")
tt.timed_attacks.list[2].animation_in = "beast_in"
tt.timed_attacks.list[2].animation_out = "out"
tt.timed_attacks.list[2].cooldown = nil
tt.timed_attacks.list[2].disabled = true
tt.timed_attacks.list[2].vis_bans = bor(F_FLYING, F_NIGHTMARE)
tt.timed_attacks.list[2].sound_in = "HeroVenomInnerBeastCast"
tt.timed_attacks.list[2].sound_out = "HeroVenomInnerBeastOut"
tt.timed_attacks.list[2].min_cooldown = b.shared_cooldown
tt.timed_attacks.list[3] = E:clone_c("custom_attack")
tt.timed_attacks.list[3].animation_in = "spikes_in"
tt.timed_attacks.list[3].animation_idle = "spikes_idle"
tt.timed_attacks.list[3].animation_out = "spikes_out"
tt.timed_attacks.list[3].cooldown = nil
tt.timed_attacks.list[3].disabled = true
tt.timed_attacks.list[3].cast_time = fts(12)
tt.timed_attacks.list[3].damage_type = b.floor_spikes.damage_type
tt.timed_attacks.list[3].range_trigger_min = b.floor_spikes.range_trigger_min
tt.timed_attacks.list[3].range_trigger_max = b.floor_spikes.range_trigger_max
tt.timed_attacks.list[3].spikes = b.floor_spikes.spikes
tt.timed_attacks.list[3].min_targets = b.floor_spikes.min_targets
tt.timed_attacks.list[3].vis_bans = bor(F_FLYING, F_NIGHTMARE, F_CLIFF)
tt.timed_attacks.list[3].vis_flags = bor(F_AREA)
tt.timed_attacks.list[3].sound_in = "HeroVenomDeadlySpikesCast"
tt.timed_attacks.list[3].sound_out = "HeroVenomDeadlySpikesOut"
tt.timed_attacks.list[3].min_cooldown = b.shared_cooldown
tt.timed_attacks.list[3].spike_template = {
	"decal_hero_venom_spike_a",
	"decal_hero_venom_spike_b"
}
tt.ui.click_rect = r(-27, -5, 54, 50)
tt.death_decal = "decal_hero_venom_death"

tt = E:register_t("hero_lava", "hero5")
b = balance.heroes.hero_lava

E:add_comps(tt, "melee", "ranged", "timed_attacks", "transfer")

tt.hero.level_stats.armor = b.armor
tt.hero.level_stats.hp_max = b.hp_max
tt.hero.level_stats.melee_damage_max = b.melee_damage_max
tt.hero.level_stats.melee_damage_min = b.melee_damage_min
tt.hero.level_stats.regen_health = b.regen_health
tt.hero.skills.temper_tantrum = E:clone_c("hero_skill")
tt.hero.skills.temper_tantrum.cooldown = b.temper_tantrum.cooldown
tt.hero.skills.temper_tantrum.damage_max = b.temper_tantrum.damage_max
tt.hero.skills.temper_tantrum.damage_min = b.temper_tantrum.damage_min
tt.hero.skills.temper_tantrum.duration = b.temper_tantrum.duration
tt.hero.skills.temper_tantrum.hr_available = true
tt.hero.skills.temper_tantrum.hr_icon = "0022"
tt.hero.skills.temper_tantrum.hr_order = 1
tt.hero.skills.temper_tantrum.hr_cost = {
	2,
	2,
	2
}
tt.hero.skills.temper_tantrum.xp_gain = b.temper_tantrum.xp_gain
tt.hero.skills.hotheaded = E:clone_c("hero_skill")
tt.hero.skills.hotheaded.key = "TEMPER_TANTRUM"
tt.hero.skills.hotheaded = E:clone_c("hero_skill")
tt.hero.skills.hotheaded.mods = {
	"mod_hero_lava_hotheaded",
	"mod_hero_lava_hotheaded_fx"
}
tt.hero.skills.hotheaded.durations = b.hotheaded.durations
tt.hero.skills.hotheaded.damage_factors = b.hotheaded.damage_factors
tt.hero.skills.hotheaded.hr_available = true
tt.hero.skills.hotheaded.hr_icon = "0023"
tt.hero.skills.hotheaded.hr_order = 2
tt.hero.skills.hotheaded.hr_cost = {
	1,
	2,
	3
}
tt.hero.skills.hotheaded.xp_gain = b.hotheaded.xp_gain
tt.hero.skills.hotheaded.key = "HOTHEADED"
tt.hero.skills.double_trouble = E:clone_c("hero_skill")
tt.hero.skills.double_trouble.cooldown = b.double_trouble.cooldown
tt.hero.skills.double_trouble.hr_available = true
tt.hero.skills.double_trouble.hr_icon = "0025"
tt.hero.skills.double_trouble.hr_order = 3
tt.hero.skills.double_trouble.hr_cost = {
	2,
	2,
	2
}
tt.hero.skills.double_trouble.damage_min = b.double_trouble.damage_min
tt.hero.skills.double_trouble.damage_max = b.double_trouble.damage_max
tt.hero.skills.double_trouble.soldier_damage_min = b.double_trouble.soldier.damage_min
tt.hero.skills.double_trouble.soldier_damage_max = b.double_trouble.soldier.damage_max
tt.hero.skills.double_trouble.soldier_hp_max = b.double_trouble.soldier.hp_max
tt.hero.skills.double_trouble.xp_gain = b.double_trouble.xp_gain
tt.hero.skills.double_trouble.key = "DOUBLE_TROUBLE"
tt.hero.skills.wild_eruption = E:clone_c("hero_skill")
tt.hero.skills.wild_eruption.cooldown = b.double_trouble.cooldown
tt.hero.skills.wild_eruption.hr_available = true
tt.hero.skills.wild_eruption.hr_icon = "0025"
tt.hero.skills.wild_eruption.hr_order = 4
tt.hero.skills.wild_eruption.hr_cost = {
	2,
	2,
	2
}
tt.hero.skills.wild_eruption.damage_min = b.wild_eruption.damage_min
tt.hero.skills.wild_eruption.damage_max = b.wild_eruption.damage_max
tt.hero.skills.wild_eruption.duration = b.wild_eruption.duration
tt.hero.skills.wild_eruption.xp_gain = b.double_trouble.xp_gain
tt.hero.skills.wild_eruption.key = "WILD_ERUPTION"
tt.hero.skills.ultimate = E:clone_c("hero_skill")
tt.hero.skills.ultimate.controller_name = "hero_lava_ultimate"
tt.hero.skills.ultimate.hr_available = false
tt.hero.skills.ultimate.hr_icon = "0056"
tt.hero.skills.ultimate.hr_order = 5
tt.hero.skills.ultimate.hr_cost = {
	1,
	4,
	4,
	4
}
tt.hero.skills.ultimate.key = "ULTIMATE"
tt.hero.skills.ultimate.cooldown = b.ultimate.cooldown
tt.hero.skills.ultimate.damage_min = b.ultimate.bullet.damage_min
tt.hero.skills.ultimate.damage_max = b.ultimate.bullet.damage_max
tt.hero.skills.ultimate.fireball_count = b.ultimate.fireball_count
tt.hero.skills.ultimate.scorch_damage_min = b.ultimate.bullet.scorch.damage_min
tt.hero.skills.ultimate.scorch_damage_max = b.ultimate.bullet.scorch.damage_max
tt.hero.team = TEAM_DARK_ARMY
tt.health.dead_lifetime = b.dead_lifetime
tt.health_bar.offset = v(0, 50)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.hero.fn_level_up = scripts.hero_lava.level_up
tt.info.fn = scripts.hero_basic.get_info_melee
tt.info.hero_portrait = "hero_portraits_0016"
tt.info.i18n_key = "HERO_LAVA"
tt.info.portrait = "portraits_hero" .. "_0016"
tt.info.ultimate_icon = "0016"
tt.info.ultimate_pointer_style = "area"
tt.info.stat_hp = b.stats.hp
tt.info.stat_armor = b.stats.armor
tt.info.stat_damage = b.stats.damage
tt.info.stat_cooldown = b.stats.cooldown
tt.main_script.insert = scripts.hero_lava.insert
tt.main_script.update = scripts.hero_lava.update
tt.motion.max_speed = b.speed
tt.transfer.speed_factor = 4
tt.transfer.min_distance = 150
tt.transfer.animations = {
	"death",
	"death_walk",
	"respawn"
}
tt.regen.cooldown = b.regen_cooldown
tt.render.sprites[1].angles = {}
tt.render.sprites[1].angles.walk = {
	"walk"
}
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].prefix = "hero_lava_hero"
tt.render.sprites[1].scale = v(1.05, 1.05)
tt.render.sprites[1].draw_order = DO_HEROES
tt.soldier.melee_slot_offset = v(10, 0)
tt.sound_events.change_rally_point = "HeroKratoaTaunt"
tt.sound_events.death = "HeroKratoaDeath"
tt.sound_events.respawn = "HeroKratoaTauntIntro"
tt.sound_events.hero_room_select = "HeroKratoaTauntSelect"
tt.unit.hit_offset = v(0, 14)
tt.unit.mod_offset = v(0, 13)
tt.melee.range = balance.heroes.common.melee_attack_range
tt.melee.attacks[1] = E:clone_c("melee_attack")
tt.melee.attacks[1].animation = "melee_attack"
tt.melee.attacks[1].cooldown = b.basic_melee.cooldown
tt.melee.attacks[1].hit_time = fts(14)
-- tt.melee.attacks[1].hit_fx = "hero_raelyn_melee_attack_hit"
tt.melee.attacks[1].hit_offset = v(35, 15)
tt.melee.attacks[1].sound = "HeroKratoaBasicAttack"
tt.melee.attacks[1].xp_gain_factor = b.basic_melee.xp_gain_factor
tt.melee.attacks[1].basic_attack = true
tt.melee.attacks[2] = E:clone_c("melee_attack")
tt.melee.attacks[2].disabled = true
tt.melee.attacks[2].cooldown = nil
tt.melee.attacks[2].damage_max = nil
tt.melee.attacks[2].damage_min = nil
tt.melee.attacks[2].loops = 1
tt.melee.attacks[2].hit_times = {
	fts(15),
	fts(25),
	fts(43)
}
tt.melee.attacks[2].sound = "HeroKratoaTemperTantrum"
tt.melee.attacks[2].animations = {
	nil,
	"skill_1"
}
tt.melee.attacks[2].damage_type = b.temper_tantrum.damage_type
tt.melee.attacks[2].xp_from_skill = "temper_tantrum"
tt.melee.attacks[2].hit_offset = v(35, 0)
tt.melee.attacks[2].mod = "mod_hero_lava_temper_tantrum_stun"
tt.timed_attacks.list[1] = E:clone_c("mod_attack")
tt.timed_attacks.list[1].animation = "skill_2"
tt.timed_attacks.list[1].cooldown = 0
tt.timed_attacks.list[1].min_range = 0
tt.timed_attacks.list[1].max_range = b.hotheaded.range
tt.timed_attacks.list[1].mod = "mod_hero_lava_hotheaded"
tt.timed_attacks.list[1].disabled = true
tt.timed_attacks.list[1].cast_time = fts(8)
tt.timed_attacks.list[1].sound = "HeroKratoaHotheaded"
tt.timed_attacks.list[1].mod_decal = "mod_hero_lava_hotheaded_fx"
tt.ranged.attacks[1] = E:clone_c("bullet_attack")
tt.ranged.attacks[1].animation = "skill_3"
tt.ranged.attacks[1].bullet = "bomb_hero_lava_double_touble"
tt.ranged.attacks[1].bullet_start_offset = {
	v(20, 40)
}
tt.ranged.attacks[1].cooldown = b.double_trouble.cooldown[1]
tt.ranged.attacks[1].min_range = b.double_trouble.min_range
tt.ranged.attacks[1].max_range = b.double_trouble.max_range
tt.ranged.attacks[1].shoot_time = fts(23)
tt.ranged.attacks[1].vis_bans = bor(F_NIGHTMARE, F_FLYING)
tt.ranged.attacks[1].shared_cooldown = true
tt.ranged.attacks[1].node_prediction = fts(8) + fts(15)
tt.ranged.attacks[1].disabled = true
tt.ranged.attacks[1].xp_from_skill = "double_trouble"
tt.timed_attacks.list[2] = E:clone_c("mod_attack")
tt.timed_attacks.list[2].animation_in = "skill_4_in"
tt.timed_attacks.list[2].animation_loop = "skill_4_loop"
tt.timed_attacks.list[2].animation_out = "skill_4_out"
tt.timed_attacks.list[2].cooldown = nil
tt.timed_attacks.list[2].duration = nil
tt.timed_attacks.list[2].tick = 1
tt.timed_attacks.list[2].cast_time = fts(13)
tt.timed_attacks.list[2].disabled = true
tt.timed_attacks.list[2].vis_bans = bor(F_FRIEND)
tt.timed_attacks.list[2].vis_flags = bor(F_RANGED)
tt.timed_attacks.list[2].max_range_trigger = b.wild_eruption.max_range_trigger
tt.timed_attacks.list[2].min_range_trigger = 0
tt.timed_attacks.list[2].max_range_effect = b.wild_eruption.max_range_effect
tt.timed_attacks.list[2].min_range_effect = 0
tt.timed_attacks.list[2].loop_duration = b.wild_eruption.loop_duration
tt.timed_attacks.list[2].min_targets = b.wild_eruption.min_targets
tt.timed_attacks.list[2].mod = "mod_hero_lava_wild_eruption_burning"
tt.timed_attacks.list[2].sound = "HeroKratoaWildEruption"
tt.ui.click_rect = r(-20, -5, 40, 43)
tt.death_aura = "aura_hero_lava_death"
tt._combo_ultimate = {}
tt._combo_ultimate.bullet_start_offset = v(0, 30)
tt._combo_ultimate.bullet = "bullet_combo_ultimate_hero_lava"
tt._combo_ultimate.min_radius = b.ultimate_combo.min_radius
tt._combo_ultimate.max_radius = b.ultimate_combo.max_radius
tt._combo_ultimate.vis_flags = bor(F_RANGED)
tt._combo_ultimate.vis_bans = bor(F_NIGHTMARE, F_FRIEND)
tt._combo_ultimate.max_targets = b.ultimate_combo.max_targets
tt._combo_ultimate.cast_time = 0
tt._combo_ultimate.node_prediction = fts(8) + fts(15)
tt._combo_ultimate.wait_between_shots = fts(3)
tt.sound_death_ulti = "HeroKratoaRageOutburstDeath"
tt = E:register_t("hero_lava_ultimate")
b = balance.heroes.hero_lava.ultimate

E:add_comps(tt, "pos", "main_script", "sound_events")

tt.can_fire_fn = scripts.hero_lava_ultimate.can_fire_fn
tt.cooldown = nil
tt.fireball_count = nil
tt.max_spread = b.max_spread
tt.bullet = "bullet_ultimate_hero_lava"
tt.main_script.update = scripts.hero_lava_ultimate.update

tt = E:register_t("hero_robot", "hero5")
b = balance.heroes.hero_robot

E:add_comps(tt, "melee", "ranged", "timed_attacks")

tt.hero.level_stats.armor = b.armor
tt.hero.level_stats.hp_max = b.hp_max
tt.hero.level_stats.melee_damage_min = b.basic_melee.damage_min
tt.hero.level_stats.melee_damage_max = b.basic_melee.damage_max
tt.hero.level_stats.regen_health = b.regen_health
tt.hero.skills.jump = E:clone_c("hero_skill")
tt.hero.skills.jump.cooldown = b.jump.cooldown
tt.hero.skills.jump.damage_min = b.jump.damage_min
tt.hero.skills.jump.damage_max = b.jump.damage_max
tt.hero.skills.jump.stun_duration = b.jump.stun_duration
tt.hero.skills.jump.hr_available = true
tt.hero.skills.jump.hr_order = 1
tt.hero.skills.jump.hr_cost = {
	1,
	1,
	1
}
tt.hero.skills.jump.xp_gain = b.jump.xp_gain
tt.hero.skills.jump.key = "JUMP"
tt.hero.skills.fire = E:clone_c("hero_skill")
tt.hero.skills.fire.cooldown = b.fire.cooldown
tt.hero.skills.fire.damage_min = b.fire.damage_min
tt.hero.skills.fire.damage_max = b.fire.damage_max
tt.hero.skills.fire.smoke_duration = b.fire.smoke_duration
tt.hero.skills.fire.slow_duration = b.fire.slow_duration
tt.hero.skills.fire.hr_available = true
tt.hero.skills.fire.hr_order = 2
tt.hero.skills.fire.hr_cost = {
	2,
	2,
	2
}
tt.hero.skills.fire.xp_gain = b.fire.xp_gain
tt.hero.skills.fire.key = "FIRE"
tt.hero.skills.explode = E:clone_c("hero_skill")
tt.hero.skills.explode.cooldown = b.explode.cooldown
tt.hero.skills.explode.damage_min = b.explode.damage_min
tt.hero.skills.explode.damage_max = b.explode.damage_max
tt.hero.skills.explode.burning_damage_min = b.explode.burning_damage_min
tt.hero.skills.explode.burning_damage_max = b.explode.burning_damage_max
tt.hero.skills.explode.hr_available = true
tt.hero.skills.explode.hr_order = 3
tt.hero.skills.explode.hr_cost = {
	3,
	3,
	3
}
tt.hero.skills.explode.xp_gain = b.explode.xp_gain
tt.hero.skills.explode.key = "EXPLODE"
tt.hero.skills.uppercut = E:clone_c("hero_skill")
tt.hero.skills.uppercut.cooldown = b.uppercut.cooldown
tt.hero.skills.uppercut.max_health = b.uppercut.max_health
tt.hero.skills.uppercut.life_threshold = b.uppercut.life_threshold
tt.hero.skills.uppercut.hr_available = true
tt.hero.skills.uppercut.hr_order = 4
tt.hero.skills.uppercut.hr_cost = {
	3,
	2,
	1
}
tt.hero.skills.uppercut.xp_gain = b.uppercut.xp_gain
tt.hero.skills.uppercut.key = "UPPERCUT"
tt.hero.skills.ultimate = E:clone_c("hero_skill")
tt.hero.skills.ultimate.controller_name = "controller_hero_robot_ultimate"
tt.hero.skills.ultimate.cooldown = b.ultimate.cooldown
tt.hero.skills.ultimate.damage_min = b.ultimate.damage_min
tt.hero.skills.ultimate.damage_max = b.ultimate.damage_max
tt.hero.skills.ultimate.burning_damage_min = b.ultimate.burning_damage_min
tt.hero.skills.ultimate.burning_damage_max = b.ultimate.burning_damage_max
tt.hero.skills.ultimate.hr_available = false
tt.hero.skills.ultimate.hr_icon = "0010"
tt.hero.skills.ultimate.hr_order = 5
tt.hero.skills.ultimate.hr_cost = {
	1,
	4,
	4,
	4
}
tt.hero.skills.ultimate.key = "TRAIN"
tt.particles_name_1 = "ps_hero_robot_smoke_1"
tt.particles_name_2 = "ps_hero_robot_smoke_2"
tt.hero.team = TEAM_DARK_ARMY
tt.hero.fn_level_up = scripts.hero_robot.level_up
tt.health.dead_lifetime = b.dead_lifetime
tt.health_bar.offset = v(0, 55)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM_MEDIUM
tt.info.fn = scripts.hero_basic.get_info_melee
tt.info.hero_portrait = "hero_portraits_0009"
tt.info.ultimate_icon = "0009"
tt.info.i18n_key = "HERO_ROBOT"
tt.info.portrait = "portraits_hero" .. "_0009"
tt.info.stat_hp = b.stats.hp
tt.info.stat_armor = b.stats.armor
tt.info.stat_damage = b.stats.damage
tt.info.stat_cooldown = b.stats.cooldown
tt.main_script.insert = scripts.hero_robot.insert
tt.main_script.update = scripts.hero_robot.update
tt.motion.max_speed = b.speed
tt.regen.cooldown = b.regen_cooldown
tt.render.sprites[1].angles = {}
tt.render.sprites[1].angles.walk = {
	"walk"
}
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].prefix = "Blaze_pibe"
tt.render.sprites[1].draw_order = DO_HEROES
tt.soldier.melee_slot_offset = v(20, 0)
tt.sound_events.change_rally_point = "HeroRobotTaunt"
tt.sound_events.death = "HeroRobotDeath"
tt.sound_events.respawn = "HeroRobotTauntIntro"
tt.sound_events.hero_room_select = "HeroRobotTauntSelect"
tt.unit.hit_offset = v(0, 14)
tt.unit.mod_offset = v(0, 14)
tt.melee.range = balance.heroes.common.melee_attack_range
tt.melee.attacks[1] = E:clone_c("melee_attack")
tt.melee.attacks[1].animation = "attack"
tt.melee.attacks[1].cooldown = b.basic_melee.cooldown
tt.melee.attacks[1].shared_cooldown = b.basic_melee.cooldown
tt.melee.attacks[1].hit_time = fts(16)
tt.melee.attacks[1].hit_offset = v(45, 15)
tt.melee.attacks[1].xp_gain_factor = b.basic_melee.xp_gain_factor
tt.melee.attacks[1].basic_attack = true
tt.melee.attacks[1].sound = "CommonNoSwordAttack"
tt.melee.attacks[1].sound_args = {
	delay = fts(8)
}
tt.timed_attacks.list[1] = E:clone_c("custom_attack")
tt.timed_attacks.list[1].animation_prepare = "skill1start"
tt.timed_attacks.list[1].animation = "skill1"
tt.timed_attacks.list[1].cooldown = nil
tt.timed_attacks.list[1].vis_bans = bor(F_FLYING, F_CLIFF, F_NIGHTMARE)
tt.timed_attacks.list[1].vis_flags = bor(F_STUN)
tt.timed_attacks.list[1].disabled = true
tt.timed_attacks.list[1].sound_cast = "HeroRobotDeepImpactCast"
tt.timed_attacks.list[1].sound_impact = "HeroRobotDeepImpactImpact"
tt.timed_attacks.list[1].sound_impact_args = {
	delay = fts(14)
}
tt.timed_attacks.list[1].min_cooldown = b.shared_cooldown
tt.timed_attacks.list[1].min_range = b.jump.min_range
tt.timed_attacks.list[1].max_range = b.jump.max_range
tt.timed_attacks.list[1].node_prediction = fts(36)
tt.timed_attacks.list[1].aura = "aura_hero_robot_skill_jump"
tt.timed_attacks.list[1].fall_ahead = 8
tt.timed_attacks.list[1].damage_radius = b.jump.damage_radius
tt.timed_attacks.list[1].damage_min = nil
tt.timed_attacks.list[1].damage_max = nil
tt.timed_attacks.list[1].damage_type = b.jump.damage_type
tt.timed_attacks.list[1].damage_bans = bor(F_FRIEND)
tt.timed_attacks.list[1].damage_flags = bor(F_AREA)
tt.timed_attacks.list[2] = E:clone_c("custom_attack")
tt.timed_attacks.list[2].disabled = true
tt.timed_attacks.list[2].min_cooldown = b.shared_cooldown
tt.timed_attacks.list[2].animation = "skill2"
tt.timed_attacks.list[2].min_range = b.fire.min_range
tt.timed_attacks.list[2].max_range = b.fire.max_range
tt.timed_attacks.list[2].node_prediction = fts(36)
tt.timed_attacks.list[2].shoot_time = fts(25)
tt.timed_attacks.list[2].bullet = "bullet_hero_robot_skill_fire"
tt.timed_attacks.list[2].bullet_start_offset = v(7, 26)
tt.timed_attacks.list[2].shoots = 16
tt.timed_attacks.list[2].min_targets = b.fire.min_targets
tt.timed_attacks.list[2].vis_bans = bor(F_NIGHTMARE)
tt.timed_attacks.list[2].damage_bans = bor(F_FRIEND)
tt.timed_attacks.list[2].damage_flags = bor(F_AREA)
tt.timed_attacks.list[2].sound = "HeroRobotSmokescreenCast"
tt.timed_attacks.list[2].sound_args = {
	delay = fts(0)
}
tt.timed_attacks.list[3] = E:clone_c("custom_attack")
tt.timed_attacks.list[3].animation = "skill4"
tt.timed_attacks.list[3].cooldown = nil
tt.timed_attacks.list[3].damage_min = nil
tt.timed_attacks.list[3].damage_max = nil
tt.timed_attacks.list[3].vis_bans = bor(F_NIGHTMARE)
tt.timed_attacks.list[3].disabled = true
tt.timed_attacks.list[3].min_cooldown = b.shared_cooldown
tt.timed_attacks.list[3].min_range = b.explode.min_range
tt.timed_attacks.list[3].max_range = b.explode.max_range
tt.timed_attacks.list[3].node_prediction = fts(36)
tt.timed_attacks.list[3].decal = "decal_hero_robot_skill_explode"
tt.timed_attacks.list[3].load_time = fts(25)
tt.timed_attacks.list[3].damage_bans = bor(F_FRIEND)
tt.timed_attacks.list[3].damage_flags = bor(F_AREA)
tt.timed_attacks.list[3].damage_radius = b.explode.damage_radius
tt.timed_attacks.list[3].damage_type = b.explode.damage_type
tt.timed_attacks.list[3].mod = "mod_hero_robot_skill_explode"
tt.timed_attacks.list[3].min_targets = b.explode.min_targets
tt.timed_attacks.list[3].sound = "HeroRobotImmolationCast"
tt.timed_attacks.list[4] = E:clone_c("custom_attack")
tt.timed_attacks.list[4].vis_bans = bor(F_BOSS, F_MINIBOSS, F_FLYING, F_NIGHTMARE)
tt.timed_attacks.list[4].disabled = true
tt.timed_attacks.list[4].min_cooldown = b.shared_cooldown
tt.timed_attacks.list[4].animation = "skill3"
tt.timed_attacks.list[4].shoot_time = fts(25)
tt.timed_attacks.list[4].enemy_move_offset = v(10, 40)
tt.timed_attacks.list[4].mod = "mod_hero_robot_skill_uppercut"
tt.timed_attacks.list[4].life_threshold = nil
tt.timed_attacks.list[4].sound = "HeroRobotUppercutCast"
tt.ui.click_rect = r(-27, -5, 54, 50)
tt.ui.click_rect_fly = r(-27, 20, 54, 50)
tt.ui.click_rect_nofly = r(-27, -5, 54, 50)
tt.vis.bans = bor(F_POLYMORPH, F_DISINTEGRATED, F_CANNIBALIZE, F_SKELETON, F_BLOOD, F_POISON)
tt.flywalk = {}
tt.flywalk.min_distance = b.distance_to_flywalk
tt.flywalk.extra_speed = b.flywalk_speed
tt.flywalk.animations = {
	"flystart",
	"passiveloop",
	"passiveout"
}
tt.flywalk.sound = "HeroRobotJetpackCast"
tt = E:register_t("hero_hunter", "hero5")
b = balance.heroes.hero_hunter

E:add_comps(tt, "melee", "ranged", "timed_attacks")

tt.hero.level_stats.armor = b.armor
tt.hero.level_stats.hp_max = b.hp_max
tt.hero.level_stats.melee_damage_min = b.basic_melee.damage_min
tt.hero.level_stats.melee_damage_max = b.basic_melee.damage_max
tt.hero.level_stats.regen_health = b.regen_health
tt.hero.skills.heal_strike = E:clone_c("hero_skill")
tt.hero.skills.heal_strike.damage_min = b.heal_strike.damage_min
tt.hero.skills.heal_strike.damage_max = b.heal_strike.damage_max
tt.hero.skills.heal_strike.heal_factor = b.heal_strike.heal_factor
tt.hero.skills.heal_strike.hr_available = true
tt.hero.skills.heal_strike.hr_order = 1
tt.hero.skills.heal_strike.hr_cost = {
	2,
	2,
	2
}
tt.hero.skills.heal_strike.hits_to_trigger = b.heal_strike.hits_to_trigger
tt.hero.skills.heal_strike.xp_gain = b.heal_strike.xp_gain
tt.hero.skills.heal_strike.key = "HEAL_STRIKE"
tt.hero.skills.ricochet = E:clone_c("hero_skill")
tt.hero.skills.ricochet.cooldown = b.ricochet.cooldown
tt.hero.skills.ricochet.damage_min = b.ricochet.damage_min
tt.hero.skills.ricochet.damage_max = b.ricochet.damage_max
tt.hero.skills.ricochet.bounces = b.ricochet.bounces
tt.hero.skills.ricochet.hr_available = true
tt.hero.skills.ricochet.hr_order = 2
tt.hero.skills.ricochet.hr_cost = {
	2,
	2,
	2
}
tt.hero.skills.ricochet.xp_gain = b.ricochet.xp_gain
tt.hero.skills.ricochet.key = "RICOCHET"
tt.hero.skills.shoot_around = E:clone_c("hero_skill")
tt.hero.skills.shoot_around.cooldown = b.shoot_around.cooldown
tt.hero.skills.shoot_around.damage_min = b.shoot_around.damage_min
tt.hero.skills.shoot_around.damage_max = b.shoot_around.damage_max
tt.hero.skills.shoot_around.duration = b.shoot_around.duration
tt.hero.skills.shoot_around.hr_available = true
tt.hero.skills.shoot_around.hr_order = 3
tt.hero.skills.shoot_around.hr_cost = {
	3,
	3,
	3
}
tt.hero.skills.shoot_around.xp_gain = b.shoot_around.xp_gain
tt.hero.skills.shoot_around.key = "SHOOT_AROUND"
tt.hero.skills.beasts = E:clone_c("hero_skill")
tt.hero.skills.beasts.cooldown = b.beasts.cooldown
tt.hero.skills.beasts.damage_min = b.beasts.damage_min
tt.hero.skills.beasts.damage_max = b.beasts.damage_max
tt.hero.skills.beasts.gold_to_steal = b.beasts.gold_to_steal
tt.hero.skills.beasts.duration = b.beasts.duration
tt.hero.skills.beasts.hr_available = true
tt.hero.skills.beasts.hr_order = 4
tt.hero.skills.beasts.hr_cost = {
	1,
	1,
	1
}
tt.hero.skills.beasts.xp_gain = b.beasts.xp_gain
tt.hero.skills.beasts.key = "BEASTS"
tt.hero.skills.ultimate = E:clone_c("hero_skill")
tt.hero.skills.ultimate.controller_name = "controller_hero_hunter_ultimate"
tt.hero.skills.ultimate.cooldown = b.ultimate.cooldown
tt.hero.skills.ultimate.damage_min = b.ultimate.entity.basic_ranged.damage_min
tt.hero.skills.ultimate.damage_max = b.ultimate.entity.basic_ranged.damage_max
tt.hero.skills.ultimate.hr_available = false
tt.hero.skills.ultimate.hr_icon = "0010"
tt.hero.skills.ultimate.hr_order = 5
tt.hero.skills.ultimate.hr_cost = {
	1,
	4,
	4,
	4
}
tt.hero.skills.ultimate.key = "SPIRIT"
tt.hero.team = TEAM_LINIREA
tt.hero.fn_level_up = scripts.hero_hunter.level_up
tt.health.dead_lifetime = b.dead_lifetime
tt.health_bar.offset = v(0, 40)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM_MEDIUM
tt.info.fn = scripts.hero_basic.get_info_melee
tt.info.hero_portrait = "hero_portraits_0010"
tt.info.ultimate_icon = "0010"
tt.info.i18n_key = "HERO_HUNTER"
tt.info.portrait = "portraits_hero" .. "_0010"
tt.info.stat_hp = b.stats.hp
tt.info.stat_armor = b.stats.armor
tt.info.stat_damage = b.stats.damage
tt.info.stat_cooldown = b.stats.cooldown
tt.main_script.insert = scripts.hero_hunter.insert
tt.main_script.update = scripts.hero_hunter.update
tt.motion.max_speed = b.speed
tt.regen.cooldown = b.regen_cooldown
tt.render.sprites[1].angles = {}
tt.render.sprites[1].angles.walk = {
	"run"
}
tt.render.sprites[1].angles.shot = {
	"shoot_diagonal",
	"shoot_side",
	"shoot_diagonal_up",
	"shoot_up",
	"shoot_down"
}
tt.render.sprites[1].angles.aim = {
	"aim_diagonal",
	"aim_side",
	"aim_diagonal_up",
	"aim_up",
	"aim_down"
}
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].prefix = "anya"
tt.render.sprites[1].draw_order = DO_HEROES
tt.soldier.melee_slot_offset = v(20, 0)
tt.sound_events.change_rally_point = "HeroHunterTaunt"
tt.sound_events.death = "HeroHunterDeath"
tt.sound_events.respawn = "HeroHunterTauntIntro"
tt.sound_events.hero_room_select = "HeroHunterTauntSelect"
tt.unit.hit_offset = v(0, 14)
tt.unit.mod_offset = v(0, 14)
tt.melee.range = balance.heroes.common.melee_attack_range
tt.melee.attacks[1] = E:clone_c("melee_attack")
tt.melee.attacks[1].animations = {
	nil,
	"melee_loop"
}
tt.melee.attacks[1].cooldown = b.basic_melee.cooldown
tt.melee.attacks[1].shared_cooldown = b.basic_melee.cooldown
tt.melee.attacks[1].hit_times = {
	fts(7),
	fts(15)
}
tt.melee.attacks[1].loops = 1
tt.melee.attacks[1].hit_offset = v(45, 15)
tt.melee.attacks[1].xp_gain_factor = b.basic_melee.xp_gain_factor
tt.melee.attacks[1].basic_attack = true
tt.melee.attacks[1].sound = "MeleeSword"
tt.ranged.attacks[1] = E:clone_c("bullet_attack")
tt.ranged.attacks[1].animation = "shot"
tt.ranged.attacks[1].animation_aim = "aim"
tt.ranged.attacks[1].animation_prepare = "aim_start"
tt.ranged.attacks[1].bullet = "bullet_hero_hunter_ranged_attack"
tt.ranged.attacks[1].cooldown = b.basic_ranged.cooldown
tt.ranged.attacks[1].max_range = b.basic_ranged.max_range
tt.ranged.attacks[1].min_range = b.basic_ranged.min_range
tt.ranged.attacks[1].shoot_time = fts(4)
tt.ranged.attacks[1].vis_bans = bor(F_NIGHTMARE)
tt.ranged.attacks[1].shared_cooldown = true
tt.ranged.attacks[1].basic_attack = true
tt.ranged.attacks[1].sound = "HeroHunterBasicAttack"
tt.timed_attacks.list[1] = E:clone_c("custom_attack")
tt.timed_attacks.list[1].animation = "skill1"
tt.timed_attacks.list[1].shoot_time = fts(4)
tt.timed_attacks.list[1].damage_type = b.heal_strike.damage_type
tt.timed_attacks.list[1].disabled = true
tt.timed_attacks.list[1].hits_to_trigger = 6
tt.timed_attacks.list[1].hit_fx = "fx_hero_hunter_skill_heal_strike_hit"
tt.timed_attacks.list[1].hit_offset = v(45, 15)
tt.timed_attacks.list[1].sound = "HeroHunterHealStrikeCast"
tt.timed_attacks.list[2] = E:clone_c("custom_attack")
tt.timed_attacks.list[2].animation = "idle"
tt.timed_attacks.list[2].bullet = "arrow_hero_hunter_ricochet"
tt.timed_attacks.list[2].cooldown = nil
tt.timed_attacks.list[2].disabled = true
tt.timed_attacks.list[2].xp_from_skill = "ricochet"
tt.timed_attacks.list[2].shoot_time = fts(0)
tt.timed_attacks.list[2].min_targets = b.ricochet.min_targets
tt.timed_attacks.list[2].max_range_trigger = b.ricochet.max_range_trigger
tt.timed_attacks.list[2].min_range = 0
tt.timed_attacks.list[2].max_range_trigger = b.ricochet.max_range_trigger
tt.timed_attacks.list[2].min_targets = b.ricochet.min_targets
tt.timed_attacks.list[2].vis_flags = bor(F_RANGED)
tt.timed_attacks.list[2].vis_bans = bor(F_FLYING)
tt.timed_attacks.list[2].node_prediction = fts(10)
tt.timed_attacks.list[2].min_cooldown = b.shared_cooldown
tt.timed_attacks.list[2].entity_waiting = "decal_hero_hunter_skill_ricochet_entity"
tt.timed_attacks.list[2].sound = "HeroHunterRicochetCast"
tt.timed_attacks.list[3] = E:clone_c("custom_attack")
tt.timed_attacks.list[3].animations = {
	"argent_storm_in",
	"argent_storm_loop",
	"argent_storm_out"
}
tt.timed_attacks.list[3].cooldown = nil
tt.timed_attacks.list[3].disabled = true
tt.timed_attacks.list[3].cast_time = fts(15)
tt.timed_attacks.list[3].max_range = b.shoot_around.max_range
tt.timed_attacks.list[3].min_targets = b.shoot_around.min_targets
tt.timed_attacks.list[3].aura = "aura_hero_hunter_shoot_around"
tt.timed_attacks.list[3].vis_bans = bor(F_NIGHTMARE, F_FRIEND)
tt.timed_attacks.list[3].fx = "fx_hero_builder_demolition_man"
tt.timed_attacks.list[3].min_cooldown = b.shared_cooldown
tt.timed_attacks.list[3].min_fight_cooldown = 2
tt.timed_attacks.list[3].sound = "HeroHunterShootAroundCast"
tt.timed_attacks.list[3].sound_interrupt = "HeroHunterShootAroundInterrupt"
tt.timed_attacks.list[4] = E:clone_c("custom_attack")
tt.timed_attacks.list[4].animation = "dusk_beasts"
tt.timed_attacks.list[4].cooldown = nil
tt.timed_attacks.list[4].disabled = true
tt.timed_attacks.list[4].cast_time = fts(15)
tt.timed_attacks.list[4].max_range = b.beasts.max_range
tt.timed_attacks.list[4].vis_bans = bor(F_NIGHTMARE)
tt.timed_attacks.list[4].vis_flags = bor(F_RANGED)
tt.timed_attacks.list[4].min_cooldown = b.shared_cooldown
tt.timed_attacks.list[4].entity = "soldier_hero_hunter_beast"
tt.timed_attacks.list[4].spawn_offset_y = 0
tt.timed_attacks.list[4].spawn_offset_x = 30
tt.timed_attacks.list[4].sound = "HeroHunterBeastsCast"
tt.ui.click_rect = r(-20, -5, 40, 40)
tt.vis.bans = bor(F_POLYMORPH, F_DISINTEGRATED, F_CANNIBALIZE, F_SKELETON, F_BLOOD, F_POISON)
tt.flywalk = {}
tt.flywalk.min_distance = b.distance_to_flywalk
tt.flywalk.extra_speed = b.flywalk_speed
tt.flywalk.animations = {
	"mist_run_in",
	"mist_run_loop",
	"mist_run_end"
}
tt.flywalk.sound = "HeroHunterRicochetCast"
tt.flywalk.trail = "ps_hero_hunter_walk_trail"
tt = E:register_t("hero_dragon_gem", "hero5")

E:add_comps(tt, "ranged", "timed_attacks", "tween")

b = balance.heroes.hero_dragon_gem
tt.hero.level_stats.armor = b.armor
tt.hero.level_stats.hp_max = b.hp_max
tt.hero.level_stats.melee_damage_max = {
	1,
	2,
	4,
	4,
	5,
	6,
	7,
	8,
	9,
	10
}
tt.hero.level_stats.melee_damage_min = {
	1,
	2,
	3,
	4,
	5,
	6,
	7,
	8,
	9,
	10
}
tt.hero.level_stats.regen_health = b.regen_health
tt.hero.level_stats.ranged_damage_min = b.basic_ranged_shot.damage_min
tt.hero.level_stats.ranged_damage_max = b.basic_ranged_shot.damage_max
tt.hero.skills.stun = E:clone_c("hero_skill")
tt.hero.skills.stun.hr_cost = {
	3,
	2,
	1
}
tt.hero.skills.stun.hr_icon = "0041"
tt.hero.skills.stun.hr_order = 1
tt.hero.skills.stun.hr_available = true
tt.hero.skills.stun.duration = b.stun.duration
tt.hero.skills.stun.cooldown = b.stun.cooldown
tt.hero.skills.stun.xp_gain = b.stun.xp_gain
tt.hero.skills.stun.key = "STUN"
tt.hero.skills.floor_impact = E:clone_c("hero_skill")
tt.hero.skills.floor_impact.cooldown = b.floor_impact.cooldown
tt.hero.skills.floor_impact.damage_min = b.floor_impact.damage_min
tt.hero.skills.floor_impact.damage_max = b.floor_impact.damage_max
tt.hero.skills.floor_impact.hr_cost = {
	2,
	2,
	2
}
tt.hero.skills.floor_impact.hr_icon = "0042"
tt.hero.skills.floor_impact.hr_order = 2
tt.hero.skills.floor_impact.hr_available = true
tt.hero.skills.floor_impact.xp_gain = b.floor_impact.xp_gain
tt.hero.skills.floor_impact.key = "FLOOR_IMPACT"
tt.hero.skills.crystal_instakill = E:clone_c("hero_skill")
tt.hero.skills.crystal_instakill.cooldown = b.crystal_instakill.cooldown
tt.hero.skills.crystal_instakill.damage_min = b.crystal_instakill.damage_aoe_min
tt.hero.skills.crystal_instakill.damage_max = b.crystal_instakill.damage_aoe_max
tt.hero.skills.crystal_instakill.hp_max = b.crystal_instakill.hp_max
tt.hero.skills.crystal_instakill.hr_cost = {
	3,
	3,
	3
}
tt.hero.skills.crystal_instakill.hr_icon = "0043"
tt.hero.skills.crystal_instakill.hr_order = 3
tt.hero.skills.crystal_instakill.hr_available = true
tt.hero.skills.crystal_instakill.xp_gain = b.crystal_instakill.xp_gain
tt.hero.skills.crystal_instakill.key = "CRYSTAL_INSTAKILL"
tt.hero.skills.crystal_totem = E:clone_c("hero_skill")
tt.hero.skills.crystal_totem.cooldown = b.crystal_totem.cooldown
tt.hero.skills.crystal_totem.duration = b.crystal_totem.duration
tt.hero.skills.crystal_totem.damage_min = b.crystal_totem.damage_min
tt.hero.skills.crystal_totem.damage_max = b.crystal_totem.damage_max
tt.hero.skills.crystal_totem.hr_cost = {
	1,
	1,
	1
}
tt.hero.skills.crystal_totem.hr_icon = "0044"
tt.hero.skills.crystal_totem.hr_order = 4
tt.hero.skills.crystal_totem.hr_available = true
tt.hero.skills.crystal_totem.xp_gain = b.crystal_totem.xp_gain
tt.hero.skills.crystal_totem.key = "CRYSTAL_TOTEM"
tt.hero.skills.ultimate = E:clone_c("hero_skill")
tt.hero.skills.ultimate.controller_name = "hero_dragon_gem_ultimate"
tt.hero.skills.ultimate.damage_min = b.ultimate.damage_min
tt.hero.skills.ultimate.damage_max = b.ultimate.damage_max
tt.hero.skills.ultimate.max_shards = b.ultimate.max_shards
tt.hero.skills.ultimate.hr_available = false
tt.hero.skills.ultimate.hr_icon = "0006"
tt.hero.skills.ultimate.hr_order = 5
tt.hero.skills.ultimate.hr_cost = {
	1,
	3,
	4,
	5
}
tt.hero.skills.ultimate.hr_available = true
tt.hero.skills.ultimate.key = "FALLING_CRYSTALS"
tt.hero.skills.ultimate.cooldown = b.ultimate.cooldown
tt.hero.team = TEAM_DARK_ARMY
tt.flight_height = 80
tt.health.dead_lifetime = 30
tt.health_bar.draw_order = -1
tt.health_bar.offset = v(0, 170)
tt.health_bar.sort_y_offset = -171
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM_LARGE
tt.health_bar.z = Z_FLYING_HEROES
tt.hero.fn_level_up = scripts.hero_dragon_gem.level_up
tt.hero.use_custom_spawn_point = true
tt.idle_flip.cooldown = 10
tt.info.fn = scripts.hero_basic.get_info_ranged_with_damage_factor
tt.info.hero_portrait = "hero_portraits_0011"
tt.info.i18n_key = "HERO_DRAGON_GEM"
tt.info.portrait = "portraits_hero" .. "_0011"
tt.info.ultimate_icon = "0011"
tt.info.ultimate_pointer_style = "area"
tt.info.stat_hp = b.stats.hp
tt.info.stat_armor = b.stats.armor
tt.info.stat_damage = b.stats.damage
tt.info.stat_cooldown = b.stats.cooldown
tt.main_script.insert = scripts.hero_dragon_gem.insert
tt.main_script.update = scripts.hero_dragon_gem.update
tt.motion.max_speed = b.speed
tt.nav_rally.requires_node_nearby = false
tt.nav_grid.ignore_waypoints = true
tt.all_except_flying_nowalk = bor(TERRAIN_NONE, TERRAIN_LAND, TERRAIN_WATER, TERRAIN_CLIFF, TERRAIN_NOWALK, TERRAIN_SHALLOW, TERRAIN_FAERIE, TERRAIN_ICE)
tt.nav_grid.valid_terrains = tt.all_except_flying_nowalk
tt.nav_grid.valid_terrains_dest = tt.all_except_flying_nowalk
tt.drag_line_origin_offset = v(0, tt.flight_height)
tt.regen.cooldown = 1
tt.render.sprites[1].offset.y = tt.flight_height
tt.render.sprites[1].animated = true
tt.render.sprites[1].prefix = "hero_evil_dragon_hero"
tt.render.sprites[1].name = "respawn"
tt.render.sprites[1].angles.walk = {
	"walk"
}
tt.render.sprites[1].z = Z_FLYING_HEROES
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "decal_flying_hero_shadow"
tt.render.sprites[2].offset = v(0, 0)
tt.render.sprites[2].z = Z_DECALS + 1
tt.soldier.melee_slot_offset = v(0, 0)
tt.sound_events.change_rally_point = "HeroDragonGemTaunt"
tt.sound_events.death = "HeroDragonGemDeath"
tt.sound_events.respawn = "HeroDragonGemTauntIntro"
tt.sound_events.hero_room_select = "HeroDragonGemTauntSelect"
tt.ui.click_rect = r(-37, tt.flight_height - 20, 90, 85)
tt.unit.hit_offset = v(0, tt.flight_height + 10)
tt.unit.mod_offset = v(0, tt.flight_height + 10)
tt.unit.death_animation = "death_dragon"
tt.unit.hide_after_death = false
tt.hero.tombstone_concurrent_with_death = true
tt.hero.tombstone_show_time = fts(1)
tt.hero.tombstone_decal = "decal_hero_dragon_gem_crystal_tomb"
tt.hero.tombstone_force_over_path = true
tt.hero.tombstone_respawn_animation = "respawn_crystals"
tt.hero.respawn_animation = "respawn_dragon"
tt.vis.bans = bor(tt.vis.bans, F_EAT, F_NET, F_POISON)
tt.vis.flags = bor(tt.vis.flags, F_FLYING)
tt.passive_charge = {}
tt.passive_charge.distance_to_charge = b.passive_charge.distance_threshold
tt.passive_charge.mod = "mod_hero_dragon_gem_passive_charge"
tt.passive_charge.shots_amount = b.passive_charge.shots_amount
tt.ranged.attacks[1] = E:clone_c("bullet_attack")
tt.ranged.attacks[1].bullet = "bolt_hero_dragon_gem_attack"
tt.ranged.attacks[1].bullet_start_offset = {
	v(46, tt.flight_height - 23),
	v(50, tt.flight_height - 23)
}
tt.ranged.attacks[1].cooldown = 1
tt.ranged.attacks[1].min_range = b.basic_ranged_shot.min_range
tt.ranged.attacks[1].max_range = b.basic_ranged_shot.max_range
tt.ranged.attacks[1].shoot_time = fts(14)
tt.ranged.attacks[1].sync_animation = true
tt.ranged.attacks[1].animation = "attack"
tt.ranged.attacks[1].start_sound = "HeroDragonGemBasicAttackCast"
tt.ranged.attacks[1].vis_bans = bor(F_NIGHTMARE)
tt.ranged.attacks[1].ignore_offset = v(0, tt.flight_height + 10)
tt.ranged.attacks[1].radius = 100
tt.ranged.attacks[1].basic_attack = true
tt.ranged.attacks[2] = E:clone_c("aura_attack")
tt.ranged.attacks[2].disabled = true
tt.ranged.attacks[2].animation = "breath"
tt.ranged.attacks[2].shoot_time = fts(12)
tt.ranged.attacks[2].min_targets = b.stun.min_targets
tt.ranged.attacks[2].min_range = 0
tt.ranged.attacks[2].max_range = b.stun.range
tt.ranged.attacks[2].sync_animation = true
tt.ranged.attacks[2].xp_from_skill = "stun"
tt.ranged.attacks[2].vis_flags = bor(F_RANGED, F_ENEMY, F_STUN)
tt.ranged.attacks[2].vis_bans = F_FLYING
tt.ranged.attacks[2].bullet = "ray_hero_dragon_gem_stun"
tt.ranged.attacks[2].range_nodes_max = 30
tt.ranged.attacks[2].range_nodes_min = 20
tt.ranged.attacks[2].bullet_start_offset = {
	v(46, tt.flight_height - 23),
	v(50, tt.flight_height - 23)
}
tt.ranged.attacks[2].sound = "HeroDragonGemParalyzingBreathCast"
tt.ranged.attacks[3] = E:clone_c("aura_attack")
tt.ranged.attacks[3].disabled = true
tt.ranged.attacks[3].mod = "mod_hero_lumenir_sword_hit"
tt.ranged.attacks[3].min_nodes = 20
tt.ranged.attacks[3].cooldown = nil
tt.ranged.attacks[3].fall_time = fts(24)
tt.ranged.attacks[3].sync_animation = true
tt.ranged.attacks[3].animation = "shards"
tt.ranged.attacks[3].vis_flags = bor(F_RANGED)
tt.ranged.attacks[3].vis_bans = bor(F_FLYING, F_NIGHTMARE, F_CLIFF)
tt.ranged.attacks[3].range = b.floor_impact.range
tt.ranged.attacks[3].xp_from_skill = "floor_impact"
tt.ranged.attacks[3].range_nodes_max = b.floor_impact.max_nodes_trigger
tt.ranged.attacks[3].range_nodes_min = b.floor_impact.min_nodes_trigger
tt.ranged.attacks[3].min_targets = b.floor_impact.min_targets
tt.ranged.attacks[3].entity = "decal_hero_dragon_gem_floor_impact_shard"
tt.ranged.attacks[3].floor_decal = "decal_hero_dragon_gem_floor_decal"
tt.ranged.attacks[3].shards = b.floor_impact.shards
tt.ranged.attacks[3].nodes_between_shards = b.floor_impact.nodes_between_shards
tt.ranged.attacks[3].initial_offset = 4
tt.ranged.attacks[3].distance_to_start_node = 20
tt.ranged.attacks[3].controller = "controller_hero_dragon_gem_skill_floor_impact_spawner"
tt.ranged.attacks[3].sound = "HeroDragonGemPrismaticShardCast"
tt.ranged.attacks[4] = E:clone_c("mod_attack")
tt.ranged.attacks[4].disabled = true
tt.ranged.attacks[4].cooldown = nil
tt.ranged.attacks[4].shoot_time = fts(15)
tt.ranged.attacks[4].sync_animation = true
tt.ranged.attacks[4].mod = "mod_hero_dragon_gem_crystal_instakill"
tt.ranged.attacks[4].animation = "red_death"
tt.ranged.attacks[4].max_range = b.crystal_instakill.max_range
tt.ranged.attacks[4].hp_max = nil
tt.ranged.attacks[4].vis_flags = bor(F_RANGED, F_MOD)
tt.ranged.attacks[4].vis_bans = bor(F_BOSS, F_MINIBOSS, F_FLYING, F_CLIFF)
tt.ranged.attacks[4].xp_from_skill = "crystal_instakill"
tt.ranged.attacks[4].sound = "HeroDragonGemRedDeathCast"
tt.ranged.attacks[4].sound_args = {
	delay = fts(11)
}
tt.ranged.attacks[5] = E:clone_c("bullet_attack")
tt.ranged.attacks[5].disabled = true
tt.ranged.attacks[5].cooldown = nil
tt.ranged.attacks[5].animation = "conduit"
tt.ranged.attacks[5].sync_animation = true
tt.ranged.attacks[5].bullet = "bullet_hero_dragon_gem_crystal_totem"
tt.ranged.attacks[5].bullet_start_offset = v(0, tt.flight_height + 20)
tt.ranged.attacks[5].shoot_time = fts(12)
tt.ranged.attacks[5].min_targets = b.crystal_totem.min_targets
tt.ranged.attacks[5].max_range_trigger = b.crystal_totem.max_range_trigger
tt.ranged.attacks[5].vis_flags = bor(F_RANGED)
tt.ranged.attacks[5].vis_bans = bor(F_FRIEND)
tt.ranged.attacks[5].xp_from_skill = "crystal_totem"
tt.ranged.attacks[5].nodes_prediction = 10
tt.ranged.attacks[5].sound = "HeroDragonGemPowerConduitCast"
tt.tween.disabled = true
tt.tween.remove = false
tt.tween.props[1].sprite_id = 2
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.5,
		255
	}
}
tt.unit.hide_after_death = true

tt = E:register_t("hero_dragon_gem_ultimate")
b = balance.heroes.hero_dragon_gem.ultimate

E:add_comps(tt, "pos", "main_script", "sound_events")

tt.can_fire_fn = scripts.hero_dragon_gem_ultimate.can_fire_fn
tt.main_script.update = scripts.hero_dragon_gem_ultimate.update
tt.range = b.range
tt.spawn_delay = fts(5)
tt.vis_flags = bor(F_RANGED)
tt.vis_bans = bor(F_FRIEND)
tt.decal = "decal_hero_dragon_gem_ultimate_shard"
tt.max_shards = b.max_shards
tt.prediction_nodes = fts(15)
tt.distance_between_shards = b.distance_between_shards
tt.random_ni_spread = b.random_ni_spread
tt = E:register_t("hero_bird", "hero5")

E:add_comps(tt, "ranged", "timed_attacks", "tween")

b = balance.heroes.hero_bird
tt.hero.level_stats.armor = b.armor
tt.hero.level_stats.hp_max = b.hp_max
tt.hero.level_stats.melee_damage_max = {
	1,
	2,
	4,
	4,
	5,
	6,
	7,
	8,
	9,
	10
}
tt.hero.level_stats.melee_damage_min = {
	1,
	2,
	3,
	4,
	5,
	6,
	7,
	8,
	9,
	10
}
tt.hero.level_stats.regen_health = b.regen_health
tt.hero.level_stats.ranged_damage_min = b.basic_attack.damage_min
tt.hero.level_stats.ranged_damage_max = b.basic_attack.damage_max
tt.hero.skills.cluster_bomb = E:clone_c("hero_skill")
tt.hero.skills.cluster_bomb.hr_cost = {
	3,
	3,
	3
}
tt.hero.skills.cluster_bomb.hr_icon = "0041"
tt.hero.skills.cluster_bomb.hr_order = 1
tt.hero.skills.cluster_bomb.hr_available = true
tt.hero.skills.cluster_bomb.cooldown = b.cluster_bomb.cooldown
tt.hero.skills.cluster_bomb.explosion_damage_min = b.cluster_bomb.explosion_damage_min
tt.hero.skills.cluster_bomb.explosion_damage_max = b.cluster_bomb.explosion_damage_max
tt.hero.skills.cluster_bomb.fire_duration = b.cluster_bomb.fire_duration
tt.hero.skills.cluster_bomb.burn_damage_min = b.cluster_bomb.burning.damage
tt.hero.skills.cluster_bomb.burn_damage_max = b.cluster_bomb.burning.damage
tt.hero.skills.cluster_bomb.key = "CLUSTER_BOMB"
tt.hero.skills.shout_stun = E:clone_c("hero_skill")
tt.hero.skills.shout_stun.cooldown = b.shout_stun.cooldown
tt.hero.skills.shout_stun.stun_duration = b.shout_stun.stun_duration
tt.hero.skills.shout_stun.slow_duration = b.shout_stun.slow_duration
tt.hero.skills.shout_stun.hr_cost = {
	2,
	2,
	2
}
tt.hero.skills.shout_stun.hr_icon = "0042"
tt.hero.skills.shout_stun.hr_order = 2
tt.hero.skills.shout_stun.hr_available = true
tt.hero.skills.shout_stun.xp_gain = b.shout_stun.xp_gain
tt.hero.skills.shout_stun.key = "SHOUT_STUN"
tt.hero.skills.gattling = E:clone_c("hero_skill")
tt.hero.skills.gattling.cooldown = b.gattling.cooldown
tt.hero.skills.gattling.duration = b.gattling.duration
tt.hero.skills.gattling.damage_min = b.gattling.damage_min
tt.hero.skills.gattling.damage_max = b.gattling.damage_max
tt.hero.skills.gattling.hr_cost = {
	1,
	1,
	1
}
tt.hero.skills.gattling.hr_icon = "0044"
tt.hero.skills.gattling.hr_order = 3
tt.hero.skills.gattling.hr_available = true
tt.hero.skills.gattling.xp_gain = b.gattling.xp_gain
tt.hero.skills.gattling.key = "GATTLING"
tt.hero.skills.eat_instakill = E:clone_c("hero_skill")
tt.hero.skills.eat_instakill.cooldown = b.eat_instakill.cooldown
tt.hero.skills.eat_instakill.damage_min = b.eat_instakill.damage_aoe_min
tt.hero.skills.eat_instakill.damage_max = b.eat_instakill.damage_aoe_max
tt.hero.skills.eat_instakill.hp_max = b.eat_instakill.hp_max
tt.hero.skills.eat_instakill.hr_cost = {
	3,
	3,
	3
}
tt.hero.skills.eat_instakill.hr_icon = "0043"
tt.hero.skills.eat_instakill.hr_order = 4
tt.hero.skills.eat_instakill.hr_available = true
tt.hero.skills.eat_instakill.xp_gain = b.eat_instakill.xp_gain
tt.hero.skills.eat_instakill.key = "EAT_INSTAKILL"
tt.hero.skills.ultimate = E:clone_c("hero_skill")
tt.hero.skills.ultimate.controller_name = "hero_bird_ultimate"
tt.hero.skills.ultimate.damage_min = b.ultimate.bird.melee_attack.damage_min
tt.hero.skills.ultimate.damage_max = b.ultimate.bird.melee_attack.damage_max
tt.hero.skills.ultimate.duration = b.ultimate.bird.duration
tt.hero.skills.ultimate.hr_available = false
tt.hero.skills.ultimate.hr_icon = "0006"
tt.hero.skills.ultimate.hr_order = 5
tt.hero.skills.ultimate.hr_cost = {
	1,
	3,
	3,
	3
}
tt.hero.skills.ultimate.hr_available = true
tt.hero.skills.ultimate.key = "BIRDS_OF_PREY"
tt.hero.skills.ultimate.cooldown = b.ultimate.cooldown
tt.hero.team = TEAM_LINIREA
tt.flight_height = 80
tt.health.dead_lifetime = 30
tt.health_bar.draw_order = -1
tt.health_bar.offset = v(0, 120)
tt.health_bar.sort_y_offset = -171
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM_LARGE
tt.health_bar.z = Z_FLYING_HEROES
tt.hero.fn_level_up = scripts.hero_bird.level_up
tt.hero.use_custom_spawn_point = true
tt.idle_flip.cooldown = 10
tt.info.fn = scripts.hero_basic.get_info_ranged_with_damage_factor
tt.info.hero_portrait = "hero_portraits_0012"
tt.info.i18n_key = "HERO_BIRD"
tt.info.portrait = "portraits_hero" .. "_0012"
tt.info.ultimate_icon = "0012"
tt.info.ultimate_pointer_style = "area"
tt.info.stat_hp = b.stats.hp
tt.info.stat_armor = b.stats.armor
tt.info.stat_damage = b.stats.damage
tt.info.stat_cooldown = b.stats.cooldown
tt.main_script.insert = scripts.hero_bird.insert
tt.main_script.update = scripts.hero_bird.update
tt.motion.max_speed = b.speed
tt.nav_rally.requires_node_nearby = false
tt.nav_grid.ignore_waypoints = true
tt.all_except_flying_nowalk = bor(TERRAIN_NONE, TERRAIN_LAND, TERRAIN_WATER, TERRAIN_CLIFF, TERRAIN_NOWALK, TERRAIN_SHALLOW, TERRAIN_FAERIE, TERRAIN_ICE)
tt.nav_grid.valid_terrains = tt.all_except_flying_nowalk
tt.nav_grid.valid_terrains_dest = tt.all_except_flying_nowalk
tt.drag_line_origin_offset = v(0, tt.flight_height)
tt.regen.cooldown = 1
tt.render.sprites[1].offset.y = tt.flight_height
tt.render.sprites[1].animated = true
tt.render.sprites[1].prefix = "gryph_character"
tt.render.sprites[1].name = "respawn"
tt.render.sprites[1].angles.walk = {
	"fly"
}
tt.render.sprites[1].z = Z_FLYING_HEROES
tt.render.sprites[1].angles.gattling_in = {
	"shootskillback",
	"shootskill"
}
tt.render.sprites[1].angles.gattling_loop = {
	"shootskillloopback",
	"shootskillloop"
}
tt.render.sprites[1].angles.gattling_out = {
	"shootskillendback",
	"shootskillend"
}
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "decal_flying_hero_shadow"
tt.render.sprites[2].offset = v(0, 0)
tt.render.sprites[2].z = Z_DECALS + 1
tt.soldier.melee_slot_offset = v(0, 0)
tt.sound_events.change_rally_point = "HeroBirdTaunt"
tt.sound_events.death = "HeroBirdDeath"
tt.sound_events.respawn = "HeroBirdTauntIntro"
tt.sound_events.hero_room_select = "HeroBirdTauntSelect"
tt.ui.click_rect = r(-37, tt.flight_height - 35, 75, 75)
tt.unit.hit_offset = v(0, tt.flight_height + 10)
tt.unit.mod_offset = v(0, tt.flight_height + 10)
tt.unit.hide_after_death = true
tt.vis.bans = bor(tt.vis.bans, F_EAT, F_NET, F_POISON)
tt.vis.flags = bor(tt.vis.flags, F_FLYING)
tt.hero.tombstone_show_time = fts(30)
tt.hero.tombstone_decal = "decal_hero_bird_tomb"
tt.hero.tombstone_concurrent_with_death = true
tt.hero.tombstone_force_over_path = true
tt.hero.respawn_animation = "levelup"
tt.ranged.attacks[1] = E:clone_c("bullet_attack")
tt.ranged.attacks[1].bullet = "bullet_hero_bird"
tt.ranged.attacks[1].bullet_start_offset = {
	v(20, tt.flight_height + 40),
	v(-20, tt.flight_height + 40)
}
tt.ranged.attacks[1].cooldown = b.basic_attack.cooldown
tt.ranged.attacks[1].min_range = b.basic_attack.min_range
tt.ranged.attacks[1].max_range = b.basic_attack.max_range
tt.ranged.attacks[1].shoot_time = fts(9)
tt.ranged.attacks[1].sync_animation = true
tt.ranged.attacks[1].animation = "attack"
tt.ranged.attacks[1].node_prediction = fts(40)
tt.ranged.attacks[1].ignore_hit_offset = true
tt.ranged.attacks[1].vis_bans = bor(F_NIGHTMARE, F_FLYING, F_CLIFF)
tt.ranged.attacks[1].basic_attack = true
tt.timed_attacks.list[1] = E:clone_c("bullet_attack")
tt.timed_attacks.list[1].disabled = true
tt.timed_attacks.list[1].animation = "skillthrowclusterbomb"
tt.timed_attacks.list[1].shoot_time = fts(18)
tt.timed_attacks.list[1].explosion_time = fts(21)
tt.timed_attacks.list[1].min_targets = b.cluster_bomb.min_targets
tt.timed_attacks.list[1].min_range = b.cluster_bomb.min_range
tt.timed_attacks.list[1].max_range = b.cluster_bomb.max_range
tt.timed_attacks.list[1].node_prediction = tt.timed_attacks.list[1].shoot_time + tt.timed_attacks.list[1].explosion_time
tt.timed_attacks.list[1].sync_animation = true
tt.timed_attacks.list[1].xp_from_skill = "cluster_bomb"
tt.timed_attacks.list[1].vis_flags = bor(F_RANGED, F_ENEMY)
tt.timed_attacks.list[1].vis_bans = bor(F_NIGHTMARE, F_CLIFF)
tt.timed_attacks.list[1].bullet = "bullet_hero_bird_cluster_bomb"
tt.timed_attacks.list[1].bullet_start_offset = {
	v(15, tt.flight_height + 15),
	v(-15, tt.flight_height + 15)
}
tt.timed_attacks.list[1].first_explosion_height = b.cluster_bomb.first_explosion_height
tt.timed_attacks.list[1].ray = "fx_hero_bird_cluster_bomb_ray"
tt.timed_attacks.list[1].ray_start_offset = {
	v(20, tt.flight_height + 40),
	v(-20, tt.flight_height + 40)
}
tt.timed_attacks.list[1].ray_width = 300
tt.timed_attacks.list[2] = E:clone_c("mod_attack")
tt.timed_attacks.list[2].disabled = true
tt.timed_attacks.list[2].mods = {
	"mod_hero_bird_shout_stun",
	"mod_hero_bird_shout_slow"
}
tt.timed_attacks.list[2].decal = "decal_hero_bird_shout_stun"
tt.timed_attacks.list[2].cooldown = nil
tt.timed_attacks.list[2].sync_animation = true
tt.timed_attacks.list[2].animation = "stun"
tt.timed_attacks.list[2].shoot_time = fts(15)
tt.timed_attacks.list[2].node_prediction = tt.timed_attacks.list[2].shoot_time
tt.timed_attacks.list[2].vis_flags = bor(F_RANGED, F_MOD)
tt.timed_attacks.list[2].vis_bans = bor(F_FLYING, F_NIGHTMARE, F_CLIFF)
tt.timed_attacks.list[2].xp_from_skill = "shout_stun"
tt.timed_attacks.list[2].radius = b.shout_stun.radius
tt.timed_attacks.list[2].min_targets = b.shout_stun.min_targets
tt.timed_attacks.list[2].sound = "HeroBirdTerrorShriekCast"
tt.timed_attacks.list[3] = E:clone_c("bullet_attack")
tt.timed_attacks.list[3].disabled = true
tt.timed_attacks.list[3].cooldown = nil
tt.timed_attacks.list[3].shoot_time = fts(18)
tt.timed_attacks.list[3].shoot_every = b.gattling.shoot_every
tt.timed_attacks.list[3].sync_animation = true
tt.timed_attacks.list[3].decal = "decal_hero_bird_gattling"
tt.timed_attacks.list[3].hit_fx = "fx_hero_bird_gattling"
tt.timed_attacks.list[3].animation_in = "gattling_in"
tt.timed_attacks.list[3].animation_loop = "gattling_loop"
tt.timed_attacks.list[3].animation_out = "gattling_out"
tt.timed_attacks.list[3].min_range = b.gattling.min_range
tt.timed_attacks.list[3].max_range = b.gattling.max_range
tt.timed_attacks.list[3].damage_min = nil
tt.timed_attacks.list[3].damage_max = nil
tt.timed_attacks.list[3].damage_type = b.gattling.damage_type
tt.timed_attacks.list[3].duration = nil
tt.timed_attacks.list[3].vis_flags = bor(F_RANGED)
tt.timed_attacks.list[3].vis_bans = bor(F_NIGHTMARE)
tt.timed_attacks.list[3].xp_from_skill = "gattling"
tt.timed_attacks.list[3].sound = "HeroBirdBulletRainCast"
tt.timed_attacks.list[3].sound_end = "HeroBirdBulletRainEnd"
tt.timed_attacks.list[4] = E:clone_c("melee_attack")
tt.timed_attacks.list[4].disabled = true
tt.timed_attacks.list[4].cooldown = nil
tt.timed_attacks.list[4].animation = "instakill"
tt.timed_attacks.list[4].sync_animation = true
tt.timed_attacks.list[4].shoot_time = fts(19)
tt.timed_attacks.list[4].min_range = b.eat_instakill.min_range
tt.timed_attacks.list[4].max_range = b.eat_instakill.max_range
tt.timed_attacks.list[4].hp_max = nil
tt.timed_attacks.list[4].vis_flags = bor(F_INSTAKILL)
tt.timed_attacks.list[4].vis_bans = bor(F_FLYING, F_BOSS, F_MINIBOSS, F_NIGHTMARE, F_CLIFF)
tt.timed_attacks.list[4].xp_from_skill = "eat_instakill"
tt.timed_attacks.list[4].node_prediction = tt.timed_attacks.list[4].shoot_time
tt.timed_attacks.list[4].eat_offset_x = 15
tt.timed_attacks.list[4].sound = "HeroBirdHuntingDiveCast"
tt.tween.disabled = true
tt.tween.remove = false
tt.tween.props[1].sprite_id = 2
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.5,
		255
	}
}
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].keys = {
	{
		0,
		vv(0.97)
	},
	{
		fts(8),
		vv(1.03)
	},
	{
		fts(16),
		vv(0.97)
	}
}
tt.tween.props[2].name = "scale"
tt.tween.props[2].sprite_id = 2
tt.tween.props[2].loop = true
tt.unit.hide_after_death = true

tt = E:register_t("hero_bird_ultimate")
b = balance.heroes.hero_bird.ultimate

E:add_comps(tt, "pos", "main_script", "sound_events")

tt.can_fire_fn = scripts.hero_bird_ultimate.can_fire_fn
tt.main_script.update = scripts.hero_bird_ultimate.update
tt.child = "hero_bird_ultimate_child"
tt.sound_cast = "HeroBirdBirdsOfPreyCast"
tt = E:register_t("hero_bird_ultimate_child", "decal_scripted")
b = balance.heroes.hero_bird.ultimate.bird

E:add_comps(tt, "force_motion", "melee", "tween")

tt.main_script.update = scripts.hero_bird_ultimate_child.update
tt.flight_height = 80
tt.force_motion.max_a = 1200
tt.force_motion.max_v = 180
tt.force_motion.ramp_radius = 30
tt.force_motion.fr = 0.05
tt.force_motion.a_step = 20
tt.start_ts = nil
tt.render.sprites[1].prefix = "gryph_child"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_FLYING_HEROES
tt.render.sprites[1].offset.y = tt.flight_height
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "gryph_shadow"
tt.render.sprites[2].offset = vv(0)
tt.render.sprites[2].z = Z_DECALS + 1
tt.render.sprites[2].scale = vv(0.75)
tt.melee.attacks[1] = E:clone_c("bullet_attack")
tt.melee.attacks[1].animation = "attack_in"
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown
tt.melee.attacks[1].range = b.melee_attack.range
tt.melee.attacks[1].damage_type = b.melee_attack.damage_type
tt.melee.attacks[1].damage_min = nil
tt.melee.attacks[1].damage_max = nil
tt.melee.attacks[1].hit_time = fts(6)
tt.melee.attacks[1].hit_fx = "fx_hero_bird_ultimate"
tt.melee.attacks[1].search_cooldown = 0.1
tt.melee.attacks[1].sound = "HeroBirdBirdsOfPreyGryphonAttack"
tt.melee.attacks[1].sound_chance = 1
tt.melee.attacks[1].vis_bans = bor(F_NIGHTMARE)
tt.tween.disabled = false
tt.tween.remove = false
tt.tween.props[1].name = "offset"

local fh = tt.flight_height

tt.tween.props[1].keys = {
	{
		0,
		v(0, fh - 5)
	},
	{
		fts(10),
		v(0, fh + 5)
	},
	{
		fts(20),
		v(0, fh - 5)
	}
}
tt.tween.props[1].loop = true
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].keys = {
	{
		0,
		vv(0.78)
	},
	{
		fts(10),
		vv(0.72)
	},
	{
		fts(20),
		vv(0.78)
	}
}
tt.tween.props[2].name = "scale"
tt.tween.props[2].sprite_id = 2
tt.tween.props[2].loop = true
tt.target_range = b.target_range
tt.chase_range = b.chase_range
tt.sid_bird = 1
tt.sid_shadow = 2

tt = E:register_t("hero_witch", "hero5")
b = balance.heroes.hero_witch

E:add_comps(tt, "melee", "ranged", "dodge", "timed_attacks")

tt.hero.level_stats.armor = b.armor
tt.hero.level_stats.hp_max = b.hp_max
tt.hero.level_stats.melee_damage_max = b.melee_damage_max
tt.hero.level_stats.melee_damage_min = b.melee_damage_min
tt.hero.level_stats.ranged_damage_max = b.ranged_damage_max
tt.hero.level_stats.ranged_damage_min = b.ranged_damage_min
tt.hero.level_stats.regen_health = b.regen_health
tt.sound_events.change_rally_point = "HeroWitchTaunt"
tt.sound_events.death = "HeroWitchDeath"
tt.sound_events.respawn = "HeroWitchTauntIntro"
tt.sound_events.hero_room_select = "HeroWitchTauntSelect"
tt.hero.skills.soldiers = E:clone_c("hero_skill")
tt.hero.skills.soldiers.cooldown = b.skill_soldiers.cooldown
tt.hero.skills.soldiers.damage_min = b.skill_soldiers.soldier.melee_attack.damage_min
tt.hero.skills.soldiers.damage_max = b.skill_soldiers.soldier.melee_attack.damage_max
tt.hero.skills.soldiers.soldiers_amount = b.skill_soldiers.soldiers_amount
tt.hero.skills.soldiers.hp_max = b.skill_soldiers.soldier.hp_max
tt.hero.skills.soldiers.hr_available = true
tt.hero.skills.soldiers.hr_icon = "0006"
tt.hero.skills.soldiers.hr_order = 3
tt.hero.skills.soldiers.hr_cost = {
	1,
	2,
	3
}
tt.hero.skills.soldiers.xp_gain = b.skill_soldiers.xp_gain
tt.hero.skills.soldiers.key = "SOLDIERS"
tt.hero.skills.polymorph = E:clone_c("hero_skill")
tt.hero.skills.polymorph.cooldown = b.skill_polymorph.cooldown
tt.hero.skills.polymorph.hp_max = b.skill_polymorph.hp_max
tt.hero.skills.polymorph.duration = b.skill_polymorph.duration
tt.hero.skills.polymorph.hr_available = true
tt.hero.skills.polymorph.hr_icon = "0023"
tt.hero.skills.polymorph.hr_order = 1
tt.hero.skills.polymorph.hr_cost = {
	2,
	2,
	2
}
tt.hero.skills.polymorph.xp_gain = b.skill_polymorph.xp_gain
tt.hero.skills.polymorph.key = "POLYMORPH"
tt.hero.skills.path_aoe = E:clone_c("hero_skill")
tt.hero.skills.path_aoe.cooldown = b.skill_path_aoe.cooldown
tt.hero.skills.path_aoe.duration = b.skill_path_aoe.duration
tt.hero.skills.path_aoe.min_range = b.skill_path_aoe.min_range
tt.hero.skills.path_aoe.max_range = b.skill_path_aoe.max_range
tt.hero.skills.path_aoe.damage_min = b.skill_path_aoe.damage_min
tt.hero.skills.path_aoe.damage_max = b.skill_path_aoe.damage_max
tt.hero.skills.path_aoe.min_targets = b.skill_path_aoe.min_targets
tt.hero.skills.path_aoe.xp_gain = b.skill_path_aoe.xp_gain
tt.hero.skills.path_aoe.hr_available = true
tt.hero.skills.path_aoe.hr_icon = "0007"
tt.hero.skills.path_aoe.hr_order = 4
tt.hero.skills.path_aoe.hr_cost = {
	3,
	3,
	3
}
tt.hero.skills.path_aoe.key = "PATH_AOE"
tt.hero.skills.disengage = E:clone_c("hero_skill")
tt.hero.skills.disengage.cooldown = b.disengage.cooldown
tt.hero.skills.disengage.melee_damage_min = b.disengage.decoy.melee_attack.damage_min
tt.hero.skills.disengage.melee_damage_max = b.disengage.decoy.melee_attack.damage_max
tt.hero.skills.disengage.hp_max = b.disengage.decoy.hp_max
tt.hero.skills.disengage.min_distance_from_end = b.disengage.min_distance_from_end
tt.hero.skills.disengage.distance = b.disengage.distance
tt.hero.skills.disengage.stun_duration = b.disengage.decoy.explotion.stun_duration
tt.hero.skills.disengage.hr_available = b.disengage.available
tt.hero.skills.disengage.hr_icon = "0003"
tt.hero.skills.disengage.hr_order = 2
tt.hero.skills.disengage.hr_cost = {
	1,
	1,
	1
}
tt.hero.skills.disengage.xp_gain = b.disengage.xp_gain
tt.hero.skills.disengage.key = "DISENGAGE"
tt.hero.skills.ultimate = E:clone_c("hero_skill")
tt.hero.skills.ultimate.controller_name = "controller_hero_witch_ultimate"
tt.hero.skills.ultimate.hr_available = false
tt.hero.skills.ultimate.hr_icon = "0056"
tt.hero.skills.ultimate.hr_order = 5
tt.hero.skills.ultimate.hr_cost = {
	1,
	4,
	4,
	4
}
tt.hero.skills.ultimate.key = "ULTIMATE"
tt.hero.skills.ultimate.duration = b.ultimate.duration
tt.hero.skills.ultimate.max_targets = b.ultimate.max_targets
tt.hero.skills.ultimate.cooldown = b.ultimate.cooldown
tt.hero.team = TEAM_LINIREA
tt.health.dead_lifetime = b.dead_lifetime
tt.health_bar.offset = v(0, 40)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.hero.fn_level_up = scripts.hero_witch.level_up
tt.info.fn = scripts.hero_basic.get_info_melee
tt.info.hero_portrait = "hero_portraits_0014"
tt.info.i18n_key = "HERO_WITCH"
tt.info.portrait = "portraits_hero_0014"
tt.info.ultimate_icon = "0013"
tt.info.ultimate_pointer_style = "area"
tt.info.stat_hp = b.stats.hp
tt.info.stat_armor = b.stats.armor
tt.info.stat_damage = b.stats.damage
tt.info.stat_cooldown = b.stats.cooldown
tt.info.damage_icon = "magic"
tt.main_script.insert = scripts.hero_witch.insert
tt.main_script.update = scripts.hero_witch.update
tt.motion.max_speed = b.speed
tt.regen.cooldown = b.regen_cooldown

for i = 1, 3 do
	tt.render.sprites[i] = E:clone_c("sprite")
	tt.render.sprites[i].prefix = "hero_witch_hero_layer" .. i
	tt.render.sprites[i].name = "idle"
	tt.render.sprites[i].group = "layers"
	tt.render.sprites[i].scale = vv(1.15)
end

tt.particles_name_1 = "ps_hero_witch_spark_1"
tt.soldier.melee_slot_offset = v(10, 0)
tt.unit.hit_offset = v(0, 15)
tt.unit.mod_offset = v(0, 15)
tt.dodge.disabled = true
tt.dodge.ranged = false
tt.dodge.cooldown = nil
tt.dodge.chance = 1
tt.dodge.animation_dissapear = "disengage_disappear"
tt.dodge.animation_appear = "disengage_appear"
tt.dodge.total_shoots = b.disengage.total_shoots
tt.dodge.can_dodge = scripts.hero_witch.can_dodge
tt.dodge.sound = "HeroWitchDazzlingDecoyCast"
tt.dodge.hp_to_trigger = b.disengage.hp_to_trigger
tt.dodge.decoy = "soldier_hero_witch_decoy"
tt.melee.range = balance.heroes.common.melee_attack_range
tt.melee.attacks[1] = E:clone_c("melee_attack")
tt.melee.attacks[1].animation = "melee_attack"
tt.melee.attacks[1].cooldown = b.basic_melee.cooldown
tt.melee.attacks[1].hit_time = fts(12)
tt.melee.attacks[1].xp_gain_factor = b.basic_melee.xp_gain_factor
tt.melee.attacks[1].basic_attack = true
tt.melee.attacks[1].sound = "HeroBuilderBasicAttack"
tt.ranged.attacks[1] = E:clone_c("bullet_attack")
tt.ranged.attacks[1].bullets = {
	"bullet_hero_witch_basic_1",
	"bullet_hero_witch_basic_2"
}
tt.ranged.attacks[1].bullet_start_offset = {
	{
		v(21, 42),
		v(21, 37)
	},
	{
		v(-21, 42),
		v(-21, 37)
	}
}
tt.ranged.attacks[1].cooldown = b.ranged_attack.cooldown
tt.ranged.attacks[1].min_range = b.ranged_attack.min_range
tt.ranged.attacks[1].max_range = b.ranged_attack.max_range
tt.ranged.attacks[1].shoot_time = fts(13)
tt.ranged.attacks[1].sync_animation = true
tt.ranged.attacks[1].animation = "range_attack"
tt.ranged.attacks[1].node_prediction = fts(30)
tt.ranged.attacks[1].ignore_hit_offset = true
tt.ranged.attacks[1].start_sound = "HeroDragonGemBasicAttackCast"
tt.ranged.attacks[1].vis_bans = bor(F_NIGHTMARE)
tt.ranged.attacks[1].basic_attack = true
tt.ranged.attacks[1].xp_gain_factor = b.ranged_attack.xp_gain_factor
tt.ranged.attacks[1].sound = "HeroWitchBasicAttackCast"
tt.timed_attacks.list[1] = E:clone_c("custom_attack")
tt.timed_attacks.list[1].animation = "skill_3"
tt.timed_attacks.list[1].cast_time = fts(36)
tt.timed_attacks.list[1].cooldown = nil
tt.timed_attacks.list[1].entity = "soldier_hero_witch_cat"
tt.timed_attacks.list[1].max_range = b.skill_soldiers.max_range
tt.timed_attacks.list[1].min_targets = b.skill_soldiers.min_targets
tt.timed_attacks.list[1].soldiers_offset = {
	v(10, -10),
	v(-10, 10),
	v(-15, -13),
	v(15, 13)
}
tt.timed_attacks.list[1].disabled = true
tt.timed_attacks.list[1].vis_bans = bor(F_FLYING)
tt.timed_attacks.list[1].sound = "HeroWitchNightFuriesCast"
tt.timed_attacks.list[1].min_cooldown = 1
tt.timed_attacks.list[2] = E:clone_c("bullet_attack")
tt.timed_attacks.list[2].animation = "skill_1"
tt.timed_attacks.list[2].cooldown = nil
tt.timed_attacks.list[2].hp_max = nil
tt.timed_attacks.list[2].range = b.skill_polymorph.range
tt.timed_attacks.list[2].disabled = true
tt.timed_attacks.list[2].shoot_time = fts(16)
tt.timed_attacks.list[2].xp_from_skill = "polymorph"
tt.timed_attacks.list[2].bullet = "bullet_witch_skill_polymorph"
tt.timed_attacks.list[2].bullet_start_offset = {
	v(-13, 42),
	v(13, 42)
}
tt.timed_attacks.list[2].vis_bans = bor(F_BOSS, F_MINIBOSS, F_NIGHTMARE, F_WATER, F_CLIFF, F_POLYMORPH)
tt.timed_attacks.list[2].vis_flags = bor(F_POLYMORPH)
tt.timed_attacks.list[2].min_cooldown = 1
tt.timed_attacks.list[2].max_nodes_to_goal = b.skill_polymorph.max_nodes_to_goal
tt.timed_attacks.list[3] = E:clone_c("custom_attack")
tt.timed_attacks.list[3].animation = "skill_4"
tt.timed_attacks.list[3].new_entity = "aura_hero_witch_path_aoe"
tt.timed_attacks.list[3].cooldown = nil
tt.timed_attacks.list[3].disabled = true
tt.timed_attacks.list[3].cast_time = fts(25)
tt.timed_attacks.list[3].node_prediction = fts(b.skill_path_aoe.node_prediction)
tt.timed_attacks.list[3].max_range = b.skill_path_aoe.max_range
tt.timed_attacks.list[3].min_targets = b.skill_path_aoe.min_targets
tt.timed_attacks.list[3].vis_bans = bor(F_FLYING, F_NIGHTMARE, F_CLIFF)
tt.timed_attacks.list[3].sound = "HeroWitchSquishNSquashCast"
tt.timed_attacks.list[3].min_cooldown = 1
tt.ui.click_rect = r(-20, -5, 40, 43)
tt = E:register_t("hero_dragon_bone", "hero5")

E:add_comps(tt, "ranged", "timed_attacks", "tween")

b = balance.heroes.hero_dragon_bone
tt.hero.level_stats.armor = b.armor
tt.hero.level_stats.hp_max = b.hp_max
tt.hero.level_stats.melee_damage_max = {
	1,
	2,
	4,
	4,
	5,
	6,
	7,
	8,
	9,
	10
}
tt.hero.level_stats.melee_damage_min = {
	1,
	2,
	3,
	4,
	5,
	6,
	7,
	8,
	9,
	10
}
tt.hero.level_stats.regen_health = b.regen_health
tt.hero.level_stats.ranged_damage_min = b.basic_attack.damage_min
tt.hero.level_stats.ranged_damage_max = b.basic_attack.damage_max
tt.hero.skills.cloud = E:clone_c("hero_skill")
tt.hero.skills.cloud.hr_cost = {
	3,
	2,
	1
}
tt.hero.skills.cloud.hr_icon = "0041"
tt.hero.skills.cloud.hr_order = 1
tt.hero.skills.cloud.hr_available = true
tt.hero.skills.cloud.cooldown = b.cloud.cooldown
tt.hero.skills.cloud.duration = b.cloud.duration
tt.hero.skills.cloud.xp_gain = b.cloud.xp_gain
tt.hero.skills.cloud.key = "CLOUD"
tt.hero.skills.nova = E:clone_c("hero_skill")
tt.hero.skills.nova.hr_cost = {
	2,
	2,
	2
}
tt.hero.skills.nova.hr_icon = "0042"
tt.hero.skills.nova.hr_order = 2
tt.hero.skills.nova.hr_available = true
tt.hero.skills.nova.cooldown = b.nova.cooldown
tt.hero.skills.nova.damage_min = b.nova.damage_min
tt.hero.skills.nova.damage_max = b.nova.damage_max
tt.hero.skills.nova.xp_gain = b.nova.xp_gain
tt.hero.skills.nova.key = "NOVA"
tt.hero.skills.rain = E:clone_c("hero_skill")
tt.hero.skills.rain.hr_cost = {
	1,
	2,
	3
}
tt.hero.skills.rain.hr_icon = "0043"
tt.hero.skills.rain.hr_order = 3
tt.hero.skills.rain.hr_available = true
tt.hero.skills.rain.cooldown = b.rain.cooldown
tt.hero.skills.rain.damage_min = b.rain.damage_min
tt.hero.skills.rain.damage_max = b.rain.damage_max
tt.hero.skills.rain.bones_count = b.rain.bones_count
tt.hero.skills.rain.stun_time = b.rain.stun_time
tt.hero.skills.rain.xp_gain = b.rain.xp_gain
tt.hero.skills.rain.key = "RAIN"
tt.hero.skills.burst = E:clone_c("hero_skill")
tt.hero.skills.burst.hr_cost = {
	3,
	3,
	3
}
tt.hero.skills.burst.hr_icon = "0044"
tt.hero.skills.burst.hr_order = 4
tt.hero.skills.burst.cooldown = b.burst.cooldown
tt.hero.skills.burst.damage_min = b.burst.damage_min
tt.hero.skills.burst.damage_max = b.burst.damage_max
tt.hero.skills.burst.proj_count = b.burst.proj_count
tt.hero.skills.burst.hr_available = true
tt.hero.skills.burst.xp_gain = b.burst.xp_gain
tt.hero.skills.burst.key = "BURST"
tt.hero.skills.ultimate = E:clone_c("hero_skill")
tt.hero.skills.ultimate.hr_available = false
tt.hero.skills.ultimate.hr_icon = "0006"
tt.hero.skills.ultimate.hr_order = 5
tt.hero.skills.ultimate.hr_cost = {
	1,
	3,
	3,
	3
}
tt.hero.skills.ultimate.hr_available = true
tt.hero.skills.ultimate.cooldown = b.ultimate.cooldown
tt.hero.skills.ultimate.duration = b.ultimate.dog.duration
tt.hero.skills.ultimate.hp = b.ultimate.dog.hp
tt.hero.skills.ultimate.damage_min = b.ultimate.dog.melee_attack.damage_min
tt.hero.skills.ultimate.damage_max = b.ultimate.dog.melee_attack.damage_max
tt.hero.skills.ultimate.controller_name = "hero_dragon_bone_ultimate"
tt.hero.skills.ultimate.key = "RAISE_DRAKES"
tt.hero.team = TEAM_DARK_ARMY
tt.flight_height = 80
tt.health.dead_lifetime = 30
tt.health_bar.draw_order = -1
tt.health_bar.offset = v(0, 170)
tt.health_bar.sort_y_offset = -171
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM_LARGE
tt.health_bar.z = Z_FLYING_HEROES
tt.hero.fn_level_up = scripts.hero_dragon_bone.level_up
tt.hero.use_custom_spawn_point = true
tt.idle_flip.cooldown = 10
tt.info.damage_icon = "magic"
tt.info.fn = scripts.hero_basic.get_info_ranged_with_damage_factor
tt.info.hero_portrait = "hero_portraits_0013"
tt.info.i18n_key = "HERO_DRAGON_BONE"
tt.info.portrait = "portraits_hero_0013"
tt.info.ultimate_icon = "0014"
tt.info.stat_hp = b.stats.hp
tt.info.stat_armor = b.stats.armor
tt.info.stat_damage = b.stats.damage
tt.info.stat_cooldown = b.stats.cooldown
tt.main_script.insert = scripts.hero_dragon_bone.insert
tt.main_script.update = scripts.hero_dragon_bone.update
tt.motion.max_speed = b.speed
tt.nav_rally.requires_node_nearby = false
tt.nav_grid.ignore_waypoints = true
tt.all_except_flying_nowalk = bor(TERRAIN_NONE, TERRAIN_LAND, TERRAIN_WATER, TERRAIN_CLIFF, TERRAIN_NOWALK, TERRAIN_SHALLOW, TERRAIN_FAERIE, TERRAIN_ICE)
tt.nav_grid.valid_terrains = tt.all_except_flying_nowalk
tt.nav_grid.valid_terrains_dest = tt.all_except_flying_nowalk
tt.drag_line_origin_offset = v(0, tt.flight_height)
tt.regen.cooldown = 1
tt.render.sprites[1].offset.y = tt.flight_height
tt.render.sprites[1].animated = true
tt.render.sprites[1].prefix = "hero_dragon_bone_hero"
tt.render.sprites[1].name = "respawn"
tt.render.sprites[1].angles.walk = {
	"walk"
}
tt.render.sprites[1].z = Z_FLYING_HEROES
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "decal_flying_hero_shadow"
tt.render.sprites[2].offset = v(0, 0)
tt.render.sprites[2].z = Z_DECALS + 1
tt.soldier.melee_slot_offset = v(0, 0)
tt.sound_events.change_rally_point = "HeroDragonBoneTaunt"
tt.sound_events.death = "HeroDragonBoneDeath"
tt.sound_events.respawn = "HeroDragonBoneTauntIntro"
tt.sound_events.hero_room_select = "HeroDragonBoneTauntSelect"
tt.ui.click_rect = r(-37, tt.flight_height - 20, 90, 85)
tt.unit.hit_offset = v(0, tt.flight_height + 10)
tt.unit.mod_offset = v(0, tt.flight_height + 10)
tt.unit.death_animation = "death"
tt.unit.hide_after_death = true
tt.hero.tombstone_decal = nil
tt.hero.respawn_animation = "respawn"
tt.vis.bans = bor(tt.vis.bans, F_EAT, F_NET, F_POISON)
tt.vis.flags = bor(tt.vis.flags, F_FLYING)
tt.ranged.attacks[1] = E:clone_c("bullet_attack")
tt.ranged.attacks[1].cooldown = 1
tt.ranged.attacks[1].animation = "attack"
tt.ranged.attacks[1].min_range = b.basic_attack.min_range
tt.ranged.attacks[1].max_range = b.basic_attack.max_range
tt.ranged.attacks[1].shoot_time = fts(16)
tt.ranged.attacks[1].bullet = "bolt_dragon_bone_basic_attack"
tt.ranged.attacks[1].bullet_start_offset = {
	v(46, tt.flight_height - 23),
	v(50, tt.flight_height - 23)
}
tt.ranged.attacks[1].sync_animation = true
tt.ranged.attacks[1].vis_bans = bor(F_NIGHTMARE)
tt.ranged.attacks[1].vis_flags = bor(F_RANGED, F_AREA)
tt.ranged.attacks[1].ignore_offset = v(0, tt.flight_height + 10)
tt.ranged.attacks[1].radius = b.basic_attack.radius
tt.ranged.attacks[1].basic_attack = true
tt.ranged.attacks[2] = E:clone_c("aura_attack")
tt.ranged.attacks[2].cooldown = nil
tt.ranged.attacks[2].disabled = true
tt.ranged.attacks[2].animation = "breath"
tt.ranged.attacks[2].shoot_time = fts(14)
tt.ranged.attacks[2].min_targets = b.cloud.min_targets
tt.ranged.attacks[2].min_range = b.cloud.min_range
tt.ranged.attacks[2].max_range = b.cloud.max_range
tt.ranged.attacks[2].bullet = "bullet_dragon_bone_cloud"
tt.ranged.attacks[2].bullet_start_offset = table.deepclone(tt.ranged.attacks[1].bullet_start_offset)
tt.ranged.attacks[2].sync_animation = true
tt.ranged.attacks[2].xp_from_skill = "cloud"
tt.ranged.attacks[2].vis_flags = bor(F_RANGED, F_AREA)
tt.ranged.attacks[2].vis_bans = bor(F_FLYING)
tt.ranged.attacks[2].sound = "HeroDragonBonePlagueCloudCast"
tt.ranged.attacks[3] = E:clone_c("area_attack")
tt.ranged.attacks[3].cooldown = nil
tt.ranged.attacks[3].disabled = true
tt.ranged.attacks[3].animation = "nova"
tt.ranged.attacks[3].hit_time = fts(22)
tt.ranged.attacks[3].min_targets = b.nova.min_targets
tt.ranged.attacks[3].min_range = b.nova.min_range
tt.ranged.attacks[3].max_range = b.nova.max_range
tt.ranged.attacks[3].damage_type = b.nova.damage_type
tt.ranged.attacks[3].damage_radius = b.nova.damage_radius
tt.ranged.attacks[3].mod = "mod_dragon_bone_plague"
tt.ranged.attacks[3].sync_animation = true
tt.ranged.attacks[3].xp_from_skill = "nova"
tt.ranged.attacks[3].vis_flags = bor(F_AREA)
tt.ranged.attacks[3].vis_bans_target = bor(F_NIGHTMARE)
tt.ranged.attacks[3].vis_bans_damage = F_FRIEND
tt.ranged.attacks[3].sound = "HeroDragonBoneDiseaseNovaCast"
tt.ranged.attacks[4] = E:clone_c("spawn_attack")
tt.ranged.attacks[4].cooldown = nil
tt.ranged.attacks[4].disabled = true
tt.ranged.attacks[4].animation = "bone_rain"
tt.ranged.attacks[4].entity = "bullet_dragon_bone_rain"
tt.ranged.attacks[4].spawn_time = fts(19)
tt.ranged.attacks[4].vis_flags = bor(F_RANGED)
tt.ranged.attacks[4].vis_bans = bor(F_NIGHTMARE)
tt.ranged.attacks[4].min_range = b.rain.min_range
tt.ranged.attacks[4].max_range = b.rain.max_range
tt.ranged.attacks[4].bones = nil
tt.ranged.attacks[4].xp_from_skill = "rain"
tt.ranged.attacks[4].sound = "HeroDragonBoneSpineRainCast"
tt.ranged.attacks[5] = E:clone_c("spawn_attack")
tt.ranged.attacks[5].cooldown = nil
tt.ranged.attacks[5].disabled = true
tt.ranged.attacks[5].animation = "burst"
tt.ranged.attacks[5].bullet = "bolt_dragon_bone_burst"
tt.ranged.attacks[5].bullet_start_offset = v(0, tt.flight_height + 25)
tt.ranged.attacks[5].spawn_time = fts(24)
tt.ranged.attacks[5].vis_flags = bor(F_RANGED)
tt.ranged.attacks[5].vis_bans = bor(F_NIGHTMARE)
tt.ranged.attacks[5].min_targets = b.burst.min_targets
tt.ranged.attacks[5].min_range = b.burst.min_range
tt.ranged.attacks[5].max_range = b.burst.max_range
tt.ranged.attacks[5].proj_count = nil
tt.ranged.attacks[5].max_dist_between_tgts = 50
tt.ranged.attacks[5].wait_between_shots = fts(1)
tt.ranged.attacks[5].node_prediction = fts(45)
tt.ranged.attacks[5].xp_from_skill = "burst"
tt.ranged.attacks[5].sound = "HeroDragonBoneSpreadingBurstCast"
tt.tween.disabled = true
tt.tween.remove = false
tt.tween.props[1].sprite_id = 2
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.5,
		255
	}
}
tt = E:register_t("hero_dragon_bone_ultimate")
b = balance.heroes.hero_dragon_bone.ultimate

E:add_comps(tt, "pos", "main_script", "sound_events")

tt.can_fire_fn = scripts.hero_dragon_bone_ultimate.can_fire_fn
tt.main_script.update = scripts.hero_dragon_bone_ultimate.update
tt.range = b.range
tt.spawn_delay = fts(5)
tt.vis_flags = bor(F_RANGED)
tt.vis_bans = bor(F_FLYING)
tt.dog = "soldier_dragon_bone_ultimate_dog"
tt.spawn_fx = "fx_dragon_bone_dog_spawn"
tt.spawn_time = fts(12)
tt.max_shards = b.max_shards
tt.prediction_nodes = fts(15)
tt.distance_between_shards = b.distance_between_shards
tt.random_ni_spread = b.random_ni_spread
tt.sound_events.insert = "HeroDragonBoneUltimateCast"
tt = E:register_t("soldier_dragon_bone_ultimate_dog", "soldier_militia")
b = balance.heroes.hero_dragon_bone.ultimate.dog

E:add_comps(tt, "reinforcement", "nav_grid", "tween")

tt.health.armor = b.armor
tt.health.hp_max = b.hp
tt.health_bar.offset = v(0, 30)
tt.info.fn = scripts.soldier_reinforcement.get_info
tt.info.portrait = "gui_bottom_info_image_soldiers_0048"
tt.info.random_name_format = nil
tt.info.random_name_count = nil
tt.main_script.insert = scripts.soldier_reinforcement.insert
tt.main_script.update = scripts.soldier_reinforcement_kr5.update
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown
tt.melee.attacks[1].damage_max = nil
tt.melee.attacks[1].damage_min = nil
tt.melee.attacks[1].damage_type = b.melee_attack.damage_type
tt.melee.attacks[1].hit_time = fts(12)
tt.melee.attacks[1].hit_fx = "fx_dragon_bone_dog_hit"
tt.melee.attacks[1].hit_offset = v(20, 5)
tt.melee.range = 72
tt.motion.max_speed = b.speed
tt.regen.cooldown = 1
tt.regen.health = 0
tt.reinforcement.duration = b.duration
tt.render.sprites[1].prefix = "hero_dragon_bone_drake"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].angles.walk = {
	"walk"
}
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.soldier.melee_slot_offset = v(22, 0)
tt.sound_events.insert = nil
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	}
}
tt.tween.props[1].name = "alpha"
tt.tween.remove = false
tt.tween.reverse = false
tt.unit.hit_offset = v(0, 5)
tt.unit.mod_offset = v(0, 14)
tt.unit.level = 0
tt.vis.bans = bor(F_SKELETON, F_CANNIBALIZE, F_LYCAN)

tt = E:register_t("hero_dragon_arb", "hero5")

E:add_comps(tt, "ranged", "timed_attacks", "tween")

b = balance.heroes.hero_dragon_arb
tt.hero.level_stats.armor = b.armor
tt.hero.level_stats.magic_armor = b.magic_armor
tt.hero.level_stats.hp_max = b.hp_max
tt.hero.level_stats.melee_damage_max = {
	1,
	2,
	4,
	4,
	5,
	6,
	7,
	8,
	9,
	10
}
tt.hero.level_stats.melee_damage_min = {
	1,
	2,
	3,
	4,
	5,
	6,
	7,
	8,
	9,
	10
}
tt.hero.level_stats.regen_health = b.regen_health
tt.hero.level_stats.ranged_damage_min = b.basic_breath_attack.damage_min
tt.hero.level_stats.ranged_damage_max = b.basic_breath_attack.damage_max
tt.hero.skills.arborean_spawn = E:clone_c("hero_skill")
tt.hero.skills.arborean_spawn.hr_cost = {
	2,
	2,
	2
}
tt.hero.skills.arborean_spawn.hr_icon = "0041"
tt.hero.skills.arborean_spawn.hr_order = 1
tt.hero.skills.arborean_spawn.hr_available = true
tt.hero.skills.arborean_spawn.cooldown = b.arborean_spawn.cooldown
tt.hero.skills.arborean_spawn.key = "ARBOREAN SPAWN"
tt.hero.skills.arborean_spawn.xp_gain = b.arborean_spawn.xp_gain
tt.hero.skills.tower_runes = E:clone_c("hero_skill")
tt.hero.skills.tower_runes.hr_cost = {
	2,
	2,
	2
}
tt.hero.skills.tower_runes.hr_icon = "0041"
tt.hero.skills.tower_runes.hr_order = 2
tt.hero.skills.tower_runes.hr_available = true
tt.hero.skills.tower_runes.cooldown = b.tower_runes.cooldown
tt.hero.skills.tower_runes.max_targets = b.tower_runes.max_targets
tt.hero.skills.tower_runes.duration = b.tower_runes.duration
tt.hero.skills.tower_runes.damage_factor = b.tower_runes.damage_factor
tt.hero.skills.tower_runes.key = "TOWER RUNES"
tt.hero.skills.tower_runes.xp_gain = b.tower_runes.xp_gain
tt.hero.skills.thorn_bleed = E:clone_c("hero_skill")
tt.hero.skills.thorn_bleed.hr_cost = {
	3,
	2,
	1
}
tt.hero.skills.thorn_bleed.hr_icon = "0041"
tt.hero.skills.thorn_bleed.hr_order = 3
tt.hero.skills.thorn_bleed.hr_available = true
tt.hero.skills.thorn_bleed.cooldown = b.thorn_bleed.cooldown
tt.hero.skills.thorn_bleed.instakill_chance = b.thorn_bleed.instakill_chance
tt.hero.skills.thorn_bleed.duration = b.thorn_bleed.duration
tt.hero.skills.thorn_bleed.damage_speed_ratio = b.thorn_bleed.damage_speed_ratio
tt.hero.skills.thorn_bleed.key = "THORN BLEED"
tt.hero.skills.thorn_bleed.xp_gain = b.thorn_bleed.xp_gain
tt.hero.skills.tower_plants = E:clone_c("hero_skill")
tt.hero.skills.tower_plants.hr_cost = {
	3,
	3,
	3
}
tt.hero.skills.tower_plants.hr_icon = "0041"
tt.hero.skills.tower_plants.hr_order = 4
tt.hero.skills.tower_plants.hr_available = true
tt.hero.skills.tower_plants.cooldown = b.tower_plants.cooldown
tt.hero.skills.tower_plants.max_targets = b.tower_plants.max_targets
tt.hero.skills.tower_plants.duration = b.tower_plants.duration
tt.hero.skills.tower_plants.heal_max = b.tower_plants.linirea.heal_max
tt.hero.skills.tower_plants.heal_min = b.tower_plants.linirea.heal_min
tt.hero.skills.tower_plants.slow_factor = b.tower_plants.dark_army.slow_factor
tt.hero.skills.tower_plants.damage_min = b.tower_plants.dark_army.damage_min
tt.hero.skills.tower_plants.damage_max = b.tower_plants.dark_army.damage_max
tt.hero.skills.tower_plants.xp_gain = b.tower_plants.xp_gain
tt.hero.skills.ultimate = E:clone_c("hero_skill")
tt.hero.skills.ultimate.controller_name = "hero_dragon_arb_ultimate"
tt.hero.skills.ultimate.hr_available = false
tt.hero.skills.ultimate.hr_icon = "0006"
tt.hero.skills.ultimate.hr_order = 5
tt.hero.skills.ultimate.hr_cost = {
	1,
	3,
	3,
	3
}
tt.hero.skills.ultimate.hr_available = true
tt.hero.skills.ultimate.key = "ARBOREAN EVOLVE"
tt.hero.skills.ultimate.cooldown = b.ultimate.cooldown
tt.hero.skills.ultimate.duration = b.ultimate.duration
tt.hero.skills.ultimate.inflicted_damage_factor = b.ultimate.inflicted_damage_factor
tt.hero.skills.ultimate.speed_factor = b.ultimate.speed_factor
tt.hero.skills.ultimate.extra_armor = b.ultimate.extra_armor
tt.hero.skills.ultimate.extra_magic_armor = b.ultimate.extra_magic_armor
tt.hero.skills.ultimate.mod = "mod_hero_dragon_arb_ultimate"
tt.hero.skills.ultimate.skip_confirmation = true
tt.hero.team = TEAM_LINIREA
tt.flight_height = 80
tt.health.dead_lifetime = 30
tt.health_bar.draw_order = -1
tt.health_bar.offset = v(0, 170)
tt.health_bar.sort_y_offset = -171
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM_LARGE
tt.health_bar.z = Z_FLYING_HEROES
tt.hero.fn_level_up = scripts.hero_dragon_arb.level_up
tt.hero.use_custom_spawn_point = true
tt.idle_flip.cooldown = 10
tt.info.fn = scripts.hero_dragon_arb.get_info
tt.info.damage_icon = "magic"
tt.info.hero_portrait = "hero_portraits_0015"
tt.info.i18n_key = "HERO_DRAGON_ARB"
tt.info.portrait = "portraits_hero" .. "_0015"
tt.info.ultimate_icon = "0015"
tt.info.ultimate_pointer_style = "area"
tt.info.stat_hp = b.stats.hp
tt.info.stat_armor = b.stats.armor
tt.info.stat_damage = b.stats.damage
tt.info.stat_cooldown = b.stats.cooldown
tt.main_script.insert = scripts.hero_dragon_arb.insert
tt.main_script.update = scripts.hero_dragon_arb.update
tt.motion.max_speed = b.speed
tt.nav_rally.requires_node_nearby = false
tt.nav_grid.ignore_waypoints = true
tt.all_except_flying_nowalk = bor(TERRAIN_NONE, TERRAIN_LAND, TERRAIN_WATER, TERRAIN_CLIFF, TERRAIN_NOWALK, TERRAIN_SHALLOW, TERRAIN_FAERIE, TERRAIN_ICE)
tt.nav_grid.valid_terrains = tt.all_except_flying_nowalk
tt.nav_grid.valid_terrains_dest = tt.all_except_flying_nowalk
tt.drag_line_origin_offset = v(0, tt.flight_height)
tt.regen.cooldown = 1
tt.render.sprites[1].offset.y = tt.flight_height
tt.render.sprites[1].animated = true
tt.render.sprites[1].prefix = "hero_dragon_arborean_hero"
tt.render.sprites[1].name = "respawn"
tt.render.sprites[1].angles.walk = {
	"walk"
}
tt.render.sprites[1].z = Z_FLYING_HEROES
tt.render.sprites[1].group = "unit"
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "hero_dragon_arborean_shadow"
tt.render.sprites[2].offset = v(0, 0)
tt.render.sprites[2].z = Z_DECALS + 1
tt.render.sprites[2].scale = vv(0.93)
tt.render.sprites[3] = table.deepclone(tt.render.sprites[1])
tt.render.sprites[3].prefix = "hero_dragon_arborean_transformation_overlay"
tt.render.sprites[3].hidden = true
tt.render.sprites[3].scale = vv(1.1625)
tt.unit.size = UNIT_SIZE_LARGE
tt.soldier.melee_slot_offset = v(0, 0)
tt.sound_events.change_rally_point = "HeroDragonArbTaunt"
tt.sound_events.death = "HeroDragonArbDeath"
tt.sound_events.respawn = "HeroDragonArbTauntIntro"
tt.sound_events.hero_room_select = "HeroDragonArbTauntSelect"
tt.ui.click_rect = r(-37, tt.flight_height - 40, 75, 100)
tt.unit.hit_offset = v(0, tt.flight_height + 10)
tt.unit.mod_offset = v(0, tt.flight_height + 10)
tt.unit.death_animation = "death"
tt.unit.hide_after_death = true
tt.use_hidden_count_on_respawn = true
tt.hero.respawn_animation = "respawn"
tt.vis.bans = bor(tt.vis.bans, F_EAT, F_NET)
tt.vis.flags = bor(tt.vis.flags, F_FLYING)
tt.ranged.attacks[1] = E:clone_c("bullet_attack")
tt.ranged.attacks[1].max_angle = 85
tt.ranged.attacks[1].bullet_ray = "bullet_hero_dragon_arb_breath"
tt.ranged.attacks[1].bullet = "bullet_hero_dragon_arb_breath_splint"
tt.ranged.attacks[1].bullet_spikes = "bullet_hero_dragon_arb_breath_spikes"
tt.ranged.attacks[1].spikes_fx = "fx_bullet_hero_dragon_arb_breath_spikes"
tt.ranged.attacks[1].spikes_fx_offset = 30
tt.ranged.attacks[1].ultimate_fx = "fx_bullet_hero_dragon_arb_breath_powered"
tt.ranged.attacks[1].ultimate_fx_offset = 30
tt.ranged.attacks[1].bullet_start_offset = {
	v(19, tt.flight_height + 13),
	v(19, tt.flight_height + 13)
}
tt.ranged.attacks[1].cooldown = b.basic_breath_attack.cooldown
tt.ranged.attacks[1].min_range = b.basic_breath_attack.min_range
tt.ranged.attacks[1].max_range = b.basic_breath_attack.max_range
tt.ranged.attacks[1].shoot_times = {
	fts(14),
	fts(16),
	fts(18),
	fts(20),
	fts(22),
	fts(24),
	fts(26)
}
tt.ranged.attacks[1].sync_animation = true
tt.ranged.attacks[1].animation = "attack"
tt.ranged.attacks[1].vis_bans = bor(F_FLYING, F_NIGHTMARE)
tt.ranged.attacks[1].nodes_limit = 10
tt.ranged.attacks[1].basic_attack = true
tt.ranged.attacks[1].xp_gain_factor = b.basic_breath_attack.xp_gain_factor
tt.ranged.attacks[1].sound = "HeroDragonArbAttackSplints"
tt.timed_attacks.list[1] = E:clone_c("bullet_attack")
tt.timed_attacks.list[1].disabled = true
tt.timed_attacks.list[1].animation = "power_1"
tt.timed_attacks.list[1].cast_time = fts(22)
tt.timed_attacks.list[1].shoots_delay = 0.05
tt.timed_attacks.list[1].min_targets = b.arborean_spawn.min_targets
tt.timed_attacks.list[1].max_targets = b.arborean_spawn.max_targets
tt.timed_attacks.list[1].min_range = b.arborean_spawn.min_range
tt.timed_attacks.list[1].max_range = b.arborean_spawn.max_range
tt.timed_attacks.list[1].spawn_max_range_to_enemy = b.arborean_spawn.spawn_max_range_to_enemy
tt.timed_attacks.list[1].vis_flags = F_BLOCK
tt.timed_attacks.list[1].vis_bans = F_FLYING
tt.timed_attacks.list[1].sync_animation = true
tt.timed_attacks.list[1].xp_from_skill = "arborean_spawn"
tt.timed_attacks.list[1].vis_flags = bor(F_RANGED)
tt.timed_attacks.list[1].vis_bans = bor(F_FLYING, F_NIGHTMARE, F_CLIFF)
tt.timed_attacks.list[1].spawn = "soldier_hero_dragon_arb_spawn"
tt.timed_attacks.list[1].spawn_evolved = "soldier_hero_dragon_arb_spawn_paragon"
tt.timed_attacks.list[1].bullet = "bullet_hero_dragon_arb_arborean_spawn"
tt.timed_attacks.list[1].bullet_start_offset = {
	v(0, tt.flight_height + 95),
	v(0, tt.flight_height + 95)
}
tt.timed_attacks.list[2] = E:clone_c("custom_attack")
tt.timed_attacks.list[2].disabled = true
tt.timed_attacks.list[2].mod = {
	"mod_hero_dragon_arb_bleed",
	"mod_bullet_hero_dragon_arb_breath_spike_hit"
}
tt.timed_attacks.list[2].instakill_chance = nil
tt.timed_attacks.list[3] = E:clone_c("bullet_attack")
tt.timed_attacks.list[3].disabled = true
tt.timed_attacks.list[3].animation = "power_2"
tt.timed_attacks.list[3].cast_time = fts(25)
tt.timed_attacks.list[3].shoots_delay = 0.05
tt.timed_attacks.list[3].excluded_templates = {}
tt.timed_attacks.list[3].exclude_tower_kind = {}
tt.timed_attacks.list[3].max_targets = nil
tt.timed_attacks.list[3].min_range = b.tower_runes.min_range
tt.timed_attacks.list[3].max_range = b.tower_runes.max_range
tt.timed_attacks.list[3].sync_animation = true
tt.timed_attacks.list[3].xp_from_skill = "tower_runes"
tt.timed_attacks.list[3].vis_flags = bor(F_RANGED, F_MOD)
tt.timed_attacks.list[3].vis_bans = 0
tt.timed_attacks.list[3].bullet = "bullet_hero_dragon_arb_tower_buff"
tt.timed_attacks.list[3].bullet_start_offset = {
	v(40, tt.flight_height + 15),
	v(-40, tt.flight_height + 15)
}
tt.timed_attacks.list[4] = E:clone_c("bullet_attack")
tt.timed_attacks.list[4].disabled = true
tt.timed_attacks.list[4].animation = "power_4"
tt.timed_attacks.list[4].cast_time = fts(26)
tt.timed_attacks.list[4].shots_delay = fts(3)
tt.timed_attacks.list[4].excluded_templates = {}
tt.timed_attacks.list[4].exclude_tower_kind = {}
tt.timed_attacks.list[4].max_targets = nil
tt.timed_attacks.list[4].min_range = b.tower_plants.min_range
tt.timed_attacks.list[4].max_range = b.tower_plants.max_range
tt.timed_attacks.list[4].sync_animation = true
tt.timed_attacks.list[4].xp_from_skill = "tower_plants"
tt.timed_attacks.list[4].vis_flags = bor(F_RANGED, F_MOD)
tt.timed_attacks.list[4].vis_bans = 0
tt.timed_attacks.list[4].bullet = "bullet_hero_dragon_arb_tower_plants"
tt.timed_attacks.list[4].bullet_start_offset = {
	v(0, tt.flight_height + 100),
	v(0, tt.flight_height + 100)
}
tt.timed_attacks.list[4].plant_linirea = "decal_hero_dragon_arb_tower_plant_linirea"
tt.timed_attacks.list[4].plant_dark_army = "decal_hero_dragon_arb_tower_plant_dark_army"
tt.tween.disabled = true
tt.tween.remove = false
tt.tween.props[1].sprite_id = 2
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.5,
		255
	}
}
tt.tween.props[1].ignore_reverse = true
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].name = "alpha"
tt.tween.props[2].keys = {
	{
		0,
		0
	},
	{
		0.2,
		255
	}
}
tt.tween.props[2].sprite_id = 3
tt.tween.props[2].disabled = true
tt.controller_passive = "controller_hero_dragon_arb_passive"
tt = E:register_t("hero_dragon_arb_ultimate")
b = balance.heroes.hero_dragon_arb.ultimate

E:add_comps(tt, "pos", "main_script", "sound_events")

tt.can_fire_fn = scripts.hero_dragon_arb_ultimate.can_fire_fn
tt.main_script.update = scripts.hero_dragon_arb_ultimate.update
tt.soldiers_target = {
	"soldier_hero_dragon_arb_spawn_lvl1",
	"soldier_hero_dragon_arb_spawn_lvl2",
	"soldier_hero_dragon_arb_spawn_lvl3"
}
tt.soldiers_polymorph_mod = "mod_hero_dragon_arb_ultimate_paragons_polymorph"
tt.ultimate_sound = "HeroDragonArbUltimate"
tt = E:register_t("decal_hero_dragon_arb_passive_plant_1", "decal_scripted")

E:add_comps(tt, "vis")

tt.main_script.update = scripts.decal_hero_dragon_arb_passive_plant.update
tt.render.sprites[1].prefix = "hero_dragon_arborean_passive_root1"
tt.render.sprites[1].loop = false
tt.render.sprites[1].name = "start"
tt.render.sprites[1].hidden = true
tt.vis.flags = 0
tt.vis.bans = bor(F_BLOCK)
tt = E:register_t("decal_hero_dragon_arb_passive_plant_2", "decal_hero_dragon_arb_passive_plant_1")
tt.render.sprites[1].prefix = "hero_dragon_arborean_passive_root2"
tt = E:register_t("decal_hero_dragon_arb_passive_plant_3", "decal_hero_dragon_arb_passive_plant_1")
tt.render.sprites[1].prefix = "hero_dragon_arborean_passive_root3"
tt = E:register_t("fx_bullet_hero_dragon_arb_breath_powered", "fx")
tt.render.sprites[1].name = "hero_dragon_arborean_powered_hit_fx_idle"
tt.render.sprites[1].z = Z_BULLETS + 3
tt.render.sprites[1].scale = vv(1.25)
tt = E:register_t("fx_bullet_hero_dragon_arb_breath_spikes", "fx")
tt.render.sprites[1].name = "hero_dragon_arborean_spikes_mouth_fx_idle"
tt.render.sprites[1].anchor = v(0.621, 0.5)
tt.render.sprites[1].r = math.rad(45)
tt.render.sprites[1].z = Z_BULLETS + 2
tt = E:register_t("fx_bullet_hero_dragon_arb_arboreans_hit", "fx")
tt.render.sprites[1].prefix = "hero_dragon_arborean_hit_fx"
tt.render.sprites[1].name = "run"
tt = E:register_t("fx_water_bullet_hero_dragon_arb_water_decal", "fx")
tt.render.sprites[1].name = "hero_dragon_arborean_water_ground_fx_idle"
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("fx_water_bullet_hero_dragon_arb_water_hit", "fx")
tt.render.sprites[1].name = "hero_dragon_arborean_water_hit_fx_idle"
tt.render.sprites[1].z = Z_OBJECTS
tt = E:register_t("fx_bullet_hero_dragon_arb_linirea_plant_heal_hit", "fx")
tt.render.sprites[1].name = "hero_dragon_arborean_flower_projectile_hit_fx_idle"
tt.render.sprites[1].z = Z_EFFECTS
tt = E:register_t("fx_enemy_splash_crocs", "fx")
tt.render.sprites[1].prefix = "fx_water_splash"
tt.render.sprites[1].name = "small"
tt.render.sprites[1].size_names = {
	"small",
	"small",
	"big"
}
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = -8
tt = E:register_t("fx_enemy_bubble_crocs", "fx")
tt.render.sprites[1].prefix = "fx_water_bubble"
tt.render.sprites[1].name = "small"
tt.render.sprites[1].size_names = {
	"small",
	"small",
	"big"
}
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = -8
tt = E:register_t("mod_bullet_hero_dragon_arb_breath_hit", "modifier")

E:add_comps(tt, "render")

tt.main_script.insert = scripts.mod_track_target.insert
tt.main_script.update = scripts.mod_track_target.update
tt.modifier.duration = 1
tt.chance = 1
tt.max_targets_per_hit = 2
tt.render.sprites[1].prefix = "hero_dragon_arborean_hit_fx"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].loop = false
tt = E:register_t("mod_bullet_hero_dragon_arb_breath_spike_hit", "mod_bullet_hero_dragon_arb_breath_hit")
tt.render.sprites[1].prefix = "hero_dragon_arborean_spikes_projectile_hit_fx"
tt.render.sprites[1].name = "idle"
tt = E:register_t("mod_hero_dragon_arb_ultimate", "modifier")
b = balance.heroes.hero_dragon_arb

E:add_comps(tt, "render", "fast")

tt.main_script.insert = scripts.mod_hero_dragon_arb_ultimate.insert
tt.main_script.update = scripts.mod_hero_dragon_arb_ultimate.update
tt.main_script.remove = scripts.mod_hero_dragon_arb_ultimate.remove
tt.modifier.duration = 1e+99
tt.modifier.use_mod_offset = true
tt.inflicted_damage_factor = nil
tt.extra_magic_armor = nil
tt.extra_armor = nil
tt.fast.factor = nil
tt.render.sprites[1].prefix = "hero_dragon_arborean_transformation_fx"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].loop = false
tt.render.sprites[1].z = Z_FLYING_HEROES + 1
tt.ultimate_sid = 3
tt = E:register_t("soldier_hero_dragon_arb_spawn", "unit")

local b = balance.heroes.hero_dragon_arb.arborean_spawn.arborean

E:add_comps(tt, "soldier", "motion", "nav_path", "main_script", "sound_events", "vis", "info", "melee", "reinforcement", "tween")

tt.info.enc_icon = 3
tt.info.portrait = "gui_bottom_info_image_soldiers_0050"
tt.info.fn = scripts.soldier_hero_dragon_arb_spawn.get_info
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 53)
tt.main_script.update = scripts.soldier_hero_dragon_arb_spawn.update
tt.melee.attacks[1].damage_type = b.basic_attack.damage_type
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].hit_fx = "fx_enemy_deathwood_hit"
tt.melee.attacks[1].hit_time = fts(18)
tt.melee.attacks[1].hit_offset = v(45, 10)
tt.melee.attacks[1].animation = "attack"
tt.melee.attacks[1].sound = "HeroDragonArbArboreansHit"
tt.melee.range = 70
tt.motion.max_speed = b.speed
tt.nav_path.dir = -1
tt.render.sprites[1].prefix = "hero_dragon_arborean_arborean"
tt.render.sprites[1].group = "unit"
tt.render.sprites[1].scale = vv(0.93)
tt.ui.click_rect = r(-25, 0, 50, 50)
tt.unit.hit_offset = v(0, 22)
tt.unit.head_offset = v(0, 10)
tt.unit.marker_offset = v(-1, 0)
tt.unit.mod_offset = v(0, 19)
tt.unit.size = UNIT_SIZE_MEDIUM
tt.unit.can_explode = false
tt.unit.blood_color = BLOOD_GRAY
tt.unit.fade_time_after_death = 3
tt.unit.fade_duration_after_death = 0.3
tt.soldier.melee_slot_offset.x = 15
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.vis.flags = bor(F_FRIEND)
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	}
}
tt.tween.props[1].name = "alpha"
tt.tween.props[1].disabled = true
tt.tween.remove = false
tt.tween.reverse = false
tt.tween.disabled = false

for i = 1, 3 do
	tt = E:register_t("soldier_hero_dragon_arb_spawn_lvl" .. i, "soldier_hero_dragon_arb_spawn")
	tt.health.hp_max = b.hp[i]
	tt.melee.attacks[1].damage_max = b.basic_attack.damage_max[i]
	tt.melee.attacks[1].damage_min = b.basic_attack.damage_min[i]
	tt.reinforcement.duration = b.duration[i]
end

tt = E:register_t("soldier_hero_dragon_arb_spawn_paragon", "soldier_hero_dragon_arb_spawn")

local b = balance.heroes.hero_dragon_arb.arborean_spawn.paragon

tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 53)
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_type = b.basic_attack.damage_type
tt.ui.click_rect = r(-25, 0, 50, 50)
tt.render.sprites[2] = table.deepclone(tt.render.sprites[1])
tt.render.sprites[2].prefix = "hero_dragon_arborean_arborean_powered_fx_front"
tt.render.sprites[2].alpha = 0
tt.render.sprites[2].scale = vv(0.93)
tt.render.sprites[3] = table.deepclone(tt.render.sprites[2])
tt.render.sprites[3].prefix = "hero_dragon_arborean_arborean_powered_fx_back_idle"
tt.render.sprites[3].scale = vv(1, 0.8)
tt.render.sprites[3].sort_y_offset = 1
tt.render.sprites[3].scale = vv(0.93)
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	}
}
tt.tween.props[2].name = "alpha"
tt.tween.props[2].sprite_id = {
	2,
	3
}
tt.tween.props[2].disabled = true
tt.tween.props[3] = E:clone_c("tween_prop")
tt.tween.props[3].keys = {
	{
		0,
		0
	},
	{
		fts(4),
		255
	}
}
tt.tween.props[3].name = "alpha"
tt.tween.props[3].sprite_id = {
	2,
	3
}
tt.tween.props[3].disabled = true

for i = 1, 3 do
	tt = E:register_t("soldier_hero_dragon_arb_spawn_paragon_lvl" .. i, "soldier_hero_dragon_arb_spawn_paragon")
	tt.health.hp_max = b.hp[i]
	tt.melee.attacks[1].damage_max = b.basic_attack.damage_max[i]
	tt.melee.attacks[1].damage_min = b.basic_attack.damage_min[i]
	tt.reinforcement.duration = b.duration[i]
end

tt = E:register_t("mod_hero_dragon_arb_bleed", "modifier")

local b = balance.heroes.hero_dragon_arb.thorn_bleed

E:add_comps(tt, "dps")

tt.main_script.insert = scripts.mod_hero_dragon_arb_bleed.insert
tt.main_script.update = scripts.mod_hero_dragon_arb_bleed.update
tt.modifier.vis_flags = bor(F_MOD)
tt.modifier.duration = nil
tt.dps.damage_min = nil
tt.dps.damage_max = nil
tt.dps.damage_type = b.damage_type
tt.dps.damage_every = b.damage_every
tt.dps.kill = true
tt.dps.fx = "fx_bleeding"
tt.dps.fx_with_blood_color = true
tt.dps.fx_target_flip = true
tt.dps.fx_tracks_target = true
tt.damage_speed_ratio = nil
tt.passive_mark_mod = "mod_hero_dragon_arb_passive_mark"
tt.instakill_vis_flags = bor(F_INSTAKILL)
tt.instakill_vis_bans = bor(F_BOSS, F_MINIBOSS)
tt = E:register_t("mod_hero_dragon_arb_tower_buff", "modifier")

E:add_comps(tt, "render")

tt.main_script.insert = scripts.mod_tower_factors.insert
tt.main_script.remove = scripts.mod_tower_factors.remove
tt.main_script.update = scripts.mod_hero_dragon_arb_tower_buff.update
tt.modifier.duration = nil
tt.range_factor = 1
tt.damage_factor = nil
tt.render.sprites[1].prefix = "hero_dragon_arborean_tower_fx_a"
tt.render.sprites[1].animated = true
tt.render.sprites[1].offset.y = 33
tt.render.sprites[1].sort_y_offset = -10
tt.render.sprites[1].draw_order = DO_TOWER_MODS
tt.render.sprites[1].group = "layers"
tt.render.sprites[1].scale = vv(1.25)
tt.render.sprites[2] = table.deepclone(tt.render.sprites[1])
tt.render.sprites[2].prefix = "hero_dragon_arborean_tower_fx_b"
tt.out_anim_duration = fts(29)
tt.render.sprites[1].name = "idle"

tt = E:register_t("decal_hero_dragon_arb_tower_plant_linirea", "decal_scripted")

local b = balance.heroes.hero_dragon_arb.tower_plants.linirea

E:add_comps(tt, "bullet_attack")

tt.render.sprites[1].prefix = "hero_dragon_arborean_flower"
tt.render.sprites[1].name = "spawn"
tt.render.sprites[1].sort_y_offset = 1
tt.main_script.update = scripts.decal_hero_dragon_arb_tower_plant_linirea.update
tt.bullet_attack.max_range = b.range
tt.bullet_attack.bullet = "bullet_hero_dragon_arb_linirea_plant_heal"
tt.bullet_attack.mark_mod = "mod_hero_dragon_arb_plant_linirea_heal_mark"
tt.bullet_attack.shoot_time = fts(6)
tt.bullet_attack.cooldown_min = b.cooldown_min
tt.bullet_attack.cooldown_max = b.cooldown_max
tt.bullet_attack.bullet_start_offset = {
	v(0, 30),
	v(0, 30)
}
tt.bullet_attack.animation = "attack"
tt.bullet_attack.vis_flags = bor(F_RANGED, F_MOD)
tt.bullet_attack.vis_bans = 0
tt.duration = nil
tt = E:register_t("decal_hero_dragon_arb_tower_plant_dark_army", "decal_scripted")

local b = balance.heroes.hero_dragon_arb.tower_plants.dark_army

E:add_comps(tt, "area_attack")

tt.render.sprites[1].prefix = "hero_dragon_arborean_mushroom"
tt.render.sprites[1].name = "spawn"
tt.render.sprites[1].sort_y_offset = 1
tt.main_script.update = scripts.decal_hero_dragon_arb_tower_plant_dark_army.update
tt.area_attack.max_range = b.range
tt.area_attack.aura = "aura_hero_dragon_arb_plant_dark_army_slow"
tt.area_attack.hit_time = fts(14)
tt.area_attack.cooldown_min = b.cooldown_min
tt.area_attack.cooldown_max = b.cooldown_max
tt.area_attack.animation = "attack"
tt.area_attack.vis_flags = bor(tt.area_attack.vis_flags, F_MOD)
tt.area_attack.vis_bans = 0
tt.duration = nil
tt = E:register_t("mod_hero_dragon_arb_plant_linirea_heal", "modifier")

local b = balance.heroes.hero_dragon_arb.tower_plants.linirea

E:add_comps(tt, "hps", "render")

tt.render.sprites[1].prefix = "hero_dragon_arborean_heal_back"
tt.render.sprites[1].sort_y_offset = 5
tt.render.sprites[1].anchor = v(0.5, 0.6)
tt.render.sprites[1].loop = false
tt.render.sprites[2] = table.deepclone(tt.render.sprites[1])
tt.render.sprites[2].prefix = "hero_dragon_arborean_heal_front_a"
tt.render.sprites[2].sort_y_offset = -1
tt.render.sprites[2].anchor = v(0.5, 0.7)
tt.render.sprites[3] = table.deepclone(tt.render.sprites[2])
tt.render.sprites[3].prefix = "hero_dragon_arborean_heal_front_b"
tt.render.sprites[3].anchor = v(0.5, 0.7)
tt.modifier.duration = b.heal_duration
tt.hps.heal_every = b.heal_every
tt.hps.heal_min = nil
tt.hps.heal_max = nil
tt.main_script.insert = scripts.mod_hps.insert
tt.main_script.update = scripts.mod_hero_dragon_arb_plant_linirea_heal.update
tt = E:register_t("mod_hero_dragon_arb_plant_linirea_heal_mark", "modifier")

local b = balance.heroes.hero_dragon_arb.tower_plants.linirea

E:add_comps(tt, "mark_flags")

tt.mark_flags.vis_bans = F_CUSTOM
tt.modifier.duration = b.heal_duration + 2
tt.main_script.queue = scripts.mod_mark_flags.queue
tt.main_script.dequeue = scripts.mod_mark_flags.dequeue
tt.main_script.update = scripts.mod_mark_flags.update
tt = E:register_t("mod_hero_dragon_arb_plant_dark_army_slow", "mod_slow")

local b = balance.heroes.hero_dragon_arb.tower_plants.dark_army

tt.modifier.duration = b.duration
tt.slow.factor = nil
tt = E:register_t("mod_hero_dragon_arb_plant_dark_army_dps", "modifier")

E:add_comps(tt, "dps")

local b = balance.heroes.hero_dragon_arb.tower_plants.dark_army

tt.modifier.duration = b.duration
tt.dps.damage_min = nil
tt.dps.damage_max = nil
tt.dps.damage_type = b.damage_type
tt.dps.damage_every = b.damage_every
tt.main_script.insert = scripts.mod_dps.insert
tt.main_script.update = scripts.mod_dps.update
tt = E:register_t("aura_hero_dragon_arb_plant_dark_army_slow", "aura")

local b = balance.heroes.hero_dragon_arb.tower_plants.dark_army

tt.aura.mods = {
	"mod_hero_dragon_arb_plant_dark_army_slow",
	"mod_hero_dragon_arb_plant_dark_army_dps"
}
tt.aura.duration = fts(37)
tt.aura.cycle_time = 0.1
tt.aura.radius = b.range
tt.aura.vis_bans = bor(F_FRIEND)
tt.aura.vis_flags = bor(F_MOD)
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_apply_mod.update
tt = E:register_t("mod_hero_dragon_arb_passive_slow", "mod_slow")

E:add_comps(tt)

local b = balance.heroes.hero_dragon_arb.passive_plant_zones

tt.modifier.duration = 0.3
tt.slow.factor = b.slow_factor
tt = E:register_t("aura_hero_dragon_arb_passive_slow", "aura")

E:add_comps(tt)

local b = balance.heroes.hero_dragon_arb.passive_plant_zones

tt.aura.mods = {
	"mod_hero_dragon_arb_passive_slow"
}
tt.aura.duration = 1e+99
tt.aura.cycle_time = 0.2
tt.aura.radius = b.radius
tt.aura.vis_bans = bor(F_FRIEND, F_FLYING)
tt.aura.vis_flags = bor(F_MOD)
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_apply_mod.update
tt = E:register_t("mod_hero_dragon_arb_passive_mark", "modifier")

E:add_comps(tt)

local b = balance.heroes.hero_dragon_arb.passive_plant_zones

tt.main_script.insert = scripts.mod_hero_dragon_arb_passive_mark.insert
tt.main_script.remove = scripts.mod_hero_dragon_arb_passive_mark.remove
tt.main_script.update = scripts.mod_track_target.update
tt.modifier.duration = 0.2

tt = E:register_t("hero_spider", "hero5")
b = balance.heroes.hero_spider

E:add_comps(tt, "melee", "ranged", "teleport", "timed_attacks")

tt.hero.level_stats.armor = b.armor
tt.hero.level_stats.hp_max = b.hp_max
tt.hero.level_stats.melee_damage_max = b.basic_melee.damage_max
tt.hero.level_stats.melee_damage_min = b.basic_melee.damage_min
tt.hero.level_stats.ranged_damage_max = b.basic_ranged.damage_max
tt.hero.level_stats.ranged_damage_min = b.basic_ranged.damage_min
tt.hero.level_stats.regen_health = b.regen_health
tt.hero.level_stats.melee_dot_damage_min = b.basic_melee.dot.poison_damage_min
tt.hero.level_stats.melee_dot_damage_max = b.basic_melee.dot.poison_damage_max
tt.hero.skills.instakill_melee = E:clone_c("hero_skill")
tt.hero.skills.instakill_melee.cooldown = b.instakill_melee.cooldown
tt.hero.skills.instakill_melee.max_health = b.instakill_melee.max_health
tt.hero.skills.instakill_melee.life_threshold = b.instakill_melee.life_threshold
tt.hero.skills.instakill_melee.hr_available = true
tt.hero.skills.instakill_melee.hr_order = 1
tt.hero.skills.instakill_melee.hr_cost = {
	3,
	2,
	1
}
tt.hero.skills.instakill_melee.xp_gain = b.instakill_melee.xp_gain
tt.hero.skills.instakill_melee.key = "INSTAKILL_MELEE"
tt.hero.skills.area_attack = E:clone_c("hero_skill")
tt.hero.skills.area_attack.cooldown = b.area_attack.cooldown
tt.hero.skills.area_attack.damage_type = b.area_attack.damage_type
tt.hero.skills.area_attack.damage_radius = b.area_attack.damage_radius
tt.hero.skills.area_attack.damage_min = b.area_attack.damage_min
tt.hero.skills.area_attack.damage_max = b.area_attack.damage_max
tt.hero.skills.area_attack.stun_time = b.area_attack.stun_time
tt.hero.skills.area_attack.xp_gain = b.area_attack.xp_gain
tt.hero.skills.area_attack.hr_available = true
tt.hero.skills.area_attack.hr_icon = "0008"
tt.hero.skills.area_attack.hr_order = 2
tt.hero.skills.area_attack.hr_cost = {
	2,
	2,
	2
}
tt.hero.skills.area_attack.key = "AREA_ATTACK"
tt.hero.skills.tunneling = E:clone_c("hero_skill")
tt.hero.skills.tunneling.damage_type = b.tunneling.damage_type
tt.hero.skills.tunneling.damage_radius = b.tunneling.damage_radius
tt.hero.skills.tunneling.damage_min = b.tunneling.damage_min
tt.hero.skills.tunneling.damage_max = b.tunneling.damage_max
tt.hero.skills.tunneling.xp_gain = b.tunneling.xp_gain
tt.hero.skills.tunneling.hr_available = true
tt.hero.skills.tunneling.hr_order = 3
tt.hero.skills.tunneling.hr_cost = {
	2,
	2,
	2
}
tt.hero.skills.tunneling.key = "TUNNELING"
tt.hero.skills.supreme_hunter = E:clone_c("hero_skill")
tt.hero.skills.supreme_hunter.hr_cost = {
	3,
	3,
	3
}
tt.hero.skills.supreme_hunter.hr_order = 4
tt.hero.skills.supreme_hunter.hr_icon = "0041"
tt.hero.skills.supreme_hunter.cooldown = b.supreme_hunter.cooldown
tt.hero.skills.supreme_hunter.damage_max = b.supreme_hunter.damage_max
tt.hero.skills.supreme_hunter.damage_min = b.supreme_hunter.damage_min
tt.hero.skills.supreme_hunter.xp_gain = b.supreme_hunter.xp_gain
tt.hero.skills.supreme_hunter.key = "SUPREME_HUNTER"
tt.hero.skills.ultimate = E:clone_c("hero_skill")
tt.hero.skills.ultimate.hr_available = false
tt.hero.skills.ultimate.hr_icon = "0018"
tt.hero.skills.ultimate.hr_order = 5
tt.hero.skills.ultimate.hr_cost = {
	1,
	3,
	3,
	3
}
tt.hero.skills.ultimate.hr_available = true
tt.hero.skills.ultimate.cooldown = b.ultimate.cooldown
tt.hero.skills.ultimate.duration = b.ultimate.spider.duration
tt.hero.skills.ultimate.spawn_amount = b.ultimate.spawn_amount
tt.hero.skills.ultimate.hp = b.ultimate.spider.hp
tt.hero.skills.ultimate.damage_min = b.ultimate.spider.melee_attack.damage_min
tt.hero.skills.ultimate.damage_max = b.ultimate.spider.melee_attack.damage_max
tt.hero.skills.ultimate.controller_name = "controller_hero_spider_ultimate"
tt.hero.skills.ultimate.key = "ARACNID_SPAWNER"
tt.hero.team = TEAM_DARK_ARMY
tt.health.dead_lifetime = b.dead_lifetime
tt.health_bar.offset = v(0, 85)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM_MEDIUM
tt.hero.fn_level_up = scripts.hero_spider.level_up
tt.info.fn = scripts.hero_basic.get_info_ranged_with_damage_factor
tt.info.hero_portrait = "hero_portraits_0017"
tt.info.i18n_key = "HERO_SPIDER"
tt.info.portrait = "portraits_hero_0017"
tt.info.ultimate_icon = "0017"
tt.info.stat_hp = b.stats.hp
tt.info.stat_armor = b.stats.armor
tt.info.stat_damage = b.stats.damage
tt.info.stat_cooldown = b.stats.cooldown
tt.info.damage_icon = "magic"
tt.main_script.insert = scripts.hero_spider.insert
tt.main_script.update = scripts.hero_spider.update
tt.motion.max_speed = b.speed
tt.regen.cooldown = b.regen_cooldown
tt.render.sprites[1].angles = {}
tt.render.sprites[1].angles.walk = {
	"walk"
}
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].prefix = "hero_spider_05_hero"
tt.render.sprites[1].draw_order = DO_HEROES
tt.timed_attacks.list[1] = E:clone_c("custom_attack")
tt.timed_attacks.list[1].disabled = true
tt.timed_attacks.list[1].min_cooldown = b.shared_cooldown
tt.timed_attacks.list[1].animation = "kill"
tt.timed_attacks.list[1].shoot_time = fts(15)
tt.timed_attacks.list[1].enemy_move_offset = v(10, 40)
tt.timed_attacks.list[1].mod = "mod_hero_spider_skill_instakill_melee"
tt.timed_attacks.list[1].life_threshold = nil
tt.timed_attacks.list[1].sound = "HeroRobotUppercutCast"
tt.timed_attacks.list[1].use_current_health_instead_of_max = b.instakill_melee.use_current_health_instead_of_max
tt.timed_attacks.list[2] = E:clone_c("custom_attack")
tt.timed_attacks.list[2].animation = "ability1"
tt.timed_attacks.list[2].cooldown = nil
tt.timed_attacks.list[2].disabled = true
tt.timed_attacks.list[2].cast_time = fts(37)
tt.timed_attacks.list[2].damage_type = b.area_attack.damage_type
tt.timed_attacks.list[2].damage_radius = b.area_attack.damage_radius
tt.timed_attacks.list[2].damage_max = b.area_attack.damage_max
tt.timed_attacks.list[2].damage_min = b.area_attack.damage_min
tt.timed_attacks.list[2].min_targets = b.area_attack.min_targets
tt.timed_attacks.list[2].mod = "mod_hero_spider_area_attack_stun"
tt.timed_attacks.list[2].vis_bans_trigger = bor(F_FLYING, F_NIGHTMARE)
tt.timed_attacks.list[2].vis_bans_damage = bor(F_FLYING)
tt.timed_attacks.list[2].sound = "HeroSpiderAreaDamage"
tt.timed_attacks.list[2].min_cooldown = 5
tt.timed_attacks.list[2].hit_decal = "fx_hero_spider_area_attack"
tt.timed_attacks.list[3] = E:clone_c("custom_attack")
tt.timed_attacks.list[3].disabled = true
tt.timed_attacks.list[3].damage_type = b.tunneling.damage_type
tt.timed_attacks.list[3].damage_radius = b.tunneling.damage_radius
tt.timed_attacks.list[3].damage_max = b.tunneling.damage_max
tt.timed_attacks.list[3].damage_min = b.tunneling.damage_min
tt.timed_attacks.list[3].min_targets = b.tunneling.min_targets
tt.timed_attacks.list[3].vis_bans_trigger = bor(F_FLYING, F_NIGHTMARE)
tt.timed_attacks.list[3].vis_bans_damage = bor(F_FLYING)
tt.timed_attacks.list[3].hit_decal = "fx_hero_spider_teleport_explosion"
tt.timed_attacks.list[4] = E:clone_c("custom_attack")
tt.timed_attacks.list[4].animations = {
	"hunter_in",
	"hunter",
	"hunter_out"
}
tt.timed_attacks.list[4].sound_supreme = "HeroSpiderSupremeHunter"
tt.timed_attacks.list[4].disabled = true
tt.timed_attacks.list[4].cooldown = nil
tt.timed_attacks.list[4].vis_flags = bor(F_RANGED, F_BLOCK)
tt.timed_attacks.list[4].vis_bans = bor(F_FLYING, F_BOSS)
tt.timed_attacks.list[4].max_range = 9999
tt.timed_attacks.list[4].min_range = 0
tt.timed_attacks.list[4].damage_max = nil
tt.timed_attacks.list[4].damage_min = nil
tt.timed_attacks.list[4].node_margin = 10
tt.timed_attacks.list[4].damage_type = DAMAGE_TRUE
tt.sound_events.change_rally_point = "HeroSpiderTaunt"
tt.sound_events.death = "HeroSpiderDeath"
tt.sound_events.respawn = "HeroSpiderTauntIntro"
tt.sound_events.hero_room_select = "HeroSpiderTauntSelect"
tt.teleport.min_distance = b.teleport_min_distance
tt.teleport.sound_in = "HeroSpiderTunnelingIn"
tt.teleport.sound_out = "HeroSpiderTunnelingOut"
tt.teleport.sound_appear = "HeroSpiderTunnelingAppear"
tt.teleport.animations = {
	"teleport_in",
	"teleport_out"
}
tt.teleport.delay = b.tp_delay
tt.teleport.duration = b.tp_duration
tt.teleport.fx_in = "fx_hero_spider_teleport_fx"
tt.teleport.fx_out = "fx_hero_spider_teleport_fx"
tt.soldier.melee_slot_offset = v(35, 0)
tt.unit.hit_offset = v(0, 23)
tt.unit.mod_offset = v(0, 23)
tt.unit.marker_offset = v(0, 0)
tt.unit.size = UNIT_SIZE_MEDIUM
tt.ui.click_rect = r(-35, -5, 61, 75)
tt.melee.range = 100
tt.melee.attacks[1] = E:clone_c("melee_attack")
tt.melee.attacks[1].cooldown = b.basic_melee.cooldown
tt.melee.attacks[1].shared_cooldown = b.basic_melee.cooldown
tt.melee.attacks[1].hit_time = fts(18)
tt.melee.attacks[1].sound = "HeroSpiderBasicAttack"
tt.melee.attacks[1].sound_args = {
	delay = fts(14)
}
tt.melee.attacks[1].xp_gain_factor = b.basic_melee.xp_gain_factor
tt.melee.attacks[1].hit_offset = v(27, 15)
tt.melee.attacks[1].animation = "attack"
tt.melee.attacks[1].basic_attack = true
tt.melee.attacks[1].mod = "mod_hero_spider_melee_dot"
tt.melee.attacks[1].damage_type = b.basic_melee.damage_type
tt.ranged.attacks[1] = E:clone_c("bullet_attack")
tt.ranged.attacks[1].animation = "spell"
tt.ranged.attacks[1].bullet = "bolt_hero_spider_basic_attack"
tt.ranged.attacks[1].bullet_start_offset = {
	v(-9, 100),
	v(9, 100)
}
tt.ranged.attacks[1].cooldown = b.basic_ranged.cooldown
tt.ranged.attacks[1].max_range = b.basic_ranged.max_range
tt.ranged.attacks[1].min_range = b.basic_ranged.min_range
tt.ranged.attacks[1].shoot_time = fts(17)
tt.ranged.attacks[1].vis_bans = bor(F_WATER, F_NIGHTMARE)
tt.ranged.attacks[1].vis_flags = bor(F_RANGED)
tt.ranged.attacks[1].xp_gain_factor = b.basic_ranged.xp_gain_factor
tt.ranged.attacks[1].basic_attack = true
tt = E:register_t("controller_hero_spider_ultimate")
b = balance.heroes.hero_spider.ultimate

E:add_comps(tt, "pos", "main_script", "sound_events")

tt.can_fire_fn = scripts.controller_hero_spider_ultimate.can_fire_fn
tt.main_script.update = scripts.controller_hero_spider_ultimate.update
tt.range = b.range
tt.spawn_delay = fts(0)
tt.vis_flags = bor(F_RANGED)
tt.vis_bans = bor(F_FLYING)
tt.spider = "soldier_hero_spider_ultimate"
tt.spawn_fx = "fx_hero_spider_ultimate_spawn"
tt.spawn_sound = "HeroSpiderGlobalSpawn"
tt.spawn_amount = nil
tt.max_shards = b.max_shards
tt.prediction_nodes = fts(15)
tt.distance_between_shards = b.distance_between_shards
tt.random_ni_spread = b.random_ni_spread
tt.sound_events.insert = "HeroSpiderGlobalCocoons"
tt = E:register_t("soldier_hero_spider_ultimate", "soldier_militia")
b = balance.heroes.hero_spider.ultimate.spider

E:add_comps(tt, "reinforcement", "nav_grid", "tween")

tt.health.armor = b.armor
tt.health.hp_max = b.hp
tt.health_bar.offset = v(0, 30)
tt.info.fn = scripts.soldier_reinforcement.get_info
tt.info.portrait = "gui_bottom_info_image_soldiers_0057"
tt.info.random_name_format = nil
tt.info.random_name_count = nil
tt.main_script.insert = scripts.soldier_reinforcement.insert
tt.main_script.update = scripts.soldier_reinforcement_kr5.update
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown
tt.melee.attacks[1].damage_max = nil
tt.melee.attacks[1].damage_min = nil
tt.melee.attacks[1].damage_type = b.melee_attack.damage_type
tt.melee.attacks[1].hit_time = fts(12)
tt.melee.attacks[1].mod = "mod_soldier_hero_spider_ultimate_stun"
tt.melee.range = 72
tt.motion.max_speed = b.speed
tt.regen.cooldown = 1
tt.regen.health = 0
tt.reinforcement.duration = b.duration
tt.render.sprites[1].prefix = "hero_spider_05_spider"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].angles.walk = {
	"walk"
}
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.soldier.melee_slot_offset = v(5, 0)
tt.sound_events.insert = nil
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	}
}
tt.tween.props[1].name = "alpha"
tt.tween.remove = false
tt.tween.reverse = false
tt.unit.hit_offset = v(0, 5)
tt.unit.mod_offset = v(0, 14)
tt.unit.level = 0
tt = E:register_t("mod_soldier_hero_spider_ultimate_stun", "mod_stun")
b = balance.heroes.hero_spider.ultimate.spider
tt.main_script.insert = scripts.mod_soldier_hero_spider_ultimate_stun.insert
tt.modifier.duration = b.stun_duration
tt.stun_chance = b.stun_chance
tt.modifier.vis_flags = bor(F_MOD, F_STUN)
tt.modifier.vis_bans = bor(F_MINIBOSS, F_BOSS)
tt = E:register_t("mod_hero_spider_stun", "mod_shock_and_awe")
tt.modifier.duration = 1.3

tt = E:register_t("enemy_KR5", "enemy")
tt.unit.head_offset = {}
tt.unit.head_offset = v(0, 0)
tt.unit.disintegrate_fx = "fx_enemy_desintegrate_KR5"
tt.render.sprites[1].angles_custom = {
	walk = {
		55,
		115,
		245,
		305
	}
}

local b = balance.enemies.werebeasts.hog_invader

tt = E:register_t("enemy_hog_invader", "enemy_KR5")

E:add_comps(tt, "melee")

tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(28, 0)
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 32)
tt.info.enc_icon = 1
tt.info.portrait = "gui_bottom_info_image_enemies_0004"
tt.unit.hit_offset = v(0, 14)
tt.unit.head_offset = v(0, 5)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, 10)
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_mixed.update
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].hit_time = fts(8)
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "hog_invader"
tt.sound_events.death = "EnemyTuskedBrawlerDeath"
tt.ui.click_rect = r(-17, 0, 34, 30)

local b = balance.enemies.werebeasts.tusked_brawler

tt = E:register_t("enemy_tusked_brawler", "enemy_KR5")

E:add_comps(tt, "melee")

tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(28, 0)
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 34)
tt.health.dead_lifetime = 1
tt.info.enc_icon = 2
tt.info.portrait = "gui_bottom_info_image_enemies_0009"
tt.unit.hit_offset = v(0, 14)
tt.unit.head_offset = v(0, 0)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, 10)
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_mixed.update
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].hit_time = fts(8)
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "tusked_brawler"
tt.sound_events.death = "EnemyTuskedBrawlerDeath"
tt.ui.click_rect = r(-20, 0, 40, 35)

local b = balance.enemies.werebeasts.turtle_shaman

tt = E:register_t("turtle_shaman_bullet", "bolt_enemy")
tt.render.sprites[1].prefix = "turtle_shaman_attack_1_projectile"
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.bullet.damage_max = b.ranged_attack.damage_max
tt.bullet.damage_min = b.ranged_attack.damage_min
tt.bullet.hit_blood_fx = nil
tt.bullet.acceleration_factor = 0.1
tt.bullet.min_speed = 30
tt.bullet.max_speed = 300
tt.bullet.align_with_trajectory = true
tt.bullet.hit_fx = "turtle_shaman_bullet_hit"
tt.sound_events.insert = "EnemyTurtleShamanBasicAttack"
tt.bullet.pop = {
	"pop_mage"
}
tt.bullet.pop_conds = DR_KILL
tt = E:register_t("turtle_shaman_bullet_hit", "fx")
tt.render.sprites[1].name = "turtle_shaman_attack_1_hit"
tt = E:register_t("turtle_shaman_melee_hit", "fx")
tt.render.sprites[1].name = "turtle_shaman_attack_2_hit"

local b = balance.enemies.werebeasts.turtle_shaman

tt = E:register_t("enemy_turtle_shaman", "enemy_KR5")

E:add_comps(tt, "melee", "ranged", "timed_attacks")

tt.info.enc_icon = 5
tt.info.portrait = "gui_bottom_info_image_enemies_0008"
tt.unit.mod_offset = v(0, 16)
tt.unit.hit_offset = v(0, 18)
tt.unit.head_offset = v(0, 10)
tt.unit.size = UNIT_SIZE_MEDIUM
tt.unit.marker_offset = v(-1, -1)
tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(34, 0)
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 42)
tt.health.dead_lifetime = 3
tt.unit.fade_time_after_death = 2
tt.main_script.insert = scripts.enemy_basic_with_random_range.insert
tt.main_script.update = scripts.enemy_turtle_shaman.update
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].hit_time = fts(11)
tt.melee.attacks[1].animation = "attack_2"
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "turtle_shaman"
tt.render.sprites[1].draw_order = DO_ENEMY_BIG
tt.ranged.attacks[1].animation = "attack_1"
tt.ranged.attacks[1].bullet = "turtle_shaman_bullet"
tt.ranged.attacks[1].hold_advance = true
tt.ranged.attacks[1].shoot_time = fts(9)
tt.ranged.attacks[1].cooldown = b.ranged_attack.cooldown
tt.ranged.attacks[1].max_range = b.ranged_attack.max_range
tt.ranged.attacks[1].max_range_variance = 60
tt.ranged.attacks[1].min_range = b.ranged_attack.min_range
tt.ranged.attacks[1].bullet_start_offset = {
	v(25, 46)
}
tt.ranged.attacks[1].vis_flags = bor(F_RANGED)
tt.sound_events.death = "EnemyTurtleShamanDeath"
tt.timed_attacks.list[1] = E:clone_c("mod_attack")
tt.timed_attacks.list[1].cast_time = fts(7)
tt.timed_attacks.list[1].animation = "ability_1"
tt.timed_attacks.list[1].cooldown = b.natures_vigor.cooldown
tt.timed_attacks.list[1].max_count = 1
tt.timed_attacks.list[1].hp_trigger_factor = b.natures_vigor.hp_trigger_factor
tt.timed_attacks.list[1].mod = "mod_natures_vigor"
tt.timed_attacks.list[1].markMod = "mod_natures_vigor_mark"
tt.timed_attacks.list[1].cast_fx = "turtle_shaman_natures_vigor_cast_fx"
tt.timed_attacks.list[1].markDurationOffset = 0.1
tt.timed_attacks.list[1].range = b.natures_vigor.range
tt.timed_attacks.list[1].sound = "EnemyTurtleShamanHealing"
tt.timed_attacks.list[1].vis_flags = bor(F_RANGED, F_CUSTOM)
tt.timed_attacks.list[1].excluded_templates = {
	"enemy_turtle_shaman"
}
tt.unit.blood_color = BLOOD_GREEN
tt.unit.can_explode = false
tt = E:register_t("mod_natures_vigor_mark", "modifier")

E:add_comps(tt, "mark_flags")

tt.mark_flags.vis_bans = F_CUSTOM
tt.main_script.queue = scripts.mod_mark_flags.queue
tt.main_script.dequeue = scripts.mod_mark_flags.dequeue
tt.main_script.update = scripts.mod_mark_flags.update

local b = balance.enemies.werebeasts.turtle_shaman

tt = E:register_t("mod_natures_vigor", "modifier")

E:add_comps(tt, "hps", "render")

tt.modifier.duration = b.natures_vigor.duration
tt.modifier.resets_same = false
tt.hps.heal_min = b.natures_vigor.heal_min
tt.hps.heal_max = b.natures_vigor.heal_max
tt.hps.heal_every = b.natures_vigor.heal_every
tt.main_script.insert = scripts.mod_hps.insert
tt.main_script.update = scripts.mod_hps.update
tt.render.sprites[1].name = "turtle_shaman_HealFX_a_Idle_1"
tt.render.sprites[1].loop = true
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].name = "turtle_shaman_HealFX_b_Idle_1"
tt.render.sprites[2].z = Z_DECALS
tt.render.sprites[2].exclude_mod_offset = true
tt = E:register_t("turtle_shaman_natures_vigor_cast_fx", "fx")
tt.render.sprites[1].name = "turtle_shaman_HealFX_decal"
tt.render.sprites[1].z = Z_DECALS

local b = balance.enemies.werebeasts.bear_vanguard

tt = E:register_t("enemy_bear_vanguard", "enemy_KR5")

E:add_comps(tt, "melee")

tt.info.enc_icon = 3
tt.info.portrait = "gui_bottom_info_image_enemies_0001"
tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(37, 0)
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 50)
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_bear_vanguard.update
tt.melee.attacks[1] = E:clone_c("area_attack")
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].damage_radius = b.basic_attack.damage_radius
tt.melee.attacks[1].damage_type = b.basic_attack.damage_type
tt.melee.attacks[1].hit_decal = "decal_ground_enemy_bear_vanguard"
tt.melee.attacks[1].hit_fx = "fx_bear_ground_hit"
tt.melee.attacks[1].hit_time = fts(13)
tt.melee.attacks[1].hit_offset = v(40, 0)
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "bear_vanguard"
tt.render.sprites[1].draw_order = DO_ENEMY_BIG
tt.sound_events.death = "EnemyBearVanguardDeath"
tt.ui.click_rect = r(-20, 0, 40, 40)
tt.unit.hit_offset = v(0, 22)
tt.unit.head_offset = v(0, 10)
tt.unit.marker_offset = v(-1, 0)
tt.unit.mod_offset = v(0, 19)
tt.unit.size = UNIT_SIZE_MEDIUM
tt.unit.can_explode = false
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM_MEDIUM
tt.wrath_of_the_fallen = {}
tt.wrath_of_the_fallen.ts = nil
tt.wrath_of_the_fallen.ts_max = 1
tt.wrath_of_the_fallen.animation = "wrath"
tt.wrath_of_the_fallen.cast_time = fts(9)
tt.wrath_of_the_fallen.radius = b.wrath_of_the_fallen.radius
tt.wrath_of_the_fallen.mod = "mod_wrath_of_the_fallen"
tt.wrath_of_the_fallen.sound = "EnemyBearVanguardRage"

local b = balance.enemies.werebeasts.bear_vanguard

tt = E:register_t("mod_wrath_of_the_fallen", "modifier")

E:add_comps(tt, "render")

tt.inflicted_damage_factor = b.wrath_of_the_fallen.inflicted_damage_factor
tt.speed_factor = b.wrath_of_the_fallen.speed_factor
tt.modifier.duration = b.wrath_of_the_fallen.duration
tt.modifier.resets_same = true
tt.modifier.use_mod_offset = false
tt.main_script.insert = scripts.mod_fury.insert
tt.main_script.remove = scripts.mod_fury.remove
tt.main_script.update = scripts.mod_track_target.update
tt.render.sprites[1].name = "bear_vanguard_mod_fx_wrath_of_the_fallen_decal_base"
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].name = "bear_vanguard_mod_fx_wrath_of_the_fallen_decal_top"
tt.render.sprites[2].sort_y_offset = -1

local b = balance.enemies.werebeasts.bear_woodcutter

tt = E:register_t("enemy_bear_woodcutter", "enemy_KR5")

E:add_comps(tt, "melee")

tt.info.enc_icon = 3
tt.info.portrait = "gui_bottom_info_image_enemies_0011"
tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(37, 0)
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 46)
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_bear_vanguard.update
tt.melee.attacks[1] = E:clone_c("area_attack")
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].damage_radius = b.basic_attack.damage_radius
tt.melee.attacks[1].damage_type = b.basic_attack.damage_type
tt.melee.attacks[1].hit_decal = "decal_ground_enemy_bear_vanguard"
tt.melee.attacks[1].hit_fx = "fx_bear_ground_hit"
tt.melee.attacks[1].hit_time = fts(13)
tt.melee.attacks[1].hit_offset = v(40, 0)
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "bear_woodcutter"
tt.render.sprites[1].draw_order = DO_ENEMY_BIG
tt.sound_events.death = "EnemyBearVanguardDeath"
tt.ui.click_rect = r(-20, 0, 40, 40)
tt.unit.hit_offset = v(0, 22)
tt.unit.head_offset = v(0, 10)
tt.unit.marker_offset = v(-1, 0)
tt.unit.mod_offset = v(0, 19)
tt.unit.size = UNIT_SIZE_MEDIUM
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.wrath_of_the_fallen = {}
tt.wrath_of_the_fallen.ts = nil
tt.wrath_of_the_fallen.ts_max = 1
tt.wrath_of_the_fallen.animation = "wrath"
tt.wrath_of_the_fallen.cast_time = fts(9)
tt.wrath_of_the_fallen.radius = b.wrath_of_the_fallen.radius
tt.wrath_of_the_fallen.mod = "mod_wrath_of_the_fallen"

local b = balance.enemies.werebeasts.cutthroat_rat

tt = E:register_t("enemy_cutthroat_rat", "enemy_KR5")

E:add_comps(tt, "melee", "timed_attacks")

tt.info.enc_icon = 4
tt.info.portrait = "gui_bottom_info_image_enemies_0002"
tt.unit.mod_offset = v(0, 12)
tt.unit.hit_offset = v(0, 15)
tt.unit.head_offset = v(0, 5)
tt.unit.marker_offset = v(0, 0)
tt.ui.click_rect = r(-20, 0, 40, 35)
tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(30, 0)
tt.health.hp_max = b.hp
tt.health_bar.offset = v(0, 28)
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_cutthroat_rat.update
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].animation = "attack_1"
tt.melee.attacks[1].hit_time = fts(9)
tt.melee.attacks[1].hit_fx = "enemy_cutthroat_rat_attack_fx"
tt.melee.attacks[1].hit_fx_offset = v(25, 5)
tt.melee.attacks[1].hit_fx_flip = true
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "cutthroat_rat"
tt.sound_events.death = "EnemyCutthroatRatDeath"
tt.timed_attacks.list[1] = E:clone_c("custom_attack")
tt.timed_attacks.list[1].cast_time = fts(21)
tt.timed_attacks.list[1].hide_time = fts(25)
tt.timed_attacks.list[1].animation = "attack_2"
tt.timed_attacks.list[1].cooldown = b.gut_stab.cooldown
tt.timed_attacks.list[1].damage_max = b.gut_stab.damage_max
tt.timed_attacks.list[1].damage_min = b.gut_stab.damage_min
tt.timed_attacks.list[1].damage_type = b.gut_stab.damage_type
tt.timed_attacks.list[1].mod = "mod_cutthroat_rat_bleed"
tt.timed_attacks.list[1].duration = b.gut_stab.duration
tt.timed_attacks.list[1].min_distance_from_end = b.gut_stab.min_distance_from_end
tt.timed_attacks.list[1].smoke_fx = "enemy_cutthroat_rat_smoke_fx"
tt.timed_attacks.list[1].hit_fx = "enemy_cutthroat_rat_stab_fx"
tt.timed_attacks.list[1].ts = 0
tt.timed_attacks.list[1].sound = "EnemyCutthroatRat"
tt = E:register_t("enemy_cutthroat_rat_smoke_fx", "fx")
tt.render.sprites[1].name = "cutthroat_rat_attack_2_smokeFX"
tt = E:register_t("enemy_cutthroat_rat_attack_fx", "fx")
tt.render.sprites[1].name = "cutthroat_rat_attack_1_hit"
tt = E:register_t("enemy_cutthroat_rat_stab_fx", "fx")
tt.render.sprites[1].name = "cutthroat_rat_attack_2_hit"
tt.render.sprites[1].loop = false
tt.render.sprites[1].hide_after_runs = 1
tt.render.sprites[1].offset = v(0, 10)
tt = E:register_t("mod_dreadeye_viper_arrow_acidic", "mod_poison")
b = balance.enemies.werebeasts.dreadeye_viper
tt.dps.damage_every = b.ranged_attack.poison.every
tt.dps.damage_min = b.ranged_attack.poison.damage_min
tt.dps.damage_max = b.ranged_attack.poison.damage_max
tt.dps.kill = true
tt.modifier.duration = b.ranged_attack.poison.duration
tt.render.sprites[1].draw_order = DO_MOD_FX
tt = E:register_t("mod_dreadeye_viper_basic_attack", "mod_poison")
b = balance.enemies.werebeasts.dreadeye_viper
tt.dps.damage_every = b.basic_attack.poison.every
tt.dps.damage_min = b.basic_attack.poison.damage_min
tt.dps.damage_max = b.basic_attack.poison.damage_max
tt.dps.kill = true
tt.modifier.duration = b.basic_attack.poison.duration
tt = E:register_t("enemy_dreadeye_viper", "enemy_KR5")

E:add_comps(tt, "melee", "ranged")

b = balance.enemies.werebeasts.dreadeye_viper
tt.info.enc_icon = 7
tt.info.portrait = "gui_bottom_info_image_enemies_0003"
tt.unit.hit_offset = v(0, 15)
tt.unit.head_offset = v(0, 5)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, 14)
tt.ui.click_rect = r(-20, 0, 40, 35)
tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(28, 0)
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 35)
tt.main_script.insert = scripts.enemy_basic_with_random_range.insert
tt.main_script.update = scripts.enemy_mixed.update
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].hit_time = fts(11)
tt.melee.attacks[1].animation = "attack_02"
tt.melee.attacks[1].mod = "mod_dreadeye_viper_basic_attack"
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "dreadeye_viper_creep"
tt.ranged.attacks[1].bullet = "arrow_dreadeye_viper"
tt.ranged.attacks[1].hold_advance = false
tt.ranged.attacks[1].shoot_time = fts(8)
tt.ranged.attacks[1].cooldown = b.ranged_attack.cooldown
tt.ranged.attacks[1].max_range = b.ranged_attack.max_range
tt.ranged.attacks[1].max_range_variance = 60
tt.ranged.attacks[1].min_range = b.ranged_attack.min_range
tt.ranged.attacks[1].bullet_start_offset = {
	v(12, 31)
}
tt.ranged.attacks[1].vis_flags = bor(F_RANGED)
tt.ranged.attacks[1].animation = "attack_01"
tt.sound_events.death = "EnemyDreadeyeViperDeath"
tt.unit.blood_color = BLOOD_GREEN

local b = balance.enemies.werebeasts.surveyor_harpy

tt = E:register_t("enemy_surveyor_harpy", "enemy_KR5")
tt.info.enc_icon = 6
tt.info.portrait = "gui_bottom_info_image_enemies_0005"
tt.enemy.gold = b.gold
tt.flight_height = 47
tt.health.hp_max = b.hp
tt.health_bar.offset = v(0, tt.flight_height + 40)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_surveyor_harpy.update
tt.motion.max_speed = b.speed
tt.render.sprites[1].offset = v(0, tt.flight_height)
tt.render.sprites[1].prefix = "patrolling_vulture"
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "decal_flying_shadow_hard"
tt.render.sprites[2].offset = v(0, 0)
tt.render.sprites[2].scale = vv(0.8)
tt.sound_events.death = "EnemyPatrollingVultureDeath"
tt.ui.click_rect = r(-18, tt.flight_height - 2, 36, 27)
tt.unit.can_explode = false
tt.unit.hide_after_death = true
tt.unit.disintegrate_fx = "fx_enemy_desintegrate_air"
tt.unit.hit_offset = v(0, tt.flight_height + 15)
tt.unit.head_offset = v(0, 5)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, tt.flight_height + 15)
tt.unit.size = UNIT_SIZE_SMALL
tt.unit.show_blood_pool = false
tt.vis.bans = bor(F_BLOCK, F_SKELETON)
tt.vis.flags = bor(F_ENEMY, F_FLYING)
tt = E:register_t("enemy_rhino", "enemy_KR5")

local b = balance.enemies.werebeasts.rhino

E:add_comps(tt, "melee", "timed_attacks")

tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(37, 0)
tt.enemy.lives_cost = b.lives_cost
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 80)
tt.info.enc_icon = 10
tt.info.portrait = "gui_bottom_info_image_enemies_0012"
tt.unit.hit_offset = v(0, 26)
tt.unit.head_offset = v(0, 0)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, 10)
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_rhino.update
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].hit_time = fts(16)
tt.melee.attacks[1].sound = "EnemyRazingRhinoBasicAttack"
tt.melee.attacks[2] = E:clone_c("melee_attack")
tt.melee.attacks[2].animation = "attack"
tt.melee.attacks[2].cooldown = b.instakill.cooldown
tt.melee.attacks[2].damage_max = b.instakill.damage_max
tt.melee.attacks[2].damage_min = b.instakill.damage_min
tt.melee.attacks[2].damage_type = bor(b.instakill.damage_type)
tt.melee.attacks[2].vis_bans = bor(F_HERO)
tt.melee.attacks[2].vis_flags = F_INSTAKILL
tt.melee.attacks[2].hit_time = fts(16)
tt.melee.attacks[2].instakill = true
tt.melee.attacks[2].disabled = true
tt.melee.attacks[2].sound = "EnemyRazingRhinoBasicAttack"
tt.timed_attacks.list[1] = E:clone_c("custom_attack")
tt.timed_attacks.list[1].cast_time = fts(21)
tt.timed_attacks.list[1].animation = "charge"
tt.timed_attacks.list[1].cooldown = b.charge.cooldown
tt.timed_attacks.list[1].duration = b.charge.duration
tt.timed_attacks.list[1].min_distance_from_end = b.charge.min_distance_from_end
tt.timed_attacks.list[1].speed = b.charge.speed
tt.timed_attacks.list[1].trigger_range = b.charge.trigger_range
tt.timed_attacks.list[1].vis_flags = F_FRIEND
tt.timed_attacks.list[1].vis_bans = bor(F_HERO, F_FLYING)
tt.timed_attacks.list[1].vis_flags_enemies = F_RANGED
tt.timed_attacks.list[1].vis_bans_enemies = F_BOSS
tt.timed_attacks.list[1].vis_flags_soldiers = F_RANGED
tt.timed_attacks.list[1].vis_bans_soldiers = bor(F_BOSS, F_FLYING)
tt.timed_attacks.list[1].mod_enemy = "mod_enemy_rhino_charge_enemy"
tt.timed_attacks.list[1].mod_soldier = "mod_enemy_rhino_charge_soldier"
tt.timed_attacks.list[1].range = b.charge.range
tt.timed_attacks.list[1].min_range = b.charge.min_range
tt.timed_attacks.list[1].particles_name_a = "ps_enemy_rhino_charge_a"
tt.timed_attacks.list[1].particles_name_b = "ps_enemy_rhino_charge_b"
tt.timed_attacks.list[1].sound = "EnemyRazingRhinoCharge"
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "razing_rhino_razing_rhino"
tt.render.sprites[1].angles.charge = {
	"charge_side",
	"charge_back",
	"charge_front"
}
tt.render.sprites[1].angles_custom = {
	charge = {
		55,
		115,
		245,
		305
	}
}
tt.ui.click_rect = r(-30, -3, 60, 65)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM_LARGE
tt.unit.size = UNIT_SIZE_MEDIUM
tt.unit.can_explode = false
tt.unit.can_explode = false
tt.vis.flags = bor(F_ENEMY, F_MINIBOSS)
tt.sound_events.death = "EnemyRazingRhinoDeath"
tt.base_speed = b.speed

local b = balance.enemies.werebeasts.skunk_bombardier

tt = E:register_t("enemy_skunk_bombardier", "enemy_KR5")

E:add_comps(tt, "melee", "ranged", "death_spawns")

tt.info.enc_icon = 9
tt.info.portrait = "gui_bottom_info_image_enemies_0007"
tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(28, 0)
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_mixed.update
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min
tt.melee.attacks[1].hit_time = fts(10)
tt.motion.max_speed = b.speed
tt.ranged.attacks[1].bullet = "enemy_skunk_bombardier_bomb"
tt.ranged.attacks[1].hold_advance = false
tt.ranged.attacks[1].shoot_time = fts(12)
tt.ranged.attacks[1].cooldown = b.ranged_attack.cooldown
tt.ranged.attacks[1].max_range = b.ranged_attack.max_range
tt.ranged.attacks[1].min_range = b.ranged_attack.min_range
tt.ranged.attacks[1].bullet_start_offset = {
	v(0, 32)
}
tt.ranged.attacks[1].vis_flags = bor(F_RANGED)
tt.ranged.attacks[1].vis_bans = bor(F_FLYING)
tt.ranged.attacks[1].ignore_hit_offset = true
tt.render.sprites[1].prefix = "skunk_bombardier"
tt.sound_events.death = "EnemySkunkBombardierDeath"
tt.unit.hit_offset = v(0, 15)
tt.unit.head_offset = v(0, 5)
tt.unit.mod_offset = v(0, 16)
tt.unit.size = UNIT_SIZE_SMALL
tt.ui.click_rect = r(-20, 0, 40, 35)
tt.death_spawns.name = "aura_enemy_skunk_bombardier_death_explosion"
tt.death_spawns.concurrent_with_death = false
tt.death_spawns.delay = fts(19)
tt = E:register_t("enemy_skunk_bombardier_hit_fx", "fx")
tt.render.sprites[1].name = "skunk_bombardier_bomb_hit_fx"
tt.render.sprites[1].anchor.y = 0.25

tt = E:register_t("fx_explosion_hero_lava_double_trouble", "fx")
tt.render.sprites[1].name = "hero_lava_ultimate_hit"
tt.render.sprites[1].z = Z_OBJECT

tt = E:register_t("enemy_skunk_bombardier_bomb_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.name = "skunk_bombardier_bomb_trail"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(9),
	fts(9)
}
tt.particle_system.emission_rate = 30
tt.particle_system.z = Z_BULLET_PARTICLES
tt = E:register_t("enemy_hyena5", "enemy_KR5")

local b = balance.enemies.werebeasts.hyena5

E:add_comps(tt, "melee")

tt.feast = {}
tt.feast.mods = {
	"enemy_hyena5_feast_mod"
}
tt.feast.animation = "eat"
tt.feast.duration = b.feast.duration
tt.feast.cooldown = b.feast.cooldown
tt.feast.hp_min_trigger = b.feast.hp_min_trigger
tt.enemy.gold = b.gold
tt.health.armor = b.armor
tt.health.hp_max = b.hp
tt.health.magic_armor = b.magic_armor
tt.info.enc_icon = 8
tt.info.portrait = "gui_bottom_info_image_enemies_0006"
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_hyena5.update
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min
tt.melee.attacks[1].hit_time = fts(15)
tt.melee.attacks[1].hit_fx = "enemy_hyena5_attack_fx"
tt.melee.attacks[1].hit_fx_offset = v(25, 5)
tt.melee.attacks[1].hit_fx_flip = true
tt.motion.max_speed = b.speed
tt.sound_events.feast = "EnemyRottenfangHyenaFeast"
tt.sound_events.death = "EnemyRottenfangHyenaDeath"
tt.sound_events.water_splash = "SpecialMermaid"
tt.render.sprites[1].prefix = "rottenfang_hyena"
tt.render.sprites[1].angles_stickiness.run = 10
tt.health_bar.offset = v(0, 35)
tt.unit.hit_offset = v(0, 16)
tt.unit.head_offset = v(0, 5)
tt.unit.marker_offset = v(0, -1)
tt.unit.mod_offset = v(0, 17)
tt.unit.size = UNIT_SIZE_SMALL
tt.enemy.melee_slot = v(33, 0)
tt.ui.click_rect = r(-20, 0, 40, 35)
tt = E:register_t("enemy_hyena5_feast_mod", "modifier")

E:add_comps(tt, "hps", "render")

tt.modifier.duration = b.feast.duration
tt.modifier.resets_same = false
tt.hps.heal_min = b.feast.heal
tt.hps.heal_max = b.feast.heal
tt.hps.heal_every = b.feast.heal_every
tt.main_script.insert = scripts.mod_hps.insert
tt.main_script.update = scripts.mod_hps.update
tt.render.sprites[1].prefix = "mod_twilight_evoker_heal"
tt.render.sprites[1].size_names = {
	"small",
	"big",
	"big"
}
tt.render.sprites[1].loop = true
tt = E:register_t("enemy_hyena5_attack_fx", "fx")
tt.render.sprites[1].name = "rottenfang_hyena_attack_hit_fx"
tt = E:register_t("enemy_tusked_brawler_duro", "enemy_tusked_brawler")
tt.health.hp_max = 1000

local b = balance.enemies.cult_of_the_overseer.acolyte

tt = E:register_t("enemy_acolyte", "enemy_KR5")

E:add_comps(tt, "melee", "death_spawns")

tt.enemy.gold = b.gold
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.info.enc_icon = 12
tt.info.portrait = "gui_bottom_info_image_enemies_0013"
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_acolyte.update
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].hit_time = fts(10)
tt.melee.attacks[1].hit_fx = "enemy_acolyte_attack_fx"
tt.melee.attacks[1].hit_fx_offset = v(15, 10)
tt.motion.max_speed = b.speed
tt.death_spawns.name = "enemy_acolyte_tentacle"
tt.death_spawns.death_animation = "sacrifice"
tt.death_spawns.concurrent_with_death = false
tt.death_spawns.delay = fts(28)
tt.death_spawns.dead_lifetime = 5
tt.render.sprites[1].prefix = "acolyte"
tt.health_bar.offset = v(0, 30)
tt.unit.hit_offset = v(0, 15)
tt.unit.head_offset = v(0, 15)
tt.unit.mod_offset = v(0, 15)
tt.unit.hide_after_death = true
tt.ui.click_rect = r(-20, -3, 40, 35)
tt.enemy.melee_slot = v(18, 0)
tt.sound_death_with_spawn = "EnemyAcolyteDeathSpecial"
tt.sound_death_no_spawn = "EnemyAcolyteDeath"
tt = E:register_t("enemy_acolyte_attack_fx", "fx")
tt.render.sprites[1].name = "acolyte_attack_hit_fx"
tt = E:register_t("enemy_acolyte_tentacle", "enemy_KR5")

E:add_comps(tt, "melee", "timed_attacks")

tt.enemy.gold = 0
tt.motion.max_speed = 0
tt.health.hp_max = b.tentacle.hp
tt.health.armor = b.tentacle.armor
tt.health.magic_armor = b.tentacle.magic_armor
tt.info.fn = scripts.enemy_acolyte_tentacle.get_info
tt.info.portrait = "gui_bottom_info_image_enemies_0024"
tt.info.enc_icon = 13
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_acolyte_tentacle.update
tt.vis.bans = bor(F_SKELETON, F_TELEPORT)
tt.melee.attacks[1].cooldown = b.tentacle.hit.cooldown
tt.melee.attacks[1].damage_max = b.tentacle.hit.damage_max
tt.melee.attacks[1].damage_min = b.tentacle.hit.damage_min
tt.melee.attacks[1].hit_time = fts(16)
tt.melee.attacks[1].sound = "EnemyAcolyteTentacleBasicAttack"
tt.timed_attacks.list[1] = E:clone_c("mod_attack")
tt.timed_attacks.list[1].disabled = true
tt.timed_attacks.list[1].animation = "attack"
tt.timed_attacks.list[1].cast_time = fts(13)
tt.timed_attacks.list[1].hit_time = fts(19)
tt.timed_attacks.list[1].cooldown = b.tentacle.hit.cooldown
tt.timed_attacks.list[1].duration = b.tentacle.duration
tt.timed_attacks.list[1].first_cooldown_max = b.tentacle.hit.first_cooldown_max
tt.timed_attacks.list[1].first_cooldown_min = b.tentacle.hit.first_cooldown_min
tt.timed_attacks.list[1].sound = "EnemyAcolyteTentacleBasicAttack"
tt.timed_attacks.list[1].aura_name = "acolyte_tentacle_aura"
tt.render.sprites[1].prefix = "acolyte_tentacle"
tt.render.sprites[1].name = "raise"
tt.render.sprites[1].sort_y_offset = 1
tt.render.sprites[1].angles.walk = {
	"idle",
	"idle",
	"idle"
}
tt.health_bar.offset = v(0, 34)
tt.unit.hit_offset = v(0, 8)
tt.unit.head_offset = v(0, 18)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, 8)
tt.unit.show_blood_pool = false
tt.ui.click_rect = r(-18, -3, 36, 35)
tt.enemy.melee_slot = v(24, 0)
tt.sound_events.death = "EnemyAcolyteTentacleDeath"
tt = E:register_t("acolyte_tentacle_aura", "aura")
tt.aura.cycles = 1
tt.aura.damage_min = b.tentacle.hit.damage_min
tt.aura.damage_max = b.tentacle.hit.damage_max
tt.aura.damage_type = DAMAGE_PHYSICAL
tt.aura.radius = b.tentacle.hit.radius
tt.aura.vis_bans = bor(F_ENEMY)
tt.main_script.update = scripts.aura_apply_damage.update
tt = E:register_t("enemy_lesser_sister", "enemy_KR5")

local b = balance.enemies.cult_of_the_overseer.lesser_sister

E:add_comps(tt, "melee", "ranged", "timed_attacks")

tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(15, 0)
tt.health.hp_max = b.hp
tt.health.magic_armor = b.magic_armor
tt.health.armor = b.armor
tt.health.dead_lifetime = 3
tt.health_bar.offset = v(0, 38)
tt.unit.hit_offset = v(0, 21)
tt.unit.head_offset = v(0, 21)
tt.unit.mod_offset = v(0, 16)
tt.unit.show_blood_pool = false
tt.ui.click_rect = r(-20, -3, 40, 35)
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "lesser_sister"
tt.sound_events.death = "EnemyTwistedSisterDeath"
tt.info.i18n_key = "ENEMY_LESSER_SISTER"
tt.info.enc_icon = 14
tt.info.portrait = "gui_bottom_info_image_enemies_0014"
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_lesser_sister.update
tt.vis.flags = bor(tt.vis.flags, F_DARK_ELF, F_SPELLCASTER)
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min
tt.melee.attacks[1].hit_time = fts(18)
tt.ranged.attacks[1].bullet = "lesser_sister_bolt"
tt.ranged.attacks[1].bullet_start_offset = {
	v(20, 13)
}
tt.ranged.attacks[1].cooldown = b.ranged_attack.cooldown
tt.ranged.attacks[1].max_range = b.ranged_attack.max_range
tt.ranged.attacks[1].min_range = 0
tt.ranged.attacks[1].shoot_time = fts(18)
tt.ranged.attacks[1].hold_advance = true
tt.timed_attacks.list[1] = E:clone_c("custom_attack")
tt.timed_attacks.list[1].animation = "crooked_souls"
tt.timed_attacks.list[1].cast_time = fts(36)
tt.timed_attacks.list[1].cooldown = b.crooked_souls.cooldown
tt.timed_attacks.list[1].range = b.crooked_souls.max_range
tt.timed_attacks.list[1].max_targets = b.crooked_souls.max_targets
tt.timed_attacks.list[1].entity = "enemy_lesser_sister_nightmare"
tt.timed_attacks.list[1].spawn_delay = 0
tt.timed_attacks.list[1].sound = "EnemyTwistedSisterSummonCast"
tt.timed_attacks.list[1].count_group_name = "enemy_lesser_sister_nightmare"
tt.timed_attacks.list[1].count_group_type = COUNT_GROUP_CONCURRENT
tt.timed_attacks.list[1].count_group_max = b.crooked_souls.max_total
tt.nodes_limit = b.crooked_souls.nodes_limit
tt.node_random_min = b.crooked_souls.nodes_random_min
tt.node_random_max = b.crooked_souls.nodes_random_max
tt = E:register_t("lesser_sister_bolt", "bolt_enemy")

local b = balance.enemies.cult_of_the_overseer.lesser_sister

tt.bullet.vis_flags = F_RANGED
tt.bullet.vis_bans = 0
tt.render.sprites[1].prefix = "lesser_sister_bolt"
tt.bullet.hit_fx = "lesser_sister_bolt_hit_fx"
tt.bullet.pop = nil
tt.bullet.pop_conds = nil
tt.bullet.acceleration_factor = 0.5
tt.bullet.damage_min = b.ranged_attack.damage_min
tt.bullet.damage_max = b.ranged_attack.damage_max
tt.bullet.max_speed = 360
tt.bullet.xp_gain_factor = 2.1
tt.bullet.particles_name = "lesser_sister_bolt_trail"
tt.bullet.damage_type = b.ranged_attack.damage_type
tt = E:register_t("lesser_sister_bolt_hit_fx", "fx")
tt.render.sprites[1].name = "lesser_sister_bolt_hit_fx"
tt = E:register_t("lesser_sister_bolt_trail")

E:add_comps(tt, "pos", "particle_system")

tt.particle_system.anchor = v(0.5, 0.45)
tt.particle_system.name = "lesser_sister_bolt_trail"
tt.particle_system.animated = true
tt.particle_system.loop = false
tt.particle_system.particle_lifetime = {
	fts(8),
	fts(8)
}
tt.particle_system.emission_rate = 30
tt.particle_system.z = Z_BULLET_PARTICLES
tt.particle_system.scales_y = {
	0.8,
	0.5
}
tt = E:register_t("enemy_lesser_sister_nightmare", "enemy_KR5")

E:add_comps(tt, "melee", "count_group", "tween")

tt.enemy.gold = 0
tt.enemy.lives_cost = b.nightmare.lives_cost
tt.count_group.name = "enemy_lesser_sister_nightmare"
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_lesser_sister_nightmare.update
tt.motion.max_speed = b.nightmare.speed
tt.health.hp_max = b.nightmare.hp
tt.health.armor = b.nightmare.armor
tt.health.magic_armor = b.nightmare.magic_armor
tt.health.dead_lifetime = fts(18)
tt.info.enc_icon = 15
tt.info.portrait = "gui_bottom_info_image_enemies_0015"
tt.vis.flags = 0
tt.vis.flags_unblocked = bor(F_NIGHTMARE, F_ENEMY)
tt.vis.flags_blocked = F_ENEMY
tt.melee.attacks[1].cooldown = b.nightmare.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.nightmare.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.nightmare.basic_attack.damage_min
tt.melee.attacks[1].hit_time = fts(8)
tt.melee.attacks[1].hit_fx = "enemy_lesser_sister_nightmare_hit_fx"
tt.melee.attacks[1].hit_fx_offset = v(25, 5)
tt.melee.range = 51.2
tt.render.sprites[1].name = "raise"
tt.render.sprites[1].prefix = "lesser_sister_nightmare"
tt.ui.click_rect = r(-20, -3, 40, 35)
tt.sound_events.insert = "EnemyTwistedSisterSummonSpawn"
tt.sound_events.death = "EnemyNightmareDeath"
tt.enemy.melee_slot = v(23, 0)
tt.health_bar.offset = v(0, 35)
tt.unit.hit_offset = v(0, 18)
tt.unit.head_offset = v(0, 18)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, 16)
tt.unit.show_blood_pool = false
tt.unit.blood_color = BLOOD_VIOLET
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		fts(10),
		100
	}
}
tt.tween.remove = false
tt.can_be_converted = false
tt.nodes_to_reveal = 40

local tt = E:register_t("enemy_lesser_sister_nightmare_hit_fx", "fx")

tt.render.sprites[1].name = "lesser_sister_nightmare_hit_fx"
tt = E:register_t("enemy_small_stalker", "enemy_KR5")

E:add_comps(tt, "tween")

local b = balance.enemies.cult_of_the_overseer.small_stalker

tt.info.enc_icon = 16
tt.info.portrait = "gui_bottom_info_image_enemies_0038"
tt.enemy.gold = b.gold
tt.flight_height = 47
tt.health.hp_max = b.hp
tt.health_bar.offset = v(0, tt.flight_height + 33)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health.on_damage = scripts.enemy_small_stalker.on_damage
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_small_stalker.update
tt.motion.max_speed = b.speed
tt.render.sprites[1].offset = v(0, tt.flight_height)
tt.render.sprites[1].prefix = "small_stalker_creep"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "decal_flying_shadow_hard"
tt.render.sprites[2].offset = v(0, 0)
tt.render.sprites[2].alpha = 0
tt.ui.click_rect = r(-15, tt.flight_height - 5, 30, 40)
tt.unit.can_explode = false
tt.unit.hide_after_death = true
tt.unit.fade_time_after_death = nil
tt.unit.disintegrate_fx = "fx_enemy_desintegrate_air"
tt.unit.hit_offset = v(0, tt.flight_height + 5)
tt.unit.head_offset = v(0, tt.flight_height + 5)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, tt.flight_height + 2)
tt.unit.size = UNIT_SIZE_SMALL
tt.unit.show_blood_pool = false
tt.vis.bans = bor(F_BLOCK, F_SKELETON)
tt.vis.flags = bor(F_ENEMY, F_FLYING)
tt.nodes_before_exit = b.dodge.nodes_before_exit
tt.nodes_advance = b.dodge.nodes_advance
tt.skill_teleport = {}
tt.skill_teleport.active = false
tt.skill_teleport.wait_between_teleport = b.dodge.wait_between_teleport
tt.skill_teleport.cooldown = b.dodge.cooldown
tt.skill_teleport.sound = "EnemyVoidBlinkerTeleport"
tt.blink_min_cd = 2
tt.blink_max_cd = 4
tt.animation_idle = "walk"
tt.sound_events.death = "EnemyVoidBlinkerDeath"
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(3),
		255
	}
}
tt.tween.props[1].sprite_id = 2
tt.tween.remove = false
tt.tween.disabled = true
tt.tween.reverse = true
tt = E:register_t("enemy_unblinded_priest", "enemy_KR5")

local b = balance.enemies.cult_of_the_overseer.unblinded_priest

E:add_comps(tt, "melee", "ranged", "death_spawns", "glare_kr5")

tt.enemy.gold = b.gold
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.info.enc_icon = 17
tt.info.portrait = "gui_bottom_info_image_enemies_0017"
tt.main_script.insert = scripts.enemy_basic_with_random_range.insert
tt.main_script.update = scripts.enemy_unblinded_priest.update
tt.melee.attacks[1].animation = "attack_melee"
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].hit_time = fts(11)
tt.melee.attacks[1].hit_fx = "fx_enemy_unblinded_priest_hit_melee"
tt.melee.attacks[1].hit_fx_offset = v(18, 20)
tt.ranged.attacks[1].animation = "attack_ranged"
tt.ranged.attacks[1].bullet = "bullet_enemy_unblinded_priest"
tt.ranged.attacks[1].hold_advance = false
tt.ranged.attacks[1].shoot_time = fts(25)
tt.ranged.attacks[1].cooldown = b.ranged_attack.cooldown
tt.ranged.attacks[1].max_range = b.ranged_attack.max_range
tt.ranged.attacks[1].max_range_variance = 60
tt.ranged.attacks[1].min_range = b.ranged_attack.min_range
tt.ranged.attacks[1].bullet_start_offset = {
	v(0, 40)
}
tt.ranged.attacks[1].vis_flags = bor(F_RANGED)
tt.motion.max_speed = b.speed
tt.health_trigger_factor = b.health_trigger_factor
tt.death_spawns.name = "enemy_unblinded_abomination"
tt.death_spawns.death_animation = "transformation_end"
tt.death_spawns.concurrent_with_death = false
tt.death_spawns.delay = fts(32)
tt.death_spawns.dead_lifetime = 0
tt.render.sprites[1].prefix = "unblinded_priest"
tt.health_bar.offset = v(0, 39)
tt.unit.show_blood_pool = false
tt.unit.hit_offset = v(0, 15)
tt.unit.head_offset = v(0, 15)
tt.unit.mod_offset = v(0, 15)
tt.enemy.melee_slot = v(18, 0)
tt.glare_kr5.transform_name = "enemy_unblinded_abomination"
tt.glare_kr5.transform_animation = "transformation_full"
tt.glare_kr5.on_start_glare = scripts.enemy_unblinded_priest.on_start_glare
tt.transformation_time = b.transformation_time
tt.transformation_sound = "EnemyUnblindedPriestTransformCast"
tt.transformation_end_sound = "EnemyUnblindedPriestTransformSpawn"
tt.sound_events.death = "EnemyUnblindedPriestDeath"
tt.ui.click_rect = r(-20, -3, 40, 35)
tt = E:register_t("enemy_unblinded_abomination", "enemy_KR5")
b = balance.enemies.cult_of_the_overseer.unblinded_priest.abomination

E:add_comps(tt, "melee", "glare_kr5")

tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(25, 0)
tt.enemy.lives_cost = b.lives_cost
tt.health.hp_max = b.hp
tt.health.magic_armor = b.magic_armor
tt.health.armor = b.armor
tt.health.dead_lifetime = 3
tt.health_bar.offset = v(0, 50)
tt.unit.hit_offset = v(0, 21)
tt.unit.head_offset = v(0, 21)
tt.unit.mod_offset = v(0, 16)
tt.unit.show_blood_pool = false
tt.unit.size = UNIT_SIZE_MEDIUM
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM_MEDIUM
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "unblinded_abomination_unblinded_abomination"
tt.info.enc_icon = 18
tt.info.portrait = "gui_bottom_info_image_enemies_0018"
tt.eat = {}
tt.eat.hp_required = b.eat.hp_required
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_mixed.update
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min
tt.melee.attacks[1].hit_time = fts(12)
tt.melee.attacks[1].hit_fx = "fx_enemy_unblinded_abomination_hit_melee"
tt.melee.attacks[1].hit_fx_offset = v(40, 20)
tt.melee.attacks[2] = E:clone_c("melee_attack")
tt.melee.attacks[2].animation = "eat"
tt.melee.attacks[2].cooldown = b.eat.cooldown
tt.melee.attacks[2].damage_type = bor(DAMAGE_NONE, DAMAGE_NO_DODGE)
tt.melee.attacks[2].hit_time = fts(20)
tt.melee.attacks[2].mod = "mod_enemy_unblinded_abomination_eat"
tt.melee.attacks[2].vis_flags = bor(F_BLOCK, F_EAT, F_INSTAKILL)
tt.melee.attacks[2].vis_bans = bor(F_HERO)
tt.melee.attacks[2].sound = "EnemyAbominationInstakill"
tt.melee.attacks[2].fn_can = function(t, s, a, target)
	return target.health and target.health.hp <= target.health.hp_max * t.eat.hp_required
end
tt.glare_kr5.regen_hp = b.glare.regen_hp
tt.sound_events.death = "EnemyAbominationDeath"
tt.ui.click_rect = r(-30, -3, 60, 50)
tt = E:register_t("enemy_unblinded_abomination_stage_8", "enemy_KR5")
b = balance.enemies.cult_of_the_overseer.abomination_stage_8

E:add_comps(tt, "melee", "regen")

tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(25, 0)
tt.health.hp_max = b.hp
tt.health.magic_armor = b.magic_armor
tt.health.armor = b.armor
tt.health.dead_lifetime = 3
tt.health_bar.offset = v(0, 50)
tt.regen.cooldown = b.regen_cooldown
tt.regen.health = b.regen_health
tt.unit.hit_offset = v(0, 21)
tt.unit.head_offset = v(0, 21)
tt.unit.mod_offset = v(0, 16)
tt.unit.show_blood_pool = false
tt.unit.size = UNIT_SIZE_MEDIUM
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "Abomination2Def"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.info.enc_icon = 10
tt.info.portrait = "gui_bottom_info_image_enemies_0028"
tt.info.i18n_key = "ENEMY_UNBLINDED_ABOMINATION_STAGE_8"
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_unblinded_abomination_stage_8.update
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min
tt.melee.attacks[1].hit_time = fts(12)
tt.melee.attacks[1].hit_fx = "fx_enemy_unblinded_abomination_hit_melee"
tt.melee.attacks[1].hit_fx_offset = v(40, 20)
tt.idle_cooldown_min = 7
tt.idle_cooldown_max = 12
tt.sleep_cooldown = 20
tt.vis.flags = bor(F_ENEMY, F_MINIBOSS)
tt.vis.bans = bor(F_TELEPORT, F_POLYMORPH)
tt.sound_events.death = "EnemyAbominationDeath"

tt = E:register_t("enemy_unblinded_abomination_stage_8_lifebar")

E:add_comps(tt, "health_bar", "pos", "render", "health")

tt.render.sprites[1].name = "square_ffffff"
tt.render.sprites[1].animated = false
tt.render.sprites[1].scale = v(0, 0)
tt = E:register_t("enemy_spiderling", "enemy_KR5")
b = balance.enemies.cult_of_the_overseer.spiderling

E:add_comps(tt, "melee", "cliff")

tt.enemy.gold = b.gold
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.info.enc_icon = 9
tt.info.portrait = "gui_bottom_info_image_enemies_0022"
tt.info.i18n_key = "ENEMY_SPIDERLING"
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_spiderling.update
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].hit_time = fts(9)
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "spider"
tt.ui.click_rect = r(-20, -3, 40, 30)
tt.health_bar.offset = v(0, 25)
tt.unit.show_blood_pool = false
tt.unit.hit_offset = v(0, 10)
tt.unit.head_offset = v(0, 0)
tt.unit.mod_offset = v(0, 8)
tt.enemy.melee_slot = v(18, 0)
tt.transformation_time = b.transformation_time
tt.cliff.fall_accel = 400
tt.sound_events.death = "EnemySpiderlingDeath"
tt = E:register_t("enemy_unblinded_shackler", "enemy_KR5")
b = balance.enemies.cult_of_the_overseer.unblinded_shackler

E:add_comps(tt, "melee", "timed_attacks")

tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(33, 0)
tt.health.hp_max = b.hp
tt.health.magic_armor = b.magic_armor
tt.health.armor = b.armor
tt.health.dead_lifetime = 1
tt.health_bar.offset = v(0, 41)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.unit.hit_offset = v(0, 21)
tt.unit.head_offset = v(0, 21)
tt.unit.mod_offset = v(0, 16)
tt.unit.show_blood_pool = false
tt.unit.size = UNIT_SIZE_MEDIUM
tt.unit.fade_time_after_death = 1
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "unblinded_shackler_creep"
tt.render.sprites[1].angles = {}
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.info.i18n_key = "ENEMY_UNBLINDED_SHACKLER"
tt.info.enc_icon = 19
tt.info.portrait = "gui_bottom_info_image_enemies_0019"
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_unblinded_shackler.update
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min
tt.melee.attacks[1].hit_time = fts(14)
tt.timed_attacks.list[1] = E:clone_c("custom_attack")
tt.timed_attacks.list[1].animation = "skill"
tt.timed_attacks.list[1].cast_time = fts(16)
tt.timed_attacks.list[1].cooldown = 1
tt.timed_attacks.list[1].max_range = b.shackles.max_range
tt.timed_attacks.list[1].min_range = 0
tt.timed_attacks.list[1].min_targets = b.shackles.min_targets
tt.timed_attacks.list[1].max_targets = b.shackles.max_targets
tt.timed_attacks.list[1].mod = "mod_enemy_unblinded_shackler_shackles"
tt.timed_attacks.list[1].mark_mod = "mod_enemy_unblinded_shackler_mark"
tt.timed_attacks.list[1].health_trigger_factor = b.shackles.health_trigger_factor
tt.timed_attacks.list[1].sound = "EnemyShacklerBlockTowerBlock"
tt.timed_attacks.list[1].sound_out = "EnemyShacklerBlockTowerUnblock"
tt.vis.bans_on_shackles = bor(F_STUN, F_TELEPORT)
tt.sound_events.death = "EnemyShacklerDeath"
tt = E:register_t("enemy_armored_nightmare", "enemy_KR5")
b = balance.enemies.cult_of_the_overseer.armored_nightmare

E:add_comps(tt, "melee", "death_spawns")

tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(32, 0)
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.unit.size = UNIT_SIZE_MEDIUM
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.info.enc_icon = 22
tt.info.portrait = "gui_bottom_info_image_enemies_0023"
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_armored_nightmare.update
tt.melee.cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].damage_type = b.basic_attack.damage_type
tt.melee.attacks[1].hit_time = fts(12)
tt.melee.attacks[1].hit_fx = "fx_enemy_armored_nightmare_hit"
tt.melee.attacks[1].hit_fx_offset = v(tt.enemy.melee_slot.x, 5)
tt.melee.attacks[1].animation = "attk_1"
tt.melee.attacks[1].shared_cooldown = true
tt.melee.attacks[2] = table.deepclone(tt.melee.attacks[1])
tt.melee.attacks[2].animation = "attk_2"
tt.melee.attacks[2].chance = 0.5
tt.melee.attacks[3] = table.deepclone(tt.melee.attacks[1])
tt.melee.attacks[3].animation = "attk_3"
tt.melee.attacks[3].chance = 0.5
tt.motion.max_speed = b.speed
tt.death_spawns.name = "enemy_lesser_sister_nightmare"
tt.death_spawns.death_animation = "death"
tt.death_spawns.concurrent_with_death = false
tt.death_spawns.fx = "fx_enemy_armored_nightmare_death_spawn"
tt.death_spawns.delay = fts(25)
tt.death_spawns.dead_lifetime = 0
tt.render.sprites[1].prefix = "armored_nightmare_enemy"
tt.health_bar.offset = v(0, 49)
tt.unit.show_blood_pool = false
tt.unit.hit_offset = v(0, 15)
tt.unit.head_offset = v(0, 15)
tt.unit.mod_offset = v(0, 15)
tt.unit.blood_color = BLOOD_NONE
tt.sound_events.death = "EnemyBoundNightmareDeath"
tt = E:register_t("enemy_corrupted_stalker", "enemy_KR5")

local b = balance.enemies.cult_of_the_overseer.corrupted_stalker

tt.info.enc_icon = 20
tt.info.portrait = "gui_bottom_info_image_enemies_0020"
tt.enemy.gold = b.gold
tt.enemy.lives_cost = b.lives_cost
tt.flight_height = 47
tt.health.hp_max = b.hp
tt.health_bar.offset = v(0, tt.flight_height + 53)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM_MEDIUM
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_corrupted_stalker.update
tt.motion.max_speed = b.speed
tt.render.sprites[1].offset = v(0, tt.flight_height)
tt.render.sprites[1].prefix = "corrupted_stalker_creep"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "corrupted_stalker_shadow"
tt.render.sprites[2].offset = v(0, 0)
tt.sound_events.death = "EnemyPatrollingVultureDeath"
tt.ui.click_rect = r(-25, tt.flight_height - 15, 50, 50)
tt.unit.can_explode = false
tt.unit.hide_after_death = true
tt.unit.fade_time_after_death = nil
tt.unit.disintegrate_fx = "fx_enemy_desintegrate_air"
tt.unit.hit_offset = v(0, tt.flight_height + 15)
tt.unit.head_offset = v(0, 5)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, tt.flight_height + 15)
tt.unit.size = UNIT_SIZE_MEDIUM
tt.unit.show_blood_pool = false
tt.vis.bans = bor(F_BLOCK, F_SKELETON, F_POLYMORPH)
tt.vis.flags = bor(F_ENEMY, F_FLYING)
tt.sound_events.death = "EnemyCorruptedStalkerDeath"
tt = E:register_t("enemy_crystal_golem", "enemy_KR5")

local b = balance.enemies.cult_of_the_overseer.crystal_golem

E:add_comps(tt, "melee")

tt.info.enc_icon = 3
tt.info.portrait = "gui_bottom_info_image_enemies_0021"
tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(37, 0)
tt.enemy.lives_cost = b.lives_cost
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 60)
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_crystal_golem.update
tt.melee.attacks[1] = E:clone_c("area_attack")
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].damage_radius = b.basic_attack.damage_radius
tt.melee.attacks[1].damage_type = b.basic_attack.damage_type
tt.melee.attacks[1].hit_decal = "fx_enemy_crystal_golem_ground_decal"
tt.melee.attacks[1].hit_time = fts(16)
tt.melee.attacks[1].hit_offset = v(40, 0)
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "crystal_golem_creep"
tt.render.sprites[1].draw_order = DO_ENEMY_BIG
tt.sound_events.death = "EnemyBearVanguardDeath"
tt.ui.click_rect = r(-28, 0, 56, 53)
tt.unit.hit_offset = v(0, 22)
tt.unit.head_offset = v(0, 10)
tt.unit.marker_offset = v(-1, 0)
tt.unit.mod_offset = v(0, 19)
tt.unit.size = UNIT_SIZE_MEDIUM
tt.unit.can_explode = false
tt.unit.blood_color = BLOOD_GRAY
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM_LARGE
tt.start_as_rock = false
tt.vis.flags = bor(F_ENEMY, F_MINIBOSS)
tt.sound_events.death = "EnemyCrystalGolemDeath"
tt.wake_up_sound = "Stage10ObeliskEffectGolemSpawnGolem"
tt = E:register_t("enemy_stage_11_cult_leader_illusion", "enemy_KR5")

local b = balance.specials.stage11_cult_leader.illusion

E:add_comps(tt, "melee", "ranged", "timed_attacks")

tt.ui.click_rect = r(-23, 0, 46, 60)
tt.vis.flags = bor(F_ENEMY, F_SPELLCASTER)
tt.enemy.melee_slot = v(15, 0)
tt.health.hp_max = b.hp_max
tt.health.magic_armor = b.magic_armor
tt.health.armor = b.armor
tt.health_bar.offset = v(0, 70)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.unit.hit_offset = v(0, 31)
tt.unit.head_offset = v(0, 21)
tt.unit.mod_offset = v(0, 16)
tt.unit.show_blood_pool = false
tt.motion.max_speed = b.max_speed
tt.sound_events.death = "Stage11MydriasIllusionDeath"
tt.info.enc_icon = 14
tt.info.portrait = "gui_bottom_info_image_enemies_0026"
tt.main_script.update = scripts.enemy_stage_11_cult_leader_illusion.update
tt.melee.range = 72
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min
tt.melee.attacks[1].hit_time = fts(12)
tt.melee.attacks[1].hit_fx = "fx_stage_11_cult_leader_attack_hit"
tt.melee.attacks[1].hit_fx_offset = v(25, 35)
tt.ranged.attacks[1].bullet = "bullet_stage_11_cult_leader_illusion"
tt.ranged.attacks[1].bullet_start_offset = {
	v(25, 45)
}
tt.ranged.attacks[1].cooldown = b.ranged_attack.cooldown
tt.ranged.attacks[1].max_range = b.ranged_attack.max_range
tt.ranged.attacks[1].min_range = b.ranged_attack.min_range
tt.ranged.attacks[1].shoot_time = fts(18)
tt.ranged.attacks[1].hold_advance = true
tt.ranged.attacks[1].animation = "rangedattack"
tt.timed_attacks.list[1] = E:clone_c("custom_attack")
tt.timed_attacks.list[1].animation_start = "skill"
tt.timed_attacks.list[1].animation_loop = "skillloop"
tt.timed_attacks.list[1].animation_end = "skillout"
tt.timed_attacks.list[1].cast_time = fts(36)
tt.timed_attacks.list[1].cooldown = b.chain.cooldown
tt.timed_attacks.list[1].max_range = b.chain.max_range
tt.timed_attacks.list[1].min_range = 0
tt.timed_attacks.list[1].mod = "mod_enemy_stage_11_cult_leader_illusion_chain"
tt.timed_attacks.list[2] = E:clone_c("custom_attack")
tt.timed_attacks.list[2].aura = "aura_enemy_stage_11_cult_leader_illusion_shield"
tt.render.sprites[1].angles = {}
tt.render.sprites[1].angles.walk = {
	"walkingRightLeft",
	"walkingUp",
	"walkingDown"
}
tt.render.sprites[1].angles_stickiness = {
	walk = 10
}
tt.render.sprites[1].prefix = "mydrias_clone"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk",
	"walkdown"
}
tt.chain_every = fts(15)
tt.nodes_limit = b.nodes_limit
tt.chain_illusion_ttl = b.chain.duration
tt.shield_illusion_ttl = b.shield.duration
tt.fx_spawn = "fx_stage_11_cult_leader_spawn"
tt.spawn_charge_time = b.spawn_charge_time
tt.sound_spawn = "EnemyTwistedSisterSummonSpawn"
tt.sound_shield = "Stage11MydriasIllusionShieldCast"
tt.sound_tentacles_spawn = "Stage11MydriasIllusionTendrilsCast"
tt.sound_tentacles_death = "Stage11MydriasIllusionTendrilsDeath"
tt.vis.bans = bor(F_TELEPORT)
tt = E:register_t("enemy_blinker", "enemy_KR5")

E:add_comps(tt, "glare_kr5", "ranged")

local b = balance.enemies.void_beyond.blinker

tt.info.enc_icon = 16
tt.info.portrait = "gui_bottom_info_image_enemies_0016"
tt.enemy.gold = b.gold
tt.flight_height = 47
tt.health.hp_max = b.hp
tt.health_bar.offset = v(0, tt.flight_height + 33)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_blinker.update
tt.motion.max_speed = b.speed
tt.render.sprites[1].offset = v(0, tt.flight_height)
tt.render.sprites[1].prefix = "blinker_creep"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.render.sprites[1].angles.blink = {
	"blink",
	"walk_back",
	"blink_front"
}
tt.render.sprites[1].angles_custom = {
	blink = {
		55,
		115,
		245,
		305
	},
	walk = {
		55,
		115,
		245,
		305
	}
}
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "decal_flying_shadow_hard"
tt.render.sprites[2].offset = v(0, 0)
tt.render.sprites[2].scale = vv(0.9)
tt.ui.click_rect = r(-15, tt.flight_height - 5, 30, 30)
tt.ranged.attacks[1].bullet = "bullet_enemy_blinker"
tt.ranged.attacks[1].bullet_glare = "bullet_enemy_blinker_glare"
tt.ranged.attacks[1].aura = "aura_enemy_blinker"
tt.ranged.attacks[1].aura_glare = "aura_enemy_blinker_glare"
tt.ranged.attacks[1].hold_advance = true
tt.ranged.attacks[1].shoot_time = fts(0)
tt.ranged.attacks[1].cooldown = b.ranged_attack.cooldown
tt.ranged.attacks[1].min_range = b.ranged_attack.min_range
tt.ranged.attacks[1].max_range = b.ranged_attack.max_range
tt.ranged.attacks[1].duration = b.ranged_attack.duration
tt.ranged.attacks[1].bullet_start_offset = {
	v(0, tt.flight_height + 5)
}
tt.ranged.attacks[1].vis_flags = bor(F_RANGED)
tt.ranged.attacks[1].vis_bans = bor(F_FLYING)
tt.ranged.attacks[1].animation = "stun"
tt.ranged.attacks[1].fx_normal = "fx_enemy_blinker_attack"
tt.ranged.attacks[1].fx_glare = "fx_enemy_blinker_attack_glare"
tt.unit.can_explode = false
tt.unit.hide_after_death = true
tt.unit.disintegrate_fx = "fx_enemy_desintegrate_air"
tt.unit.hit_offset = v(0, tt.flight_height + 5)
tt.unit.head_offset = v(0, 5)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, tt.flight_height + 2)
tt.unit.size = UNIT_SIZE_SMALL
tt.unit.show_blood_pool = false
tt.vis.bans = bor(F_BLOCK, F_SKELETON)
tt.vis.flags = bor(F_ENEMY, F_FLYING)
tt.blink_min_cd = 2
tt.blink_max_cd = 4
tt.animation_idle = "walk"
tt.animation_blink = "blink"
tt.sound_events.death = "EnemyVoidBlinkerDeath"
tt.glare_kr5.regen_hp = b.glare.regen_hp
tt.glare_kr5.on_start_glare = scripts.enemy_blinker.on_start_glare
tt.glare_kr5.on_end_glare = scripts.enemy_blinker.on_end_glare
tt = E:register_t("enemy_mindless_husk", "enemy_KR5")

local b = balance.enemies.void_beyond.mindless_husk

E:add_comps(tt, "melee", "glare_kr5")

tt.info.enc_icon = 3
tt.info.portrait = "gui_bottom_info_image_enemies_0030"
tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(30, 0)
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 40)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.motion.max_speed = b.speed
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_mindless_husk.update
tt.render.sprites[1].prefix = "mindless_husk_creep"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].damage_type = b.basic_attack.damage_type
tt.melee.attacks[1].hit_time = fts(10)
tt.ui.click_rect = r(-15, 0, 30, 40)
tt.unit.hit_offset = v(-2, 10)
tt.unit.marker_offset = v(-1, 0)
tt.unit.mod_offset = v(0, 10)
tt.unit.size = UNIT_SIZE_SMALL
tt.vis.flags = bor(F_ENEMY)
tt.glare_kr5.regen_hp = b.glare.regen_hp
tt.glareling_spawn_controller = "controller_enemy_mindless_husk_glareling_spawn"
tt.glareling_spawn_max_nodes_to_exit = b.spawn.max_nodes_to_exit
tt.sound_death = "EnemyMindlessHuskDeath"
tt.sound_death_and_spawn = "EnemyMindlessHuskSpawnDeath"
tt.sound_events.death = tt.sound_death
tt = E:register_t("controller_enemy_mindless_husk_glareling_spawn")

local b = balance.enemies.void_beyond.mindless_husk.spawn

E:add_comps(tt, "main_script")

tt.main_script.update = scripts.controller_enemy_mindless_husk_glareling_spawn.update
tt.glareling_bullet = "bullet_boss_corrupted_denas_spawn_entities"
tt.glareling_spawn_delay = fts(16)
tt.start_offset = v(0, 25)
tt.min_nodes_ahead = b.min_nodes_ahead
tt.max_nodes_ahead = b.max_nodes_ahead
tt.sound_spawn = "EnemyMindlessHuskSpawnDeath"
tt = E:register_t("enemy_glareling", "enemy_KR5")
b = balance.enemies.cult_of_the_overseer.glareling

E:add_comps(tt, "melee", "glare_kr5")

tt.enemy.gold = b.gold
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.info.enc_icon = 9
tt.info.portrait = "gui_bottom_info_image_enemies_0029"
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_glareling.update
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].hit_time = fts(15)
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "glearling_character"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walkUp",
	"walkDown"
}
tt.render.sprites[1].scale = v(0.81, 0.81)
tt.ui.click_rect = r(-20, -3, 40, 30)
tt.health_bar.offset = v(0, 25)
tt.unit.show_blood_pool = false
tt.unit.hit_offset = v(0, 10)
tt.unit.head_offset = v(0, 0)
tt.unit.mod_offset = v(0, 6)
tt.enemy.melee_slot = v(18, 0)
tt.transformation_time = b.transformation_time
tt.glare_kr5.regen_hp = b.glare.regen_hp
tt.glare_kr5.speed_factor = b.glare.speed_factor
tt.sound_events.death = "EnemyGlarelingDeath"
tt.sound_events.sacrifice = "Stage14BehemothPoolSplash"
tt = E:register_t("enemy_vile_spawner", "enemy_KR5")
b = balance.enemies.void_beyond.vile_spawner

E:add_comps(tt, "melee", "timed_attacks", "tween", "glare_kr5")

tt.flight_height = 2
tt.fly_strenght = 5
tt.fly_frequency = 13
tt.info.enc_icon = 5
tt.info.portrait = "gui_bottom_info_image_enemies_0031"
tt.unit.mod_offset = v(0, 16)
tt.unit.hit_offset = v(0, 18)
tt.unit.head_offset = v(0, 10)
tt.unit.size = UNIT_SIZE_MEDIUM
tt.unit.marker_offset = v(-1, -1)
tt.ui.click_rect = r(-25, 0, 50, 60)
tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(34, 0)
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 62)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.health.dead_lifetime = 5
tt.main_script.update = scripts.enemy_vile_spawner.update
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].hit_time = fts(15)
tt.melee.attacks[1].animation = "attack_melee"
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "vile_spawner_creep"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.render.sprites[1].draw_order = DO_ENEMY_BIG
tt.render.sprites[1].offset = v(0, 8)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "big_shadow"
tt.render.sprites[2].offset = v(0, 0)
tt.render.sprites[2].z = Z_DECALS
tt.timed_attacks.list[1] = E:clone_c("custom_attack")
tt.timed_attacks.list[1].cast_time = fts(20)
tt.timed_attacks.list[1].animation = "projectile_spawn"
tt.timed_attacks.list[1].normal_cooldown = b.lesser_spawn.cooldown
tt.timed_attacks.list[1].cooldown = b.lesser_spawn.cooldown
tt.timed_attacks.list[1].min_range = b.lesser_spawn.min_range
tt.timed_attacks.list[1].max_range = b.lesser_spawn.max_range
tt.timed_attacks.list[1].distance_between_entities = b.lesser_spawn.distance_between_entities
tt.timed_attacks.list[1].entities_amount = b.lesser_spawn.entities_amount
tt.timed_attacks.list[1].bullet_start_offset = v(-5, 50)
tt.timed_attacks.list[1].bullet = "bullet_vile_spawner_spawn"
tt.timed_attacks.list[1].delay_between = fts(2)
tt.timed_attacks.list[1].bullet_aim_height = 47
tt.timed_attacks.list[1].min_distance_from_end = b.lesser_spawn.min_distance_from_end
tt.timed_attacks.list[1].count_group_name = "enemy_lesser_eye"
tt.timed_attacks.list[1].count_group_type = COUNT_GROUP_CONCURRENT
tt.timed_attacks.list[1].count_group_max = b.lesser_spawn.max_total
tt.glare_kr5.on_start_glare = scripts.enemy_vile_spawner.on_start_glare
tt.glare_kr5.on_end_glare = scripts.enemy_vile_spawner.on_end_glare
tt.glare_kr5.regen_hp = b.glare.regen_hp
tt.glare_kr5.lesser_spawn_cooldown = b.glare.lesser_spawn_cooldown
tt.unit.blood_color = BLOOD_VIOLET
tt.tween.remove = false
tt.tween.props[1].name = "offset"
tt.tween.props[1].interp = "sine"
tt.tween.props[1].keys = {
	{
		fts(0),
		v(0, tt.flight_height)
	},
	{
		fts(tt.fly_frequency),
		v(0, tt.flight_height - tt.fly_strenght)
	},
	{
		fts(tt.fly_frequency * 2),
		v(0, tt.flight_height)
	}
}
tt.tween.props[1].loop = true
tt.tween.props[1].sprite_id = 1
tt.sound_events.death = "EnemyVileSpawnerDeath"
tt.sound_events.spawn_cast = "EnemyVileSpawnerSpawnCast"
tt = E:register_t("enemy_lesser_eye", "enemy_KR5")
b = balance.enemies.void_beyond.lesser_eye

E:add_comps(tt, "count_group", "tween", "glare_kr5")

tt.info.enc_icon = 16
tt.info.portrait = "gui_bottom_info_image_enemies_0032"
tt.enemy.gold = b.gold
tt.count_group.name = "enemy_lesser_eye"
tt.flight_height = 47
tt.fly_strenght = 5
tt.fly_frequency = 13
tt.health.hp_max = b.hp
tt.health_bar.offset = v(0, tt.flight_height + 33)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.main_script.update = scripts.enemy_lesser_eye.update
tt.motion.max_speed = b.speed
tt.render.sprites[1].offset = v(0, tt.flight_height)
tt.render.sprites[1].prefix = "lesser_eye_creep"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "decal_flying_shadow_hard"
tt.render.sprites[2].offset = v(0, 0)
tt.render.sprites[2].scale = vv(0.8)
tt.ui.click_rect = r(-15, tt.flight_height - 20, 30, 38)
tt.unit.can_explode = false
tt.unit.hide_after_death = true
tt.unit.disintegrate_fx = "fx_enemy_desintegrate_air"
tt.unit.hit_offset = v(0, tt.flight_height + 5)
tt.unit.head_offset = v(0, 5)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, tt.flight_height + 2)
tt.unit.size = UNIT_SIZE_SMALL
tt.unit.show_blood_pool = false
tt.vis.bans = bor(F_BLOCK, F_SKELETON)
tt.vis.flags = bor(F_ENEMY, F_FLYING)
tt.tween.remove = false
tt.tween.props[1].name = "offset"
tt.tween.props[1].interp = "sine"
tt.tween.props[1].keys = {
	{
		fts(0),
		v(0, tt.flight_height)
	},
	{
		fts(tt.fly_frequency),
		v(0, tt.flight_height - tt.fly_strenght)
	},
	{
		fts(tt.fly_frequency * 2),
		v(0, tt.flight_height)
	}
}
tt.tween.props[1].loop = true
tt.tween.props[1].sprite_id = 1
tt.glare_kr5.regen_hp = b.glare.regen_hp
tt.sound_events.death = "EnemyLesserEyeDeath"
tt = E:register_t("enemy_noxious_horror", "enemy_KR5")

local b = balance.enemies.void_beyond.noxious_horror

E:add_comps(tt, "melee", "ranged", "glare_kr5")

tt.info.enc_icon = 3
tt.info.portrait = "gui_bottom_info_image_enemies_0034"
tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(30, 0)
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 40)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.motion.max_speed = b.speed
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_noxious_horror.update
tt.render.sprites[1].prefix = "noxious_horror_creep"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].damage_type = b.basic_attack.damage_type
tt.melee.attacks[1].hit_time = fts(14)
tt.melee.attacks[1].animation = "attack_melee"
tt.melee.attacks[1].hit_fx = "fx_enemy_noxious_horror_melee_hit"
tt.ranged.cooldown = b.ranged_attack.cooldown
tt.ranged.attacks[1].bullet = "bullet_enemy_noxious_horror"
tt.ranged.attacks[1].hold_advance = false
tt.ranged.attacks[1].shoot_time = fts(16)
tt.ranged.attacks[1].cooldown = b.ranged_attack.cooldown
tt.ranged.attacks[1].max_range = b.ranged_attack.max_range
tt.ranged.attacks[1].max_range_variance = 60
tt.ranged.attacks[1].min_range = b.ranged_attack.min_range
tt.ranged.attacks[1].bullet_start_offset = {
	v(18, 31)
}
tt.ranged.attacks[1].ignore_hit_offset = true
tt.ranged.attacks[1].vis_flags = bor(F_RANGED)
tt.ranged.attacks[1].animation = "attack_range"
tt.ui.click_rect = r(-20, 0, 40, 35)
tt.unit.hit_offset = v(-2, 10)
tt.unit.marker_offset = v(-1, 0)
tt.unit.mod_offset = v(0, 10)
tt.unit.size = UNIT_SIZE_MEDIUM
tt.vis.flags = bor(F_ENEMY)
tt.glare_kr5.regen_hp = b.glare.regen_hp
tt.glare_kr5.on_start_glare = scripts.enemy_noxious_horror.on_start_glare
tt.glare_kr5.on_end_glare = scripts.enemy_noxious_horror.on_end_glare
tt.glare_kr5.magic_armor = b.glare.magic_armor
tt.glare_kr5.aura_poison = "aura_enemy_noxious_horror_glare"
tt.sound_events.death = "EnemyNoxiousHorrorDeath"
tt = E:register_t("enemy_hardened_horror", "enemy_KR5")

local b = balance.enemies.void_beyond.hardened_horror

E:add_comps(tt, "melee", "glare_kr5")

tt.info.enc_icon = 3
tt.info.portrait = "gui_bottom_info_image_enemies_0033"
tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(35, 0)
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 50)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.motion.max_speed = b.speed
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_hardened_horror.update
tt.render.sprites[1].prefix = "hardened_horror_creep"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.render.sprites[1].scale = vv(1.1)
tt.melee.attacks[1] = E:clone_c("area_attack")
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].damage_radius = b.basic_attack.damage_radius
tt.melee.attacks[1].damage_type = b.basic_attack.damage_type
tt.melee.attacks[1].hit_times = {
	fts(14),
	fts(20)
}
tt.melee.attacks[1].animation = "attack"
tt.melee.attacks[1].hit_fx = "fx_enemy_hardened_horror_hit"
tt.melee.attacks[1].hit_offset = v(40, 13)
tt.ui.click_rect = r(-25, -3, 50, 43)
tt.unit.hit_offset = v(-2, 10)
tt.unit.marker_offset = v(-1, 0)
tt.unit.mod_offset = v(0, 10)
tt.unit.size = UNIT_SIZE_MEDIUM
tt.vis.flags = bor(F_ENEMY)
tt.glare_kr5.regen_hp = b.glare.regen_hp
tt.glare_kr5.on_start_glare = scripts.enemy_hardened_horror.on_start_glare
tt.glare_kr5.on_end_glare = scripts.enemy_hardened_horror.on_end_glare
tt.glare_kr5.armor = b.glare.armor
tt.glare_kr5.roll_speed = b.glare.roll_speed
tt.glare_kr5.roll_angles = {
	"roll_loop",
	"roll_up",
	"roll_down"
}
tt.sound_events.death = "EnemyHardenedHorrorDeath"
tt.base_speed = b.speed
tt = E:register_t("enemy_evolving_scourge", "enemy_KR5")

local b = balance.enemies.void_beyond.evolving_scourge

E:add_comps(tt, "melee", "tween", "glare_kr5")

tt.info.enc_icon = 3
tt.info.portrait = "gui_bottom_info_image_enemies_0035"
tt.enemy.gold = b.gold[1]
tt.enemy.melee_slot = v(25, 0)
tt.enemy.lives_cost = b.lives_cost
tt.gold_config = b.gold
tt.health.hp_max = b.hp[1]
tt.hp_config = b.hp
tt.flight_height = 40
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 35)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.health_bar_offset_config = {
	v(0, 35),
	v(0, 40),
	v(0, 50 + tt.flight_height)
}
tt.health_bar_type_config = {
	HEALTH_BAR_SIZE_MEDIUM,
	HEALTH_BAR_SIZE_MEDIUM_MEDIUM,
	HEALTH_BAR_SIZE_LARGE
}
tt.motion.max_speed = b.speed[1]
tt.speed_config = b.speed
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_evolving_scourge.update
tt.render.sprites[1].prefix = "evolving_scourge_fase1"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "decal_flying_shadow_hard"
tt.render.sprites[2].offset = v(0, 0)
tt.render.sprites[2].hidden = true
tt.eat = {}
tt.eat.hp_required = b.eat.hp_required
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown[1]
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max[1]
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min[1]
tt.melee.attacks[1].damage_type = b.basic_attack.damage_type
tt.melee.attacks[1].hit_time = fts(11)
tt.melee.attacks[1].animation = "attack"
tt.melee.attacks[2] = E:clone_c("melee_attack")
tt.melee.attacks[2].animation = "attack_2"
tt.melee.attacks[2].cooldown = b.eat.cooldown
tt.melee.attacks[2].damage_type = bor(DAMAGE_NONE, DAMAGE_NO_DODGE)
tt.melee.attacks[2].hit_time = fts(21)
tt.melee.attacks[2].mod = "mod_enemy_evolving_scourge_eat"
tt.melee.attacks[2].vis_flags = bor(F_BLOCK, F_EAT, F_INSTAKILL)
tt.melee.attacks[2].vis_bans = bor(F_HERO)
tt.melee.attacks[2].sound = "EnemyAbominationInstakill"
tt.melee.attacks[2].fn_can = function(t, s, a, target)
	return target.health and target.health.hp <= target.health.hp_max * t.eat.hp_required
end
tt.melee.attacks[3] = table.deepclone(tt.melee.attacks[1])
tt.melee.attacks[3].cooldown = b.basic_attack.cooldown[2]
tt.melee.attacks[3].damage_max = b.basic_attack.damage_max[2]
tt.melee.attacks[3].damage_min = b.basic_attack.damage_min[2]
tt.melee.attacks[3].hit_time = fts(13)
tt.melee.attacks[3].disabled = true
tt.melee.attacks[4] = table.deepclone(tt.melee.attacks[2])
tt.melee.attacks[4].animation = "attack_2"
tt.melee.attacks[4].disabled = true
tt.ui.click_rect = r(-23, -3, 46, 33)
tt.click_rect_config = {
	r(-23, -3, 46, 33),
	r(-23, -3, 46, 38),
	r(-23, -3 + tt.flight_height, 46, 38)
}
tt.unit_y_offset_config = {
	0,
	5,
	7 + tt.flight_height
}
tt.unit.hit_offset = v(-5, 10)
tt.unit.marker_offset = v(-1, 0)
tt.unit.mod_offset = v(0, 10)
tt.unit.size = UNIT_SIZE_MEDIUM
tt.vis.flags = bor(F_ENEMY)
tt.tween.disabled = true
tt.tween.remove = false
tt.tween.props[1].name = "offset"
tt.tween.props[1].interp = "sine"
tt.tween.props[1].keys = {
	{
		0,
		v(0, 0)
	},
	{
		1,
		v(0, tt.flight_height)
	}
}
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].name = "scale"
tt.tween.props[2].interp = "sine"
tt.tween.props[2].sprite_id = 2
tt.tween.props[2].keys = {
	{
		0,
		vv(2)
	},
	{
		1,
		vv(1.3)
	}
}
tt.glare_kr5.regen_hp = b.glare.regen_hp
tt.glare_kr5.on_start_glare = scripts.enemy_evolving_scourge.on_start_glare
tt.glare_kr5.armor = b.glare.armor
tt.sound_events.evolve = "EnemyEvolvingScourgeEvolve"
tt.sound_events.death = "EnemyEvolvingScourgeDeath"
tt = E:register_t("enemy_amalgam", "enemy_KR5")
b = balance.enemies.void_beyond.amalgam

E:add_comps(tt, "melee", "glare_kr5", "death_spawns")

tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(37, 0)
tt.enemy.lives_cost = b.lives_cost
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 60)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM_LARGE
tt.info.enc_icon = 9
tt.info.portrait = "gui_bottom_info_image_enemies_0039"
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_mixed.update
tt.melee.attacks[1] = E:clone_c("area_attack")
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].damage_radius = b.basic_attack.damage_radius
tt.melee.attacks[1].damage_type = b.basic_attack.damage_type
tt.melee.attacks[1].hit_time = fts(18)
tt.melee.attacks[1].animation = "attack"
tt.melee.attacks[1].hit_decal = "decal_enemy_amalgam_hit"
tt.melee.attacks[1].hit_offset = v(40, 0)
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "Amalgam_dude"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_up",
	"walk_down"
}
tt.render.sprites[1].draw_order = DO_ENEMY_BIG
tt.ui.click_rect = r(-32, -3, 64, 60)
tt.unit.hit_offset = v(0, 22)
tt.unit.head_offset = v(0, 10)
tt.unit.marker_offset = v(-1, 0)
tt.unit.mod_offset = v(0, 19)
tt.unit.size = UNIT_SIZE_MEDIUM
tt.unit.can_explode = false
tt.unit.hide_after_death = true
tt.unit.show_blood_pool = false
tt.transformation_time = b.transformation_time
tt.glare_kr5.regen_hp = b.glare.regen_hp
tt.death_spawns.name = "aura_enemy_amalgam_death_explosion"
tt.death_spawns.fx = "decal_enemy_amalgam_death_explosion"
tt.death_spawns.concurrent_with_death = false
tt.death_spawns.delay = fts(19)
tt.sound_events.death = "EnemyAmalgamDeath"
tt.vis.flags = bor(F_ENEMY, F_MINIBOSS)
tt = E:register_t("enemy_overseer_hit_point", "enemy_KR5")
tt.enemy.gold = 0
tt.enemy.melee_slot = v(0, 0)
tt.enemy.lives_cost = 9999
tt.health.hp_max = 1e+99
tt.health.armor = 0
tt.health.magic_armor = 0
tt.unit.blood_color = BLOOD_VIOLET
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_overseer_hit_point.update
tt.health.on_damage = scripts.enemy_overseer_hit_point.on_damage
tt.motion.max_speed = 0
tt.render = nil
tt.ui.click_rect = r(-30, -3, 60, 65)
tt.ui.can_click = false
tt.ui.can_select = false
tt.vis.flags = bor(F_ENEMY, F_FLYING, F_BOSS)
tt.vis.bans = bor(F_MOD, F_BLOCK)
tt.move_bounds = v(25, 25)
tt.move_speed = v(0.2, 0.2)

tt = E:register_t("enemy_corrupted_elf", "enemy_KR5")
b = balance.enemies.undying_hatred.corrupted_elf

E:add_comps(tt, "melee", "ranged", "death_spawns")

tt.info.enc_icon = 12
tt.info.portrait = "gui_bottom_info_image_enemies_0044"
tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(25, 0)
tt.health.hp_max = b.hp
tt.health_bar.offset = v(0, 35)
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_corrupted_elf.update
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max
tt.melee.attacks[1].hit_time = fts(8)
tt.melee.attacks[1].animation_in = "attack_2_in"
tt.melee.attacks[1].animation = "attack_2"
tt.melee.attacks[1].animation_out = "attack_2_out"
tt.motion.max_speed = b.speed
tt.ranged.attacks[1].animations = {
	"attack_1_in",
	"attack_1",
	"attack_1_out"
}
tt.ranged.attacks[1].bullet = "bullet_enemy_corrupted_elf"
tt.ranged.attacks[1].bullet_start_offset = {
	v(5, 23),
	v(5, 23),
	v(5, 23)
}
tt.ranged.attacks[1].cooldown = b.ranged_attack.cooldown
tt.ranged.attacks[1].min_range = b.ranged_attack.min_range
tt.ranged.attacks[1].max_range = b.ranged_attack.max_range
tt.ranged.attacks[1].shoot_times = {
	fts(7),
	fts(13),
	fts(18)
}
tt.ranged.attacks[1].loops = 1
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.render.sprites[1].prefix = "corrupted_ranger_creep"
tt.sound_events.death = "EnemyCorruptedElfDeath"
tt.unit.hit_offset = v(0, 15)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, 14)
tt.unit.blood_color = BLOOD_GRAY
tt.ui.click_rect = r(-16, -3, 32, 30)
tt.spawn_nodes_limit = b.spawn_nodes_limit
tt.death_spawns.name = "enemy_specter"
tt.death_spawns.death_animation = "death"
tt.death_spawns.concurrent_with_death = false
tt.death_spawns.delay = fts(25)
tt.death_spawns.dead_lifetime = 0
tt.sound_specter_spawn = "EnemyCorruptedElfSpawn"
tt = E:register_t("enemy_specter", "enemy_KR5")
b = balance.enemies.undying_hatred.specter

E:add_comps(tt, "melee", "count_group")

tt.enemy.gold = 0
tt.enemy.lives_cost = b.lives_cost
tt.count_group.name = "enemy_specter"
tt.main_script.insert = scripts.enemy_specter.insert
tt.main_script.update = scripts.enemy_specter.update
tt.main_script.remove = scripts.enemy_specter.remove
tt.motion.max_speed = b.speed
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health.dead_lifetime = fts(18)
tt.info.enc_icon = 15
tt.info.portrait = "gui_bottom_info_image_enemies_0045"
tt.vis.flags = F_ENEMY
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].hit_time = fts(19)
tt.melee.attacks[1].hit_fx = "fx_enemy_specter_hit"
tt.melee.attacks[1].hit_fx_offset = v(25, 5)
tt.melee.attacks[1].animation = "attack_1"
tt.melee.range = 51.2
tt.render.sprites[1].name = "raise"
tt.render.sprites[1].prefix = "spectre_specter"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.ui.click_rect = r(-18, -3, 36, 35)
tt.sound_events.death = "EnemySpecterDeath"
tt.enemy.melee_slot = v(23, 0)
tt.health_bar.offset = v(0, 35)
tt.unit.hit_offset = v(0, 18)
tt.unit.head_offset = v(0, 18)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, 16)
tt.unit.show_blood_pool = false
tt.unit.blood_color = BLOOD_GRAY
tt.unit.hide_after_death = true
tt.animation_corrupt = "crash"
tt.speed_chase = b.speed_chase
tt.angles_chase = {
	"walk_fast"
}
tt.chase_trail = "ps_enemy_specter_chase_trail"
tt.chase_dist = 110
tt.chase_delay = fts(30)
tt.sound_rush_anticipation = "EnemySpecterRushAnticipation"
tt.sound_rush = "EnemySpecterRush"
tt.sound_corruption = "EnemySpecterCorruption"
tt = E:register_t("enemy_dust_cryptid", "enemy_KR5")

E:add_comps(tt, "death_spawns")

local b = balance.enemies.undying_hatred.dust_cryptid

tt.info.enc_icon = 20
tt.info.portrait = "gui_bottom_info_image_enemies_0047"
tt.enemy.gold = b.gold
tt.enemy.lives_cost = b.lives_cost
tt.flight_height = 40
tt.health.hp_max = b.hp
tt.health_bar.offset = v(0, tt.flight_height + 35)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_dust_cryptid.update
tt.motion.max_speed = b.speed
tt.render.sprites[1].offset = v(0, tt.flight_height)
tt.render.sprites[1].prefix = "dust_cryptid_creep"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "decal_flying_shadow_hard"
tt.render.sprites[2].offset = v(0, 0)
tt.sound_events.death = "EnemyPatrollingVultureDeath"
tt.ui.click_rect = r(-18, tt.flight_height - 5, 36, 36)
tt.unit.can_explode = false
tt.unit.hide_after_death = true
tt.unit.disintegrate_fx = "fx_enemy_desintegrate_air"
tt.unit.hit_offset = v(0, tt.flight_height + 15)
tt.unit.head_offset = v(0, 5)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, tt.flight_height + 15)
tt.unit.size = UNIT_SIZE_SMALL
tt.unit.show_blood_pool = false
tt.unit.blood_color = BLOOD_ORANGE
tt.vis.bans = bor(F_BLOCK, F_SKELETON)
tt.vis.flags = bor(F_ENEMY, F_FLYING)
tt.sound_events.death = "EnemyDustCryptidDeath"
tt.death_spawns.name = "aura_enemy_dust_cryptid"
tt.death_spawns.death_animation = "death"
tt.death_spawns.concurrent_with_death = true
tt.death_spawns.delay = fts(9)
tt.death_spawns.dead_lifetime = 0
tt.nodes_to_prevent_dust = b.nodes_to_prevent_dust
tt = E:register_t("enemy_bane_wolf", "enemy_KR5")

local b = balance.enemies.undying_hatred.bane_wolf

E:add_comps(tt, "melee", "auras")

tt.auras.list[1] = E:clone_c("aura_attack")
tt.auras.list[1].name = "aura_damage_sprint"
tt.auras.list[1].cooldown = 0
tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(25, 0)
tt.health.armor = 0
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 35)
tt.info.portrait = "gui_bottom_info_image_enemies_0046"
tt.info.enc_icon = 29
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_mixed_cliff.update
tt.melee.attacks[1].cooldown = 1
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].hit_time = fts(12)
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "bane_wolf_creep"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.unit.blood_color = BLOOD_GRAY
tt.unit.hit_offset = v(0, 16)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, 20)
tt.damage_sprint_factor = b.max_speed_mult - 1
tt.ui.click_rect = r(-18, -3, 36, 35)
tt.sound_events.death = "EnemyBaneWolfDeath"
tt = E:register_t("enemy_deathwood", "enemy_KR5")

local b = balance.enemies.undying_hatred.deathwood

E:add_comps(tt, "melee", "ranged")

tt.info.enc_icon = 3
tt.info.portrait = "gui_bottom_info_image_enemies_0048"
tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(37, 0)
tt.enemy.lives_cost = b.lives_cost
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 60)
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_deathwood.update
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].damage_type = b.basic_attack.damage_type
tt.melee.attacks[1].hit_fx = "fx_enemy_deathwood_hit"
tt.melee.attacks[1].hit_time = fts(18)
tt.melee.attacks[1].hit_offset = v(45, 10)
tt.melee.attacks[1].animation = "melee"
tt.ranged.attacks[1].bullet = "bullet_enemy_deathwood"
tt.ranged.attacks[1].hold_advance = false
tt.ranged.attacks[1].shoot_time = fts(23)
tt.ranged.attacks[1].cooldown = b.ranged_attack.cooldown
tt.ranged.attacks[1].min_range = b.ranged_attack.min_range
tt.ranged.attacks[1].max_range = b.ranged_attack.max_range
tt.ranged.attacks[1].max_range_variance = 60
tt.ranged.attacks[1].bullet_start_offset = {
	v(0, 31)
}
tt.ranged.attacks[1].ignore_hit_offset = true
tt.ranged.attacks[1].vis_flags = bor(F_RANGED)
tt.ranged.attacks[1].vis_bans = bor(F_FLYING)
tt.ranged.attacks[1].animation = "throw_attack"
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "deathwood_creep"
tt.render.sprites[1].draw_order = DO_ENEMY_BIG
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.sound_events.death = "EnemyDeathwoodDeath"
tt.ui.click_rect = r(-25, 0, 50, 50)
tt.unit.hit_offset = v(0, 22)
tt.unit.head_offset = v(0, 10)
tt.unit.marker_offset = v(-1, 0)
tt.unit.mod_offset = v(0, 19)
tt.unit.size = UNIT_SIZE_MEDIUM
tt.unit.can_explode = false
tt.unit.blood_color = BLOOD_GRAY
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM_LARGE
tt.vis.flags = bor(F_ENEMY, F_MINIBOSS)
tt.sound_events.death = "EnemyDeathwoodDeath"
tt = E:register_t("enemy_animated_armor", "enemy_KR5")
b = balance.enemies.undying_hatred.animated_armor

E:add_comps(tt, "melee", "corruption_kr5")

tt.enemy.gold = b.gold
tt.enemy.lives_cost = b.lives_cost
tt.main_script.insert = scripts.enemy_animated_armor.insert
tt.main_script.update = scripts.enemy_animated_armor.update
tt.motion.max_speed = b.speed
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health.dead_lifetime = fts(18)
tt.health.ignore_delete_after = true
tt.info.enc_icon = 15
tt.info.portrait = "gui_bottom_info_image_enemies_0052"
tt.vis.flags = F_ENEMY
tt.melee.attacks[1] = E:clone_c("area_attack")
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].damage_radius = b.basic_attack.damage_radius
tt.melee.attacks[1].damage_type = b.basic_attack.damage_type
tt.melee.attacks[1].hit_decal = "decal_ground_enemy_bear_vanguard"
tt.melee.attacks[1].hit_fx = "fx_bear_ground_hit"
tt.melee.attacks[1].hit_time = fts(29)
tt.melee.attacks[1].hit_offset = v(40, 0)
tt.melee.range = 51.2
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].prefix = "armor"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_up",
	"walk_down"
}
tt.ui.click_rect = r(-18, -3, 36, 35)
tt.sound_events.death = "EnemyAnimatedArmorDeath"
tt.enemy.melee_slot = v(23, 0)
tt.health_bar.offset = v(0, 50)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.unit.hit_offset = v(0, 18)
tt.unit.head_offset = v(0, 18)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, 16)
tt.unit.show_blood_pool = false
tt.unit.blood_color = BLOOD_GRAY
tt.unit.size = UNIT_SIZE_MEDIUM
tt.unit.fade_time_after_death = b.death_duration + 5
tt.death_duration = b.death_duration
tt.respawn_health_factor = b.respawn_health_factor
tt.respawn_sound = "EnemyAnimatedArmorRevive"
tt.corruption_kr5.limit = 1
tt.corruption_kr5.on_corrupt = scripts.enemy_animated_armor.on_corrupt
tt.corruption_kr5.enabled = false
tt = E:register_t("enemy_revenant_soulcaller", "enemy_KR5")

local b = balance.enemies.undying_hatred.revenant_soulcaller

E:add_comps(tt, "melee", "ranged", "timed_attacks")

tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(35, 0)
tt.health.hp_max = b.hp
tt.health.magic_armor = b.magic_armor
tt.health.armor = b.armor
tt.health.dead_lifetime = 3
tt.health_bar.offset = v(0, 43)
tt.unit.hit_offset = v(0, 16)
tt.unit.head_offset = v(0, 21)
tt.unit.mod_offset = v(0, 16)
tt.unit.show_blood_pool = false
tt.ui.click_rect = r(-20, -3, 40, 35)
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "revenant_soulcaller_unit"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_up",
	"walk_down"
}
tt.sound_events.death = "EnemyRevenantSoulcallerDeath"
tt.info.i18n_key = "ENEMY_REVENANT_SOULCALLER"
tt.info.enc_icon = 14
tt.info.portrait = "gui_bottom_info_image_enemies_0051"
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_revenant_soulcaller.update
tt.vis.flags = bor(tt.vis.flags, F_DARK_ELF, F_SPELLCASTER)
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min
tt.melee.attacks[1].hit_time = fts(18)
tt.melee.attacks[1].animation = "melee"
tt.ranged.attacks[1].bullet = "bullet_enemy_revenant_soulcaller"
tt.ranged.attacks[1].bullet_start_offset = {
	v(-10, 50)
}
tt.ranged.attacks[1].cooldown = b.ranged_attack.cooldown
tt.ranged.attacks[1].max_range = b.ranged_attack.max_range
tt.ranged.attacks[1].min_range = 0
tt.ranged.attacks[1].shoot_time = fts(24)
tt.ranged.attacks[1].animation = "stun"
tt.timed_attacks.list[1] = E:clone_c("custom_attack")
tt.timed_attacks.list[1].animation = "summon"
tt.timed_attacks.list[1].cast_time = fts(20)
tt.timed_attacks.list[1].cooldown = b.summon.cooldown
tt.timed_attacks.list[1].range = b.summon.max_range
tt.timed_attacks.list[1].entity = "enemy_specter"
tt.timed_attacks.list[1].spawn_delay = 0
tt.timed_attacks.list[1].sound = "EnemyCorruptedElfSpawn"
tt.timed_attacks.list[1].count_group_name = "enemy_specter"
tt.timed_attacks.list[1].count_group_type = COUNT_GROUP_CONCURRENT
tt.timed_attacks.list[1].count_group_max = b.summon.max_total
tt.timed_attacks.list[2] = E:clone_c("custom_attack")
tt.timed_attacks.list[2].animation = "stun"
tt.timed_attacks.list[2].cast_time = fts(24)
tt.timed_attacks.list[2].cooldown = b.tower_stun.cooldown
tt.timed_attacks.list[2].max_range = b.tower_stun.max_range
tt.timed_attacks.list[2].min_range = 0
tt.timed_attacks.list[2].bullet = "bullet_enemy_revenant_soulcaller_tower_stun"
tt.timed_attacks.list[2].bullet_start_offset = tt.ranged.attacks[1].bullet_start_offset
tt.timed_attacks.list[2].mark_mod = "mod_enemy_revenant_soulcaller_mark"
tt.nodes_limit = b.summon.nodes_limit
tt.node_random_min = b.summon.nodes_random_min
tt.node_random_max = b.summon.nodes_random_max
tt = E:register_t("enemy_revenant_harvester", "enemy_KR5")

local b = balance.enemies.undying_hatred.revenant_harvester

E:add_comps(tt, "melee", "timed_attacks", "count_group")

tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(35, 0)
tt.count_group.name = "enemy_revenant_harvester"
tt.health.hp_max = b.hp
tt.health.magic_armor = b.magic_armor
tt.health.armor = b.armor
tt.health.dead_lifetime = 3
tt.health_bar.offset = v(0, 47)
tt.unit.hit_offset = v(0, 10)
tt.unit.head_offset = v(0, 21)
tt.unit.mod_offset = v(0, 10)
tt.unit.show_blood_pool = false
tt.unit.hide_after_death = true
tt.ui.click_rect = r(-17, -3, 34, 40)
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "harvester_harvester"
tt.sound_events.death = "EnemyRevenantHarvesterDeath"
tt.info.i18n_key = "ENEMY_REVENANT_HARVESTER"
tt.info.enc_icon = 14
tt.info.portrait = "gui_bottom_info_image_enemies_0053"
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_revenant_harvester.update
tt.vis.flags = bor(tt.vis.flags, F_DARK_ELF, F_SPELLCASTER)
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min
tt.melee.attacks[1].hit_time = fts(12)
tt.melee.attacks[1].animation = "attack"
tt.melee.attacks[1].hit_fx = "fx_enemy_revenant_harvester_hit"
tt.timed_attacks.list[1] = E:clone_c("custom_attack")
tt.timed_attacks.list[1].animation = "cloning"
tt.timed_attacks.list[1].cast_time = fts(14)
tt.timed_attacks.list[1].cooldown = b.clone.cooldown
tt.timed_attacks.list[1].range = b.clone.max_range
tt.timed_attacks.list[1].entity = "enemy_specter"
tt.timed_attacks.list[1].spawn_delay = 0
tt.timed_attacks.list[1].sound = "EnemyRevenantHarvesterClone"
tt.timed_attacks.list[1].count_group_name = "enemy_revenant_harvester"
tt.timed_attacks.list[1].count_group_type = COUNT_GROUP_CONCURRENT
tt.timed_attacks.list[1].count_group_max = b.clone.max_total
tt.timed_attacks.list[1].mark_mod = "mod_enemy_revenant_harvester_mark"
tt.nodes_limit = b.clone.nodes_limit

tt = E:register_t("enemy_crocs_basic_egg", "enemy_KR5")

local b = balance.enemies.crocs.crocs_basic_egg

E:add_comps(tt, "water")

tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(28, 0)
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 32)
tt.info.enc_icon = 2
tt.info.portrait = "gui_bottom_info_image_enemies_0056"
tt.unit.hit_offset = v(0, 14)
tt.unit.head_offset = v(0, 5)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, 10)
tt.main_script.insert = scripts.enemy_crocs_basic.insert
tt.main_script.update = scripts.enemy_crocs_basic_egg.update
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "crokinder_creep"
tt.render.sprites[1].name = "raise"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.sound_events.evolve = "EnemyCrokinderEvolve"
tt.sound_events.death = "EnemyCrokinderDeath"
tt.ui.click_rect = r(-12, 0, 24, 25)
tt.evolve_cooldown_min = b.evolve.cooldown_min
tt.evolve_cooldown_max = b.evolve.cooldown_max
tt.evolve_mod = "mod_chicken_leg_polymorph"
tt.can_evolve_chicken_leg = true
tt.vis.bans = bor(F_BLOCK)
tt.unit.blood_color = BLOOD_NONE
tt.transform_anim = "transform"
tt.water.hit_offset = v(0, 5)
tt.water.mod_offset = v(0, 5)
tt.water.health_bar_hidden = true
tt.water.sprite_suffix = ""
tt.water.vis_bans = bor(F_BLOCK, F_RANGED)
tt.water.hide_sprites_range = {}
tt.water.remove_modifiers = true
tt.water.splash_fx = "fx_enemy_splash_crocs"
tt.water_fixed_speed = b.water_fixed_speed

local b = balance.enemies.crocs.crocs_basic

tt = E:register_t("enemy_crocs_basic", "enemy_KR5")

E:add_comps(tt, "melee", "water")

tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(28, 0)
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 32)
tt.info.enc_icon = 1
tt.info.portrait = "gui_bottom_info_image_enemies_0057"
tt.unit.hit_offset = v(0, 14)
tt.unit.head_offset = v(0, 20)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, 10)
tt.main_script.insert = scripts.enemy_crocs_basic.insert
tt.main_script.update = scripts.enemy_crocs_basic.update
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].hit_time = fts(8)
tt.melee.attacks[1].sound = "EnemyCrocBasicMelee"
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "gator_creep"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.sound_events.death = "EnemyTuskedBrawlerDeath"
tt.ui.click_rect = r(-17, 0, 34, 30)
tt.evolve_mod = "mod_chicken_leg_polymorph"
tt.evolve_sound = "EnemyCrocsBasicEvolve"
tt.can_evolve_chicken_leg = false
tt.transform_anim = "transform"
tt.water.hit_offset = v(0, 5)
tt.water.mod_offset = v(0, 5)
tt.water.health_bar_hidden = true
tt.water.sprite_suffix = ""
tt.water.vis_bans = bor(F_BLOCK, F_RANGED)
tt.water.hide_sprites_range = {}
tt.water.remove_modifiers = true
tt.water.splash_fx = "fx_enemy_splash_crocs"
tt.water_fixed_speed = b.water_fixed_speed

local b = balance.enemies.crocs.quickfeet_gator

tt = E:register_t("enemy_quickfeet_gator_chicken_leg", "enemy_KR5")

E:add_comps(tt, "melee", "ranged", "timed_attacks", "water")

tt.info.i18n_key = "ENEMY_CROCS_QUICKFEET_GATOR"
tt.info.enc_icon = 5
tt.info.portrait = "gui_bottom_info_image_enemies_0059"
tt.unit.mod_offset = v(0, 14)
tt.unit.hit_offset = v(0, 14)
tt.unit.head_offset = v(0, 10)
tt.unit.size = UNIT_SIZE_SMALL
tt.unit.marker_offset = v(-1, -1)
tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(34, 0)
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 63)
tt.health.dead_lifetime = 3
tt.unit.fade_time_after_death = 2
tt.main_script.insert = scripts.enemy_crocs_basic.insert
tt.main_script.update = scripts.enemy_quickfeet_gator.update
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].hit_time = fts(8)
tt.melee.attacks[1].animation = "attack"
tt.melee.attacks[1].sound = "EnemyQuickfeetMelee"
tt.ranged.attacks[1].bullet = "bullet_quickfeet_gator_bone"
tt.ranged.attacks[1].hold_advance = false
tt.ranged.attacks[1].shoot_time = fts(2)
tt.ranged.attacks[1].cooldown = b.ranged_attack.cooldown
tt.ranged.attacks[1].max_range = b.ranged_attack.max_range
tt.ranged.attacks[1].max_range_variance = 60
tt.ranged.attacks[1].min_range = b.ranged_attack.min_range
tt.ranged.attacks[1].bullet_start_offset = {
	v(14, 33)
}
tt.ranged.attacks[1].vis_flags = bor(F_RANGED)
tt.ranged.attacks[1].animation = "ability"
tt.ranged.attacks[1].disabled = true
tt.ranged.attacks[1].sound = "EnemyQuickfeetRanged"
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "quickfeet_gator_creep"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.timed_attacks.list[1] = E:clone_c("bullet_attack")
tt.timed_attacks.list[1].bullet = "quickfeet_gator_chicken_leg_bullet"
tt.timed_attacks.list[1].mark_mod = "mod_chicken_leg_polymorph_mark"
tt.timed_attacks.list[1].cast_time = fts(2)
tt.timed_attacks.list[1].node_prediction_base = -fts(3)
tt.timed_attacks.list[1].bullet_start_offset = {
	v(25, 46),
	v(-25, 46)
}
tt.timed_attacks.list[1].animation = "ability"
tt.timed_attacks.list[1].new_anim_prefix = "quickfeet_gator_creep_no_chicken"
tt.timed_attacks.list[1].new_health_bar_offset = v(0, 42)
tt.timed_attacks.list[1].cooldown = 0.2
tt.timed_attacks.list[1].target_nodes_from_start = b.chicken_leg.target_nodes_from_start
tt.timed_attacks.list[1].self_nodes_from_start = b.chicken_leg.self_nodes_from_start
tt.timed_attacks.list[1].max_count = 1
tt.timed_attacks.list[1].min_range = b.chicken_leg.min_range
tt.timed_attacks.list[1].max_range = b.chicken_leg.max_range
tt.timed_attacks.list[1].min_flight_time = fts(12)
tt.timed_attacks.list[1].max_flight_time = fts(24)
tt.timed_attacks.list[1].sound = "EnemyQuickfeetRanged"
tt.timed_attacks.list[1].vis_flags = bor(F_RANGED, F_CUSTOM)
tt.timed_attacks.list[1].allowed_templates = {
	"enemy_crocs_basic"
}
tt.timed_attacks.list[1].disabled = false
tt.unit.blood_color = BLOOD_GREEN
tt.unit.can_explode = false
tt.water.hit_offset = v(0, 5)
tt.water.mod_offset = v(0, 5)
tt.water.health_bar_hidden = true
tt.water.sprite_suffix = ""
tt.water.vis_bans = bor(F_BLOCK, F_RANGED)
tt.water.hide_sprites_range = {}
tt.water.remove_modifiers = true
tt.water.splash_fx = "fx_enemy_splash_crocs"
tt.water_fixed_speed = b.water_fixed_speed
tt = E:register_t("enemy_quickfeet_gator", "enemy_quickfeet_gator_chicken_leg")
tt.health_bar.offset = tt.timed_attacks.list[1].new_health_bar_offset
tt.render.sprites[1].prefix = tt.timed_attacks.list[1].new_anim_prefix
tt.ranged.attacks[1].disabled = false
tt.timed_attacks.list[1].disabled = true

local b = balance.enemies.crocs.killertile

tt = E:register_t("enemy_killertile", "enemy_KR5")

E:add_comps(tt, "melee", "water")

tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(28, 0)
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 55)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.health.dead_lifetime = 1.3
tt.unit.size = UNIT_SIZE_MEDIUM
tt.info.enc_icon = 2
tt.info.portrait = "gui_bottom_info_image_enemies_0058"
tt.unit.hit_offset = v(0, 20)
tt.unit.head_offset = v(0, 40)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, 20)
tt.main_script.insert = scripts.enemy_crocs_basic.insert
tt.main_script.update = scripts.enemy_killertile.update
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].sound = "EnemyKillertileMelee"
tt.melee.attacks[1].hit_time = fts(13)
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "killertile_creep"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.sound_events.death = "EnemyTuskedBrawlerDeath"
tt.ui.click_rect = r(-20, 0, 40, 42)
tt.water.hit_offset = v(0, 5)
tt.water.mod_offset = v(0, 5)
tt.water.health_bar_hidden = true
tt.water.sprite_suffix = ""
tt.water.vis_bans = bor(F_BLOCK, F_RANGED)
tt.water_fixed_speed = b.water_fixed_speed
tt.water.remove_modifiers = true
tt.water.hide_sprites_range = {}
tt.water.splash_fx = "fx_enemy_splash_crocs"
tt.water_particles_scale_var = {
	1.6,
	1.9
}

local b = balance.enemies.crocs.crocs_flier

tt = E:register_t("enemy_crocs_flier", "enemy_KR5")

E:add_comps(tt, "tween")

tt.info.enc_icon = 6
tt.info.portrait = "gui_bottom_info_image_enemies_0063"
tt.enemy.gold = b.gold
tt.flight_height = 47
tt.fly_strenght = -5
tt.fly_frequency = 8
tt.health.hp_max = b.hp
tt.health_bar.offset = v(0, tt.flight_height + 40)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_crocs_flier.update
tt.motion.max_speed = b.speed
tt.render.sprites[1].offset = v(0, tt.flight_height)
tt.render.sprites[1].prefix = "winged_crock_creep"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "decal_flying_shadow_hard"
tt.render.sprites[2].offset = v(0, 0)
tt.render.sprites[2].scale = vv(0.8)
tt.sound_events.death = "EnemyPatrollingVultureDeath"
tt.ui.click_rect = r(-18, tt.flight_height - 10, 36, 28)
tt.unit.can_explode = false
tt.unit.hide_after_death = true
tt.unit.fade_time_after_death = nil
tt.unit.disintegrate_fx = "fx_enemy_desintegrate_air"
tt.unit.hit_offset = v(0, tt.flight_height + 2)
tt.unit.head_offset = v(0, tt.flight_height + 6)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, tt.flight_height)
tt.unit.size = UNIT_SIZE_SMALL
tt.unit.show_blood_pool = false
tt.vis.bans = bor(F_BLOCK, F_SKELETON)
tt.vis.flags = bor(F_ENEMY, F_FLYING)
tt.tween.disabled = false
tt.tween.remove = false
tt.tween.props[1].name = "offset"
tt.tween.props[1].interp = "quad"
tt.tween.props[1].keys = {
	{
		fts(0),
		v(0, tt.flight_height)
	},
	{
		fts(tt.fly_frequency),
		v(0, tt.flight_height - tt.fly_strenght)
	},
	{
		fts(tt.fly_frequency * 2),
		v(0, tt.flight_height)
	}
}
tt.tween.props[1].loop = true
tt.tween.props[1].disabled = false
tt.tween.props[1].remove = false
tt = E:register_t("enemy_crocs_ranged", "enemy_KR5")

E:add_comps(tt, "melee", "ranged", "water")

b = balance.enemies.crocs.crocs_ranged
tt.info.enc_icon = 7
tt.info.portrait = "gui_bottom_info_image_enemies_0060"
tt.unit.hit_offset = v(0, 11)
tt.unit.head_offset = v(0, 19)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, 11)
tt.ui.click_rect = r(-21, 0, 35, 30)
tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(28, 0)
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 35)
tt.main_script.insert = scripts.enemy_crocs_ranged.insert
tt.main_script.update = scripts.enemy_crocs_ranged.update
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].hit_time = fts(8)
tt.melee.attacks[1].animation = "attack_02"
tt.melee.attacks[1].sound = "EnemyCrocsRangedMelee"
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "ranged_croc_creep"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.ranged.attacks[1].bullet = "bullet_ranged_crocs"
tt.ranged.attacks[1].hold_advance = false
tt.ranged.attacks[1].shoot_time = fts(9)
tt.ranged.attacks[1].cooldown = b.ranged_attack.cooldown
tt.ranged.attacks[1].max_range = b.ranged_attack.max_range
tt.ranged.attacks[1].max_range_variance = 60
tt.ranged.attacks[1].min_range = b.ranged_attack.min_range
tt.ranged.attacks[1].bullet_start_offset = {
	v(0, 28)
}
tt.ranged.attacks[1].vis_flags = bor(F_RANGED)
tt.ranged.attacks[1].animation = "attack_01"
tt.ranged.attacks[1].sound = "EnemyCrocsRangedShot"
tt.unit.blood_color = BLOOD_GREEN
tt.water.hit_offset = v(0, 5)
tt.water.mod_offset = v(0, 5)
tt.water.health_bar_hidden = true
tt.water.sprite_suffix = ""
tt.water.vis_bans = bor(F_BLOCK, F_RANGED)
tt.water.hide_sprites_range = {}
tt.water.remove_modifiers = true
tt.water.splash_fx = "fx_enemy_splash_crocs"
tt.water_fixed_speed = b.water_fixed_speed
tt = E:register_t("enemy_crocs_shaman", "enemy_KR5")

local b = balance.enemies.crocs.crocs_shaman

E:add_comps(tt, "melee", "ranged", "timed_attacks", "water")

tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(40, 0)
tt.health.hp_max = b.hp
tt.health.magic_armor = b.magic_armor
tt.health.armor = b.armor
tt.health.dead_lifetime = 3
tt.health_bar.offset = v(0, 50)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.unit.hit_offset = v(0, 12)
tt.unit.head_offset = v(0, 21)
tt.unit.mod_offset = v(0, 12)
tt.unit.show_blood_pool = false
tt.unit.size = UNIT_SIZE_LARGE
tt.ui.click_rect = r(-20, -3, 40, 35)
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "shaman_creep"
tt.render.sprites[1].angles.walk = {
	"walk_side",
	"walk_up",
	"walk_down"
}
tt.render.sprites[1].offset = v(-2, 1)
tt.info.i18n_key = "ENEMY_CROCS_SHAMAN"
tt.info.enc_icon = 14
tt.info.portrait = "gui_bottom_info_image_enemies_0061"
tt.main_script.insert = scripts.enemy_crocs_basic.insert
tt.main_script.update = scripts.enemy_crocs_shaman.update
tt.vis.flags = bor(tt.vis.flags, F_SPELLCASTER)
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min
tt.melee.attacks[1].hit_time = fts(9)
tt.melee.attacks[1].animation = "attack_melee"
tt.ranged.attacks[1].bullet = "bullet_crocs_shaman"
tt.ranged.attacks[1].bullet_start_offset = {
	v(0, 80)
}
tt.ranged.attacks[1].cooldown = b.ranged_attack.cooldown
tt.ranged.attacks[1].max_range = b.ranged_attack.max_range
tt.ranged.attacks[1].min_range = 0
tt.ranged.attacks[1].shoot_time = fts(11)
tt.ranged.attacks[1].hold_advance = true
tt.ranged.attacks[1].animation = "attack_range"
tt.timed_attacks.list[1] = E:clone_c("custom_attack")
tt.timed_attacks.list[1].animation = "heal"
tt.timed_attacks.list[1].cast_time = fts(32)
tt.timed_attacks.list[1].cooldown = b.healing.cooldown
tt.timed_attacks.list[1].range = b.healing.range
tt.timed_attacks.list[1].min_targets = b.healing.min_targets
tt.timed_attacks.list[1].max_targets = b.healing.max_targets
tt.timed_attacks.list[1].mod = "mod_enemy_crocs_shaman_healing"
tt.timed_attacks.list[2] = E:clone_c("custom_attack")
tt.timed_attacks.list[2].vis_flags = F_CUSTOM
tt.timed_attacks.list[2].animation = "attack_block"
tt.timed_attacks.list[2].cast_time = fts(20)
tt.timed_attacks.list[2].cooldown = b.debuff_towers.cooldown
tt.timed_attacks.list[2].max_range = b.debuff_towers.max_range
tt.timed_attacks.list[2].min_range = 0
tt.timed_attacks.list[2].mod = "mod_crocs_shaman_tower_debuff"
tt.timed_attacks.list[2].mark_mod = "mod_enemy_crocs_shaman_tower_mark"
tt.timed_attacks.list[2].nodes_limit = b.debuff_towers.nodes_limit
tt.water.hit_offset = v(0, 5)
tt.water.mod_offset = v(0, 5)
tt.water.health_bar_hidden = true
tt.water.sprite_suffix = ""
tt.water.vis_bans = bor(F_BLOCK, F_RANGED)
tt.water.hide_sprites_range = {}
tt.water.remove_modifiers = true
tt.water.splash_fx = "fx_enemy_splash_crocs"
tt.water_particles_scale_var = {
	1.6,
	1.9
}
tt.water_fixed_speed = b.water_fixed_speed

local b = balance.enemies.crocs.crocs_tank

tt = E:register_t("enemy_crocs_tank", "enemy_KR5")

E:add_comps(tt, "melee", "timed_attacks")

tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(42, 0)
tt.enemy.lives_cost = b.lives_cost
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 60)
tt.info.enc_icon = 10
tt.info.portrait = "gui_bottom_info_image_enemies_0062"
tt.unit.hit_offset = v(0, 20)
tt.unit.head_offset = v(0, 50)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, 17)
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_crocs_tank.update
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].hit_time = fts(11)
tt.melee.attacks[1].animation = "attack_2"
tt.melee.attacks[1].hit_fx = "fx_crocs_tank_melee_hit"
tt.melee.attacks[1].hit_offset = v(44, 15)
tt.timed_attacks.list[1] = E:clone_c("custom_attack")
tt.timed_attacks.list[1].cast_time = fts(15)
tt.timed_attacks.list[1].animation_start = "in_attack_1"
tt.timed_attacks.list[1].animation_end = "out_attack_1"
tt.timed_attacks.list[1].blocker_charge_delay = b.charge.blocker_charge_delay
tt.timed_attacks.list[1].cooldown = b.charge.cooldown
tt.timed_attacks.list[1].duration = b.charge.duration
tt.timed_attacks.list[1].min_distance_from_end = b.charge.min_distance_from_end
tt.timed_attacks.list[1].speed = b.charge.speed
tt.timed_attacks.list[1].vis_flags = F_FRIEND
tt.timed_attacks.list[1].vis_bans = bor(F_HERO, F_FLYING)
tt.timed_attacks.list[1].vis_flags_enemies = F_RANGED
tt.timed_attacks.list[1].vis_bans_enemies = F_BOSS
tt.timed_attacks.list[1].vis_flags_soldiers = F_RANGED
tt.timed_attacks.list[1].vis_bans_soldiers = bor(F_BOSS, F_FLYING)
tt.timed_attacks.list[1].mod_soldier = "mod_enemy_crocs_tank_charge_soldier"
tt.timed_attacks.list[1].particles_name = "ps_crocs_tank_charge"
tt.timed_attacks.list[1].range = b.charge.range
tt.timed_attacks.list[1].sound = "EnemyCrocTankSpin"
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "Tank_crocs_animationsDef"
tt.render.sprites[1].angles.walk = {
	"walk_side",
	"walk_up",
	"walk_down"
}
tt.original_angles_walk = tt.render.sprites[1].angles.walk
tt.render.sprites[1].angles.charge = {
	"attack_1",
	"attack_1",
	"attack_1"
}
tt.render.sprites[1].angles_custom = {
	charge = {
		55,
		115,
		245,
		305
	}
}
tt.render.sprites[1].exo = true
tt.render.sprites[1].offset = v(-2, 0)
tt.ui.click_rect = r(-30, -3, 60, 50)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM_LARGE
tt.unit.size = UNIT_SIZE_LARGE
tt.unit.can_explode = false
tt.unit.can_explode = false
tt.vis.flags = bor(F_ENEMY)
tt.sound_events.death = "EnemyRazingRhinoDeath"
tt.base_speed = b.speed
tt = E:register_t("enemy_crocs_egg_spawner", "enemy_KR5")
b = balance.enemies.crocs.crocs_egg_spawner

E:add_comps(tt, "melee", "timed_attacks", "water")

tt.info.enc_icon = 5
tt.info.portrait = "gui_bottom_info_image_enemies_0055"
tt.unit.mod_offset = v(0, 16)
tt.unit.hit_offset = v(0, 18)
tt.unit.head_offset = v(0, 10)
tt.unit.size = UNIT_SIZE_LARGE
tt.unit.marker_offset = v(-1, -1)
tt.ui.click_rect = r(-25, -2, 50, 40)
tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(34, 0)
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 50)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM_MEDIUM
tt.health.dead_lifetime = 5
tt.main_script.insert = scripts.enemy_crocs_basic.insert
tt.main_script.update = scripts.enemy_crocs_egg_spawner.update
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].hit_time = fts(10)
tt.melee.attacks[1].animation = "attack"
tt.melee.attacks[1].hit_fx = "fx_crocs_egg_spawner_melee_hit"
tt.melee.attacks[1].hit_offset = v(30, 10)
tt.melee.attacks[1].sound = "EnemyNestingGatorMelee"
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "crokinder_mom_creep"
tt.render.sprites[1].angles.walk = {
	"walk_side",
	"walk_up",
	"walk_down"
}
tt.render.sprites[1].anchor = v(0.5, 0.375)
tt.timed_attacks.list[1] = E:clone_c("custom_attack")
tt.timed_attacks.list[1].cast_time = fts(7)
tt.timed_attacks.list[1].animation = "spawn"
tt.timed_attacks.list[1].normal_cooldown = b.eggs_spawn.cooldown
tt.timed_attacks.list[1].cooldown = b.eggs_spawn.cooldown
tt.timed_attacks.list[1].min_range = b.eggs_spawn.min_range
tt.timed_attacks.list[1].max_range = b.eggs_spawn.max_range
tt.timed_attacks.list[1].distance_between_entities = b.eggs_spawn.distance_between_entities
tt.timed_attacks.list[1].entities_amount = b.eggs_spawn.entities_amount
tt.timed_attacks.list[1].bullet_start_offset = v(-5, 50)
tt.timed_attacks.list[1].bullet = "bullet_crocs_egg_spawner_spawn"
tt.timed_attacks.list[1].delay_between = fts(2)
tt.timed_attacks.list[1].min_distance_from_end = b.eggs_spawn.min_distance_from_end
tt.timed_attacks.list[1].count_group_name = "enemy_crocs_basic_egg"
tt.timed_attacks.list[1].count_group_type = COUNT_GROUP_CONCURRENT
tt.timed_attacks.list[1].count_group_max = b.eggs_spawn.max_total
tt.timed_attacks.list[1].sound = "EnemyNestingGatorAbility"
tt.water.hit_offset = v(0, 5)
tt.water.mod_offset = v(0, 5)
tt.water.health_bar_hidden = true
tt.water.sprite_suffix = ""
tt.water.vis_bans = bor(F_BLOCK, F_RANGED)
tt.water.hide_sprites_range = {}
tt.water.remove_modifiers = true
tt.water.splash_fx = "fx_enemy_splash_crocs"
tt.water_particles_scale_var = {
	1.6,
	1.9
}
tt.water_fixed_speed = b.water_fixed_speed
tt = E:register_t("enemy_crocs_hydra", "enemy_KR5")

local b = balance.enemies.crocs.crocs_hydra

E:add_comps(tt, "melee", "timed_attacks", "water")

tt.info.enc_icon = 3
tt.info.portrait = "gui_bottom_info_image_enemies_0064"
tt.enemy.gold = b.gold
tt.enemy.lives_cost = b.lives_cost
tt.enemy.melee_slot = v(52, 0)
tt.health.hp_max = b.hp[1]
tt.health.hp_max_evolved = b.hp[2]
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 85)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM_MEDIUM
tt.health.on_damage = scripts.enemy_crocs_hydra.on_damage
tt.health.dead_lifetime = 4.5
tt.motion.max_speed = b.speed
tt.main_script.insert = scripts.enemy_crocs_basic.insert
tt.main_script.update = scripts.enemy_crocs_hydra.update
tt.render.sprites[1].prefix = "hydra_unitDef"
tt.render.sprites[1].exo = true
tt.render.sprites[1].angles.walk = {
	"walk"
}
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].damage_type = b.basic_attack.damage_type
tt.melee.attacks[1].hit_times = {
	fts(19),
	fts(20)
}
tt.melee.attacks[1].retarget_blockers = true
tt.melee.attacks[1].animation = "attack"
tt.melee.attacks[1].hit_offset = v(52, 13)
tt.melee.attacks[1].hit_fx = "fx_crocs_hydra_melee_hit"
tt.timed_attacks.list[1] = E:clone_c("custom_attack")
tt.timed_attacks.list[1].disabled = true
tt.timed_attacks.list[1].animation = "ability"
tt.timed_attacks.list[1].vis_bans = bor(F_FLYING)
tt.timed_attacks.list[1].cast_time = fts(17)
tt.timed_attacks.list[1].cooldown = b.dot.cooldown
tt.timed_attacks.list[1].max_range = b.dot.max_range
tt.timed_attacks.list[1].min_range = 0
tt.timed_attacks.list[1].bullet = "bullet_enemy_crocs_hydra"
tt.timed_attacks.list[1].bullet_start_offset = {
	v(17, 150)
}
tt.timed_attacks.list[1].extra_bullets_start_offset = {
	v(-7, 110),
	v(34, 100)
}
tt.timed_attacks.list[1].nodes_limit = b.dot.nodes_limit
tt.timed_attacks.list[2] = E:clone_c("custom_attack")
tt.timed_attacks.list[2].animation = "transform"
tt.timed_attacks.list[2].new_anim_prefix = "hydra_unit_transformedDef"
tt.timed_attacks.list[2].new_health_bar_offset = v(0, 105)
tt.timed_attacks.list[2].new_click_rect = r(-25, -3, 50, 85)
tt.timed_attacks.list[2].new_size = UNIT_SIZE_LARGE
tt.timed_attacks.list[2].new_hit_times = {
	fts(20),
	fts(20),
	fts(20)
}
tt.ui.click_rect = r(-25, -3, 50, 65)
tt.unit.hit_offset = v(0, 25)
tt.unit.marker_offset = v(-1, 0)
tt.unit.mod_offset = v(0, 25)
tt.unit.head_offset = v(0, 60)
tt.unit.size = UNIT_SIZE_LARGE
tt.vis.flags = bor(F_ENEMY, F_MINIBOSS)
tt.sound_events.death = "DeathEplosion"
tt.water.hit_offset = v(0, 5)
tt.water.mod_offset = v(0, 5)
tt.water.health_bar_hidden = true
tt.water.sprite_suffix = ""
tt.water.vis_bans = bor(F_BLOCK, F_RANGED)
tt.water_fixed_speed = b.water_fixed_speed
tt.water.hide_sprites_range = {}
tt.water.remove_modifiers = true
tt.water.splash_fx = "fx_enemy_splash_crocs"
tt.water_particles_scale_var = {
	2.4,
	2.6
}
tt.water_trail_ts_offset = 0.5
tt.water_trail_with_bubbles_projectile = true
tt.transform_fx = "fx_crocs_hydra_heads_transform"
tt.death_fx = "fx_crocs_hydra_heads_death"
tt = E:register_t("boss_crocs_lvl1", "boss")
b = balance.enemies.crocs.boss_crocs

E:add_comps(tt, "melee", "timed_attacks")

tt.next_level_template = "boss_crocs_lvl2"
tt.boss_crocs_level = 1
tt.info.enc_icon = 5
tt.info.portrait = "gui_bottom_info_image_enemies_0066"
tt.info.i18n_key = "ENEMY_BOSS_CROCS"
tt.info.portrait_boss = "boss_health_bar_icon_new0006"
tt.unit.mod_offset = v(0, 32)
tt.unit.hit_offset = v(0, 36)
tt.unit.head_offset = v(20, 20)
tt.unit.size = UNIT_SIZE_LARGE
tt.unit.marker_offset = v(-1, -1)
tt.ui.click_rect = r(-50, -2, 100, 80)
tt.enemy.lives_cost = 999
tt.enemy.melee_slot = v(63, 0)
tt.health.hp_max = b.hp[1]
tt.health.armor = b.armor[1]
tt.health.magic_armor = b.magic_armor[1]
tt.health_bar.offset = v(0, 145)
tt.health_bar.type = HEALTH_BAR_SIZE_LARGE
tt.health.dead_lifetime = 5
tt.main_script.update = scripts.boss_crocs.update
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max[1]
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min[1]
tt.melee.attacks[1].hit_time = fts(20)
tt.melee.attacks[1].animation = "attack"
tt.melee.attacks[1].hit_fx = "fx_crocs_boss_melee_hit_1"
tt.melee.attacks[1].hit_decal = "decal_crocs_boss_melee_hit"
tt.melee.attacks[1].hit_offset = v(55, 0)
tt.melee.attacks[1].mod = "mod_boss_crocs_melee_hit"
tt.melee.attacks[1].sound = "Stage22AbominorMeleeHit"
tt.melee.attacks[1].sound_instakill = "Stage22AbominorEatEnemy"
tt.motion.max_speed = b.speed[1]
tt.render.sprites[1].prefix = "boss_gator1Def"
tt.render.sprites[1].draw_order = DO_ENEMY_BIG
tt.render.sprites[1].anchor = v(0.5, 0.375)
tt.render.sprites[1].scale = vv(1)
tt.render.sprites[1].exo = true
tt.vis.bans = bor(tt.vis.bans, F_STUN, F_INSTAKILL)
tt.timed_attacks.list[1] = E:clone_c("custom_attack")
tt.timed_attacks.list[1].animation_start = "spawnIn"
tt.timed_attacks.list[1].animation_loop = "spawnLoop"
tt.timed_attacks.list[1].animation_end = "spawnOut"
tt.timed_attacks.list[1].loop_times = b.eggs_spawn.loop_times[1]
tt.timed_attacks.list[1].cooldown = b.eggs_spawn.cooldown[1]
tt.timed_attacks.list[1].min_range = b.eggs_spawn.min_range[1]
tt.timed_attacks.list[1].max_range = b.eggs_spawn.max_range[1]
tt.timed_attacks.list[1].distance_between_entities = b.eggs_spawn.distance_between_entities
tt.timed_attacks.list[1].entities_amount = b.eggs_spawn.entities_amount[1]
tt.timed_attacks.list[1].bullet_start_offset = {
	v(50, 120),
	v(-50, 120)
}
tt.timed_attacks.list[1].bullet = "bullet_crocs_egg_spawner_spawn"
tt.timed_attacks.list[1].min_distance_from_end = b.eggs_spawn.min_distance_from_end
tt.timed_attacks.list[1].count_group_name = "enemy_crocs_basic_egg"
tt.timed_attacks.list[1].count_group_type = COUNT_GROUP_CONCURRENT
tt.timed_attacks.list[1].count_group_max = b.eggs_spawn.max_total
tt.timed_attacks.list[1].sound = "Stage22AbominorSpitEggs"
tt.timed_attacks.list[2] = E:clone_c("melee_attack")
tt.timed_attacks.list[2].hit_time = fts(19)
tt.timed_attacks.list[2].action_time_eat = fts(20)
tt.timed_attacks.list[2].animation = "execute"
tt.timed_attacks.list[2].hp_threshold = b.basic_attack.instakill_threshold[1]
tt.timed_attacks.list[2].damage_type = bor(DAMAGE_EAT, DAMAGE_NO_DODGE)
tt.timed_attacks.list[2].hit_fx = "fx_crocs_egg_spawner_melee_hit"
tt.timed_attacks.list[2].hit_offset = v(63, 60)
tt.timed_attacks.list[3] = E:clone_c("custom_attack")
tt.timed_attacks.list[3].vis_flags = bor(F_MOD)
tt.timed_attacks.list[3].excluded_templates = {
	"tower_stage_22_arborean_mages",
	"tower_mage_1",
	"tower_mage_2",
	"tower_mage_3",
	"tower_wild_magus"
}
tt.timed_attacks.list[3].cooldown = b.tower_destruction.cooldown[1]
tt.timed_attacks.list[3].max_range = b.tower_destruction.max_range[1]
tt.timed_attacks.list[3].mod = "mod_boss_crocs_tower_eat"
tt.timed_attacks.list[3].action_time_mod = fts(21)
tt.timed_attacks.list[3].action_time_eat = fts(95)
tt.timed_attacks.list[3].animation = "hability"
tt.eat_tower_evolution = b.eat_tower_evolution[1]
tt.life_percentage_evolution = b.life_percentage_evolution[1]
tt.evolution_mod = "mod_croc_boss_evolution_polymorph"
tt.evolution_anim = "transform"
tt.evolve_sound = "Stage22AbominorScreamTransformation"
tt.sound_death = "Stage22AbominorDeath"
tt.hp_ticks = 20
tt.evolution_health_update_tick_time = fts(20)
tt.evolution_health_update_time = fts(79)
tt.hp_evolution_method = b.primordial_hunger[tt.boss_crocs_level].hp_evolution_method
tt.hp_restore_fixed_amount = b.primordial_hunger[tt.boss_crocs_level].hp_restore_fixed_amount
tt.can_evolve = true
tt.pre_evolution_step_cap = b.primordial_hunger[1].pre_evolution_step_cap
tt.masks_to_spawn = {
	{
		"stage_22_paths_mask1",
		fts(19),
		{
			{
				{
					x = 200,
					y = 465
				},
				100
			},
			{
				{
					x = 270,
					y = 470
				},
				100
			},
			{
				{
					x = 320,
					y = 530
				},
				100
			},
			{
				{
					x = 400,
					y = 490
				},
				100
			},
			{
				{
					x = 510,
					y = 470
				},
				100
			}
		}
	},
	{
		"stage_22_paths_mask2",
		fts(25),
		{
			{
				{
					x = 512,
					y = 357
				},
				100
			}
		}
	},
	{
		"stage_22_paths_mask3",
		fts(35),
		{
			{
				{
					x = 475,
					y = 240
				},
				100
			},
			{
				{
					x = 570,
					y = 270
				},
				100
			},
			{
				{
					x = 670,
					y = 290
				},
				100
			}
		}
	},
	{
		"stage_22_paths_mask4",
		fts(45),
		{
			{
				{
					x = 490,
					y = 180
				},
				100
			},
			{
				{
					x = 520,
					y = 140
				},
				100
			},
			{
				{
					x = 535,
					y = 90
				},
				100
			},
			{
				{
					x = 535,
					y = 40
				},
				100
			}
		}
	}
}
tt.rocks_fall_fx = {
	"fx_stage_22_rocks_paths_fall1",
	"fx_stage_22_rocks_paths_fall2",
	"fx_stage_22_rocks_paths_fall3",
	"fx_stage_22_rocks_paths_fall4"
}
tt.rocks_fall_fx_pos = v(512, 384)
tt.sound_events.raise = "Stage22AbominorFallToPath"
tt = E:register_t("stage_22_paths_mask1", "decal_static")
tt.render.sprites[1].name = "stage_22_mascara1"
tt.render.sprites[1].z = Z_BACKGROUND_COVERS
tt.render.sprites[1].hidden = true
tt = E:register_t("stage_22_paths_mask2", "stage_22_paths_mask1")
tt.render.sprites[1].name = "stage_22_mascara4"
tt = E:register_t("stage_22_paths_mask3", "stage_22_paths_mask1")
tt.render.sprites[1].name = "stage_22_mascara2"
tt = E:register_t("stage_22_paths_mask4", "stage_22_paths_mask1")
tt.render.sprites[1].name = "stage_22_mascara3"
tt = E:register_t("boss_crocs_lvl2", "boss_crocs_lvl1")
b = balance.enemies.crocs.boss_crocs
tt.next_level_template = "boss_crocs_lvl3"
tt.boss_crocs_level = 2
tt.can_evolve = true
tt.ui.click_rect = r(-50, -2, 100, 80)
tt.enemy.melee_slot = v(70, 0)
tt.health.hp_max = b.hp[2]
tt.health.armor = b.armor[2]
tt.health.magic_armor = b.magic_armor[2]
tt.health_bar.offset = v(0, 172)
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max[2]
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min[2]
tt.melee.attacks[1].hit_offset = v(65, 0)
tt.melee.attacks[1].hit_fx = "fx_crocs_boss_melee_hit_2"
tt.melee.attacks[1].damage_radius = b.basic_attack.damage_radius
tt.motion.max_speed = b.speed[2]
tt.render.sprites[1].prefix = "boss_gator2Def"
tt.timed_attacks.list[1].loop_times = b.eggs_spawn.loop_times[2]
tt.timed_attacks.list[1].entities_amount = b.eggs_spawn.entities_amount[2]
tt.timed_attacks.list[1].cooldown = b.eggs_spawn.cooldown[2]
tt.timed_attacks.list[1].min_range = b.eggs_spawn.min_range[2]
tt.timed_attacks.list[1].max_range = b.eggs_spawn.max_range[2]
tt.timed_attacks.list[1].bullet_start_offset = {
	v(70, 150),
	v(-70, 150)
}
tt.timed_attacks.list[2].hp_threshold = b.basic_attack.instakill_threshold[2]
tt.timed_attacks.list[2].hit_offset = v(126, 40)
tt.timed_attacks.list[3].cooldown = b.tower_destruction.cooldown[2]
tt.timed_attacks.list[3].max_range = b.tower_destruction.max_range[2]
tt.eat_tower_evolution = b.eat_tower_evolution[2]
tt.life_percentage_evolution = b.life_percentage_evolution[2]
tt.pre_evolution_step_cap = b.primordial_hunger[2].pre_evolution_step_cap
tt.hp_ticks = 20
tt.evolution_health_update_tick_time = fts(20)
tt.evolution_health_update_time = fts(79)
tt.hp_evolution_method = b.primordial_hunger[tt.boss_crocs_level].hp_evolution_method
tt.hp_restore_fixed_amount = b.primordial_hunger[tt.boss_crocs_level].hp_restore_fixed_amount
tt = E:register_t("boss_crocs_lvl3", "boss_crocs_lvl1")
b = balance.enemies.crocs.boss_crocs
tt.next_level_template = "boss_crocs_lvl4"
tt.boss_crocs_level = 3
tt.can_evolve = true
tt.ui.click_rect = r(-50, -2, 100, 80)
tt.enemy.melee_slot = v(90, 0)
tt.info.i18n_key = "ENEMY_BOSS_CROCS_2"
tt.health.hp_max = b.hp[3]
tt.health.armor = b.armor[3]
tt.health.magic_armor = b.magic_armor[3]
tt.health_bar.offset = v(0, 200)
tt.melee.attacks[1].type = "area"
tt.melee.attacks[1].vis_bans = F_FLYING
tt.melee.attacks[1].vis_flags = F_RANGED
tt.melee.attacks[1].damage_bans = F_FLYING
tt.melee.attacks[1].damage_flags = F_AREA
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max[3]
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min[3]
tt.melee.attacks[1].hit_offset = v(80, 0)
tt.melee.attacks[1].damage_radius = b.basic_attack.damage_radius
tt.melee.attacks[1].hit_fx = "fx_crocs_boss_melee_hit"
tt.melee.attacks[1].hit_decal = "decal_crocs_boss_melee_hit_2"
tt.motion.max_speed = b.speed[3]
tt.render.sprites[1].prefix = "boss_gator3Def"
tt.timed_attacks.list[1].loop_times = b.eggs_spawn.loop_times[3]
tt.timed_attacks.list[1].entities_amount = b.eggs_spawn.entities_amount[3]
tt.timed_attacks.list[1].cooldown = b.eggs_spawn.cooldown[3]
tt.timed_attacks.list[1].min_range = b.eggs_spawn.min_range[3]
tt.timed_attacks.list[1].max_range = b.eggs_spawn.max_range[3]
tt.timed_attacks.list[1].bullet_start_offset = {
	v(75, 155),
	v(-75, 155)
}
tt.timed_attacks.list[2].hp_threshold = b.basic_attack.instakill_threshold[3]
tt.timed_attacks.list[2].hit_offset = v(126, 40)
tt.timed_attacks.list[3].cooldown = b.tower_destruction.cooldown[3]
tt.timed_attacks.list[3].max_range = b.tower_destruction.max_range[3]
tt.timed_attacks.list[4] = E:clone_c("custom_attack")
tt.timed_attacks.list[4].cooldown = b.poison_rain.cooldown[1]
tt.timed_attacks.list[4].min_range = b.poison_rain.min_range[1]
tt.timed_attacks.list[4].max_range = b.poison_rain.max_range[1]
tt.timed_attacks.list[4].bullet = "bullet_boss_crocs_poison_rain_lvl1"
tt.timed_attacks.list[4].animation_start = "acid"
tt.timed_attacks.list[4].action_time_shoot = fts(27)
tt.timed_attacks.list[4].shots_delay = fts(2)
tt.timed_attacks.list[4].shots_amount = b.poison_rain.shots_amount[1]
tt.timed_attacks.list[4].bullet_start_offset = v(95, 130)
tt.timed_attacks.list[4].sound = "Stage22AbominorShootAcid"
tt.eat_tower_evolution = b.eat_tower_evolution[3]
tt.life_percentage_evolution = b.life_percentage_evolution[3]
tt.pre_evolution_step_cap = b.primordial_hunger[3].pre_evolution_step_cap
tt.hp_ticks = 20
tt.evolution_health_update_tick_time = fts(20)
tt.evolution_health_update_time = fts(79)
tt.hp_evolution_method = b.primordial_hunger[tt.boss_crocs_level].hp_evolution_method
tt.hp_restore_fixed_amount = b.primordial_hunger[tt.boss_crocs_level].hp_restore_fixed_amount
tt = E:register_t("boss_crocs_lvl4", "boss_crocs_lvl3")
b = balance.enemies.crocs.boss_crocs
tt.next_level_template = "boss_crocs_lvl5"
tt.boss_crocs_level = 4
tt.can_evolve = true
tt.ui.click_rect = r(-50, -2, 100, 80)
tt.enemy.melee_slot = v(90, 0)
tt.health.hp_max = b.hp[4]
tt.health.armor = b.armor[4]
tt.health.magic_armor = b.magic_armor[4]
tt.health_bar.offset = v(0, 210)
tt.melee.attacks[1].type = "area"
tt.melee.attacks[1].vis_bans = F_FLYING
tt.melee.attacks[1].vis_flags = F_RANGED
tt.melee.attacks[1].damage_bans = F_FLYING
tt.melee.attacks[1].damage_flags = F_AREA
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max[4]
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min[4]
tt.melee.attacks[1].hit_offset = v(90, 0)
tt.melee.attacks[1].damage_radius = b.basic_attack.damage_radius
tt.melee.attacks[1].hit_decal = "decal_crocs_boss_melee_hit_2"
tt.motion.max_speed = b.speed[4]
tt.render.sprites[1].prefix = "boss_gator4Def"
tt.timed_attacks.list[1].loop_times = b.eggs_spawn.loop_times[4]
tt.timed_attacks.list[1].entities_amount = b.eggs_spawn.entities_amount[4]
tt.timed_attacks.list[1].cooldown = b.eggs_spawn.cooldown[4]
tt.timed_attacks.list[1].min_range = b.eggs_spawn.min_range[4]
tt.timed_attacks.list[1].max_range = b.eggs_spawn.max_range[4]
tt.timed_attacks.list[1].bullet_start_offset = {
	v(90, 175),
	v(-90, 175)
}
tt.timed_attacks.list[2].hp_threshold = b.basic_attack.instakill_threshold[4]
tt.timed_attacks.list[2].hit_offset = v(126, 40)
tt.timed_attacks.list[3].cooldown = b.tower_destruction.cooldown[4]
tt.timed_attacks.list[3].max_range = b.tower_destruction.max_range[4]
tt.timed_attacks.list[4] = E:clone_c("custom_attack")
tt.timed_attacks.list[4].cooldown = b.poison_rain.cooldown[1]
tt.timed_attacks.list[4].min_range = b.poison_rain.min_range[1]
tt.timed_attacks.list[4].max_range = b.poison_rain.max_range[1]
tt.timed_attacks.list[4].bullet = "bullet_boss_crocs_poison_rain_lvl1"
tt.timed_attacks.list[4].animation_start = "acid"
tt.timed_attacks.list[4].action_time_shoot = fts(27)
tt.timed_attacks.list[4].shots_delay = fts(2)
tt.timed_attacks.list[4].shots_amount = b.poison_rain.shots_amount[1]
tt.timed_attacks.list[4].bullet_start_offset = v(120, 135)
tt.timed_attacks.list[4].sound = "Stage22AbominorShootAcid"
tt.eat_tower_evolution = b.eat_tower_evolution[4]
tt.life_percentage_evolution = b.life_percentage_evolution[4]
tt.pre_evolution_step_cap = b.primordial_hunger[4].pre_evolution_step_cap
tt.hp_ticks = 20
tt.evolution_health_update_tick_time = fts(20)
tt.evolution_health_update_time = fts(79)
tt.hp_evolution_method = b.primordial_hunger[tt.boss_crocs_level].hp_evolution_method
tt.hp_restore_fixed_amount = b.primordial_hunger[tt.boss_crocs_level].hp_restore_fixed_amount
tt = E:register_t("boss_crocs_lvl5", "boss_crocs_lvl3")
b = balance.enemies.crocs.boss_crocs
tt.next_level_template = nil
tt.boss_crocs_level = 5
tt.can_evolve = false
tt.melee.attacks[1].disabled = true
tt.vis.bans = bor(F_BLOCK)
tt.ui.click_rect = r(-50, -2, 100, 80)
tt.enemy.melee_slot = v(120, 0)
tt.info.i18n_key = "ENEMY_BOSS_CROCS_3"
tt.health.hp_max = b.hp[5]
tt.health.armor = b.armor[5]
tt.health.magic_armor = b.magic_armor[5]
tt.health_bar.offset = v(0, 240)
tt.health.dead_lifetime = 1e+99
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max[5]
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min[5]
tt.melee.attacks[1].hit_offset = v(100, 0)
tt.motion.max_speed = b.speed[5]
tt.render.sprites[1].prefix = "boss_gator5Def"
tt.timed_attacks.list[1].loop_times = b.eggs_spawn.loop_times[5]
tt.timed_attacks.list[1].entities_amount = b.eggs_spawn.entities_amount[5]
tt.timed_attacks.list[1].cooldown = b.eggs_spawn.cooldown[5]
tt.timed_attacks.list[1].min_range = b.eggs_spawn.min_range[5]
tt.timed_attacks.list[1].max_range = b.eggs_spawn.max_range[5]
tt.timed_attacks.list[1].bullet_start_offset = {
	v(100, 200),
	v(-100, 200)
}
tt.timed_attacks.list[2].hp_threshold = b.basic_attack.instakill_threshold[5]
tt.timed_attacks.list[2].hit_offset = v(189, 60)
tt.timed_attacks.list[3].cooldown = b.tower_destruction.cooldown[5]
tt.timed_attacks.list[3].max_range = b.tower_destruction.max_range[5]
tt.timed_attacks.list[4].bullet = "bullet_boss_crocs_poison_rain_lvl2"
tt.timed_attacks.list[4].cooldown = b.poison_rain.cooldown[2]
tt.timed_attacks.list[4].min_range = b.poison_rain.min_range[2]
tt.timed_attacks.list[4].max_range = b.poison_rain.max_range[2]
tt.timed_attacks.list[4].animation_start = "acid"
tt.timed_attacks.list[4].sound = "Stage22AbominorShootFireball"
tt.timed_attacks.list[4].action_time_shoot = fts(27)
tt.timed_attacks.list[4].shots_delay = fts(1)
tt.timed_attacks.list[4].bullet_start_offset = v(130, 160)
tt.timed_attacks.list[4].shots_amount = b.poison_rain.shots_amount[2]
tt.stomp_passive = {}
tt.stomp_passive.range = b.stomper.range
tt.stomp_passive.vis_flags_soldiers = F_RANGED
tt.stomp_passive.vis_bans_soldiers = bor(F_BOSS, F_FLYING)
tt.stomp_passive.step_fx = "decal_crocs_boss_melee_hit_3"
tt.stomp_passive.damage_min = b.stomper.damage_soldiers_min
tt.stomp_passive.damage_max = b.stomper.damage_soldiers_max
tt.stomp_passive.damage_type = b.stomper.damage_type
tt.pre_evolution_step_cap = b.primordial_hunger[5].pre_evolution_step_cap
tt.hp_evolution_method = b.primordial_hunger[tt.boss_crocs_level].hp_evolution_method
tt.hp_restore_fixed_amount = b.primordial_hunger[tt.boss_crocs_level].hp_restore_fixed_amount
tt = E:register_t("boss_crocs_level_render", "decal")
b = balance.enemies.crocs.boss_crocs

E:add_comps(tt, "texts")

tt.render.sprites[1] = E:clone_c("sprite")
tt.render.sprites[1].prefix = "crokinder_mom_creep"
tt.render.sprites[1].scale = vv(0.75)
tt.render.sprites[1].offset = v(0, -30)
tt.render.sprites[1].z = Z_OBJECTS + 1
tt.texts.list[1].text = "asdaasd"
tt.texts.list[1].size = v(158, 56)
tt.texts.list[1].font_name = "taunts"
tt.texts.list[1].font_size = i18n:cjk(28, nil, 22, nil)
tt.texts.list[1].color = {
	255,
	30,
	30
}
tt.texts.list[1].line_height = i18n:cjk(0.8, 0.9, 1.1, 0.7)
tt.texts.list[1].sprite_id = 1
tt = RT("mod_boss_crocs_melee_hit", "modifier")
tt.modifier.hit_fx = "fx_boss_crocs_melee_hit"
tt.main_script.insert = scripts.mod_croc_boss_melee_hit.insert
tt = E:register_t("fx_boss_crocs_melee_hit", "fx")
tt.render.sprites[1].name = "boss_gator_vfx_hit_melee_run"
tt.render.sprites[1].loop = false
tt.render.sprites[1].hide_after_runs = 1
tt.render.sprites[1].z = Z_BULLETS

tt = E:register_t("enemy_darksteel_hammerer", "enemy_KR5")

local b = balance.enemies.hammer_and_anvil.darksteel_hammerer

E:add_comps(tt, "melee")

tt.info.i18n_key = "ENEMY_DARKSTEEL_HAMMERER"
tt.info.enc_icon = 14
tt.info.portrait = "gui_bottom_info_image_enemies_0073"
tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(35, 0)
tt.health_bar.offset = v(0, 33)
tt.health.hp_max = b.hp
tt.health.magic_armor = b.magic_armor
tt.health.armor = b.armor
tt.health.dead_lifetime = 3
tt.unit.hit_offset = v(0, 12)
tt.unit.head_offset = v(0, 21)
tt.unit.mod_offset = v(0, 12)
tt.unit.show_blood_pool = false
tt.ui.click_rect = r(-17, -3, 34, 32)
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "darksteel_hammerer_creep"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.sound_events.death = "EnemyDarksteelHammererDeath"
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_mixed.update
tt.vis.flags = bor(tt.vis.flags)
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min
tt.melee.attacks[1].hit_time = fts(15)
tt.melee.attacks[1].animation = "attack"
tt = E:register_t("enemy_darksteel_shielder", "enemy_KR5")

local b = balance.enemies.hammer_and_anvil.darksteel_shielder

E:add_comps(tt, "melee", "death_spawns")

tt.info.i18n_key = "ENEMY_DARKSTEEL_SHIELDER"
tt.info.enc_icon = 14
tt.info.portrait = "gui_bottom_info_image_enemies_0074"
tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(25, 0)
tt.health_bar.offset = v(0, 28)
tt.health.hp_max = b.hp
tt.health.magic_armor = b.magic_armor
tt.health.armor = b.armor
tt.health.dead_lifetime = 3
tt.unit.hit_offset = v(0, 16)
tt.unit.head_offset = v(0, 21)
tt.unit.mod_offset = v(0, 10)
tt.unit.show_blood_pool = false
tt.unit.hide_after_death = true
tt.ui.click_rect = r(-17, -3, 34, 30)
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "darksteel_shielder_creep"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.sound_events.death = "EnemyDarksteelShielderDeath"
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_darksteel_shielder.update
tt.vis.flags = bor(tt.vis.flags)
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min
tt.melee.attacks[1].hit_time = fts(15)
tt.melee.attacks[1].animation = "attack"
tt.death_spawns.name = "enemy_darksteel_hammerer"
tt.death_spawns.concurrent_with_death = false
tt.death_spawns.delay = fts(46.1)
tt = E:register_t("enemy_surveillance_sentry", "enemy_KR5")

E:add_comps(tt, "death_spawns", "tween")

local b = balance.enemies.hammer_and_anvil.surveillance_sentry

tt.info.enc_icon = 20
tt.info.portrait = "gui_bottom_info_image_enemies_0077"
tt.enemy.gold = b.gold
tt.enemy.lives_cost = b.lives_cost
tt.flight_height = 40
tt.health.hp_max = b.hp
tt.health_bar.offset = v(0, tt.flight_height + 35)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_surveillance_sentry.update
tt.motion.max_speed = b.speed
tt.render.sprites[1].offset = v(0, tt.flight_height)
tt.render.sprites[1].prefix = "rolling_sentry_creep_flying"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "decal_flying_shadow_hard"
tt.render.sprites[2].offset = v(0, 0)
tt.sound_events.death = "EnemyPatrollingVultureDeath"
tt.ui.click_rect = r(-18, tt.flight_height - 5, 36, 36)
tt.unit.can_explode = false
tt.unit.hide_after_death = true
tt.unit.disintegrate_fx = "fx_enemy_desintegrate_air"
tt.unit.hit_offset = v(0, tt.flight_height + 15)
tt.unit.head_offset = v(0, 5)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, tt.flight_height + 15)
tt.unit.size = UNIT_SIZE_SMALL
tt.unit.show_blood_pool = false
tt.unit.blood_color = BLOOD_GRAY
tt.vis.bans = bor(F_BLOCK, F_SKELETON)
tt.vis.flags = bor(F_ENEMY, F_FLYING)
tt.death_spawns.name = "enemy_rolling_sentry"
tt.death_spawns.death_animation = "death"
tt.death_spawns.concurrent_with_death = false
tt.death_spawns.delay = fts(12)
tt.death_spawns.dead_lifetime = 0
tt.tween.disabled = true
tt.tween.remove = false
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	}
}
tt.tween.props[1].sprite_id = 2
tt = E:register_t("enemy_rolling_sentry", "enemy_KR5")
b = balance.enemies.hammer_and_anvil.rolling_sentry

E:add_comps(tt, "melee", "ranged", "death_spawns")

tt.info.enc_icon = 12
tt.info.portrait = "gui_bottom_info_image_enemies_0076"
tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(25, 0)
tt.health.hp_max = b.hp
tt.health_bar.offset = v(0, 35)
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_rolling_sentry.update
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max
tt.melee.attacks[1].damage_type = b.melee_attack.damage_type
tt.melee.attacks[1].hit_time = fts(8)
tt.melee.attacks[1].animation_in = "walk_out"
tt.melee.attacks[1].animation = "attack_loop_side"
tt.melee.attacks[1].animation_out = "walk_in"
tt.motion.max_speed = b.speed
tt.ranged.attacks[1].animation_in = "walk_out"
tt.ranged.attacks[1].animation = "attack_loop_side"
tt.ranged.attacks[1].animation_out = "walk_in"
tt.ranged.attacks[1].hold_advance = true
tt.ranged.attacks[1].bullet = "bullet_enemy_rolling_sentry"
tt.ranged.attacks[1].bullet_start_offset = {
	v(5, 23),
	v(5, 23),
	v(5, 23)
}
tt.ranged.attacks[1].cooldown = b.ranged_attack.cooldown
tt.ranged.attacks[1].min_range = b.ranged_attack.min_range
tt.ranged.attacks[1].max_range = b.ranged_attack.max_range
tt.ranged.attacks[1].shoot_time = fts(7)
tt.ranged.attacks[1].sound = "EnemyRollingSentryAttack"
tt.render.sprites[1].angles.walk = {
	"walk_loop",
	"walk_loop_back",
	"walk_loop_front"
}
tt.render.sprites[1].angles.attack = {
	"attack_loop_side",
	"attack_loop_back",
	"attack_loop_front"
}
tt.render.sprites[1].prefix = "rolling_sentry_creep"
tt.sound_events.death = "EnemyRollingSentryDeath"
tt.unit.hit_offset = v(0, 10)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, 14)
tt.unit.blood_color = BLOOD_GRAY
tt.ui.click_rect = r(-16, -3, 32, 30)
tt.death_spawns.name = "decal_scrap"
tt.death_spawns.death_animation = "death"
tt.death_spawns.concurrent_with_death = false
tt.death_spawns.delay = fts(12)
tt = E:register_t("enemy_mad_tinkerer", "enemy_KR5")

local b = balance.enemies.hammer_and_anvil.mad_tinkerer

E:add_comps(tt, "melee", "timed_attacks")

tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(35, 0)
tt.health.hp_max = b.hp
tt.health.magic_armor = b.magic_armor
tt.health.armor = b.armor
tt.health.dead_lifetime = 3
tt.health_bar.offset = v(0, 47)
tt.unit.hit_offset = v(0, 10)
tt.unit.head_offset = v(0, 21)
tt.unit.mod_offset = v(0, 10)
tt.unit.show_blood_pool = false
tt.unit.hide_after_death = true
tt.ui.click_rect = r(-17, -3, 34, 40)
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "mad_tinkerer"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.sound_events.death = "EnemyMadTinkererDeath"
tt.info.i18n_key = "ENEMY_MAD_TINKERER"
tt.info.enc_icon = 14
tt.info.portrait = "gui_bottom_info_image_enemies_0080"
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_mad_tinkerer.update
tt.vis.flags = bor(tt.vis.flags, F_DARK_ELF, F_SPELLCASTER)
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min
tt.melee.attacks[1].hit_time = fts(12)
tt.melee.attacks[1].animation = "attack"
tt.melee.attacks[1].hit_fx = "fx_enemy_mad_tinkerer_hit"
tt.timed_attacks.list[1] = E:clone_c("custom_attack")
tt.timed_attacks.list[1].animation = "skill"
tt.timed_attacks.list[1].loop_time = fts(30)
tt.timed_attacks.list[1].cast_time = fts(34)
tt.timed_attacks.list[1].cooldown = b.clone.cooldown
tt.timed_attacks.list[1].radius = b.clone.max_range
tt.timed_attacks.list[1].min_range = b.clone.min_range
tt.timed_attacks.list[1].entity_search = "decal_scrap"
tt.timed_attacks.list[1].entity_spawn = "enemy_scrap_drone"
tt.timed_attacks.list[1].ray = "decal_ray_mad_tinkerer"
tt.timed_attacks.list[1].bullet = "decal_scrap_bullet_mad_tinkerer"
tt.timed_attacks.list[1].spawn_delay = 0
tt.timed_attacks.list[1].sound = "EnemyMadTinkererRayCast"
tt.timed_attacks.list[1].count_group_name = "enemy_mad_tinkerer"
tt.timed_attacks.list[1].count_group_type = COUNT_GROUP_CONCURRENT
tt.timed_attacks.list[1].count_group_max = b.clone.max_total
tt.nodes_limit = b.clone.nodes_limit
tt.sound_summon = "EnemyMadTinkererSummon"
tt = E:register_t("enemy_scrap_drone", "enemy_KR5")

E:add_comps(tt, "tween")

local b = balance.enemies.hammer_and_anvil.scrap_drone

tt.info.enc_icon = 20
tt.info.portrait = "gui_bottom_info_image_enemies_0081"
tt.enemy.gold = b.gold
tt.enemy.lives_cost = b.lives_cost
tt.flight_height = 40
tt.health.hp_max = b.hp
tt.health_bar.offset = v(0, tt.flight_height + 35)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_surveillance_sentry.update
tt.motion.max_speed = b.speed
tt.render.sprites[1].offset = v(0, tt.flight_height)
tt.render.sprites[1].name = "raise"
tt.render.sprites[1].prefix = "scrap_drone_creep"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "scrap_drone_shadow"
tt.render.sprites[2].offset = v(0, 0)
tt.sound_events.death = "EnemyScrapDroneDeath"
tt.ui.click_rect = r(-18, tt.flight_height - 5, 36, 36)
tt.unit.can_explode = false
tt.unit.hide_after_death = true
tt.unit.disintegrate_fx = "fx_enemy_desintegrate_air"
tt.unit.hit_offset = v(0, tt.flight_height + 15)
tt.unit.head_offset = v(0, 5)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, tt.flight_height + 15)
tt.unit.size = UNIT_SIZE_SMALL
tt.unit.show_blood_pool = false
tt.unit.blood_color = BLOOD_GRAY
tt.vis.bans = bor(F_BLOCK, F_SKELETON)
tt.vis.flags = bor(F_ENEMY, F_FLYING)
tt.tween.disabled = true
tt.tween.remove = false
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	}
}
tt.tween.props[1].sprite_id = 2
tt = E:register_t("enemy_brute_welder", "enemy_KR5")

local b = balance.enemies.hammer_and_anvil.brute_welder

E:add_comps(tt, "melee", "death_spawns")

tt.info.enc_icon = 3
tt.info.portrait = "gui_bottom_info_image_enemies_0078"
tt.info.fn = scripts.enemy_brute_welder.get_info
tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(37, 0)
tt.enemy.lives_cost = b.lives_cost
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 40)
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_brute_welder.update
tt.melee.attacks[1] = E:clone_c("aura_attack")
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].animation = "attack"
tt.melee.attacks[1].aura = "aura_enemy_brute_welder"
tt.melee.attacks[1].hit_time = fts(13)
tt.melee.attacks[1].aura_offset = v(b.basic_attack.flame.radius, 0)
tt.melee.attacks[1].vis_bans = 0
tt.melee.attacks[1].vis_flags = bor(F_AREA, F_BURN, F_ENEMY)
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "brute_welder_creep"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.render.sprites[1].draw_order = DO_ENEMY_BIG
tt.sound_events.death = "EnemyBruteWelderDeath"
tt.ui.click_rect = r(-20, -3, 40, 33)
tt.unit.hit_offset = v(0, 22)
tt.unit.head_offset = v(0, 10)
tt.unit.marker_offset = v(-1, 0)
tt.unit.mod_offset = v(0, 14)
tt.unit.size = UNIT_SIZE_MEDIUM
tt.unit.can_explode = false
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM_MEDIUM
tt.death_spawns.name = "controller_enemy_brute_welder_death"
tt.death_spawns.delay = fts(30)
tt = E:register_t("controller_enemy_brute_welder_death")

local b = balance.enemies.hammer_and_anvil.brute_welder

E:add_comps(tt, "main_script", "render")

tt.main_script.update = scripts.controller_enemy_brute_welder_death.update
tt.render.sprites[1].name = "brute_welder_tank_projectile"
tt.render.sprites[1].animated = false
tt.render.sprites[1].hidden = true
tt.missile_t = "bullet_enemy_brute_welder_death"
tt.missile_range = b.death_missile.range
tt.shoot_sound = nil
tt.spawn_offset = v(-5, 20)
tt.mark_mod = "mod_bullet_enemy_brute_welder_death_mark"
tt = E:register_t("enemy_scrap_speedster", "enemy_KR5")

local b = balance.enemies.hammer_and_anvil.scrap_speedster

E:add_comps(tt, "melee", "death_spawns")

tt.info.enc_icon = 3
tt.info.portrait = "gui_bottom_info_image_enemies_0075"
tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(20, 0)
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 32)
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_scrap_speedster.update
tt.main_script.remove = scripts.enemy_scrap_speedster.remove
tt.melee.attacks[1] = E:clone_c("melee_attack")
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].animation = "attack"
tt.melee.attacks[1].hit_time = fts(15)
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "scrap_speedster_creep"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.sound_events.death = "EnemyScrapSpeedsterDeath"
tt.ui.click_rect = r(-17, -3, 34, 30)
tt.unit.hit_offset = v(0, 11)
tt.unit.head_offset = v(0, 10)
tt.unit.marker_offset = v(-1, 0)
tt.unit.mod_offset = v(0, 11)
tt.unit.size = UNIT_SIZE_SMALL
tt.unit.can_explode = false
tt.unit.show_blood_pool = false
tt.unit.blood_color = BLOOD_GRAY
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.death_spawns.name = "decal_scrap"
tt.death_spawns.delay = fts(14)
tt.trail_t = "ps_enemy_scrap_speedster_trail"
tt = E:register_t("enemy_common_clone", "enemy_KR5")

local b = balance.enemies.hammer_and_anvil.common_clone

E:add_comps(tt, "melee")

tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(20, 0)
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 32)
tt.info.enc_icon = 1
tt.info.portrait = "gui_bottom_info_image_enemies_0072"
tt.unit.hit_offset = v(0, 14)
tt.unit.head_offset = v(0, 5)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, 10)
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_mixed.update
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].hit_time = fts(10)
tt.melee.attacks[1].hit_fx = "fx_enemy_common_clone_hit"
tt.melee.attacks[1].hit_offset = v(20, 10)
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "common_clone_creep"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.sound_events.death = "EnemyCommonCloneDeath"
tt.ui.click_rect = r(-13, 0, 26, 26)
tt = E:register_t("enemy_darksteel_fist", "enemy_KR5")

local b = balance.enemies.hammer_and_anvil.darksteel_fist

E:add_comps(tt, "melee")

tt.info.enc_icon = 3
tt.info.portrait = "gui_bottom_info_image_enemies_0079"
tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(30, 0)
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 32)
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_darksteel_fist.update
tt.melee.attacks[1] = E:clone_c("melee_attack")
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].animation = "attack"
tt.melee.attacks[1].hit_times = {
	fts(3),
	fts(12)
}
tt.melee.attacks[1].hit_fx = "fx_enemy_darksteel_fist_hit"
tt.melee.attacks[1].hit_offset = v(35, 10)
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_type = b.basic_attack.damage_type
tt.melee.attacks[2] = E:clone_c("area_attack")
tt.melee.attacks[2].cooldown = b.stun_attack.cooldown
tt.melee.attacks[2].animation = "stun"
tt.melee.attacks[2].hit_time = fts(18)
tt.melee.attacks[2].hit_decal = "decal_enemy_darksteel_fist_stun"
tt.melee.attacks[2].hit_fx = "fx_enemy_darksteel_fist_area"
tt.melee.attacks[2].hit_offset = v(35, 0)
tt.melee.attacks[2].damage_min = b.stun_attack.damage_min
tt.melee.attacks[2].damage_max = b.stun_attack.damage_max
tt.melee.attacks[2].damage_radius = b.stun_attack.damage_radius
tt.melee.attacks[2].damage_type = b.stun_attack.damage_type
tt.melee.attacks[2].mod = "mod_enemy_darksteel_fist_stun"
tt.melee.attacks[2].sound = "EnemyDarksteelFistStun"
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "darksteel_fist_creep"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.sound_events.death = "EnemyDarksteelFistDeath"
tt.ui.click_rect = r(-20, -3, 40, 28)
tt.unit.hit_offset = v(0, 11)
tt.unit.head_offset = v(0, 10)
tt.unit.marker_offset = v(-1, 0)
tt.unit.mod_offset = v(0, 11)
tt.unit.size = UNIT_SIZE_SMALL
tt.unit.can_explode = false
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt = E:register_t("enemy_darksteel_guardian", "enemy_KR5")
b = balance.enemies.hammer_and_anvil.darksteel_guardian

E:add_comps(tt, "melee", "death_spawns")

tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(37, 0)
tt.enemy.lives_cost = b.lives_cost
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 60)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM_LARGE
tt.info.enc_icon = 9
tt.info.portrait = "gui_bottom_info_image_enemies_0084"
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_darksteel_guardian.update
tt.melee.attacks[1] = E:clone_c("area_attack")
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].damage_radius = b.basic_attack.damage_radius
tt.melee.attacks[1].damage_type = b.basic_attack.damage_type
tt.melee.attacks[1].hit_time = fts(16)
tt.melee.attacks[1].animation = "attack"
tt.melee.attacks[1].hit_fx = "fx_enemy_darksteel_guardian_hit_1"
tt.melee.attacks[1].hit_offset = v(40, 15)
tt.melee.attacks[1].sound = "EnemyDarksteelGuardianAttack"
tt.melee.attacks[2] = E:clone_c("melee_attack")
tt.melee.attacks[2].cooldown = b.rage_attack.cooldown
tt.melee.attacks[2].damage_max = b.rage_attack.damage_max
tt.melee.attacks[2].damage_min = b.rage_attack.damage_min
tt.melee.attacks[2].damage_type = b.rage_attack.damage_type
tt.melee.attacks[2].hit_times = {
	fts(14),
	fts(24)
}
tt.melee.attacks[2].animation = "attack_2"
tt.melee.attacks[2].hit_offset = v(40, 15)
tt.melee.attacks[2].hit_fx = "fx_enemy_darksteel_guardian_hit_2"
tt.melee.attacks[2].disabled = true
tt.melee.attacks[2].sound = "EnemyDarksteelRageAttack"
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "darksteel_guardian_creep"
tt.render.sprites[1].name = "idle_1"
tt.render.sprites[1].angles.walk = {
	"walk_1",
	"walk_front_1",
	"walk_front_1"
}
tt.render.sprites[1].draw_order = DO_ENEMY_BIG
tt.render.sprites[1].scale = vv(1.1)
tt.ui.click_rect = r(-32, -3, 64, 60)
tt.unit.hit_offset = v(0, 22)
tt.unit.head_offset = v(0, 10)
tt.unit.marker_offset = v(-1, 0)
tt.unit.mod_offset = v(0, 19)
tt.unit.size = UNIT_SIZE_MEDIUM
tt.unit.can_explode = false
tt.unit.hide_after_death = true
tt.unit.show_blood_pool = false
tt.unit.blood_color = BLOOD_GRAY
tt.vis.flags = bor(F_ENEMY, F_MINIBOSS)
tt.vis.bans = bor(F_STUN)
tt.start_asleep = false
tt.rage_hp_trigger = b.rage_hp_trigger
tt.death_spawns.name = "controller_darksteel_guardian_death"
tt.death_spawns.delay = fts(35)
tt.legs_t = "decal_enemy_darksteel_guardian_legs"
tt.sound_events.death = "EnemyDarksteelGuardianDeath"
tt.sound_activation = "EnemyDarksteelGuardianActivation"
tt.sound_rock = "EnemyDarksteelGuardianRock"
tt.sound_enrage = "EnemyDarksteelEnrage"
tt = E:register_t("controller_darksteel_guardian")

E:add_comps(tt, "main_script", "editor")

tt.main_script.insert = scripts.controller_darksteel_guardian.insert
tt.guardian_t = "enemy_darksteel_guardian"
tt.editor.flip_x = false
tt.editor.path = 1
tt.editor.props = {
	{
		"editor.flip_x",
		PT_NUMBER
	},
	{
		"editor.path",
		PT_NUMBER
	}
}
tt = E:register_t("controller_darksteel_guardian_death")
b = balance.enemies.hammer_and_anvil.darksteel_guardian

E:add_comps(tt, "main_script", "render")

tt.main_script.update = scripts.controller_darksteel_guardian_death.update
tt.render.sprites[1].name = "darksteel_guardian_dwarf_projectile"
tt.render.sprites[1].animated = false
tt.render.sprites[1].hidden = true
tt.clone_t = "bullet_enemy_darksteel_guardian_death"
tt.nodes_range = 20
tt.shoot_sound = nil
tt.spawn_offset = v(0, 20)
tt.legs_t = "decal_enemy_darksteel_guardian_legs"
tt.explotion_damage_min = b.death_explotion.damage_min
tt.explotion_damage_max = b.death_explotion.damage_max
tt.explotion_damage_radius = b.death_explotion.damage_radius
tt.explotion_damage_type = b.death_explotion.damage_type
tt.explotion_vis_bans = bor(F_ENEMY)
tt.explotion_vis_flags = bor(F_AREA, F_ENEMY)
tt = E:register_t("controller_basic_clone_darksteel_guardian", "enemy_KR5")
b = balance.enemies.hammer_and_anvil.common_clone
tt.info.portrait = "gui_bottom_info_image_enemies_0067"
tt.motion.max_speed = b.speed
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.controller_basic_clone_darksteel_guardian.update
tt.render.sprites[1].prefix = "common_clone_creep"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.vis.bans = F_ALL
tt.ui.can_click = false
tt.guardian_t = "enemy_darksteel_guardian"
tt = E:register_t("enemy_darksteel_anvil", "enemy_KR5")

local b = balance.enemies.hammer_and_anvil.darksteel_anvil

E:add_comps(tt, "melee", "ranged", "timed_attacks")

tt.info.enc_icon = 3
tt.info.portrait = "gui_bottom_info_image_enemies_0082"
tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(30, 0)
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 40)
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_darksteel_anvil.update
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].damage_type = b.basic_attack.damage_type
tt.melee.attacks[1].hit_times = {
	fts(14)
}
tt.melee.attacks[1].animation = "attack_2"
tt.melee.attacks[1].hit_offset = v(40, 15)
tt.ranged.attacks[1] = E:clone_c("bullet_attack")
tt.ranged.attacks[1].cooldown = b.basic_ranged.cooldown
tt.ranged.attacks[1].max_range = b.basic_ranged.max_range
tt.ranged.attacks[1].min_range = b.basic_ranged.min_range
tt.ranged.attacks[1].bullet = "bullet_darksteel_anvil"
tt.ranged.attacks[1].bullet_start_offset = {
	v(20, 10),
	v(-20, 10)
}
tt.ranged.attacks[1].vis_flags = bor(F_RANGED)
tt.ranged.attacks[1].shoot_times = {
	fts(12),
	fts(20)
}
tt.ranged.attacks[1].loops = 1
tt.ranged.attacks[1].animations = {
	"idle",
	"attack",
	"idle"
}
tt.timed_attacks.list[1] = E:clone_c("aura_attack")
tt.timed_attacks.list[1].animation_in = "skill_in"
tt.timed_attacks.list[1].animation_loop = "skill_loop"
tt.timed_attacks.list[1].animation_end = "skill_out"
tt.timed_attacks.list[1].cooldown = b.aura.cooldown
tt.timed_attacks.list[1].max_range = b.aura.trigger_range
tt.timed_attacks.list[1].min_targets = b.aura.min_targets
tt.timed_attacks.list[1].duration = b.aura.duration
tt.timed_attacks.list[1].nodes_limit_start = b.aura.nodes_limit_start
tt.timed_attacks.list[1].nodes_limit_end = b.aura.nodes_limit_end
tt.timed_attacks.list[1].aura = "aura_enemy_darksteel_anvil"
tt.timed_attacks.list[1].vis_flags = bor(F_MOD)
tt.timed_attacks.list[1].vis_bans = 0
tt.timed_attacks.list[1].sound = "EnemyDarksteelAnvilBeat"
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "darksteel_anvil_creep"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.sound_events.death = "EnemyDarksteelAnvilDeath"
tt.ui.click_rect = r(-20, -3, 40, 28)
tt.unit.hit_offset = v(0, 11)
tt.unit.head_offset = v(0, 10)
tt.unit.marker_offset = v(-1, 0)
tt.unit.mod_offset = v(0, 11)
tt.unit.size = UNIT_SIZE_SMALL
tt.unit.can_explode = false
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt = E:register_t("enemy_darksteel_hulk", "enemy_KR5")

local b = balance.enemies.hammer_and_anvil.darksteel_hulk

E:add_comps(tt, "melee", "timed_attacks")

tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(37, 0)
tt.enemy.lives_cost = b.lives_cost
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 57)
tt.info.enc_icon = 10
tt.info.portrait = "gui_bottom_info_image_enemies_0083"
tt.unit.hit_offset = v(0, 20)
tt.unit.head_offset = v(0, 0)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, 10)
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_darksteel_hulk.update
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].hit_time = fts(14)
tt.melee.attacks[1].sound = "EnemyRazingRhinoBasicAttack"
tt.timed_attacks.list[1] = E:clone_c("custom_attack")
tt.timed_attacks.list[1].cast_time = fts(21)
tt.timed_attacks.list[1].animation = "charge"
tt.timed_attacks.list[1].cooldown = b.charge.cooldown
tt.timed_attacks.list[1].speed_mult = b.charge.speed_mult
tt.timed_attacks.list[1].health_threshold = b.charge.health_threshold
tt.timed_attacks.list[1].min_distance_from_end = b.charge.min_distance_from_end
tt.timed_attacks.list[1].vis_flags = F_FRIEND
tt.timed_attacks.list[1].vis_bans = bor(F_HERO, F_FLYING)
tt.timed_attacks.list[1].vis_flags_enemies = F_RANGED
tt.timed_attacks.list[1].vis_bans_enemies = F_BOSS
tt.timed_attacks.list[1].vis_flags_soldiers = F_RANGED
tt.timed_attacks.list[1].vis_bans_soldiers = bor(F_BOSS, F_FLYING)
tt.timed_attacks.list[1].mod_enemy = "mod_enemy_darksteel_hulk_charge_enemy"
tt.timed_attacks.list[1].mod_soldier = "mod_enemy_darksteel_hulk_charge_soldier"
tt.timed_attacks.list[1].range = b.charge.range
tt.timed_attacks.list[1].particles_name_a = "ps_enemy_darksteel_hulk_charge_a"
tt.timed_attacks.list[1].particles_name_b = "ps_enemy_darksteel_hulk_charge_b"
tt.timed_attacks.list[1].sound = "EnemyDarksteelHulkCharge"
tt.timed_attacks.list[1].charge_while_blocked = b.charge.charge_while_blocked
tt.timed_attacks.list[1].damage_enemies = b.charge.damage_enemy_max > 0
tt.timed_attacks.list[1].damage_soldiers = b.charge.damage_soldier_max > 0
tt.timed_attacks.list[1].unstoppable_duration = b.charge.unstoppable_duration
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "darksteel_hulk_creep"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.render.sprites[1].angles.charge = {
	"charge_side",
	"charge_back",
	"charge_front"
}
tt.render.sprites[1].angles_custom = {
	charge = {
		55,
		115,
		245,
		305
	}
}
tt.ui.click_rect = r(-24, -3, 48, 46)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM_LARGE
tt.unit.size = UNIT_SIZE_MEDIUM
tt.unit.can_explode = false
tt.unit.can_explode = false
tt.vis.flags = bor(F_ENEMY, F_MINIBOSS)
tt.sound_events.death = "EnemyDarksteelHulkDeath"
tt.base_speed = b.speed
tt = E:register_t("enemy_machinist", "enemy_KR5")
b = balance.enemies.hammer_and_anvil.machinist

E:add_comps(tt, "melee", "regen")

tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(37, 0)
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 45)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.regen.cooldown = b.regen_cooldown
tt.regen.health = b.regen_health
tt.info.enc_icon = 9
tt.info.portrait = "gui_bottom_info_image_enemies_0085"
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_machinist.update
tt.melee.attacks[1] = E:clone_c("melee_attack")
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].damage_type = b.basic_attack.damage_type
tt.melee.attacks[1].hit_time = fts(14)
tt.melee.attacks[1].animation = "attack"
tt.melee.attacks[1].hit_offset = v(20, 12)
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "dlc_dwarf_boss_operator_bossengineer"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].angles.idle = {
	"idle",
	"idle"
}
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk"
}
tt.ui.click_rect = r(-23, -3, 46, 40)
tt.unit.hit_offset = v(0, 22)
tt.unit.head_offset = v(0, 10)
tt.unit.marker_offset = v(-1, 0)
tt.unit.mod_offset = v(0, 19)
tt.unit.size = UNIT_SIZE_MEDIUM
tt.unit.can_explode = false
tt.unit.can_disintegrate = false
tt.vis.flags = bor(F_ENEMY, F_MINIBOSS)
tt.vis.bans = bor(F_TELEPORT)
tt.operation_pos = v(-1, 385)
tt.timeout = b.timeout
tt.op_cd = b.operation_cd
tt.op_needed = b.operations_needed
tt.sound_lever = {
	"Stage24MachinistLever1",
	"Stage24MachinistLever2",
	"Stage24MachinistLever3"
}
tt.sound_factory_on = "Stage24FactoryTurnOnStart"
tt = E:register_t("enemy_deformed_grymbeard_clone", "enemy_KR5")

E:add_comps(tt)

local b = balance.enemies.hammer_and_anvil.deformed_grymbeard_clone

tt.info.enc_icon = 20
tt.info.portrait = "gui_bottom_info_image_enemies_0087"
tt.enemy.gold = b.gold
tt.enemy.lives_cost = b.lives_cost
tt.flight_height = 25
tt.health.hp_max = b.hp
tt.health_bar.offset = v(0, tt.flight_height + 45)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM_MEDIUM
tt.health.armor = b.armor
tt.health.magic_armor = b.shield_magic_armor
tt.main_script.insert = scripts.enemy_deformed_grymbeard_clone.insert
tt.main_script.update = scripts.enemy_deformed_grymbeard_clone.update
tt.main_script.remove = scripts.enemy_deformed_grymbeard_clone.remove
tt.motion.max_speed = b.speed
tt.render.sprites[1].offset = v(0, tt.flight_height)
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].prefix = "clone_boss_creep"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk",
	"walk_front"
}
tt.render.sprites[1].scale = vv(0.9)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "scrap_drone_shadow"
tt.render.sprites[2].offset = v(0, 0)
tt.render.sprites[2].scale = vv(0.9)
tt.sound_events.death = "EnemyPatrollingVultureDeath"
tt.ui.click_rect = r(-18, tt.flight_height - 5, 36, 45)
tt.unit.can_explode = false
tt.unit.hide_after_death = true
tt.unit.disintegrate_fx = "fx_enemy_desintegrate_air"
tt.unit.hit_offset = v(0, tt.flight_height + 15)
tt.unit.head_offset = v(0, 5)
tt.unit.marker_offset = v(0, 0)
tt.unit.mod_offset = v(0, tt.flight_height + 15)
tt.unit.size = UNIT_SIZE_SMALL
tt.unit.show_blood_pool = false
tt.unit.blood_color = BLOOD_GRAY
tt.vis.bans = bor(F_BLOCK, F_SKELETON, F_POLYMORPH)
tt.vis.flags = bor(F_ENEMY, F_FLYING)
tt.shield_hp_threshold = b.shield_hp_threshold
tt.no_shield_speed_factor = b.speed_factor
tt.shield_t = "fx_enemy_deformed_grymbeard_clone_shield"

tt = E:register_t("enemy_spider_priest", "enemy_KR5")

local b = balance.enemies.arachnids.spider_priest

E:add_comps(tt, "melee", "ranged", "death_spawns")

tt.enemy.gold = b.gold
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health.dead_lifetime = 5
tt.info.enc_icon = 17
tt.info.portrait = "gui_bottom_info_image_enemies_0091"
tt.main_script.insert = scripts.enemy_basic_with_random_range.insert
tt.main_script.update = scripts.enemy_spider_priest.update
tt.melee.attacks[1].animation = "hit"
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].hit_time = fts(12)
tt.ranged.attacks[1].animation = "spell"
tt.ranged.attacks[1].bullet = "bullet_enemy_spider_priest"
tt.ranged.attacks[1].hold_advance = false
tt.ranged.attacks[1].shoot_time = fts(25)
tt.ranged.attacks[1].cooldown = b.ranged_attack.cooldown
tt.ranged.attacks[1].max_range = b.ranged_attack.max_range
tt.ranged.attacks[1].max_range_variance = 60
tt.ranged.attacks[1].min_range = b.ranged_attack.min_range
tt.ranged.attacks[1].bullet_start_offset = {
	v(0, 40)
}
tt.ranged.attacks[1].vis_flags = bor(F_RANGED)
tt.motion.max_speed = b.speed
tt.health_trigger_factor = b.health_trigger_factor
tt.death_spawns.name = "enemy_glarenwarden"
tt.death_spawns.concurrent_with_death = false
tt.death_spawns.delay = fts(32)
tt.death_spawns.death_animation = "transformation"
tt.death_spawns.dead_lifetime = 0
tt.render.sprites[1].prefix = "cultist_spider_creep"
tt.render.sprites[1].angles.walk = {
	"side_walking",
	"walk_back",
	"walk_front"
}
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.health_bar.offset = v(0, 39)
tt.unit.show_blood_pool = false
tt.unit.hit_offset = v(0, 16)
tt.unit.head_offset = v(0, 16)
tt.unit.mod_offset = v(0, 16)
tt.enemy.melee_slot = v(25, 0)
tt.transformation_nodes_limit = b.transformation_nodes_limit
tt.transformation_time = b.transformation_time
tt.transformation_anim = "transformation"
tt.transformation_sound = "EnemyUnblindedPriestTransformCast"
tt.transformation_end_sound = "EnemySpiderPriestTransform"
tt.sound_events.death = "EnemyUnblindedPriestDeath"
tt.ui.click_rect = r(-15, -3, 30, 32)
tt = E:register_t("enemy_glarenwarden", "enemy_KR5")
b = balance.enemies.arachnids.glarenwarden

E:add_comps(tt, "melee", "cliff")

tt.enemy.gold = b.gold
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.info.enc_icon = 9
tt.info.portrait = "gui_bottom_info_image_enemies_0094"
tt.info.i18n_key = "ENEMY_GLARENWARDEN"
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_glarenwarden.update
tt.melee.attacks[1].animation = "attack"
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].hit_time = fts(15)
tt.melee.attacks[1].mod = "mod_enemy_glarenwarden_melee_lifesteal"
tt.melee.attacks[1].sound = "EnemyGlarenwardenMelee"
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "glarenwarden_creep"
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_up",
	"walk_down"
}
tt.ui.click_rect = r(-20, -3, 40, 35)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.health_bar.offset = v(0, 50)
tt.unit.show_blood_pool = false
tt.unit.hit_offset = v(0, 25)
tt.unit.head_offset = v(0, 25)
tt.unit.mod_offset = v(0, 19)
tt.unit.size = UNIT_SIZE_LARGE
tt.enemy.melee_slot = v(30, 0)
tt.cliff.fall_accel = 400
tt.sound_events.death = "EnemyGlarenwardenDeath"
tt = E:register_t("enemy_ballooning_spider", "enemy_KR5")

E:add_comps(tt, "tween")

local b = balance.enemies.arachnids.ballooning_spider

tt.info.enc_icon = 16
tt.info.portrait = "gui_bottom_info_image_enemies_0090"
tt.enemy.gold = b.gold
tt.flight_height = 47
tt.fly_strenght = -10
tt.fly_frequency = 25
tt.health.hp_max = b.hp
tt.health_bar.offset = v(0, 23)
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_ballooning_spider.update
tt.motion.max_speed = b.speed
tt.base_speed = b.speed
tt.render.sprites[1].prefix = "balooning_spider_exo_creep"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_up",
	"walk_down"
}
tt.render.sprites[1].angles.takeoff = {
	"takeoff",
	"takeoff_up",
	"takeoff_down"
}
tt.render.sprites[1].angles_stickiness = {
	takeoff = 15,
	walk = 15
}
tt.render.sprites[1].anchor = vv(0.5)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "decal_flying_shadow_hard"
tt.render.sprites[2].offset = v(0, 0)
tt.render.sprites[2].scale = vv(0.9)
tt.render.sprites[2].hidden = true
tt.ui.click_rect = r(-15, -5, 30, 30)
tt.unit.can_explode = false
tt.unit.hide_after_death = true
tt.unit.hit_offset = v(0, 7)
tt.unit.head_offset = v(0, 7)
tt.unit.mod_offset = v(0, 7)
tt.unit.marker_offset = v(0, 0)
tt.vis.bans = bor(F_BLOCK)
tt.unit.size = UNIT_SIZE_SMALL
tt.unit.show_blood_pool = false
tt.sound_events.death = "EnemySpiderlingDeath"
tt.detection_range = b.detection_range
tt.detection_flags = bor(F_FRIEND, F_BLOCK)
tt.detection_bans = bor(F_FLYING)
tt.takeoff = {}
tt.takeoff.health_bar_offset_mid = v(0, tt.flight_height + 20)
tt.takeoff.health_bar_offset = v(0, tt.flight_height + 75)
tt.takeoff.sprite_offset = v(0, tt.flight_height)
tt.takeoff.ui_click_rect = r(-15, tt.flight_height + 15, 30, 30)
tt.takeoff.disintegrate_fx = "fx_enemy_desintegrate_air"
tt.takeoff.hit_offset = v(0, tt.flight_height + 20)
tt.takeoff.mod_offset = v(0, tt.flight_height + 20)
tt.takeoff.max_speed = b.speed_air
tt.takeoff.anims_prefix = "balooning_spider_exo_creep_air"
tt.tween.disabled = true
tt.tween.remove = false
tt.tween.props[1].name = "offset"
tt.tween.props[1].interp = "sine"
tt.tween.props[1].keys = {
	{
		fts(0),
		v(0, tt.flight_height)
	},
	{
		fts(tt.fly_frequency),
		v(0, tt.flight_height - tt.fly_strenght)
	},
	{
		fts(tt.fly_frequency * 2),
		v(0, tt.flight_height)
	}
}
tt.tween.props[1].loop = true
tt.tween.props[1].disabled = false
tt.tween.props[1].remove = false
tt = E:register_t("enemy_ballooning_spider_flyer", "enemy_ballooning_spider")
tt.vis.flags = bor(tt.vis.flags, F_FLYING)
tt = E:register_t("enemy_spider_sister", "enemy_KR5")

local b = balance.enemies.arachnids.spider_sister

E:add_comps(tt, "melee", "ranged", "timed_attacks")

tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(15, 0)
tt.health.hp_max = b.hp
tt.health.magic_armor = b.magic_armor
tt.health.armor = b.armor
tt.health.dead_lifetime = 3
tt.health_bar.offset = v(0, 38)
tt.unit.hit_offset = v(0, 21)
tt.unit.head_offset = v(0, 21)
tt.unit.mod_offset = v(0, 13)
tt.unit.show_blood_pool = false
tt.ui.click_rect = r(-20, -3, 40, 35)
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "spider_sister_enemy"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.sound_events.death = "EnemyTwistedSisterDeath"
tt.info.i18n_key = "ENEMY_SPIDER_SISTER"
tt.info.enc_icon = 14
tt.info.portrait = "gui_bottom_info_image_enemies_0092"
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_spider_sister.update
tt.vis.flags = bor(tt.vis.flags, F_SPELLCASTER)
tt.melee.attacks[1].cooldown = b.melee_attack.cooldown
tt.melee.attacks[1].damage_max = b.melee_attack.damage_max
tt.melee.attacks[1].damage_min = b.melee_attack.damage_min
tt.melee.attacks[1].animation = "attack_1"
tt.melee.attacks[1].hit_time = fts(18)
tt.ranged.attacks[1].bullet = "spider_sister_bolt"
tt.ranged.attacks[1].bullet_start_offset = {
	v(20, 13)
}
tt.ranged.attacks[1].cooldown = b.ranged_attack.cooldown
tt.ranged.attacks[1].max_range = b.ranged_attack.max_range
tt.ranged.attacks[1].min_range = 0
tt.ranged.attacks[1].animation = "attack_1"
tt.ranged.attacks[1].shoot_time = fts(18)
tt.ranged.attacks[1].hold_advance = true
tt.timed_attacks.list[1] = E:clone_c("custom_attack")
tt.timed_attacks.list[1].animation = "ability_1"
tt.timed_attacks.list[1].cast_time = fts(14)
tt.timed_attacks.list[1].cooldown = b.spiderlings_summon.cooldown
tt.timed_attacks.list[1].cooldown_init = b.spiderlings_summon.cooldown_init
tt.timed_attacks.list[1].cooldown_increment = b.spiderlings_summon.cooldown_increment
tt.timed_attacks.list[1].cooldown_max = b.spiderlings_summon.cooldown_max
tt.timed_attacks.list[1].range = b.spiderlings_summon.max_range
tt.timed_attacks.list[1].max_targets = 1
tt.timed_attacks.list[1].entity = "enemy_glarebrood_crystal"
tt.timed_attacks.list[1].spawn_delay = 0
tt.timed_attacks.list[1].sound = "EnemySpiderSisterSpawn"
tt.timed_attacks.list[1].count_group_name = "enemy_spiderling"
tt.timed_attacks.list[1].count_group_type = COUNT_GROUP_CONCURRENT
tt.timed_attacks.list[1].count_group_max = b.spiderlings_summon.max_total
tt.nodes_limit = b.spiderlings_summon.nodes_limit
tt.node_random_min = b.spiderlings_summon.nodes_random_min
tt.node_random_max = b.spiderlings_summon.nodes_random_max
tt = E:register_t("enemy_glarebrood_crystal", "enemy_KR5")
b = balance.enemies.arachnids.glarebrood_crystal

E:add_comps(tt, "death_spawns")

tt.enemy.gold = b.gold
tt.health.hp_max = b.hp
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.info.enc_icon = 9
tt.info.portrait = "gui_bottom_info_image_enemies_0093"
tt.info.i18n_key = "ENEMY_GLAREBROOD_CRYSTAL"
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_glarebrood_crystal.update
tt.render.sprites[1].prefix = "glarebrood_crystal_enemy"
tt.render.sprites[1].anchor = v(0.5, 0.5364583333333334)
tt.ui.click_rect = r(-20, -3, 40, 30)
tt.health_bar.offset = v(0, 25)
tt.unit.show_blood_pool = false
tt.unit.hit_offset = v(0, 10)
tt.unit.head_offset = v(0, 0)
tt.unit.mod_offset = v(0, 10)
tt.enemy.melee_slot = v(18, 0)
tt.unit.size = UNIT_SIZE_SMALL
tt.death_spawns.name = "enemy_spiderling_from_crystal"
tt.death_spawns.concurrent_with_death = false
tt.death_spawns.death_animation = "glarebrood_in"
tt.death_spawns.dead_lifetime = 0
tt.transform_anim = "glarebrood_in"
tt.transform_time = b.transformation_time
tt.sound_events.death = "EnemySpiderlingDeath"
tt.hp_threshold_1 = {
	0.66,
	"degradacion_1"
}
tt.hp_threshold_2 = {
	0.33,
	"degradacion_2"
}
tt = E:register_t("enemy_spiderling_from_crystal", "enemy_spiderling")
b = balance.enemies.arachnids.glarebrood_crystal.spiderling_spawn
tt.enemy.gold = b.gold
tt.info.portrait = "gui_bottom_info_image_enemies_0089"
tt = E:register_t("enemy_cultbrood", "enemy")
b = balance.enemies.arachnids.cultbrood

E:add_comps(tt, "melee")

tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(25, 0)
tt.health.hp_max = b.hp
tt.health.magic_armor = b.magic_armor
tt.health.armor = b.armor
tt.health.dead_lifetime = 3
tt.health_bar.offset = v(0, 55)
tt.unit.hit_offset = v(0, 23)
tt.unit.head_offset = v(0, 26)
tt.unit.mod_offset = v(0, 25)
tt.unit.show_blood_pool = false
tt.ui.click_rect = r(-20, -3, 40, 35)
tt.unit.size = UNIT_SIZE_MEDIUM
tt.motion.max_speed = b.speed
tt.info.i18n_key = "ENEMY_CULTBROOD"
tt.info.enc_icon = 14
tt.info.portrait = "gui_bottom_info_image_enemies_0095"
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].prefix = "cultbrood_unit"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.ui.click_rect = r(-20, 0, 40, 45)
tt.unit.show_blood_pool = false
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_cultbrood.update
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].damage_type = b.basic_attack.damage_type
tt.melee.attacks[1].animation = "attack1"
tt.melee.attacks[1].hit_time = fts(14)
tt.melee.attacks[1].sound = "EnemyCultbroodMelee"
tt.melee.attacks[2] = E:clone_c("melee_attack")
tt.melee.attacks[2].animation = "attack2"
tt.melee.attacks[2].cooldown = b.poison_attack.cooldown
tt.melee.attacks[2].cooldown_init = b.poison_attack.cooldown_init
tt.melee.attacks[2].damage_max = b.poison_attack.damage_max
tt.melee.attacks[2].damage_min = b.poison_attack.damage_min
tt.melee.attacks[2].damage_type = b.poison_attack.damage_type
tt.melee.attacks[2].hit_time = fts(14)
tt.melee.attacks[2].mod = "mod_cultbrood_poison"
tt.melee.attacks[2].sound = "EnemyCultbroodMelee"
tt.generation = 0
tt.spawn_time = b.spawn_time
tt.sound_events.death = "EnemyCultbroodDeath"
tt = E:register_t("enemy_drainbrood", "enemy")
b = balance.enemies.arachnids.drainbrood

E:add_comps(tt, "melee", "timed_attacks")

tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(30, 0)
tt.health.hp_max = b.hp
tt.health.magic_armor = b.magic_armor
tt.health.armor = b.armor
tt.health.dead_lifetime = 3
tt.health_bar.offset = v(0, 40)
tt.unit.hit_offset = v(0, 23)
tt.unit.head_offset = v(0, 23)
tt.unit.mod_offset = v(0, 21)
tt.unit.show_blood_pool = false
tt.ui.click_rect = r(-20, -3, 40, 33)
tt.unit.size = UNIT_SIZE_LARGE
tt.unit.blood_color = BLOOD_GREEN
tt.motion.max_speed = b.speed
tt.info.i18n_key = "ENEMY_DRAINBROOD"
tt.info.enc_icon = 14
tt.info.portrait = "gui_bottom_info_image_enemies_0096"
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].prefix = "drainblood_enemy"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.unit.show_blood_pool = false
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_drainbrood.update
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].damage_type = b.basic_attack.damage_type
tt.melee.attacks[1].animation = "attack"
tt.melee.attacks[1].hit_time = fts(10)
tt.melee.attacks[1].sound = "EnemyDrainbroodMelee"
tt.timed_attacks.list[1] = E:clone_c("mod_attack")
tt.timed_attacks.list[1].animation = "attack_spit"
tt.timed_attacks.list[1].cast_time = fts(11)
tt.timed_attacks.list[1].drain_time = fts(13)
tt.timed_attacks.list[1].cooldown = b.webspit.cooldown
tt.timed_attacks.list[1].mod = "mod_drainbrood_web"
tt.timed_attacks.list[1].damage_max = b.webspit.damage_max
tt.timed_attacks.list[1].damage_min = b.webspit.damage_min
tt.timed_attacks.list[1].damage_type = b.webspit.damage_type
tt.timed_attacks.list[1].heal_hp_damage_factor = b.webspit.lifesteal.damage_factor
tt.timed_attacks.list[1].heal_hp_fixed = b.webspit.lifesteal.fixed_heal
tt.timed_attacks.list[1].vis_flags = bor(F_NET, F_STUN)
tt.timed_attacks.list[1].vis_bans = bor(F_HERO)
tt = E:register_t("enemy_spidead", "enemy")
b = balance.enemies.arachnids.spidead

E:add_comps(tt, "melee", "death_spawns")

tt.enemy.gold = b.gold
tt.enemy.melee_slot = v(30, 0)
tt.health.hp_max = b.hp
tt.health.magic_armor = b.magic_armor
tt.health.armor = b.armor
tt.health.dead_lifetime = 3
tt.health_bar.offset = v(0, 40)
tt.unit.hit_offset = v(0, 23)
tt.unit.head_offset = v(0, 23)
tt.unit.mod_offset = v(0, 21)
tt.unit.show_blood_pool = false
tt.ui.click_rect = r(-20, -3, 40, 33)
tt.unit.size = UNIT_SIZE_LARGE
tt.unit.blood_color = BLOOD_GREEN
tt.motion.max_speed = b.speed
tt.info.i18n_key = "ENEMY_SPIDEAD"
tt.info.enc_icon = 14
tt.info.portrait = "gui_bottom_info_image_enemies_0098"
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].prefix = "spider_web_enemy"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.unit.show_blood_pool = false
tt.unit.hide_during_death = true
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_spidead.update
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].damage_type = b.basic_attack.damage_type
tt.melee.attacks[1].animation = "attack"
tt.melee.attacks[1].hit_time = fts(10)
tt.melee.attacks[1].sound = "EnemyDrainbroodMelee"
tt.death_spawns.name = "decal_spidead_spiderweb"
tt.death_spawns.concurrent_with_death = true
tt.death_spawns.delay = fts(30)
tt.nodes_to_prevent_web = b.nodes_to_prevent_web
tt = E:register_t("decal_spidead_spiderweb", "decal_tween")
b = balance.enemies.arachnids.spidead.spiderweb

E:add_comps(tt, "auras", "main_script")

tt.main_script.insert = scripts.decal_spidead_spiderweb.insert
tt.auras.list[1] = E:clone_c("aura_attack")
tt.auras.list[1].name = "aura_spider_webs_slowness"
tt.auras.list[1].cooldown = 0
tt.auras.list[2] = E:clone_c("aura_attack")
tt.auras.list[2].name = "aura_spider_webs_sprint"
tt.auras.list[2].cooldown = 0
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].name = "spider_queen_boss_effects_web_decal"
tt.render.sprites[1].animated = false
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.3,
		255
	},
	{
		b.duration - 0.8,
		255
	},
	{
		b.duration,
		0
	}
}
tt.tween.props[2] = table.deepclone(tt.tween.props[1])
tt.tween.props[2].name = "scale"
tt.tween.props[2].keys = {
	{
		0,
		vv(0.8)
	},
	{
		0.3,
		vv(1.1)
	},
	{
		0.4,
		vv(1)
	}
}
tt.tween.disabled = false
tt.tween.remove = true
tt = E:register_t("boss_spider_queen", "boss")
b = balance.enemies.arachnids.boss_spider_queen

E:add_comps(tt, "melee", "ranged", "timed_attacks")

tt.vis.flags_jumping = bor(F_ENEMY, F_BOSS)
tt.vis.bans_jumping = bor(F_RANGED, F_BLOCK, F_MOD)
tt.vis.flags_normal = bor(F_ENEMY, F_BOSS)
tt.vis.bans_normal = 0
tt.reach_nodes = b.reach_nodes
tt.jump_paths = b.jump_paths
tt.jump_nodes = b.jump_nodes
tt.enemy.gold = b.gold
tt.enemy.lives_cost = 999
tt.enemy.melee_slot = v(45, 0)
tt.health.hp_max = b.hp
tt.health.magic_armor = b.magic_armor
tt.health.armor = b.armor
tt.health.dead_lifetime = 1e+99
tt.health_bar.offset = v(0, 110)
tt.unit.hit_offset = v(0, 53)
tt.unit.head_offset = v(0, 53)
tt.unit.mod_offset = v(0, 51)
tt.unit.show_blood_pool = false
tt.ui.click_rect = r(-27, 25, 54, 45)
tt.unit.size = UNIT_SIZE_LARGE
tt.unit.blood_color = BLOOD_GREEN
tt.motion.max_speed = b.speed
tt.info.i18n_key = "ENEMY_BOSS_SPIDER_QUEEN"
tt.info.enc_icon = 14
tt.info.portrait = "gui_bottom_info_image_enemies_0097"
tt.info.portrait_boss = "boss_health_bar_icon_0010"
tt.health_bar.type = HEALTH_BAR_SIZE_LARGE
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].exo = true
tt.render.sprites[1].prefix = "spider_queen_animationsDef"
tt.render.sprites[1].angles = {}
tt.render.sprites[1].angles.walk = {
	"walk_side",
	"walk_up",
	"walk_down"
}
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "boss_effects_circle_drain"
tt.render.sprites[2].name = "loop"
tt.render.sprites[2].z = Z_DECALS
tt.render.sprites[2].hidden = true
tt.render.sprites[2].scale = vv(2.4)
tt.unit.show_blood_pool = false
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.boss_spider_queen.update
tt.melee.attacks[1] = E:clone_c("area_attack")
tt.melee.attacks[1].cooldown = b.basic_attack.cooldown
tt.melee.attacks[1].damage_max = b.basic_attack.damage_max
tt.melee.attacks[1].damage_min = b.basic_attack.damage_min
tt.melee.attacks[1].damage_type = b.basic_attack.damage_type
tt.melee.attacks[1].damage_radius = b.basic_attack.damage_radius
tt.melee.attacks[1].damage_radius = b.basic_attack.damage_radius
tt.melee.attacks[1].animation = "attack_melee"
tt.melee.attacks[1].hit_time = fts(14)
tt.melee.attacks[1].hit_fx = "fx_boss_spider_queen_melee_hit"
tt.melee.attacks[1].hit_fx_offset = v(55, 10)
tt.melee.attacks[1].hit_decal = "fx_boss_spider_queen_melee_hit_decal"
tt.ranged.attacks[1].bullet = "boss_queen_spider_bolt"
tt.ranged.attacks[1].bullet_start_offset = {
	v(23, 125)
}
tt.ranged.attacks[1].cooldown = b.ranged_attack.cooldown
tt.ranged.attacks[1].max_range = b.ranged_attack.max_range
tt.ranged.attacks[1].min_range = 0
tt.ranged.attacks[1].animation = "attack_range_1"
tt.ranged.attacks[1].shoot_time = fts(35)
tt.ranged.attacks[1].hold_advance = false
tt.timed_attacks.list[1] = E:clone_c("mod_attack")
tt.timed_attacks.list[1].animation_start = "attack_tower"
tt.timed_attacks.list[1].animation_end = "call"
tt.timed_attacks.list[1].cooldown = b.stun_towers.cooldown
tt.timed_attacks.list[1].nodes_limit = b.stun_towers.nodes_limit
tt.timed_attacks.list[1].min_targets = b.stun_towers.min_targets
tt.timed_attacks.list[1].max_targets = b.stun_towers.max_targets
tt.timed_attacks.list[1].max_range = b.stun_towers.max_range
tt.timed_attacks.list[1].min_range = 0
tt.timed_attacks.list[1].bullet = "bullet_boss_spider_queen_tower_stun"
tt.timed_attacks.list[1].bullet_start_offset = {
	v(5, 100)
}
tt.timed_attacks.list[1].shoot_time = fts(41)
tt.timed_attacks.list[1].vis_flags = bor(F_STUN)
tt.timed_attacks.list[2] = E:clone_c("custom_attack")
tt.timed_attacks.list[2].animation = "attack_screen"
tt.timed_attacks.list[2].cast_time = fts(41)
tt.timed_attacks.list[2].cooldown = b.webspit.cooldown
tt.timed_attacks.list[2].first_cooldown = b.webspit.first_cooldown
tt.timed_attacks.list[2].nodes_limit = b.webspit.nodes_limit
tt.timed_attacks.list[2].decal = "decal_boss_spider_queen_webspit_screen"
tt.timed_attacks.list[3] = E:clone_c("area_attack")
tt.timed_attacks.list[3].min_targets = b.drain_life.min_targets
tt.timed_attacks.list[3].max_targets = b.drain_life.max_targets
tt.timed_attacks.list[3].min_range = 0
tt.timed_attacks.list[3].max_range = b.drain_life.max_range
tt.timed_attacks.list[3].drain_center_offset = v(5, 85)
tt.timed_attacks.list[3].animation_start = "heal_in"
tt.timed_attacks.list[3].animation_loop = "heal_loop"
tt.timed_attacks.list[3].animation_end_success = "heal_out_1"
tt.timed_attacks.list[3].animation_end_fail = "heal_out_2"
tt.timed_attacks.list[3].loop_duration = b.drain_life.loop_duration
tt.timed_attacks.list[3].cooldown = b.drain_life.cooldown
tt.timed_attacks.list[3].cooldown_init = b.drain_life.cooldown_init
tt.timed_attacks.list[3].nodes_limit = b.drain_life.nodes_limit
tt.timed_attacks.list[3].bullet = "bullet_boss_spider_queen_lifesteal"
tt.timed_attacks.list[3].fx_end_units = "fx_boss_spider_queen_lifesteal_bleeding"
tt.timed_attacks.list[3].mod_end = "mod_boss_spider_queen_area_lifesteal_end"
tt.timed_attacks.list[3].mod_loop = "mod_boss_spider_queen_area_lifesteal_loop"
tt.timed_attacks.list[3].mod_loop_every = b.drain_life.lifesteal_loop.damage_every
tt.timed_attacks.list[3].vis_bans = 0
tt.timed_attacks.list[3].damage_bans = 0
tt.timed_attacks.list[4] = E:clone_c("custom_attack")
tt.timed_attacks.list[4].animation = "spawn_units"
tt.timed_attacks.list[4].cast_time = fts(14)
tt.timed_attacks.list[4].amount = b.call_wardens.amount
tt.timed_attacks.list[4].nodes_spread_start = b.call_wardens.nodes_spread_start
tt.timed_attacks.list[4].nodes_offset = b.call_wardens.nodes_offset
tt.timed_attacks.list[4].nodes_spread = b.call_wardens.nodes_spread
tt.timed_attacks.list[4].cooldown = b.call_wardens.cooldown
tt.timed_attacks.list[4].nodes_limit = b.call_wardens.nodes_limit
tt.timed_attacks.list[4].nodes_limit_reverse = b.call_wardens.nodes_limit_reverse
tt.timed_attacks.list[4].first_cooldown = b.call_wardens.first_cooldown
tt.timed_attacks.list[4].object = "decal_boss_spider_queen_spawns"
tt.timed_attacks.list[4].use_custom_formation = b.call_wardens.use_custom_formation
tt.timed_attacks.list[4].custom_formation = b.call_wardens.custom_formation
tt.sound_death = "Stage30BossfightDead"
tt = E:register_t("decal_boss_spider_queen_flying", "decal")
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "asst_spider_queen_jump"
tt.render.sprites[1].hidden = true
tt.render.sprites[1].z = Z_FLYING_HEROES
tt.render.sprites[1].anchor = v(0.5, 0.1)

tt = E:register_t("enemy_tower_ray_sheep", "enemy_KR5")

local b = balance.towers.ray.skill_sheep.sheep

tt.enemy.gold = b.gold
tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 32)
tt.info.enc_icon = 1
tt.info.portrait = "gui_bottom_info_image_enemies_0042"
tt.unit.hide_after_death = true
tt.unit.hit_offset = v(0, 14)
tt.unit.head_offset = v(0, 5)
tt.unit.mod_offset = v(0, 10)
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_tower_ray_sheep.update
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "channeler_tower_sheep"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_up",
	"walk_down"
}
tt.sound_events.death = "EnemySheepDeath"
tt.ui.click_rect = r(-17, 0, 34, 20)
tt.vis.flags = bor(F_ENEMY, F_POLYMORPH)
tt.vis.bans = bor(F_BLOCK, F_SKELETON)
tt.clicks_to_destroy = b.clicks_to_destroy
tt = E:register_t("enemy_tower_ray_sheep_flying", "enemy_tower_ray_sheep")

local b = balance.towers.ray.skill_sheep.sheep

tt.info.portrait = "gui_bottom_info_image_enemies_0041"
tt.flight_height = 47
tt.health_bar.offset = v(0, tt.flight_height + 40)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.render.sprites[1].prefix = "channeler_tower_sheep_flying"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_up",
	"walk_down"
}
tt.render.sprites[1].offset = v(0, tt.flight_height)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "decal_flying_shadow_hard"
tt.render.sprites[2].offset = v(0, 0)
tt.render.sprites[2].scale = vv(0.8)
tt.unit.hide_after_death = true
tt.unit.disintegrate_fx = "fx_enemy_desintegrate_air"
tt.unit.hit_offset = v(0, tt.flight_height + 10)
tt.unit.mod_offset = v(0, tt.flight_height + 10)
tt.unit.show_blood_pool = false
tt.sound_events.death = "EnemySheepDeath"
tt.ui.click_rect = r(-18, tt.flight_height - 2, 36, 23)
tt.vis.flags = bor(F_ENEMY, F_FLYING, F_POLYMORPH)

tt = E:register_t("enemy_pumpkin_witch", "enemy_KR5")

local b = balance.heroes.hero_witch.skill_polymorph.pumpkin

tt.health.armor = b.armor
tt.health.magic_armor = b.magic_armor
tt.health_bar.offset = v(0, 32)
tt.info.enc_icon = 1
tt.info.portrait = "gui_bottom_info_image_enemies_0050"
tt.unit.hit_offset = v(0, 14)
tt.unit.head_offset = v(0, 5)
tt.unit.mod_offset = v(0, 10)
tt.main_script.insert = scripts.enemy_basic.insert
tt.main_script.update = scripts.enemy_mixed.update
tt.motion.max_speed = b.speed
tt.render.sprites[1].prefix = "hero_witch_pumpkling"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.sound_events.death = "EnemyPumpkinDeath"
tt.ui.click_rect = r(-17, 0, 34, 20)
tt.vis.flags = bor(F_ENEMY, F_POLYMORPH)
tt.vis.bans = bor(F_BLOCK, F_SKELETON)
tt.clicks_to_destroy = b.clicks_to_destroy
tt = E:register_t("enemy_pumpkin_witch_flying", "enemy_pumpkin_witch")

local b = balance.towers.ray.skill_sheep.sheep

tt.info.portrait = "gui_bottom_info_image_enemies_0049"
tt.flight_height = 47
tt.health_bar.offset = v(0, tt.flight_height + 40)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.render.sprites[1].prefix = "hero_witch_pumpkling_flying"
tt.render.sprites[1].angles.walk = {
	"walk",
	"walk_back",
	"walk_front"
}
tt.render.sprites[1].offset = v(0, tt.flight_height)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "decal_flying_shadow_hard"
tt.render.sprites[2].offset = v(0, 0)
tt.render.sprites[2].scale = vv(0.8)
tt.unit.hide_after_death = true
tt.unit.disintegrate_fx = "fx_enemy_desintegrate_air"
tt.unit.hit_offset = v(0, tt.flight_height + 10)
tt.unit.mod_offset = v(0, tt.flight_height + 10)
tt.unit.show_blood_pool = false
tt.sound_events.death = "EnemySheepDeath"
tt.ui.click_rect = r(-18, tt.flight_height - 2, 36, 23)
tt.vis.flags = bor(F_ENEMY, F_FLYING, F_POLYMORPH)

tt = E:register_t("bombKR5", "bomb")
tt.bullet.damage_decay_random = false
tt.bullet.damage_type = DAMAGE_EXPLOSION
tt.bullet.hit_decal = "decal_bomb_crater_KR5"
tt.main_script.insert = scripts.bomb_KR5.insert
tt.main_script.update = scripts.bomb_KR5.update
tt.sound_events.insert = nil

tt = E:register_t("explosion_big_KR5", "fx")
tt.render.sprites[1].prefix = "explosion_KR5"
tt.render.sprites[1].name = "big"
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].draw_order = 100
tt.render.sprites[1].anchor = v(0.5, 0.1)
tt = E:register_t("explosion_small_KR5", "explosion_big_KR5")
tt.render.sprites[1].scale = v(0.9, 0.9)
tt = E:register_t("decal_bomb_crater_KR5", "decal_tween")
tt.tween.props[1].keys = {
	{
		1,
		255
	},
	{
		2.5,
		0
	}
}
tt.render.sprites[1].name = "decal_bomb_crater"
tt.render.sprites[1].animated = false
tt.render.sprites[1].scale = v(1.2, 1.2)

tt = E:register_t("decal_ultimate_hero_lava", "decal_tween")
tt.tween.props[1].keys = {
	{
		1,
		255
	},
	{
		2.5,
		0
	}
}
tt.render.sprites[1].name = "hero_lava_ultimate_decal"
tt.render.sprites[1].animated = false
tt.render.sprites[1].scale = v(1.2, 1.2)
tt = E:register_t("decal_bullet_soldier_tower_dwarf", "decal_tween")
tt.tween.props[1].keys = {
	{
		1,
		255
	},
	{
		2.5,
		0
	}
}
tt.render.sprites[1].name = "tower_dwarf_skill_explosion_decal"
tt.render.sprites[1].animated = false
tt.render.sprites[1].scale = v(1.2, 1.2)

tt = E:register_t("tower_tricannon_bomb", "bombKR5")

local b = balance.towers.tricannon

tt.bullet.damage_max = nil
tt.bullet.damage_min = nil
tt.bullet.damage_radius = b.basic_attack.damage_radius
tt.bullet.flight_time = fts(31)
tt.bullet.hit_fx = "explosion_small_KR5"
tt.bullet.pop_chance = 0.2
tt.sound_events.hit_water = nil
tt.sound_events.hit = "TowerTricannonBasicAttackImpact"
tt.render.sprites[1].animated = false
tt = E:register_t("tower_tricannon_bomb_1", "tower_tricannon_bomb")
tt.bullet.damage_max = b.basic_attack.damage_max[1]
tt.bullet.damage_min = b.basic_attack.damage_min[1]
tt.render.sprites[1].name = "tricannon_tower_lvl1_bomb"
tt = E:register_t("tower_tricannon_bomb_2", "tower_tricannon_bomb")
tt.bullet.damage_max = b.basic_attack.damage_max[2]
tt.bullet.damage_min = b.basic_attack.damage_min[2]
tt.bullet.align_with_trajectory = true
tt.bullet.particles_name = "ps_tower_tricannon_bomb_trail"
tt.render.sprites[1].name = "tricannon_tower_lvl2_bomb"
tt = E:register_t("tower_tricannon_bomb_3", "tower_tricannon_bomb")
tt.bullet.damage_max = b.basic_attack.damage_max[3]
tt.bullet.damage_min = b.basic_attack.damage_min[3]
tt.bullet.align_with_trajectory = true
tt.bullet.particles_name = "ps_tower_tricannon_bomb_trail"
tt.render.sprites[1].name = "tricannon_tower_lvl3_bomb"
tt = E:register_t("tower_tricannon_bomb_4", "tower_tricannon_bomb")
tt.bullet.damage_max = b.basic_attack.damage_max[4]
tt.bullet.damage_min = b.basic_attack.damage_min[4]
tt.bullet.hit_fx = "explosion_big_KR5"
tt.bullet.align_with_trajectory = true
tt.bullet.particles_name = "tower_tricannon_bomb_4_trail"
tt.render.sprites[1].name = "tricannon_tower_lvl4_bomb"
tt = E:register_t("tower_tricannon_bomb_overheated", "tower_tricannon_bomb_4")
tt.bullet.hit_payload = "tower_tricannon_overheat_scorch_aura"
tt.render.sprites[1].name = "tricannon_tower_lvl4_bomb_overheat"
tt.bullet.particles_name = "tower_tricannon_bomb_4_overheated_trail"
tt.bullet.flight_time = fts(28)
tt.bullet.g = -1.5 / (fts(1) * fts(1))
tt = E:register_t("tower_tricannon_bomb_bombardment_bomb", "bombKR5")
tt.bullet.damage_max = nil
tt.bullet.damage_min = nil
tt.bullet.damage_max_config = b.bombardment.damage_max
tt.bullet.damage_min_config = b.bombardment.damage_min
tt.bullet.damage_radius = b.bombardment.damage_radius
tt.bullet.flight_time = fts(26)
tt.bullet.g = -1.4 / (fts(1) * fts(1))
tt.bullet.hit_fx = "explosion_big_KR5"
tt.bullet.pop = nil
tt.bullet.align_with_trajectory = true
tt.render.sprites[1].name = "tricannon_tower_lvl4_bomb"
tt.render.sprites[1].animated = false
tt.sound_events.hit = "TowerTricannonBasicAttackImpact"
tt.bullet.particles_name = "tower_tricannon_bomb_4_bombardment_trail"

function tt.main_script.insert(this, store, script)
	this.bullet.damage_max = this.bullet.damage_max_config[this.bullet.level]
	this.bullet.damage_min = this.bullet.damage_min_config[this.bullet.level]

	return scripts.bomb.insert(this, store, script)
end

tt = E:register_t("tower_tricannon_bombardment_overheated_bomb", "tower_tricannon_bomb_bombardment_bomb")
tt.bullet.hit_payload = "tower_tricannon_overheat_scorch_aura_bombardment"
tt.render.sprites[1].name = "tricannon_tower_lvl4_bomb_overheat"
tt = E:register_t("tower_viper_goblins_pow_snake_bomb_bomb", "bombKR5")
tt.bullet.damage_bans = F_ALL
tt.bullet.damage_flags = 0
tt.bullet.damage_max = 0
tt.bullet.damage_min = 0
tt.bullet.damage_radius = 1
tt.bullet.flight_time_base = fts(34)
tt.bullet.flight_time_factor = fts(0.016666666666666666)
tt.bullet.pop = nil
tt.bullet.hit_payload = "tower_viper_goblins_pow_snake_bomb_aura"
tt.main_script.insert = scripts.bomb.insert
tt.main_script.update = scripts.bomb.update
tt.bullet.hit_fx = nil
tt.bullet.hit_decal = nil
tt.bullet.hide_radius = nil
tt.render.sprites[1].name = "tower_big_bertha_tar_bomb"
tt.render.sprites[1].animated = false
tt.sound_events.insert = "HeroRiflemanBrea"
tt.sound_events.hit = nil
tt.sound_events.hit_water = nil
tt = E:register_t("enemy_skunk_bombardier_bomb", "bombKR5")
b = balance.enemies.werebeasts.skunk_bombardier
tt.bullet.damage_type = DAMAGE_PHYSICAL
tt.bullet.damage_max = b.ranged_attack.damage_max
tt.bullet.damage_min = b.ranged_attack.damage_min
tt.bullet.damage_radius = b.ranged_attack.radius
tt.bullet.mod = "mod_enemy_skunk_bombardier_basic_attack"
tt.bullet.ignore_hit_offset = true
tt.bullet.flight_time = fts(20)
tt.bullet.hit_fx = "enemy_skunk_bombardier_hit_fx"
tt.bullet.damage_bans = bor(F_ENEMY)
tt.bullet.particles_name = "enemy_skunk_bombardier_bomb_trail"
tt.main_script.insert = scripts.enemy_bomb.insert
tt.main_script.update = scripts.enemy_bomb.update
tt.sound_events.hit_water = nil
tt.sound_events.hit = "EnemySkunkBombardierBasicAttackImpact"
tt.sound_events.insert = "EnemySkunkBombardierBasicAttackCast"
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "skunk_bombardier_bomb_"
tt = E:register_t("arrow5", "bullet")
tt.bullet.hit_distance = 22
tt.bullet.hit_blood_fx = "fx_blood_splat"
tt.bullet.miss_decal = "decal_arrow"
tt.bullet.miss_fx_water = "fx_splash_small"
tt.bullet.flight_time = fts(22)
tt.bullet.damage_type = DAMAGE_PHYSICAL
tt.bullet.pop = {
	"pop_shunt",
	"pop_oof"
}
tt.bullet.pop_chance = 1
tt.bullet.pop_conds = DR_KILL
tt.render.sprites[1].name = "arrow"
tt.render.sprites[1].animated = false
tt.main_script.insert = scripts.arrow.insert
tt.main_script.update = scripts.arrow.update
tt.sound_events.insert = "ArrowSound"
tt.bullet.prediction_error = true
tt.bullet.predict_target_pos = true
tt.bullet.hide_radius = 6
tt = E:register_t("arrow5_fixed_height", "arrow5")
tt.main_script.insert = scripts.arrow5_fixed_height.insert
tt = E:register_t("arrow5_45degrees", "arrow5")
tt.main_script.insert = scripts.arrow5_45degrees.insert
tt = E:register_t("arrow_dreadeye_viper", "arrow5_fixed_height")
b = balance.enemies.werebeasts.dreadeye_viper
tt.bullet.damage_min = b.basic_attack.damage_min
tt.bullet.damage_max = b.basic_attack.damage_max
tt.bullet.fixed_height = 40
tt.bullet.g = -1000
tt.bullet.mod = "mod_dreadeye_viper_arrow_acidic"
tt.bullet.hit_blood_fx = nil
tt.bullet.pop = nil
tt.bullet.hide_radius = 6
tt.bullet.prediction_error = false
tt.bullet.predict_target_pos = false
tt.bullet.hit_fx = "fx_dreadeye_viper_hit"
tt.bullet.miss_decal = "dreadeye_viper_arrow2"
tt.bullet.particles_name = "ps_bullet_dreadeye_viper"
tt.render.sprites[1].name = "dreadeye_viper_arrow"
tt.bullet.hit_distance = 20
tt.bullet.extend_particles_cutoff = true
tt = E:register_t("arrow_armor_piercer_royal_archers", "arrow5_fixed_height")
b = balance.towers.royal_archers
tt.bullet.pop = {
	"pop_archer"
}
tt.bullet.damage_type = b.armor_piercer.damage_type
tt.bullet.damage_min = nil
tt.bullet.damage_max = nil
tt.bullet.damage_min_config = b.armor_piercer.damage_min
tt.bullet.damage_max_config = b.armor_piercer.damage_max
tt.bullet.reduce_armor = b.armor_piercer.armor_penetration
tt.bullet.hit_fx = "tower_royal_archers_pow_armor_piercer_arrow_hit_fx"
tt.bullet.particles_name = "royal_archer_tower_lvl4_arrow_armor_breaker_trail_particle"
tt.bullet.miss_decal = "royal_archer_tower_lvl4_arrow_armor_piercer_0002"
tt.bullet.fixed_height = 20
tt.bullet.flight_time_variance = 10
tt.bullet.g = -1.8 / (fts(1) * fts(1))
tt.render.sprites[1].name = "royal_archer_tower_lvl4_arrow_armor_piercer_0001"
tt.render.sprites[1].animated = false
tt.sound_events.insert = nil
tt.sound_events.hit = "TowerRoyalArchersArmorPiercerHit"
tt = E:register_t("tower_royal_archers_arrow_lvl1", "arrow5_fixed_height")
b = balance.towers.royal_archers
tt.bullet.damage_min = b.basic_attack.damage_min[1]
tt.bullet.damage_max = b.basic_attack.damage_max[1]
tt.bullet.damage_type = b.basic_attack.damage_type
tt.bullet.fixed_height = 40
tt.bullet.g = -1000
tt.bullet.pop = {
	"pop_archer"
}
tt.render.sprites[1].name = "royal_archer_tower_lvl1_arrow_0001"
tt.render.sprites[1].scale = vv(0.9)
tt.bullet.miss_decal = "royal_archer_tower_lvl1_arrow_0002"
tt = E:register_t("tower_royal_archers_arrow_lvl2", "tower_royal_archers_arrow_lvl1")
b = balance.towers.royal_archers
tt.bullet.damage_min = b.basic_attack.damage_min[2]
tt.bullet.damage_max = b.basic_attack.damage_max[2]
tt = E:register_t("tower_royal_archers_arrow_lvl3", "tower_royal_archers_arrow_lvl1")
b = balance.towers.royal_archers
tt.bullet.damage_min = b.basic_attack.damage_min[3]
tt.bullet.damage_max = b.basic_attack.damage_max[3]
tt = E:register_t("tower_royal_archers_arrow_lvl4", "tower_royal_archers_arrow_lvl1")
b = balance.towers.royal_archers
tt.bullet.damage_min = b.basic_attack.damage_min[4]
tt.bullet.damage_max = b.basic_attack.damage_max[4]
tt.render.sprites[1].name = "royal_archer_tower_lvl4_arrow_0001"
tt.bullet.miss_decal = "royal_archer_tower_lvl4_arrow_0002"
tt = E:register_t("bolt_lumenir", "bullet")

E:add_comps(tt, "force_motion")

b = balance.heroes.hero_lumenir.basic_ranged_shot
tt.bullet.damage_type = b.damage_type
tt.bullet.hit_fx = "fx_bolt_lumenir_hit"
tt.bullet.particles_name = "ps_bolt_lumenir"
tt.bullet.max_speed = 600
tt.bullet.align_with_trajectory = true
tt.bullet.min_speed = 30
tt.bullet.xp_gain_factor = b.xp_gain_factor
tt.bullet.use_unit_damage_factor = true
tt.bullet.pop_chance = 0
tt.initial_impulse = 30000
tt.initial_impulse_duration = 10
tt.initial_impulse_angle = math.pi / 4
tt.force_motion.a_step = 5
tt.force_motion.max_a = 3000
tt.force_motion.max_v = 600
tt.main_script.insert = scripts.bolt_lumenir.insert
tt.main_script.update = scripts.bolt_lumenir.update
tt.render.sprites[1].name = "hero_lumenir_attack_projectile_idle"
tt.render.sprites[1].z = Z_FLYING_HEROES
tt = E:register_t("bolt_lumenir_mini", "bolt_lumenir")
tt.bullet.damage_type = DAMAGE_TRUE
tt.force_motion.max_v = 300
tt.bullet.hit_fx = "fx_bolt_lumenir_hit_mini"
tt.bullet.particles_name = "ps_bolt_lumenir_mini"
tt.render.sprites[1].name = "hero_lumenir_light_companion_attack_projectile_idle"
tt.sound_events.insert = "HeroLumenirLightCompanionBasicAttack"

tt = E:register_t("bullet_ultimate_hero_lava", "bullet")
b = balance.heroes.hero_lava.ultimate.bullet
tt.bullet.min_speed = 0
tt.bullet.max_speed = 15 * FPS
tt.bullet.acceleration_factor = 0.05
tt.bullet.hit_fx = "fx_ultimate_hero_lava"
tt.bullet.hit_decal = "decal_ultimate_hero_lava"
tt.bullet.damage_type = b.damage_type
tt.bullet.damage_radius = b.damage_radius
tt.bullet.damage_min = nil
tt.bullet.damage_max = nil
tt.bullet.damage_flags = F_AREA
tt.render.sprites[1].name = "hero_lava_ultimate_projectile_idle"
tt.particles = "ps_ultimate_hero_lava"
tt.main_script.update = scripts.bullet_ultimate_hero_lava.update
tt.aura = "aura_bullet_ultimate_hero_lava"
tt.sound_events.insert = "HeroKratoaRageOutburstCast"
tt.sound_events.hit = "HeroKratoaRageOutburstImpact"
tt = E:register_t("bullet_combo_ultimate_hero_lava", "bullet_ultimate_hero_lava")
tt.main_script.insert = scripts.bomb_KR5.insert
tt.main_script.update = scripts.bomb_KR5.update
tt.bullet.flight_time = fts(28)
tt.bullet.g = -1.5 / (fts(1) * fts(1))
tt.bullet.align_with_trajectory = true
tt = E:register_t("aura_bullet_ultimate_hero_lava", "aura")
b = balance.heroes.hero_lava.ultimate.bullet.scorch
tt.main_script.update = scripts.aura_apply_damage.update
tt.aura.duration = b.duration
tt.aura.radius = b.damage_radius
tt.aura.cycle_time = b.cycle_time
tt.aura.damage_min = nil
tt.aura.damage_max = nil
tt.aura.damage_type = b.damage_type
tt.aura.vis_flags = bor(F_MOD)
tt.aura.vis_bans = bor(F_FRIEND, F_FLYING)
tt = E:register_t("aura_hero_lava_death", "aura")
b = balance.heroes.hero_lava.death_aura
tt.main_script.update = scripts.aura_apply_damage.update
tt.aura.duration = 1e+99
tt.aura.radius = b.damage_radius
tt.aura.cycle_time = b.cycle_time
tt.aura.damage_min = b.damage_min
tt.aura.damage_max = b.damage_max
tt.aura.damage_type = b.damage_type
tt.aura.vis_flags = bor(F_MOD)
tt.aura.vis_bans = bor(F_FRIEND, F_FLYING)
tt.aura.mod = "mod_hero_lava_burn"

tt = E:register_t("bolt_lumenir_mini_death", "bolt_lumenir_mini")
tt = E:register_t("bolt_lumenir_wave", "bolt_lumenir")
b = balance.heroes.hero_lumenir.fire_balls
tt.bullet.damage_type = b.damage_type
tt.bullet.hit_fx = "fx_bolt_lumenir_hit_mini"
tt.bullet.particles_name = "ps_bolt_lumenir_wave"
tt.render.sprites[1].name = "hero_lumenir_radiant_wave_projectile_idle"
tt = E:register_t("arrow_hero_vesper_short_arrow", "arrow5_fixed_height")
b = balance.heroes.hero_vesper
tt.render.sprites[1].name = "hero_vesper_arrow"
tt.bullet.fixed_height = 35
tt.bullet.g = -1000
tt.bullet.hit_blood_fx = nil
tt.bullet.pop = {
	"pop_archer"
}
tt.bullet.hide_radius = 1
tt.bullet.prediction_error = false
tt.bullet.predict_target_pos = false
tt.bullet.miss_decal = "hero_vesper_arrow_miss"
tt.bullet.particles_name = "ps_hero_vesper_arrow_trail"
tt.bullet.xp_gain_factor = b.basic_ranged_short.xp_gain_factor
tt.bullet.extend_particles_cutoff = true
tt.bullet.use_unit_damage_factor = true

tt = E:register_t("bomb_hero_lava_double_touble", "bombKR5")
b = balance.heroes.hero_lava.double_trouble
tt.bullet.flight_time = fts(15)
tt.render.sprites[1].prefix = "hero_lava_skill_3_projectile"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.bullet.fixed_height = 35
tt.bullet.g = -1000
tt.bullet.hit_blood_fx = nil
tt.bullet.hide_radius = 0
tt.bullet.prediction_error = true
tt.bullet.predict_target_pos = false
tt.bullet.damage_min = nil
tt.bullet.damage_max = nil
tt.bullet.damage_radius = b.damage_radius
tt.bullet.damage_type = b.damage_type
tt.bullet.ignore_hit_offset = true
tt.bullet.hit_fx = "fx_explosion_hero_lava_double_trouble"
tt.bullet.hit_payload = "soldier_hero_lava_double_trouble"
tt.bullet.particles_name = "ps_hero_lava_double_trouble"
tt.bullet.extend_particles_cutoff = true
tt.bullet.use_unit_damage_factor = true
tt.sound_events.insert = "HeroKratoaDoubleTroubleCast"
tt.sound_events.hit = "HeroKratoaDoubleTroubleImpact"

tt = E:register_t("arrow_hero_vesper_long_arrow", "arrow_hero_vesper_short_arrow")
b = balance.heroes.hero_vesper
tt.bullet.xp_gain_factor = b.basic_ranged_long.xp_gain_factor
tt = E:register_t("hero_vesper_arrow_to_the_knee_arrow", "arrow5_45degrees")
tt.render.sprites[1].name = "hero_vesper_arrow_to_the_knee_arrow"
tt.render.sprites[1].animated = false
tt.bullet.miss_decal = "hero_vesper_arrow_to_the_knee_arrow_miss"
tt.bullet.flight_time = fts(15)
tt.bullet.hide_radius = nil
tt.bullet.hit_distance = 35
tt.bullet.mod = "hero_vesper_arrow_to_the_knee_arrow_mod"
tt.bullet.particles_name = "ps_hero_vesper_arrow_to_the_knee_bullet_trail"
tt.bullet.hit_fx = "hero_vesper_arrow_to_the_knee_hit"
tt.bullet.g = -4 / (fts(1) * fts(1))
tt.bullet.extend_particles_cutoff = true
tt.bullet.reset_to_target_pos = true
tt.main_script.update = scripts.arrow5.update
tt.bullet.hit_blood_fx = nil
tt.sound_events.hit = "HeroVesperArrowToTheKneeImpact"
tt = E:register_t("arrow_hero_vesper_disengage", "arrow5")
tt.render.sprites[1].name = "hero_vesper_arrow"
tt.bullet.miss_decal = "archer_hero_proy_0002-f"
tt.bullet.flight_time_variance = 3
tt.bullet.flight_time = fts(8)
tt.bullet.pop = {
	"pop_archer"
}
tt.bullet.hide_radius = 1
tt.bullet.particles_name = "ps_hero_vesper_arrow_trail"
tt.bullet.g = -2.5 / (fts(1) * fts(1))
tt = E:register_t("arrow_hero_vesper_ricochet", "bullet")
b = balance.heroes.hero_vesper
tt.main_script.update = scripts.hero_vesper_ricochet_bullet.update
tt.render.sprites[1].name = "hero_vesper_ricochet_arrow"
tt.render.sprites[1].animated = false
tt.bullet.damage_type = b.ricochet.damage_type
tt.bullet.damage_min = nil
tt.bullet.damage_max = nil
tt.bounce_arrow_name = "hero_vesper_ricochet_arrow"
tt.particle_after_bounce = "ps_hero_vesper_ricochet_bullet_trail_bounce"
tt.bullet.hit_fx = "hero_vesper_ricochet_bullet_hit_fx"
tt.bullet.acceleration_factor = 0.2
tt.bullet.min_speed = 600
tt.bullet.max_speed = 600
tt.bullet.vis_flags = F_RANGED
tt.bullet.vis_bans = 0
tt.bullet.particles_name = "ps_hero_vesper_ricochet_bullet_trail"
tt.bullet.g = -1.8 / (fts(1) * fts(1))
tt.bounces = nil
tt.bounce_range = b.ricochet.bounce_range
tt.sound = "HeroVesperRicochetImpact"

tt = E:register_t("bullet_hero_witch_basic_1", "bolt")
b = balance.heroes.hero_witch

E:add_comps(tt, "force_motion")

tt.render.sprites[1].prefix = "hero_witch_ranged_attack_projectile"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_BULLETS
tt.bullet.damage_type = b.ranged_attack.damage_type
tt.transition_time = 1
tt.target_distance_detection = 20
tt.main_script.update = scripts.bullet_hero_witch_basic.update
tt.main_script.insert = scripts.bullet_hero_witch_basic.insert
tt.bullet.damage_max = nil
tt.bullet.damage_min = nil
tt.bullet.acceleration_factor = 0.1
tt.bullet.hit_fx = "fx_hero_witch_basic_ranged_hit"
tt.bullet.particles_name = "ps_hero_witch_ranged_basic_trail"
tt.impulse_per_distance = 37.5
tt.initial_impulse = 6000
tt.initial_impulse_duration = 0.05
tt.initial_impulse_angle = 0.75 * math.pi / 2
tt.force_motion.a_step = 13
tt.force_motion.max_a = 1800
tt.force_motion.max_v = 450
tt.sound_events.insert = nil
tt = E:register_t("bullet_hero_witch_basic_2", "bullet_hero_witch_basic_1")
tt.initial_impulse_angle = 3.5 * math.pi / 2

tt = E:register_t("tower_elven_stargazers_ray", "bullet")

local b = balance.towers.elven_stargazers

tt.bullet.damage_type = DAMAGE_NONE
tt.bullet.damage_min_config = b.basic_attack.damage_min
tt.bullet.damage_max_config = b.basic_attack.damage_max
tt.bullet.damage_min = nil
tt.bullet.damage_max = nil
tt.bullet.hit_time = fts(2)
tt.bullet.out_fx = "fx_tower_elven_stargazers_ray_hit_start"
tt.bullet.mod = "mod_tower_elven_stargazers_ray_hit"
tt.bullet.hit_fx = "fx_tower_elven_stargazers_ray_hit"
tt.hit_fx_only_no_target = true
tt.image_width = 169
tt.main_script.update = scripts.ray5_simple.update
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].name = "elven_stargazers_tower_ray_idle"
tt.render.sprites[1].loop = false
tt.track_target = true
tt.ray_duration = fts(5)
tt.sound_events.insert = "TowerElvenStargazersBasicAttack"

tt = E:register_t("tower_sparking_geode_ray_lvl1", "bullet")
b = balance.towers.sparking_geode
tt.bullet.level = 1
tt.bullet.damage_type = b.basic_attack.damage_type
tt.bullet.damage_min = b.basic_attack.damage_min[tt.bullet.level]
tt.bullet.damage_max = b.basic_attack.damage_max[tt.bullet.level]
tt.bullet.hit_time = fts(3)
tt.bullet.hit_fx = "fx_tower_sparking_geode_hit"
tt.image_width = 174
tt.main_script.update = scripts.tower_sparking_geode_ray.update
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].name = "sparking_geode_ray_run"
tt.render.sprites[1].loop = false
tt.track_target = false
tt.ray_duration = fts(16)
tt.bounces_min = b.basic_attack.bounces_min[tt.bullet.level]
tt.bounces_max = b.basic_attack.bounces_max[tt.bullet.level]
tt.bounce_range = b.basic_attack.bounce_range
tt.bounce_vis_flags = F_RANGED
tt.bounce_vis_bans = 0
tt.bounce_damage_factor = b.basic_attack.bounce_damage_factor[1]
tt.bounce_delay = fts(2)
tt.bounce_scale_y = 1
tt.bounce_scale_y_factor = 0.92
tt.seen_targets = {}
tt.bounce_sprite_name = "sparking_geode_ray_rebote_run"
tt.bounce_ray_duration = fts(12)
tt.bounce_image_width = 76.56
tt.sound_events.insert = "TowerSparkingGeodeRay"
tt = E:register_t("tower_sparking_geode_ray_lvl2", "tower_sparking_geode_ray_lvl1")
b = balance.towers.sparking_geode
tt.bullet.level = 2
tt.bounces_min = b.basic_attack.bounces_min[tt.bullet.level]
tt.bounces_max = b.basic_attack.bounces_max[tt.bullet.level]
tt.bounce_damage_factor = b.basic_attack.bounce_damage_factor[2]
tt.bullet.damage_min = b.basic_attack.damage_min[tt.bullet.level]
tt.bullet.damage_max = b.basic_attack.damage_max[tt.bullet.level]
tt = E:register_t("tower_sparking_geode_ray_lvl3", "tower_sparking_geode_ray_lvl1")
b = balance.towers.sparking_geode
tt.bullet.level = 3
tt.bounces_min = b.basic_attack.bounces_min[tt.bullet.level]
tt.bounces_max = b.basic_attack.bounces_max[tt.bullet.level]
tt.bounce_damage_factor = b.basic_attack.bounce_damage_factor[3]
tt.bullet.damage_min = b.basic_attack.damage_min[tt.bullet.level]
tt.bullet.damage_max = b.basic_attack.damage_max[tt.bullet.level]
tt = E:register_t("tower_sparking_geode_ray_lvl4", "tower_sparking_geode_ray_lvl1")
b = balance.towers.sparking_geode
tt.bullet.level = 4
tt.bounces_min = b.basic_attack.bounces_min[tt.bullet.level]
tt.bounces_max = b.basic_attack.bounces_max[tt.bullet.level]
tt.bounce_damage_factor = b.basic_attack.bounce_damage_factor[4]
tt.bullet.damage_min = b.basic_attack.damage_min[tt.bullet.level]
tt.bullet.damage_max = b.basic_attack.damage_max[tt.bullet.level]

tt = E:register_t("tower_arcane_wizard_ray", "bullet")

local b = balance.towers.arcane_wizard

tt.bullet.damage_type = DAMAGE_NONE
tt.bullet.damage_min_config = b.basic_attack.damage_min
tt.bullet.damage_max_config = b.basic_attack.damage_max
tt.bullet.damage_min = nil
tt.bullet.damage_max = nil
tt.bullet.hit_time = fts(2)
tt.bullet.out_fx = "fx_tower_arcane_wizard_ray_hit_start"
tt.bullet.mod = "mod_tower_arcane_wizard_ray_hit"
tt.bullet.hit_fx = "fx_tower_arcane_wizard_ray_hit"
tt.hit_fx_only_no_target = true
tt.image_width = 152.5
tt.main_script.update = scripts.ray5_simple.update
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].name = "arcane_wizard_tower_lvl4_ray_idle"
tt.render.sprites[1].loop = false
tt.sound_events.insert = "TowerArcaneWizardBasicAttack"
tt.track_target = true
tt.ray_duration = fts(24)
tt = E:register_t("tower_arcane_wizard_ray_disintegrate", "tower_arcane_wizard_ray")
tt.bullet.damage_min = 0
tt.bullet.damage_max = 0
tt.bullet.mod = "tower_arcane_wizard_ray_disintegrate_mod"
tt.bullet.out_fx = "fx_tower_arcane_wizard_disintegrate_ray_hit_start"
tt.bullet.hit_fx = "fx_tower_arcane_wizard_ray_disintegrate_hit"
tt.image_width = 155
tt.render.sprites[1].name = "arcane_wizard_tower_lvl4_disintegration_ray_idle"
tt.render.sprites[1].loop = false
tt.bullet.hit_time = fts(1)
tt.hit_fx_only_no_target = false
tt = E:register_t("bullet_hero_muyrn_verdant_blast", "bolt")
b = balance.heroes.hero_muyrn
tt.render.sprites[1].prefix = "hero_nyru_verdant_blast_projectile"
tt.render.sprites[1].name = "flying"
tt.render.sprites[1].animated = true
tt.bullet.damage_type = b.verdant_blast.damage_type
tt.bullet.damage_max = nil
tt.bullet.damage_min = nil
tt.bullet.acceleration_factor = 0.1
tt.bullet.min_speed = 300
tt.bullet.max_speed = 600
tt.bullet.hit_distance = 20
tt.bullet.extend_particles_cutoff = true
tt.bullet.hide_radius = 0
tt.bullet.hit_fx = "hero_muyrn_verdant_blast_bolt_flying_hit_fx"
tt.bullet.hit_fx_flying = "hero_muyrn_verdant_blast_bolt_flying_hit_fx"
tt.bullet.hit_fx_ignore_hit_offset = true
tt.bullet.hit_decal = "decal_hero_muyrn_verdant_blast_hit"
tt.bullet.particles_name = "ps_hero_muyrn_verdant_blast_bolt_trail"
tt.bullet.miss_decal = nil
tt.bullet.vis_flags = F_RANGED
tt.bullet.vis_bans = 0
tt.bullet.damage_radius = b.verdant_blast.radius
tt.sound = "HeroNyruVerdantBlastHit"
tt.main_script.update = scripts.bullet_hero_muyrn_verdant_blast.update
tt = E:register_t("tower_arborean_emissary_bolt", "bolt")
b = balance.towers.arborean_emissary

E:add_comps(tt, "force_motion")

tt.render.sprites[1].prefix = "arborean_emissary_projectile"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_BULLETS
tt.bullet.damage_type = b.basic_attack.damage_type
tt.height_attack = 70
tt.initial_vel_y = 50
tt.transition_time = 1
tt.target_distance_detection = 20
tt.main_script.update = scripts.tower_arborean_emissary_bolt.update
tt.bullet.damage_max = nil
tt.bullet.damage_min = nil
tt.bullet.acceleration_factor = 0.1
tt.bullet.min_speed = 30
tt.bullet.max_speed = 300
tt.bullet.hit_fx = "fx_tower_arborean_emissary_bolt_hit"
tt.bullet.mod = "mod_tower_arborean_emissary_basic_attack"
tt.bullet.particles_name = "ps_tower_arborean_emissary_bolt_trail"
tt.bullet.max_speed = 1800
tt.bullet.min_speed = 30
tt.initial_impulse = 9000
tt.initial_impulse_duration = 0.1
tt.initial_impulse_angle = math.pi / 2
tt.force_motion.a_step = 10
tt.force_motion.max_a = 1800
tt.force_motion.max_v = 450
tt.sound_events.insert = nil
tt = E:register_t("tower_arborean_emissary_bolt_lvl1", "tower_arborean_emissary_bolt")
b = balance.towers.arborean_emissary
tt.bullet.damage_max = b.basic_attack.damage_max[1]
tt.bullet.damage_min = b.basic_attack.damage_min[1]
tt = E:register_t("tower_arborean_emissary_bolt_lvl2", "tower_arborean_emissary_bolt")
b = balance.towers.arborean_emissary
tt.bullet.damage_max = b.basic_attack.damage_max[2]
tt.bullet.damage_min = b.basic_attack.damage_min[2]
tt = E:register_t("tower_arborean_emissary_bolt_lvl3", "tower_arborean_emissary_bolt")
b = balance.towers.arborean_emissary
tt.bullet.damage_max = b.basic_attack.damage_max[3]
tt.bullet.damage_min = b.basic_attack.damage_min[3]
tt = E:register_t("tower_arborean_emissary_bolt_lvl4", "tower_arborean_emissary_bolt")
b = balance.towers.arborean_emissary
tt.bullet.damage_max = b.basic_attack.damage_max[4]
tt.bullet.damage_min = b.basic_attack.damage_min[4]
tt = E:register_t("bullet_tower_demon_pit_basic_attack_lvl1", "bombKR5")
tt.bullet.flight_time = fts(31)
tt.bullet.hit_payload = "soldier_tower_demon_pit_basic_attack_lvl1"
tt.sound_events.hit_water = nil
tt.render.sprites[1].animated = true
tt.render.sprites[1].name = "demon_pit_tower_demon_projectile_idle"
tt.bullet.hit_fx = nil
tt.bullet.hit_decal = nil
tt.bullet.rotation_speed = 5
tt.bullet.pop = nil
tt.bullet.particles_name = "tower_demon_pit_demon_trail"
tt.bullet.damage_min = 0
tt.bullet.damage_max = 0
tt.sound_events.insert = "TowerDemonPitBasicAttack"
tt = E:register_t("bullet_tower_demon_pit_basic_attack_lvl2", "bullet_tower_demon_pit_basic_attack_lvl1")
tt.bullet.hit_payload = "soldier_tower_demon_pit_basic_attack_lvl2"
tt = E:register_t("bullet_tower_demon_pit_basic_attack_lvl3", "bullet_tower_demon_pit_basic_attack_lvl1")
tt.bullet.hit_payload = "soldier_tower_demon_pit_basic_attack_lvl3"
tt = E:register_t("bullet_tower_demon_pit_basic_attack_lvl4", "bullet_tower_demon_pit_basic_attack_lvl1")
tt.bullet.hit_payload = "soldier_tower_demon_pit_basic_attack_lvl4"
tt = E:register_t("bullet_tower_demon_pit_big_guy_lvl4", "bullet")

E:add_comps(tt, "main_script")

tt.bullet.flight_time = fts(31)
tt.bullet.hit_payload = "big_guy_tower_demon_pit_lvl4"
tt.sound_events.hit_water = nil
tt.render.sprites[1].animated = true
tt.render.sprites[1].prefix = "demon_pit_tower_demon_big_guy_projectile"
tt.bullet.hit_fx = nil
tt.bullet.hit_decal = nil
tt.bullet.rotation_speed = 0
tt.bullet.pop = nil
tt.bullet.damage_min = 0
tt.bullet.damage_max = 0
tt.sound_events.insert = "TowerDemonPitBasicAttack"
tt.main_script.update = scripts.projecticle_big_guy_tower_demon_pit.update
tt = E:register_t("arrow_hero_builder_defensive_turret", "arrow5")
tt.render.sprites[1].name = "hero_obdul_skill_4_tower_projectile"
tt.bullet.miss_decal = nil
tt.bullet.flight_time_variance = 3
tt.bullet.flight_time = fts(15)
tt.bullet.hide_radius = 1
tt.bullet.g = -2 / (fts(1) * fts(1))
tt.bullet.align_with_trajectory = false
tt.bullet.rotation_speed = 30 * FPS * math.pi / 180
tt = E:register_t("bullet_enemy_unblinded_priest", "bolt_enemy")
b = balance.enemies.cult_of_the_overseer.unblinded_priest
tt.render.sprites[1].prefix = "unblinded_priest_projectile"
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.bullet.damage_max = b.ranged_attack.damage_max
tt.bullet.damage_min = b.ranged_attack.damage_min
tt.bullet.damage_type = b.ranged_attack.damage_type
tt.bullet.hit_blood_fx = nil
tt.bullet.acceleration_factor = 0.1
tt.bullet.min_speed = 30
tt.bullet.max_speed = 300
tt.bullet.align_with_trajectory = true
tt.bullet.hit_fx = "fx_bullet_enemy_unblinded_priest_hit"
tt.bullet.particles_name = "ps_bullet_enemy_unblinded_priest"

tt = E:register_t("bullet_enemy_spider_priest", "bolt_enemy")
b = balance.enemies.arachnids.spider_priest
tt.render.sprites[1].prefix = "cultist_spider_projectile"
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.bullet.damage_max = b.ranged_attack.damage_max
tt.bullet.damage_min = b.ranged_attack.damage_min
tt.bullet.damage_type = b.ranged_attack.damage_type
tt.bullet.hit_blood_fx = nil
tt.bullet.acceleration_factor = 0.1
tt.bullet.min_speed = 30
tt.bullet.max_speed = 300
tt.bullet.align_with_trajectory = true
tt.bullet.hit_fx = "fx_bullet_enemy_spider_priest_hit"
tt.bullet.particles_name = "ps_bullet_enemy_spider_priest"
tt = E:register_t("spider_sister_bolt", "bolt_enemy")

local b = balance.enemies.arachnids.spider_sister

tt.bullet.vis_flags = F_RANGED
tt.bullet.vis_bans = 0
tt.render.sprites[1].prefix = "spider_sister_fx_attack_1_projectile"
tt.bullet.hit_fx = "spider_sister_bolt_hit_fx"
tt.bullet.pop = nil
tt.bullet.pop_conds = nil
tt.bullet.acceleration_factor = 0.5
tt.bullet.damage_min = b.ranged_attack.damage_min
tt.bullet.damage_max = b.ranged_attack.damage_max
tt.bullet.max_speed = 360
tt.bullet.particles_name = "ps_spider_sister_bolt_trail"
tt.bullet.damage_type = b.ranged_attack.damage_type
tt.sound_events.insert = "EnemySpiderSisterRange"
tt = E:register_t("boss_queen_spider_bolt", "bolt_enemy")

local b = balance.enemies.arachnids.boss_spider_queen

tt.bullet.vis_flags = F_RANGED
tt.bullet.vis_bans = 0
tt.render.sprites[1].animated = true
tt.render.sprites[1].prefix = "boss_effects_bolt_magic"
tt.render.sprites[1].name = "flying"
tt.render.sprites[1].anchor = vv(0.5)
tt.bullet.hit_fx = "fx_boss_spider_queen_bolt_hit"
tt.bullet.pop = nil
tt.bullet.pop_conds = nil
tt.bullet.acceleration_factor = 0.5
tt.bullet.damage_min = b.ranged_attack.damage_min
tt.bullet.damage_max = b.ranged_attack.damage_max
tt.bullet.max_speed = 360
tt.bullet.particles_name = "ps_boss_spider_queen_bolt_trail"
tt.bullet.damage_type = b.ranged_attack.damage_type
tt.bullet.mod = "mod_boss_spider_queen_poison"
tt.sound_events.insert = "Stage30BossfightRange"
tt = E:register_t("mod_boss_spider_queen_tower_debuff", "modifier")
b = balance.enemies.arachnids.boss_spider_queen.stun_towers

E:add_comps(tt, "render", "ui")

if IS_CONSOLE then
	E:add_comps(tt, "tween")
end

tt.main_script.insert = scripts.mod_boss_spider_queen_tower_debuff.insert
tt.main_script.update = scripts.mod_boss_spider_queen_tower_debuff.update
tt.modifier.duration = b.duration
tt.modifier.duration_long = b.duration_long
tt.render.sid_mask = 1
tt.render.sprites[tt.render.sid_mask].prefix = "spider_queen_animations_stunDef"
tt.render.sprites[tt.render.sid_mask].name = "in"
tt.render.sprites[tt.render.sid_mask].exo = true
tt.render.sprites[tt.render.sid_mask].animated = true
tt.render.sprites[tt.render.sid_mask].loop = false
tt.render.sprites[tt.render.sid_mask].z = Z_OBJECTS
tt.render.sprites[tt.render.sid_mask].offset = v(0, -30)
tt.render.sprites[tt.render.sid_mask].sort_y_offset = -5
tt.threads_separation = 38
tt.threads_amount = math.ceil(REF_H / tt.threads_separation)
tt.threads_idles = {
	"idle1",
	"idle1",
	"idle2",
	"idle3",
	"idle4",
	"idle4"
}
tt.render.sid_threads_start = 2
tt.render.sid_threads_end = tt.render.sid_threads_start + tt.threads_amount * 3 - 1
tt.spiders_offsets = {
	{
		x = -17,
		y = 0
	},
	{
		x = 0,
		y = 30
	},
	{
		x = 17,
		y = -10
	}
}

for i1 = 1, 3 do
	for i2 = 1, tt.threads_amount do
		local s = E:clone_c("sprite")

		s.prefix = "glarewarden_web_spiderweb"
		s.name = tt.threads_idles[1]
		s.loop = false
		s.anchor.y = 0
		s.offset.x = tt.spiders_offsets[i1].x
		s.offset.y = (i2 - 1) * tt.threads_separation + tt.spiders_offsets[i1].y
		s.z = Z_OBJECTS
		s.sort_y_offset = -s.offset.y
		s.group = "threads"
		tt.render.sprites[tt.render.sid_threads_start + tt.threads_amount * (i1 - 1) + i2 - 1] = s
	end
end

tt.render.sid_spiders_start = tt.render.sid_threads_end + 1
tt.render.sid_spiders_end = tt.render.sid_spiders_start + 2

for i = tt.render.sid_spiders_start, tt.render.sid_spiders_end do
	tt.render.sprites[i] = CC("sprite")
	tt.render.sprites[i].prefix = "boss_spider_minispider_tower_stun_spider"
	tt.render.sprites[i].name = "climbDown"
	tt.render.sprites[i].offset = v(tt.spiders_offsets[i - tt.render.sid_spiders_start + 1].x, tt.spiders_offsets[i - tt.render.sid_spiders_start + 1].y + 30)
	tt.render.sprites[i].group = "spiders"
end

tt.render.sid_hand = tt.render.sid_spiders_end + 1
tt.render.sprites[tt.render.sid_hand] = CC("sprite")
tt.render.sprites[tt.render.sid_hand].name = "spider_queen_tap"
tt.render.sprites[tt.render.sid_hand].offset = v(10, 20)
tt.render.sprites[tt.render.sid_hand].draw_order = 11
tt.render.sprites[tt.render.sid_hand].hidden = true
tt.render.sprites[tt.render.sid_hand].z = Z_OBJECTS_COVERS
tt.required_clicks = IS_PHONE_OR_TABLET and b.required_clics_phone_tablet or IS_CONSOLE and b.required_clics_console or b.required_clics_desktop
tt.tap_fx = "fx_boss_spider_queen_melee_hit"
tt.ui.can_click = true
tt.ui.can_select = false
tt.ui.click_rect = r(-40, 0, 80, 60)
tt.ui.z = 1
tt.tower_type_scales = {}
tt.tower_type_offsets = {}

tt = E:register_t("arrow_tower_stargazers_death_star", "arrow5")
b = balance.towers.elven_stargazers
tt.main_script.update = scripts.arrow5.update
tt.render.sprites[1].animated = true
tt.render.sprites[1].name = "elven_stargazers_tower_rising_star_star_idle"
tt.bullet.particles_name = "ps_stargazers_death_star_trail"
tt.bullet.miss_decal = nil
tt.bullet.hit_blood_fx = nil
tt.bullet.miss_fx = "fx_tower_stargazers_death_star_hit"
tt.bullet.hit_fx = "fx_tower_stargazers_death_star_hit"
tt.bullet.mod = "mod_tower_stargazers_death_star_stun"
tt._damage_min = b.stars_death.damage_min
tt._damage_max = b.stars_death.damage_max
tt._damage_type = b.stars_death.damage_type
tt.bullet.flight_time_variance = 3
tt.bullet.flight_time = fts(20)
tt.bullet.hide_radius = 0
tt.bullet.g = -2 / (fts(1) * fts(1))
tt.bullet.align_with_trajectory = false
tt.bullet.rotation_speed = 15
tt.sound_events.hit = "TowerElvenStargazersRisingStarImpact"

tt = E:register_t("bolt_hero_spider_basic_attack", "bolt")
b = balance.heroes.hero_spider
tt.render.sprites[1].prefix = "hero_spider_05_projectile"
tt.bullet.damage_max = nil
tt.bullet.damage_min = nil
tt.bullet.hit_blood_fx = nil
tt.bullet.acceleration_factor = 0.1
tt.bullet.min_speed = 30
tt.bullet.max_speed = 300
tt.bullet.align_with_trajectory = true
tt.bullet.hit_fx = "fx_hero_spider_ranged_hit"
tt.bullet.use_unit_damage_factor = true
tt.bullet.xp_gain_factor = b.basic_ranged.xp_gain_factor
tt.sound_events.insert = "HeroSpiderAttackRanged"
tt.bullet.damage_type = b.basic_ranged.damage_type
tt.bullet.particles_name = "ps_hero_spider_basic_attack_trail"

tt = E:register_t("bolt_hero_space_elf_basic_attack", "bolt")
b = balance.heroes.hero_space_elf
tt.render.sprites[1].prefix = "hero_therien_ranged_proyectile"
tt.bullet.damage_max = nil
tt.bullet.damage_min = nil
tt.bullet.hit_blood_fx = nil
tt.bullet.acceleration_factor = 0.1
tt.bullet.min_speed = 30
tt.bullet.max_speed = 300
tt.bullet.align_with_trajectory = true
tt.bullet.hit_fx = "fx_hero_space_elf_ranged_hit"
tt.bullet.use_unit_damage_factor = true
tt.bullet.xp_gain_factor = b.basic_ranged.xp_gain_factor
tt.sound_events.insert = "EnemyTurtleShamanBasicAttack"
tt.bullet.damage_type = b.basic_ranged.damage_type
tt.bullet.particles_name = "ps_hero_space_elf_basic_attack_trail"

tt = E:register_t("bolt_soul_soldier_tower_ghost", "bolt")
b = balance.towers.ghost.soul_attack
tt.render.sprites[1].name = "ghost_tower_soul_skill_projectile"
tt.render.sprites[1].animated = false
tt.bullet.damage_max = nil
tt.bullet.damage_min = nil
tt.bullet.hit_blood_fx = nil
tt.bullet.acceleration_factor = 0.1
tt.bullet.min_speed = 30
tt.bullet.max_speed = 300
tt.bullet.align_with_trajectory = true
tt.bullet.mods = {
	"mod_tower_ghost_soul_slow",
	"mod_tower_ghost_soul_damage_factor"
}
tt.bullet.hit_fx = "fx_soul_soldier_tower_ghost"
tt.bullet.use_unit_damage_factor = true
tt.sound_events.hit = "TowerGhostSoulAttackImpact"
tt.bullet.damage_type = b.damage_type
tt.bullet.particles_name = "ps_soul_soldier_tower_ghost"
tt.main_script.update = scripts.tower_ghost.soul_bolt_update

tt = E:register_t("arrow_soldier_re_shadow_archer", "arrow5")
b = balance.upgrades.reinforcements_shadow_archer
tt.render.sprites[1].name = "reinforcements_lvl3_03_arrow"
tt.bullet.flight_time_variance = 3
tt.bullet.flight_time = fts(8)
tt.bullet.pop = {
	"pop_archer"
}
tt.bullet.hide_radius = 1
tt.bullet.g = -2.5 / (fts(1) * fts(1))
tt.bullet.damage_max = b.soldier.ranged_attack.damage_max
tt.bullet.damage_min = b.soldier.ranged_attack.damage_min
tt = E:register_t("bullet_soldier_tower_rocket_gunners", "bullet")
b = balance.towers.rocket_gunners.soldier.ranged_attack
tt.bullet.hit_fx = "fx_bullet_soldier_tower_rocket_gunners_hit"
tt.bullet.floor_fx = "fx_bullet_soldier_tower_rocket_gunners_floor"
tt.bullet.flight_time = fts(2)
tt.bullet.damage_type = DAMAGE_PHYSICAL
tt.bullet.damage_max = b.damage_max
tt.bullet.damage_min = b.damage_min
tt.bullet.damage_max_config = b.damage_max
tt.bullet.damage_min_config = b.damage_min
tt.bullet.level = 1
tt.main_script.update = scripts.bullet_soldier_tower_rocket_gunners.update
tt.render = nil
tt.sound_events.insert = "TowerRocketGunnersBasicAttack"
tt = E:register_t("bullet_soldier_tower_rocket_gunners_phosphoric", "bullet")
b = balance.towers.rocket_gunners.soldier
tt.bullet.hit_fx = "fx_bullet_soldier_tower_rocket_gunners_phosphoric_hit"
tt.bullet.floor_fx = "fx_bullet_soldier_tower_rocket_gunners_phosphoric_floor"
tt.bullet.flight_time = fts(2)
tt.bullet.hit_time = fts(2)
tt.bullet.damage_type = DAMAGE_PHYSICAL
tt.bullet.level = 1
tt.main_script.update = scripts.bullet_soldier_tower_rocket_gunners_phosphoric.update
tt.bullet.damage_max = b.ranged_attack.damage_max[4]
tt.bullet.damage_min = b.ranged_attack.damage_min[4]
tt.render.sprites[1].anchor = v(0.2, 0.5)
tt.render.sprites[1].name = "rocket_gunners_tower_phosphoric_coating_trace_idle"
tt.render.sprites[1].loop = false
tt.image_width = 70
tt.track_target = true
tt.ray_duration = fts(2)
tt.sound_events.insert = "TowerRocketGunnersPhosphoricCoating"
tt = E:register_t("bullet_soldier_tower_rocket_gunners_sting_missiles", "bullet")
b = balance.towers.rocket_gunners.soldier

E:add_comps(tt, "force_motion")

tt.bullet.flight_time = fts(10)
tt.bullet.hit_fx = "fx_bullet_soldier_tower_rocket_gunners_sting_missiles_hit"
tt.bullet.hit_fx_air = "fx_bullet_soldier_tower_rocket_gunners_sting_missiles_hit_air"
tt.bullet.particles_name = "ps_tower_rocket_gunners_sting_missiles_trail"
tt.bullet.hit_decal = "decal_bullet_soldier_tower_rocket_gunners_sting_missiles"
tt.bullet.hit_decal_fx = "fx_bullet_soldier_tower_rocket_gunners_sting_missiles_smoke"
tt.bullet.align_with_trajectory = true
tt.bullet.ignore_hit_offset = true
tt.render.sprites[1].animated = true
tt.render.sprites[1].name = "rocket_gunners_tower_sting_missiles_projectile_idle"
tt.main_script.update = scripts.bullet_soldier_tower_rocket_gunners_sting_missiles.update
tt.initial_impulse = 3000
tt.initial_impulse_duration = 0.3
tt.initial_impulse_angle = 0
tt.force_motion.a_step = 5
tt.force_motion.max_a = 1800
tt.force_motion.max_v = 450
tt.mod = "mod_soldier_tower_rocket_gunners_sting_missiles_target"
tt.sound_events.insert = "TowerRocketGunnersStingMissileCast"
tt.sound_events.hit = "TowerRocketGunnersStingMissileExplosion"
tt = E:register_t("bullet_tower_necromancer", "bolt")
b = balance.towers.necromancer

E:add_comps(tt, "force_motion")

tt.render.sprites[1].prefix = "necromancer_tower_skull_projectile"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_TOWER_BASES
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "necromancer_tower_skull_projectile_spawn_FX"
tt.render.sprites[2].animated = true
tt.render.sprites[2].z = Z_BULLETS
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.height_attack = 70
tt.initial_vel_y = 50
tt.transition_time = 1
tt.target_distance_detection = 20
tt.main_script.insert = scripts.bullet_tower_necromancer.insert
tt.main_script.update = scripts.bullet_tower_necromancer.update
tt.bullet.damage_type = b.basic_attack.damage_type
tt.bullet.damage_max = nil
tt.bullet.damage_min = nil
tt.bullet.acceleration_factor = 0.1
tt.bullet.min_speed = 30
tt.bullet.max_speed = 300
tt.bullet.hit_fx = "necromancer_tower_skull_projectile_hit_FX"
tt.bullet.mod = "mod_tower_necromancer_curse"
tt.bullet.particles_name = "ps_tower_necromancer_skull_trail"
tt.bullet.max_speed = 1800
tt.bullet.min_speed = 30
tt.bullet.max_track_distance = 50
tt.force_motion.a_step = 6
tt.force_motion.max_a = 3000
tt.force_motion.max_v = 360
tt.initial_impulse = 9000
tt.initial_impulse_duration = 0.1
tt.initial_impulse_angle = math.pi / 2
tt.spawn_time = fts(18)
tt.sound_events.insert = nil
tt.shoot_sound = "TowerNecromancerBasicAttack"
tt.hit_sound = "TowerNecromancerBasicAttackHit"
tt.summon_sound = "TowerNecromancerBasicAttackSummon"
tt = E:register_t("bullet_tower_necromancer_lvl1", "bullet_tower_necromancer")
b = balance.towers.necromancer
tt.bullet.damage_max = b.basic_attack.damage_max[1]
tt.bullet.damage_min = b.basic_attack.damage_min[1]
tt = E:register_t("bullet_tower_necromancer_lvl2", "bullet_tower_necromancer")
b = balance.towers.necromancer
tt.bullet.damage_max = b.basic_attack.damage_max[2]
tt.bullet.damage_min = b.basic_attack.damage_min[2]
tt = E:register_t("bullet_tower_necromancer_lvl3", "bullet_tower_necromancer")
b = balance.towers.necromancer
tt.bullet.damage_max = b.basic_attack.damage_max[3]
tt.bullet.damage_min = b.basic_attack.damage_min[3]
tt = E:register_t("bullet_tower_necromancer_lvl4", "bullet_tower_necromancer")
b = balance.towers.necromancer
tt.bullet.damage_max = b.basic_attack.damage_max[4]
tt.bullet.damage_min = b.basic_attack.damage_min[4]
tt = E:register_t("bullet_tower_ballista", "bullet")
b = balance.towers.ballista.basic_attack
tt.bullet.hit_fx = "fx_bullet_tower_ballista_hit"
tt.bullet.flight_time = fts(2)
tt.bullet.hit_time = fts(2)
tt.bullet.damage_type = DAMAGE_PHYSICAL
tt.bullet.level = 1
tt.main_script.update = scripts.bullet_tower_ballista.update
tt.render.sprites[1].anchor = v(0.2, 0.5)
tt.render.sprites[1].name = "ballista_tower_arrow_idle"
tt.render.sprites[1].loop = false
tt.image_width = 175
tt.ray_duration = fts(11)
tt.hit_delay = fts(3)
tt.missed_arrow = "fx_bullet_tower_ballista_missed_arrow"
tt.missed_arrow_dust = "fx_bullet_tower_ballista_missed_arrow_dust"
tt.missed_arrow_decal = "fx_bullet_tower_ballista_missed_arrow_decal"
tt.sound_events.insert = "TowerBallistaBasicAttack"
tt = E:register_t("bullet_tower_ballista_lvl1", "bullet_tower_ballista")
b = balance.towers.ballista.basic_attack
tt.bullet.damage_max = b.damage_max[1]
tt.bullet.damage_min = b.damage_min[1]
tt = E:register_t("bullet_tower_ballista_lvl2", "bullet_tower_ballista")
b = balance.towers.ballista.basic_attack
tt.bullet.damage_max = b.damage_max[2]
tt.bullet.damage_min = b.damage_min[2]
tt = E:register_t("bullet_tower_ballista_lvl3", "bullet_tower_ballista")
b = balance.towers.ballista.basic_attack
tt.bullet.damage_max = b.damage_max[3]
tt.bullet.damage_min = b.damage_min[3]
tt = E:register_t("bullet_tower_ballista_lvl4", "bullet_tower_ballista")
b = balance.towers.ballista.basic_attack
tt.bullet.damage_max = b.damage_max[4]
tt.bullet.damage_min = b.damage_min[4]
tt = E:register_t("bullet_tower_ballista_skill_final_shot", "bullet_tower_ballista_lvl4")
b = balance.towers.ballista.skill_final_shot
tt.bullet.hit_fx = "fx_bullet_tower_ballista_final_shot_hit"
tt.bullet.damage_factor = b.damage_factor[1]
tt.bullet.mod = "mod_bullet_tower_ballista_skill_final_shot_stun"
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].name = "ballista_tower_special_arrow_idle"
tt.image_width = 162.5
tt.is_final_shot = true
tt.sound_events.insert = "TowerBallistaFinalNail"
tt = E:register_t("bullet_tower_ballista_skill_bomb", "bombKR5")

local b = balance.towers.ballista.skill_bomb

tt.bullet.damage_max_config = b.damage_area_max
tt.bullet.damage_min_config = b.damage_area_min
tt.bullet.damage_radius = b.damage_radius
tt.bullet.flight_time = fts(31)
tt.bullet.hit_fx = "fx_bullet_tower_ballista_bomb_explosion"
tt.bullet.pop_chance = 0.5
tt.bullet.particles_name = {
	"ps_bullet_tower_ballista_skill_bomb_trail_A",
	"ps_bullet_tower_ballista_skill_bomb_trail_B"
}
tt.main_script.update = scripts.bullet_tower_ballista_skill_bomb.update
tt.main_script.remove = scripts.bullet_tower_ballista_skill_bomb.remove
tt.sound_events.hit_water = nil
tt.sound_events.hit = "TowerTricannonBasicAttackImpact"
tt.render.sprites[1].name = "ballista_tower_bomb_projectile_idle"
tt.render.sprites[1].animated = false
tt.render.sprites[1].hidden = false
tt.scraps = "aura_bullet_tower_ballista_skill_bomb"
tt.duration_config = balance.towers.ballista.skill_bomb.duration
tt.sound_events.insert = "TowerBallistaScrapBombCast"
tt.sound_events.hit = "TowerBallistaScrapBombExplosion"
tt = E:register_t("bullet_hero_mecha", "bullet")
b = balance.heroes.hero_mecha.basic_ranged

E:add_comps(tt, "force_motion")

tt.bullet.flight_time = fts(31)
tt.bullet.spawn_fx_1 = "fx_bullet_hero_mecha_spawn_1"
tt.bullet.spawn_fx_2 = "fx_bullet_hero_mecha_spawn_2"
tt.bullet.hit_fx = "fx_bullet_hero_mecha_hit"
tt.bullet.particles_name = "ps_bullet_hero_mecha_trail"
tt.bullet.align_with_trajectory = true
tt.bullet.damage_type = b.damage_type
tt.bullet.use_unit_damage_factor = true
tt.bullet.xp_gain_factor = b.xp_gain_factor
tt.sound_events.hit = "HeroMechaBasicAttackHit"
tt.render.sprites[1].animated = true
tt.render.sprites[1].name = "hero_onagro_attack_projectile_idle"
tt.render.sprites[1].anchor = v(0.35, 0.5)
tt.main_script.insert = scripts.bullet_hero_mecha.insert
tt.main_script.update = scripts.bullet_hero_mecha.update
tt.initial_impulse = 3000
tt.initial_impulse_duration = 0.3
tt.initial_impulse_angle = 0
tt.force_motion.a_step = 5
tt.force_motion.max_a = 1800
tt.force_motion.max_v = 450
tt.max_rotation_speed = 12
tt.min_speed = 2
tt = E:register_t("bullet_hero_mecha_tar_bomb", "bombKR5")
b = balance.heroes.hero_mecha.tar_bomb
tt.bullet.flight_time = fts(25)
tt.bullet.hit_fx = "fx_bullet_hero_mecha_tar_bomb"
tt.bullet.align_with_trajectory = false
tt.bullet.ignore_hit_offset = true
tt.bullet.pop_chance = 0.5
tt.bullet.rotation_speed = nil
tt.bullet.hit_payload = "aura_bullet_hero_mecha_tar_bomb"
tt.sound_events.hit = "HeroMechaTarBombExplosion"
tt.render.sprites[1].animated = true
tt.render.sprites[1].name = "hero_onagro_skill_2_projectile"
tt = E:register_t("bullet_hero_mecha_mine", "bombKR5")
b = balance.heroes.hero_mecha.mine_drop
tt.bullet.flight_time = fts(25)
tt.bullet.align_with_trajectory = false
tt.bullet.ignore_hit_offset = true
tt.bullet.rotation_speed = 7.75
tt.bullet.hit_payload = "aura_bullet_hero_mecha_mine"
tt.bullet.hit_decal = nil
tt.bullet.hit_fx = nil
tt.bullet.pop_chance = 0
tt.main_script.insert = scripts.bullet_hero_mecha_mine.insert
tt.main_script.update = scripts.bullet_hero_mecha_mine.update
tt.sound_events.insert = nil
tt.sound_events.hit = nil
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "hero_onagro_skill_4_mine_projectile"
tt = E:register_t("bullet_zeppelin_hero_mecha", "bombKR5")
b = balance.heroes.hero_mecha.ultimate
tt.bullet.flight_time = fts(40)
tt.bullet.hit_fx = "fx_bullet_zeppelin_hero_mecha"
tt.bullet.align_with_trajectory = false
tt.bullet.ignore_hit_offset = true
tt.bullet.pop_chance = 0.5
tt.bullet.rotation_speed = 10
tt.sound_events.insert = "HeroMechaDeathFromAboveAttack"
tt.sound_events.hit = "HeroMechaDeathFromAboveExplosion"
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "hero_onagro_ultimate_projectile"
tt = E:register_t("bullet_hero_venom_ranged_tentacle", "bullet")

local b = balance.heroes.hero_venom.ranged_tentacle

tt.bullet.damage_type = b.damage_type
tt.bullet.damage_min = nil
tt.bullet.damage_max = nil
tt.bullet.hit_time = fts(4)
tt.bullet.mods = {
	"mod_bullet_hero_venom_ranged_tentacle_bleed",
	"mod_bullet_hero_venom_ranged_tentacle_stun"
}
tt.bullet.hit_fx = "fx_hero_venom_melee_attack_hit"
tt.image_width = 179
tt.dist_offset = 70
tt.main_script.insert = scripts.bullet_hero_venom_ranged_tentacle.insert
tt.main_script.update = scripts.ray5_simple.update
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].name = "hero_venom_ranged_skill_tentacle_idle"
tt.render.sprites[1].loop = false
tt.sound_events.insert = nil
tt.track_target = false
tt.ray_duration = fts(20)
tt = E:register_t("bullet_stage_10_obelisk_priests", "bolt")

E:add_comps(tt, "force_motion")

tt.render.sprites[1].prefix = "stage10_obelisk_projectile"
tt.render.sprites[1].animated = true
tt.bullet.damage_max = 0
tt.bullet.damage_min = 0
tt.bullet.hit_blood_fx = nil
tt.bullet.acceleration_factor = 0.1
tt.bullet.align_with_trajectory = true
tt.main_script.update = scripts.bullet_stage_10_obelisk_priests_alternative.update
tt.bullet.hit_fx = "fx_stage_10_obelisk_priest_hit"
tt.bullet.particles_name = "ps_bullet_stage_10_obelisk_priests"
tt.bullet.max_speed = 30
tt.bullet.min_speed = 3
tt.force_motion.a_step = 5
tt.force_motion.max_a = 900
tt.force_motion.max_v = 300
tt = E:register_t("bullet_stage_11_veznan_skill_1", "bolt")
tt.render.sprites[1].prefix = "stage11_veznan_export_proyectile"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].anchor = v(0.45, 0.5)
tt.main_script.update = scripts.bullet_stage_11_veznan_skill_1.update
tt.bullet.damage_max = 0
tt.bullet.damage_min = 0
tt.bullet.hit_blood_fx = nil
tt.bullet.acceleration_factor = 0.15
tt.bullet.align_with_trajectory = true
tt.bullet.max_speed = 900
tt.bullet.min_speed = 360
tt.bullet.particles_name = "ps_bullet_stage_11_veznan_skill_1"
tt.bullet.hit_fx = "fx_bullet_stage_11_veznan_skill_1"
tt.sound_events.insert = "Stage11VeznanSoulImpactImpact"
tt = E:register_t("bullet_stage_11_cult_leader_illusion", "bolt_enemy")

local b = balance.specials.stage11_cult_leader.illusion

tt.bullet.vis_flags = F_RANGED
tt.bullet.vis_bans = 0
tt.render.sprites[1].prefix = "mydrias_proyectile"
tt.render.sprites[1].flip_x = true
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.bullet.hit_fx = "fx_stage_11_cult_leader_attack_hit"
tt.bullet.pop = nil
tt.bullet.pop_conds = nil
tt.bullet.acceleration_factor = 0.5
tt.bullet.damage_min = b.ranged_attack.damage_min
tt.bullet.damage_max = b.ranged_attack.damage_max
tt.bullet.max_speed = 360
tt.bullet.particles_name = "ps_bullet_stage_11_cult_leader"
tt.bullet.damage_type = b.ranged_attack.damage_type
tt.bullet.align_with_trajectory = true
tt.main_script.insert = scripts.bullet_stage_11_cult_leader_illusion.insert
tt.main_script.update = scripts.bullet_stage_11_cult_leader_illusion.update
tt = E:register_t("bullet_tower_flamespitter_skill_bomb", "bombKR5")

local b = balance.towers.flamespitter.skill_bomb

tt.bullet.damage_max_config = b.damage_area_max
tt.bullet.damage_min_config = b.damage_area_min
tt.bullet.damage_radius = b.damage_radius
tt.bullet.flight_time = fts(40)
tt.bullet.hit_fx = "fx_bullet_tower_flamespitter_bomb_explosion"
tt.bullet.hit_decal = "decal_bullet_tower_flamespitter_bomb"
tt.bullet.pop_chance = 0.5
tt.bullet.particles_name = "ps_bullet_tower_flamespitter_skill_bomb"
tt.bullet.align_with_trajectory = true
tt.bullet.hit_payload = "bullet_tower_flamespitter_skill_bomb_payload"
tt.main_script.update = scripts.bomb_KR5.update
tt.sound_events.hit_water = nil
tt.sound_events.hit = "TowerFlamespitterBlazingTrailImpact"
tt.sound_events.insert = nil
tt.render.sprites[1].prefix = "dwarven_flamespitter_tower_blazing_trail_projectile"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].hidden = false
tt.duration_config = b.duration
tt = E:register_t("bullet_tower_flamespitter_skill_bomb_payload")

E:add_comps(tt, "pos", "main_script")

local b = balance.towers.flamespitter.skill_bomb

tt.main_script.update = scripts.bullet_tower_flamespitter_skill_bomb_payload.update
tt.burn_fx = "fx_bullet_tower_flamespitter_bomb_burn"
tt.burn_radius = 30
tt.vis_flags = bor(F_BURN, F_AREA)
tt.vis_bans = bor(F_FRIEND)
tt.mod_burn = "mod_burning_tower_flamespitter_skill_bomb"
tt = E:register_t("bullet_tower_barrel_lvl1", "bombKR5")

local b = balance.towers.barrel.basic_attack

tt.bullet.damage_max = b.damage_max[1]
tt.bullet.damage_min = b.damage_min[1]
tt.bullet.damage_radius = b.damage_radius
tt.bullet.flight_time = fts(25)
tt.bullet.hit_fx = "fx_bullet_tower_barrel"
tt.bullet.hit_decal = "decal_bullet_tower_barrel"
tt.bullet.pop_chance = 0.5
tt.bullet.particles_name = "ps_bullet_tower_barrel"
tt.bullet.align_with_trajectory = false
tt.bullet.mod = "mod_bullet_tower_barrel_lvl1"
tt.bullet.rotation_speed = 0
tt.main_script.update = scripts.bomb_KR5.update
tt.sound_events.hit_water = nil
tt.sound_events.hit = "TowerBarrelBasicAttackImpact"
tt.sound_events.insert = nil
tt.render.sprites[1].prefix = "barrel_tower_projectile"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].hidden = false
tt = E:register_t("bullet_tower_barrel_lvl2", "bullet_tower_barrel_lvl1")

local b = balance.towers.barrel.basic_attack

tt.bullet.damage_max = b.damage_max[2]
tt.bullet.damage_min = b.damage_min[2]
tt.bullet.mod = "mod_bullet_tower_barrel_lvl2"
tt = E:register_t("bullet_tower_barrel_lvl3", "bullet_tower_barrel_lvl1")

local b = balance.towers.barrel.basic_attack

tt.bullet.damage_max = b.damage_max[3]
tt.bullet.damage_min = b.damage_min[3]
tt.bullet.mod = "mod_bullet_tower_barrel_lvl3"
tt = E:register_t("bullet_tower_barrel_lvl4", "bullet_tower_barrel_lvl1")

local b = balance.towers.barrel.basic_attack

tt.bullet.damage_max = b.damage_max[4]
tt.bullet.damage_min = b.damage_min[4]
tt.bullet.mod = "mod_bullet_tower_barrel_lvl4"
tt = E:register_t("bullet_tower_barrel_skill_barrel", "bombKR5")

local b = balance.towers.barrel.skill_barrel

tt.bullet.damage_max = 0
tt.bullet.damage_min = 0
tt.bullet.hit_fx = nil
tt.bullet.hit_decal = nil
tt.bullet.hit_payload = "aura_bullet_tower_barrel_skill_barrel"
tt.bullet.flight_time = fts(25)
tt.bullet.pop_chance = 0
tt.bullet.particles_name = "ps_bullet_tower_barrel_skill_barrel"
tt.bullet.align_with_trajectory = false
tt.bullet.rotation_speed = nil
tt.main_script.update = scripts.bomb_KR5.update
tt.sound_events.hit_water = nil
tt.sound_events.insert = nil
tt.sound_events.remove = "TowerBarrelBadBatchRattle"
tt.render.sprites[1].name = "barrel_tower_lvl4_bad_barrel_projectile"
tt.render.sprites[1].animated = false
tt.render.sprites[1].hidden = false
tt.render.sprites[1].r = 0
tt = E:register_t("bullet_tower_sand_lvl1", "bullet")
b = balance.towers.sand.basic_attack
tt.bullet.damage_min = b.damage_min[1]
tt.bullet.damage_max = b.damage_max[1]
tt.bullet.damage_type = b.damage_type
tt.bullet.g = 0
tt.bullet.pop = {
	"pop_golden"
}
tt.bullet.pop_chance = 0.1
tt.bullet.particles_name = "ps_bullet_tower_sand"
tt.bullet.hit_fx = "fx_bullet_tower_sand_hit"
tt.bullet.vis_flags = F_RANGED
tt.bullet.vis_bans = F_NIGHTMARE
tt.bullet.fixed_speed = FPS * 12
tt.main_script.update = scripts.bullet_tower_sand.update
tt.render.sprites[1].prefix = "tower_sand_lvl1_projectile"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.max_bounces = b.max_bounces[1]
tt.bounce_range = b.bounce_range
tt.bounce_speed_mult = b.bounce_speed_mult
tt.bounce_damage_mult = b.bounce_damage_mult
tt.sound_hit = "TowerSandBasicAttackHit"
tt = E:register_t("bullet_tower_sand_lvl2", "bullet_tower_sand_lvl1")
b = balance.towers.sand.basic_attack
tt.bullet.damage_min = b.damage_min[2]
tt.bullet.damage_max = b.damage_max[2]
tt.max_bounces = b.max_bounces[2]
tt = E:register_t("bullet_tower_sand_lvl3", "bullet_tower_sand_lvl1")
b = balance.towers.sand.basic_attack
tt.bullet.damage_min = b.damage_min[3]
tt.bullet.damage_max = b.damage_max[3]
tt.max_bounces = b.max_bounces[3]
tt = E:register_t("bullet_tower_sand_lvl4", "bullet_tower_sand_lvl1")
b = balance.towers.sand.basic_attack
tt.bullet.damage_min = b.damage_min[4]
tt.bullet.damage_max = b.damage_max[4]
tt.max_bounces = b.max_bounces[4]
tt.render.sprites[1].prefix = "tower_sand_lvl4_projectile"
tt = E:register_t("bullet_tower_sand_skill_gold", "bullet_tower_sand_lvl1")
b = balance.towers.sand.skill_gold
tt.bullet.damage_min_config = b.damage_min
tt.bullet.damage_max_config = b.damage_max
tt.bullet.damage_min = nil
tt.bullet.damage_max = nil
tt.bullet.particles_name = "ps_bullet_tower_sand_skill_gold"
tt.bullet.hit_fx = "fx_bullet_tower_sand_skill_gold_hit"
tt.bullet.hit_fx_coins = "fx_bullet_tower_sand_skill_gold_hit_coins"
tt.render.sprites[1].prefix = "tower_sand_lvl4_skill_1_projectile"
tt.gold_chance = b.gold_chance
tt.gold_extra = b.gold_extra
tt.max_bounces = b.max_bounces
tt.bounce_damage_mult = b.bounce_damage_mult
tt = E:register_t("bullet_tower_ray_lvl1", "bullet")

local b = balance.towers.ray.basic_attack

tt.bullet.damage_type = DAMAGE_NONE
tt.bullet.damage_min = b.damage_min[1]
tt.bullet.damage_max = b.damage_max[1]
tt.bullet.hit_time = fts(2)
tt.bullet.out_start_fx = "fx_tower_ray_hit_start"
tt.bullet.out_fx = "fx_tower_ray_hit_source"
tt.bullet.mods = {
	"mod_tower_ray_damage",
	"mod_tower_ray_slow"
}
tt.hit_fx_only_no_target = true
tt.image_width = 152.5
tt.main_script.update = scripts.bullet_tower_ray.update
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].prefix = "channeler_tower_ray"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].loop = true
tt.sound_events.insert = "TowerRayBasicAttackCast"
tt.sound_events.interrupt = "TowerRayBasicAttackOffset"
tt.track_target = true
tt.ray_duration = b.duration
tt.damage_mult = 1
tt.vis_flags = F_RANGED
tt = E:register_t("bullet_tower_ray_lvl2", "bullet_tower_ray_lvl1")
tt.bullet.damage_min = b.damage_min[2]
tt.bullet.damage_max = b.damage_max[2]
tt = E:register_t("bullet_tower_ray_lvl3", "bullet_tower_ray_lvl1")
tt.bullet.damage_min = b.damage_min[3]
tt.bullet.damage_max = b.damage_max[3]
tt = E:register_t("bullet_tower_ray_lvl4", "bullet_tower_ray_lvl1")
tt.bullet.damage_min = b.damage_min[4]
tt.bullet.damage_max = b.damage_max[4]
tt = E:register_t("bullet_tower_ray_chain", "bullet_tower_ray_lvl4")

local b = balance.towers.ray

tt.damage_mult = nil
tt.max_enemies = b.skill_chain.max_enemies
tt.chain_pos = 1
tt.chain_delay = b.skill_chain.chain_delay
tt.chain_range = b.skill_chain.chain_range
tt.chain_range_to_stay = tt.chain_range + b.basic_attack.extra_range_to_stay
tt.vis_bans = bor(F_NIGHTMARE)
tt = E:register_t("bullet_tower_ray_sheep", "bolt")
b = balance.towers.ray.skill_sheep

E:add_comps(tt, "force_motion")

tt.render.sprites[1].hidden = true
tt.height_attack = 70
tt.initial_vel_y = 50
tt.transition_time = 1
tt.target_distance_detection = 20
tt.main_script.insert = scripts.bolt.insert
tt.main_script.update = scripts.bullet_tower_ray_sheep.update
tt.bullet.damage_type = DAMAGE_NONE
tt.bullet.damage_max = 0
tt.bullet.damage_min = 0
tt.bullet.acceleration_factor = 0.1
tt.bullet.min_speed = 30
tt.bullet.max_speed = 300
tt.bullet.hit_fx = "fx_tower_ray_lvl4_attack_sheep_hit"
tt.bullet.particles_name = "ps_bullet_tower_ray_sheep"
tt.bullet.max_speed = 1800
tt.bullet.min_speed = 30
tt.bullet.max_track_distance = 50
tt.force_motion.a_step = 6
tt.force_motion.max_a = 3000
tt.force_motion.max_v = 360
tt.initial_impulse = 9000
tt.initial_impulse_duration = 0.1
tt.initial_impulse_angle = math.pi / 2
tt.spawn_time = fts(18)
tt.sound_events.insert = "TowerRayMutationHexCast"
tt.shoot_sound = nil
tt.hit_sound = nil
tt.sheep_t = "enemy_tower_ray_sheep"
tt.sheep_flying_t = "enemy_tower_ray_sheep_flying"
tt.sheep_hp_mult = b.sheep.hp_mult

tt = E:register_t("bullet_tower_dark_elf", "bullet")
b = balance.towers.dark_elf.basic_attack
tt.bullet.hit_fx = "fx_bullet_tower_dark_elf_hit"
tt.bullet.flight_time = fts(23)
tt.bullet.hit_time = fts(1)
tt.bullet.damage_type = b.damage_type
tt.bullet.level = 1
tt.main_script.update = scripts.bullet_tower_dark_elf.update
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].name = "shot_run"
tt.render.sprites[1].loop = false
tt.image_width = 170
tt.ray_duration = fts(23)
tt.hit_delay = fts(1)
tt.sound_events.insert = "TowerDarkElfBasicAttackCast"
tt = E:register_t("bullet_tower_dark_elf_lvl1", "bullet_tower_dark_elf")
b = balance.towers.dark_elf.basic_attack
tt.bullet.damage_max = b.damage_max[1]
tt.bullet.damage_min = b.damage_min[1]
tt = E:register_t("bullet_tower_dark_elf_lvl2", "bullet_tower_dark_elf")
b = balance.towers.dark_elf.basic_attack
tt.bullet.damage_max = b.damage_max[2]
tt.bullet.damage_min = b.damage_min[2]
tt = E:register_t("bullet_tower_dark_elf_lvl3", "bullet_tower_dark_elf")
b = balance.towers.dark_elf.basic_attack
tt.bullet.damage_max = b.damage_max[3]
tt.bullet.damage_min = b.damage_min[3]
tt = E:register_t("bullet_tower_dark_elf_lvl4", "bullet_tower_dark_elf")
b = balance.towers.dark_elf.basic_attack
tt.bullet.damage_max = b.damage_max[4]
tt.bullet.damage_min = b.damage_min[4]
tt.skill_buff_mod = "mod_tower_dark_elf_skill_buff"
tt = E:register_t("bullet_tower_dark_elf_skill_buff", "bullet")

E:add_comps(tt, "tween")

tt.main_script.insert = scripts.bolt.insert
tt.main_script.update = scripts.bullet_tower_dark_elf_skill_buff.update
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].loop = false
tt.bullet.acceleration_factor = 0.1
tt.bullet.min_speed = 25
tt.bullet.max_speed = 450
tt.bullet.ignore_hit_offset = true
tt.bullet.ignore_rotation = true
tt.bullet.hit_fx = "fx_tower_dark_elf_skill_buff"
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		fts(7),
		0
	}
}
tt.tween.remove = true
tt.tween.reverse = false
tt.tween.disabled = true
tt.sound_start = "TowerDarkElfThrillOfTheHuntCast"
tt = E:register_t("bullet_tower_stage_17_weirdwood", "bombKR5")
b = balance.specials.towers.stage_17_weirdwood.basic_attack
tt.bullet.flight_time = fts(28)
tt.bullet.hit_fx = "fx_bullet_tower_stage_17_weirdwood"
tt.bullet.hit_decal = "decal_bullet_tower_stage_17_weirdwood"
tt.bullet.pop = {
	"pop_artillery"
}
tt.bullet.damage_min = b.damage_min
tt.bullet.damage_max = b.damage_max
tt.bullet.damage_radius = b.damage_radius
tt.bullet.pop = {
	"pop_entwood"
}
tt.render.sprites[1].name = "tower_tree_projectile_asst_projectile"
tt.sound_events.insert = "TowerWeirdwoodBasicAttackCast"
tt.sound_events.hit = "TowerWeirdwoodBasicAttackHit"
tt.sound_events.hit_water = "RTWaterExplosion"
tt = E:register_t("bullet_enemy_corrupted_elf", "arrow5_45degrees")
b = balance.enemies.undying_hatred.corrupted_elf
tt.render.sprites[1].name = "corrupted_ranger_arrow"
tt.render.sprites[1].animated = false
tt.bullet.asymmetrical = true
tt.bullet.damage_min = b.ranged_attack.damage_min
tt.bullet.damage_max = b.ranged_attack.damage_max
tt.bullet.flight_time = fts(10)
tt.bullet.g = -0.7 / (fts(1) * fts(1))
tt.bullet.miss_decal = "corrupted_ranger_arrow_miss"
tt.bullet.pop = nil
tt.bullet.predict_target_pos = false
tt.bullet.particles_name = "ps_bullet_enemy_corrupted_elf"

tt = E:register_t("bullet_enemy_rolling_sentry", "bullet")
b = balance.enemies.hammer_and_anvil.rolling_sentry
tt.render = nil
tt.main_script.insert = scripts.invisible_bullet.insert
tt.main_script.update = scripts.invisible_bullet.update
tt.bullet.asymmetrical = true
tt.bullet.damage_min = b.ranged_attack.damage_min
tt.bullet.damage_max = b.ranged_attack.damage_max
tt.bullet.damage_type = b.ranged_attack.damage_type
tt.bullet.hit_fx = "fx_bullet_enemy_rolling_sentry"

tt = E:register_t("bullet_enemy_deathwood", "bombKR5")
b = balance.enemies.undying_hatred.deathwood.ranged_attack
tt.main_script.update = scripts.enemy_bomb.update
tt.bullet.flight_time = fts(28)
tt.bullet.hit_fx = "fx_bullet_enemy_deathwood"
tt.bullet.pop = {
	"pop_artillery"
}
tt.bullet.damage_min = b.damage_min
tt.bullet.damage_max = b.damage_max
tt.bullet.damage_radius = b.damage_radius
tt.bullet.pop = {
	"pop_entwood"
}
tt.bullet.align_with_trajectory = true
tt.render.sprites[1].prefix = "deathwood_ball_fx"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_BULLET_PARTICLES
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "deathwood_spirit_ball"
tt.render.sprites[2].name = "idle"
tt.render.sprites[2].animated = true
tt.sound_events.insert = "EnemyDeathwoodRangedAttackCast"
tt.sound_events.hit = "EnemyDeathwoodRangedAttackImpact"
tt.sound_events.hit_water = "RTWaterExplosion"
tt = E:register_t("bullet_enemy_revenant_soulcaller", "bolt_enemy")

local b = balance.enemies.undying_hatred.revenant_soulcaller

tt.bullet.vis_flags = F_RANGED
tt.bullet.vis_bans = 0
tt.render.sprites[1].prefix = "revenant_soulcaller_proy"
tt.bullet.pop = nil
tt.bullet.pop_conds = nil
tt.bullet.acceleration_factor = 0.5
tt.bullet.damage_min = b.ranged_attack.damage_min
tt.bullet.damage_max = b.ranged_attack.damage_max
tt.bullet.max_speed = 360
tt.bullet.hit_fx = "fx_bullet_enemy_revenant_soulcaller_tower_stun"
tt.bullet.particles_name = "ps_bullet_enemy_revenant_soulcaller"
tt.bullet.damage_type = b.ranged_attack.damage_type
tt.bullet.align_with_trajectory = true
tt.sound_events.insert = "EnemyRevenantSoulcallerAttackCast"
tt = E:register_t("bullet_enemy_revenant_soulcaller_tower_stun", "bullet_enemy_revenant_soulcaller")
tt.bullet.damage_min = 0
tt.bullet.damage_max = 0
tt.bullet.damage_type = DAMAGE_NONE
tt.bullet.hit_fx = "fx_bullet_enemy_revenant_soulcaller_tower_stun"
tt.bullet.hit_mod = "mod_enemy_revenant_soulcaller_branches"
tt.main_script.update = scripts.bullet_enemy_revenant_soulcaller_tower_stun.update
tt = E:register_t("bullet_stage_18_eridan_arrow", "arrow5_45degrees")
b = balance.specials.stage18_eridan.ranged_attack
tt.render.sprites[1].name = "eridan_s18_arrow"
tt.bullet.damage_min = b.damage_min
tt.bullet.damage_max = b.damage_max
tt.bullet.damage_type = b.damage_type
tt.bullet.fixed_height = 50
tt.bullet.miss_decal = "eridan_s18_arrow_miss"
tt.bullet.particles_name = "ps_bullet_stage_18_eridan_arrow"
tt = E:register_t("bullet_stage_19_navira_fire_ball_ray", "bullet")
tt.bullet.damage_type = DAMAGE_NONE
tt.bullet.hit_time = fts(24)
tt.bullet.mod = "mod_bullet_stage_19_navira_fire_ball_ray_stun"
tt.hit_fx_only_no_target = true
tt.image_width = 186
tt.main_script.update = scripts.bullet_stage_19_navira_fire_ball_ray.update
tt.render.sprites[1].anchor = v(0.45, 0.5)
tt.render.sprites[1].prefix = "navira_soulray"
tt.render.sprites[1].loop = false

tt = E:register_t("bullet_enemy_brute_welder_death", "bullet")
b = balance.enemies.hammer_and_anvil.brute_welder

E:add_comps(tt, "force_motion")

tt.bullet.flight_time = fts(31)
tt.bullet.particles_name = "ps_bullet_enemy_brute_welder_death_trail"
tt.bullet.hit_fx = "fx_bullet_enemy_brute_welder_death_hit"
tt.bullet.align_with_trajectory = true
tt.bullet.ignore_hit_offset = true
tt.bullet.mod = "mod_bullet_enemy_brute_welder_death_stun"
tt.render.sprites[1].name = "brute_welder_tank_projectile"
tt.render.sprites[1].animated = false
tt.main_script.update = scripts.bullet_enemy_brute_welder_death.update
tt.initial_impulse = 3000
tt.initial_impulse_duration = 0.3
tt.initial_impulse_angle = 0
tt.force_motion.a_step = 5
tt.force_motion.max_a = 1800
tt.force_motion.max_v = 450
tt.sound_events.hit = "EnemyBruteWelderDeathImpact"
tt.mark_mod = "mod_bullet_enemy_brute_welder_death_mark"
tt.range = b.death_missile.range
tt = E:register_t("bullet_enemy_darksteel_guardian_death", "bombKR5")
b = balance.enemies.hammer_and_anvil.brute_welder

E:add_comps(tt, "force_motion")

tt.bullet.flight_time = fts(31)
tt.bullet.particles_name = "ps_bullet_enemy_darksteel_guardian_death_trail"
tt.bullet.ignore_hit_offset = true
tt.bullet.rotation_speed = 10 * FPS * math.pi / 180
tt.bullet.hit_decal = "decal_bullet_enemy_darksteel_guardian_death_clone"
tt.bullet.hit_fx = nil
tt.bullet.pop_chance = 0
tt.render.sprites[1].name = "darksteel_guardian_dwarf_projectile"
tt.render.sprites[1].animated = false
tt.initial_impulse = 3000
tt.initial_impulse_duration = 0.3
tt.initial_impulse_angle = 0
tt.force_motion.a_step = 5
tt.force_motion.max_a = 1800
tt.force_motion.max_v = 450
tt.sound_events.insert = "TowerRocketGunnersStingMissileCast"
tt.sound_events.hit = "TowerRocketGunnersStingMissileExplosion"
tt.range = b.death_missile.range
tt = E:register_t("bullet_boss_machinist", "bombKR5")
b = balance.enemies.hammer_and_anvil.boss_machinist.ranged_attack
tt.bullet.damage_max = b.damage_max
tt.bullet.damage_min = b.damage_min
tt.bullet.damage_radius = b.damage_radius
tt.bullet.damage_type = b.damage_type
tt.bullet.flight_time = fts(30)
tt.bullet.hit_fx = "fx_bullet_boss_machinist"
tt.bullet.pop_chance = 0.5
tt.bullet.particles_name = "ps_bullet_boss_machinist"
tt.bullet.hit_payload = "decal_scrap"
tt.sound_events.hit_water = nil
tt.sound_events.hit = "TowerTricannonBasicAttackImpact"
tt.render.sprites[1].name = "dlc_dwarf_boss_operator_proy"
tt.render.sprites[1].animated = false
tt.render.sprites[1].hidden = false
tt.sound_events.insert = "Stage24BFMachinistCannonCastShot"
tt.sound_events.hit = "Stage24BFMachinistCannonImpact"
tt.main_script.insert = scripts.enemy_bomb.insert
tt.main_script.update = scripts.enemy_bomb.update
tt = E:register_t("bullet_stage_25_torso_missile", "bullet")
b = balance.enemies.hammer_and_anvil.brute_welder

E:add_comps(tt, "force_motion")

tt.bullet.flight_time = fts(31)
tt.bullet.particles_name = "ps_bullet_stage_25_torso_missile"
tt.bullet.hit_fx = "fx_bullet_stage_25_torso_missile_hit"
tt.bullet.align_with_trajectory = true
tt.bullet.ignore_hit_offset = true
tt.bullet.mod = "mod_stage_25_torso_missile_stun"
tt.render.sprites[1].name = "DLC_stage_03_missile_projectile"
tt.render.sprites[1].animated = false
tt.main_script.update = scripts.bullet_stage_25_torso_missile.update
tt.force_motion.a_step = 5
tt.force_motion.max_a = 2250
tt.force_motion.max_v = 750
tt.sound_events.hit = "Stage25MissileImpact"
tt.mark_mod = "mod_stage_25_torso_missile_mark"
tt.relative_to_source = false
tt.flight_positions = {
	v(749, 608),
	v(737, 635),
	v(707, 673),
	v(673, 695),
	v(615, 707),
	v(547, 701),
	v(472, 661),
	v(431, 627),
	v(390, 580),
	v(377, 510),
	v(437, 401),
	v(553, 412),
	v(573, 524),
	v(459, 595),
	v(389, 522)
}
tt = E:register_t("bullet_stage_27_clone_dead", "bombKR5")
tt.bullet.flight_time = fts(35)
tt.bullet.hit_fx = nil
tt.bullet.hit_decal = "decal_stage_27_clone_dead"
tt.bullet.damage_min = 0
tt.bullet.damage_max = 0
tt.bullet.damage_radius = 0
tt.bullet.rotation_speed = 10 * FPS * math.pi / 180
tt.bullet.pop_chance = 0
tt.render.sprites[1].name = "cannonLAYERS_flyclone"
tt.render.sprites[1].animated = false
tt = E:register_t("bullet_stage_27_clone_alive", "bullet_stage_27_clone_dead")
tt.bullet.hit_decal = "decal_stage_27_clone_alive"
tt.bullet.hit_payload = "controller_spawn_enemy_common_clone"
tt = E:register_t("controller_spawn_enemy_common_clone")

E:add_comps(tt, "main_script", "pos")

tt.main_script.update = scripts.controller_spawn_enemy_common_clone.update
tt.spawn_t = "enemy_common_clone"
tt.spawn_delay = fts(32)
tt = E:register_t("bullet_stage_27_scrap", "bombKR5")
b = balance.specials.stage27_head.scrap_attack
tt.bullet.damage_max = b.damage_max
tt.bullet.damage_min = b.damage_min
tt.bullet.damage_radius = b.damage_radius
tt.bullet.damage_type = b.damage_type
tt.bullet.damage_bans = bor(F_ENEMY)
tt.bullet.flight_time = fts(60)
tt.bullet.hit_fx = "fx_bullet_stage_27_scrap"
tt.bullet.particles_name = "ps_bullet_stage_27_scrap"
tt.bullet.hit_payload = "decal_scrap"
tt.sound_events.hit_water = nil
tt.sound_events.hit = "TowerTricannonBasicAttackImpact"
tt.render.sprites[1].name = "dclenanos_stage05_ScrapProjectile_asst_scrap"
tt.render.sprites[1].animated = false
tt.render.sprites[1].hidden = false
tt.sound_events.insert = "TowerBallistaScrapBombCast"
tt.sound_events.hit = "TowerBallistaScrapBombExplosion"
tt.main_script.insert = scripts.enemy_bomb.insert
tt.main_script.update = scripts.enemy_bomb.update
tt = E:register_t("bullet_stage_27_tower_stun", "bombKR5")
b = balance.specials.stage27_head
tt.bullet.flight_time = fts(60)
tt.bullet.particles_name = "ps_bullet_stage_27_tower_stun"
tt.bullet.hit_fx = "fx_bullet_stage_27_tower_stun"
tt.bullet.ignore_hit_offset = true
tt.bullet.mod = "mod_bullet_stage_27_tower_stun"
tt.bullet.align_with_trajectory = true
tt.render.sprites[1].name = "boss_fx_scrap_projectile"
tt.render.sprites[1].animated = false
tt.main_script.insert = scripts.enemy_bomb.insert
tt.main_script.update = scripts.bullet_stage_27_tower_stun.update
tt.sound_events.insert = "TowerRocketGunnersStingMissileCast"
tt.sound_events.hit = "TowerRocketGunnersStingMissileExplosion"
tt = E:register_t("bullet_boss_grymbeard", "bullet")
b = balance.enemies.hammer_and_anvil.boss_grymbeard.ranged_attack

E:add_comps(tt, "force_motion")

tt.bullet.flight_time = fts(31)
tt.bullet.particles_name = "ps_bullet_boss_grymbeard_trail"
tt.bullet.hit_fx = "fx_bullet_boss_grymbeard_hit"
tt.bullet.hit_decal = "decal_bullet_boss_grymbeard"
tt.bullet.align_with_trajectory = true
tt.bullet.ignore_hit_offset = true
tt.bullet.damage_max = b.damage_max
tt.bullet.damage_min = b.damage_min
tt.bullet.damage_radius = b.damage_radius
tt.render.sprites[1].animated = true
tt.render.sprites[1].prefix = "grymbeardbossLAYERS_missile"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].loop = true
tt.main_script.update = scripts.bullet_boss_grymbeard.update
tt.initial_impulse = 3000
tt.initial_impulse_duration = 0.3
tt.initial_impulse_angle = 0
tt.force_motion.a_step = 5
tt.force_motion.max_a = 1800
tt.force_motion.max_v = 450
tt.sound_events.insert = "Stage27BFGrymbeardRangedAttackCast"
tt.sound_events.hit = "Stage27BFGrymbeardRangedAttackImpact"
tt = E:register_t("bullet_boss_grymbeard_death_clone", "bullet_stage_27_clone_dead")
tt.bullet.flight_time = fts(32)
tt.bullet.hit_decal = "decal_bullet_boss_grymbeard_death_clone"
tt = E:register_t("bullet_boss_grymbeard_death_boss", "bullet_stage_27_clone_dead")
tt.bullet.flight_time = fts(40)
tt.bullet.hit_decal = "decal_bullet_boss_grymbeard_death_boss"
tt.bullet.align_with_trajectory = true
tt.bullet.particles_name = "ps_bullet_boss_grymbeard_death_boss_trail"
tt.render.sprites[1].prefix = "grymbeardbossLAYERS_flyboss"
tt.render.sprites[1].name = "fly"
tt.render.sprites[1].animated = true
tt = E:register_t("bullet_boss_grymbeard_death_scrap_1", "bullet_stage_27_clone_dead")
tt.bullet.hit_decal = "decal_bullet_boss_grymbeard_death_scrap_1"
tt.render.sprites[1].name = "dclenanos_stage05_grymdebree1_Asst_grymbeardebree1"
tt.render.sprites[1].animated = false
tt = E:register_t("bullet_boss_grymbeard_death_scrap_2", "bullet_boss_grymbeard_death_scrap_1")
tt.bullet.hit_decal = "decal_bullet_boss_grymbeard_death_scrap_2"
tt.render.sprites[1].name = "dclenanos_stage05_grymdebree2_asst_grym3_grymbearddebree2"
tt = E:register_t("bullet_soldier_tower_dwarf", "bullet")
b = balance.towers.dwarf.soldier.ranged_attack
tt.bullet.hit_fx = "fx_bullet_soldier_tower_dwarf_hit"
tt.bullet.flight_time = fts(2)
tt.bullet.damage_type = DAMAGE_PHYSICAL
tt.bullet.damage_max = b.damage_max[1]
tt.bullet.damage_min = b.damage_min[1]
tt.bullet.damage_max_config = b.damage_max
tt.bullet.damage_min_config = b.damage_min
tt.bullet.level = 1
tt.main_script.update = scripts.bullet_soldier_tower_dwarf.update
tt.render = nil
tt.sound_events.insert = "TowerDwarfBasicAttack"
tt = E:register_t("bullet_incendiary_soldier_tower_dwarf", "bombKR5")

local b = balance.towers.dwarf.incendiary_ammo

tt.bullet.hit_fx = "fx_explosion_tower_dwarf"
tt.bullet.hit_decal = nil
tt.bullet.miss_decal = nil
tt.bullet.hit_decal = "decal_bullet_soldier_tower_dwarf"
tt.bullet.particles_name = "ps_bullet_incendiary_soldier_dwarf_tower"
tt.bullet.pop_chance = 0
tt.bullet.align_with_trajectory = false
tt.bullet.rotation_speed = 10 * FPS * math.pi / 180
tt.bullet.hit_payload = "aura_bullet_soldier_tower_dwarf"
tt.bullet.damages_min = b.damages_min
tt.bullet.damages_max = b.damages_max
tt.main_script.update = scripts.bomb_KR5.update
tt.sound_events.hit_water = nil
tt.sound_events.hit = "TowerDwarfIncendiaryAmmo"
tt.render.sprites[1].name = "tower_dwarf_skill_projectile"
tt.render.sprites[1].animated = false
tt.render.sprites[1].hidden = false
tt.bullet.damage_max = b.damage_max
tt.bullet.damage_min = b.damage_min
tt.bullet.damage_radius = b.damage_radius
tt.from_tower = true

tt = E:register_t("bullet_decal_item_portable_coil", "bullet")
b = balance.items.portable_coil
tt.bullet.damage_min = b.damage_min
tt.bullet.damage_max = b.damage_max
tt.bullet.damage_min_chain = b.damage_min_chain
tt.bullet.damage_max_chain = b.damage_max_chain
tt.bullet.damage_type = b.damage_type
tt.bullet.hit_time = fts(2)
tt.bullet.hit_fx = "fx_bullet_decal_item_portable_coil"
tt.bullet.mods = {
	"mod_decal_item_portable_coil_stun"
}
tt.hit_fx_only_no_target = false
tt.image_width = 75
tt.main_script.update = scripts.bullet_decal_item_portable_coil.update
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].prefix = "portable_coil_lightning_fx"
tt.render.sprites[1].name = "attack"
tt.render.sprites[1].loop = false
tt.sound_events.insert = "TowerArcaneWizardBasicAttack"
tt.track_target = true
tt.chain_range = b.chain_range
tt.chain_delay = fts(2)
tt.chain_pos = 1
tt.max_chain_length = b.max_chain_length
tt.vis_flags = bor(F_STUN)
tt.vis_bans = bor(F_NIGHTMARE)
tt = E:register_t("bullet_boss_corrupted_denas_spawn_entities", "bombKR5")
tt.bullet.flight_time = fts(30)
tt.bullet.align_with_trajectory = false
tt.bullet.ignore_hit_offset = true
tt.bullet.pop = nil
tt.bullet.rotation_speed = nil
tt.bullet.hit_payload = "enemy_glareling"
tt.bullet.particles_name = "ps_bullet_boss_corrupted_denas_spawn_entities"
tt.sound_events.insert = "Stage11BossCorruptedDenasGlarelingSpawn"
tt.sound_events.hit = nil
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "glearling_flying"
tt.bullet.rotation_speed = 10
tt.bullet.hit_decal = nil
tt.bullet.hit_fx = nil
tt.bullet.damage_type = DAMAGE_EXPLOSION
tt.bullet.damage_min = 0
tt.bullet.damage_max = 0
tt.bullet.g = -0.8 / (fts(1) * fts(1))
tt.main_script.update = scripts.bullet_boss_corrupted_denas_spawn_entities.update
tt = E:register_t("bullet_stage_03_heart_of_the_arborean", "bolt")
b = balance.specials.trees.heart_of_the_arborean

E:add_comps(tt, "force_motion")

tt.render.sprites[1].prefix = "stage_3_HeartProy_proyectile"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_BULLETS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].name = "stage_3_HeartProy_glow"
tt.render.sprites[2].animated = false
tt.render.sprites[2].z = Z_BULLETS - 1
tt.bullet.damage_type = b.damage_type
tt.height_attack = 70
tt.initial_vel_y = 50
tt.transition_time = 1
tt.target_distance_detection = 20
tt.main_script.insert = scripts.bullet_heart_of_the_arborean.insert
tt.main_script.update = scripts.bullet_heart_of_the_arborean.update
tt.bullet.damage_max = b.damage_max
tt.bullet.damage_min = b.damage_min
tt.bullet.damage_radius = b.damage_radius
tt.bullet.acceleration_factor = 0.1
tt.bullet.min_speed = 30
tt.bullet.max_speed = 300
tt.bullet.particles_name = "ps_bullet_stage_03_heart_of_the_arborean"
tt.bullet.max_speed = 1800
tt.bullet.min_speed = 30
tt.bullet.hit_sound = "Stage03HeartOfTheForestBlast"
tt.bullet.hit_decal = "decal_bullet_stage_03_heart_of_the_arborean"
tt.bullet.hit_fx = "trees_heart_of_the_arborean_decal_hit_fx"
tt.bullet.align_with_trajectory = true
tt.initial_impulse = 12000
tt.initial_impulse_duration = 0.2
tt.initial_impulse_angle = math.pi / 2
tt.force_motion.a_step = 15
tt.force_motion.max_a = 1800
tt.force_motion.max_v = 600
tt.sound_events.insert = nil
tt = E:register_t("bomb_item_cluster_bomb", "bombKR5")
b = balance.items.cluster_bomb
tt.bullet.damage_max = b.damage_max
tt.bullet.damage_min = b.damage_min
tt.bullet.damage_radius = b.damage_radius
tt.bullet.damage_type = b.damage_type
tt.bullet.flight_time = fts(20)
tt.bullet.hit_fx = "fx_item_cluster_bomb"
tt.bullet.rotation_speed = 10 * FPS * math.pi / 180
tt.render.sprites[1].animated = true
tt.render.sprites[1].name = "cluster_bomb_bomb_idle"
tt.main_script.update = scripts.bullet_cluster_bomb.update
tt.bomb_amounts = b.bomb_amounts
tt.bomb_small = "bomb_item_cluster_bomb_small"
tt.bombs_position = {
	{
		-30,
		-30
	},
	{
		30,
		30
	},
	{
		-30,
		30
	},
	{
		30,
		-30
	},
	{
		5,
		-40
	}
}
tt.time_between_bombs = fts(1)
tt.bullet.hit_decal = "decal_item_cluster_bomb_crater"
tt.sound_events.insert = "ItemsClusterBombCast"
tt = E:register_t("bomb_item_cluster_bomb_small", "bombKR5")
b = balance.items.cluster_bomb
tt.bullet.damage_max = b.damage_max_small
tt.bullet.damage_min = b.damage_min_small
tt.bullet.damage_radius = b.damage_radius_small
tt.bullet.damage_type = b.damage_type
tt.bullet.flight_time = fts(20)
tt.bullet.hit_fx = "fx_item_cluster_bomb_small"
tt.bullet.rotation_speed = 10 * FPS * math.pi / 180 * -1
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "cluster_bomb_fragment"
tt.bullet.pop = nil
tt.bullet.hit_decal = "decal_item_cluster_bomb_crater"
tt.bullet.hide_radius = 0
tt.sound_events.insert = nil
tt.sound_events.hit = "ItemsClusterBombSmallBombs"
tt = E:register_t("bullet_vile_spawner_spawn", "bombKR5")
tt.bullet.flight_time = fts(30)
tt.bullet.align_with_trajectory = false
tt.bullet.ignore_hit_offset = true
tt.bullet.pop = nil
tt.bullet.rotation_speed = nil
tt.bullet.hit_payload = "enemy_lesser_eye"
tt.sound_events.insert = nil
tt.sound_events.hit = nil
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "vile_spawner_projectile"
tt.render.sprites[1].anchor = v(0.6, 0.4)
tt.bullet.hit_decal = nil
tt.bullet.hit_fx = nil
tt.bullet.damage_type = DAMAGE_EXPLOSION
tt.bullet.damage_min = 0
tt.bullet.damage_max = 0
tt.bullet.g = -0.8 / (fts(1) * fts(1))
tt.main_script.update = scripts.bullet_vile_spawner_spawn.update
tt.bullet_particle = "bullet_vile_spawner_spawn_particle"
tt = E:register_t("bullet_vile_spawner_spawn_particle", "bombKR5")
tt.bullet.flight_time = fts(30)
tt.bullet.align_with_trajectory = true
tt.bullet.ignore_hit_offset = true
tt.bullet.pop = nil
tt.bullet.rotation_speed = nil
tt.sound_events.insert = nil
tt.sound_events.hit = nil
tt.render.sprites[1].animated = true
tt.render.sprites[1].name = "vile_spawner_projectile_fx_idle"
tt.render.sprites[1].z = Z_BULLETS - 1
tt.render.sprites[1].anchor = v(0.55, 0.45)
tt.bullet.hit_decal = nil
tt.bullet.hit_fx = nil
tt.bullet.damage_type = DAMAGE_EXPLOSION
tt.bullet.damage_min = 0
tt.bullet.damage_max = 0
tt.bullet.g = -0.8 / (fts(1) * fts(1))
tt.main_script.update = scripts.bullet_vile_spawner_spawn_particle.update
tt = E:register_t("bullet_enemy_noxious_horror", "bombKR5")

local b = balance.enemies.void_beyond.noxious_horror.ranged_attack

tt.bullet.damage_max = b.damage_max
tt.bullet.damage_min = b.damage_min
tt.bullet.damage_radius = b.radius
tt.bullet.damage_type = DAMAGE_PHYSICAL
tt.bullet.flight_time = fts(25)
tt.bullet.hit_fx = nil
tt.bullet.hit_decal = nil
tt.bullet.hit_decal_flying = "fx_bullet_enemy_noxious_horror_explosion_flying"
tt.bullet.hit_decal_ground = "fx_bullet_enemy_noxious_horror_explosion"
tt.bullet.pop = {
	"pop_forest_keeper"
}
tt.bullet.pop_chance = 0.2
tt.bullet.particles_name = "ps_bullet_enemy_noxious_horror"
tt.bullet.align_with_trajectory = true
tt.bullet.mod = "mod_enemy_noxious_horror_poison"
tt.vis_flags = bor(F_AREA)
tt.vis_bans = bor(F_FLYING, F_ENEMY)
tt.main_script.insert = scripts.bullet_enemy_noxious_horror.insert
tt.main_script.update = scripts.enemy_bomb.update
tt.render.sprites[1].prefix = "noxious_horror_projectile"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.sound_events.insert = "EnemyNoxiousHorrorBasicAttackCast"
tt.sound_events.hit = "EnemyNoxiousHorrorBasicAttackImpact"
tt = E:register_t("bullet_enemy_blinker", "bullet")

local b = balance.enemies.void_beyond.blinker

tt.bullet.damage_type = DAMAGE_NONE
tt.bullet.damage_min = 0
tt.bullet.damage_max = 0
tt.bullet.hit_time = fts(0)
tt.image_width = 112.5
tt.main_script.update = scripts.bullet_enemy_blinker.update
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].loop = true
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_BULLETS + 1
tt.render.sprites[1].hidden = true
tt.sound_events.insert = "EnemyVoidBlinkerStareCast"
tt.track_target = true
tt.ray_duration = b.ranged_attack.duration
tt = E:register_t("bullet_enemy_blinker_glare", "bullet_enemy_blinker")
tt.render.sprites[1].hidden = true
tt = E:register_t("bullet_tower_stage_13_sunray", "bullet")

local b = balance.specials.towers.stage_13_sunray

tt.bullet.damage_type = DAMAGE_NONE
tt.bullet.damage_min = b.basic_attack.damage_min
tt.bullet.damage_max = b.basic_attack.damage_max
tt.bullet.hit_time = fts(2)
tt.bullet.mod = "mod_bullet_tower_stage_13_sunray"
tt.bullet.max_track_distance = 100
tt.hit_fx_only_no_target = true
tt.image_width = 118
tt.main_script.update = scripts.bullet_tower_stage_13_sunray.update
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].prefix = "SunrayTower_SmallRay"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].loop = true
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_BULLETS + 1
tt.sound_events.insert = "TowerArcaneWizardBasicAttack"
tt.track_target = true
tt.ray_duration = b.basic_attack.duration
tt = E:register_t("bullet_tower_stage_13_sunray_special", "bullet")

local b = balance.specials.towers.stage_13_sunray.special_attack

tt.bullet.damage_type = DAMAGE_NONE
tt.bullet.damage_min = 0
tt.bullet.damage_max = 0
tt.image_width = 157.5
tt.main_script.update = scripts.bullet_tower_stage_13_sunray_special.update
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].prefix = "SunrayTower_BigRay"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].loop = true
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_BULLETS + 1
tt.sound_events.insert = "TowerArcaneWizardBasicAttack"
tt.track_target = true
tt.ray_duration = b.duration
tt = E:register_t("bullet_hero_robot_skill_fire", "bullet")
b = balance.heroes.hero_robot
tt.main_script.update = scripts.bullet_hero_robot_skill_fire.update
tt.render.sprites[1].name = "Blaze_skill2proyectil"
tt.render.sprites[1].animated = false
tt.bullet.damage_type = b.fire.damage_type
tt.bullet.damage_min = nil
tt.bullet.damage_max = nil
tt.bullet.hit_fx = "fx_hero_robot_skill_fire"
tt.bullet.acceleration_factor = 0.2
tt.bullet.min_speed = 600
tt.bullet.max_speed = 600
tt.bullet.vis_flags = F_RANGED
tt.bullet.vis_bans = 0
tt.bullet.g = -1.8 / (fts(1) * fts(1))
tt.damage_radius = b.fire.damage_radius
tt.damage_bans = bor(F_FRIEND)
tt.damage_flags = bor(F_RANGED)
tt.aura_on_hit = "aura_hero_robot_skill_fire_slow"
tt = E:register_t("bullet_hero_hunter_ranged_attack", "bullet")
b = balance.heroes.hero_hunter.basic_ranged
tt.bullet.hit_fx = "fx_hero_hunter_skill_heal_strike_hit"
tt.bullet.flight_time = fts(2)
tt.bullet.damage_type = DAMAGE_PHYSICAL
tt.bullet.damage_max = b.damage_max
tt.bullet.damage_min = b.damage_min
tt.bullet.damage_max_config = b.damage_max
tt.bullet.damage_min_config = b.damage_min
tt.bullet.level = 1
tt.bullet.xp_gain_factor = b.xp_gain_factor
tt.render = nil
tt.main_script.update = scripts.bullet_hero_hunter_ranged_attack.update
tt = E:register_t("arrow_hero_hunter_ricochet", "bullet")
b = balance.heroes.hero_hunter.ricochet
tt.main_script.update = scripts.arrow_hero_hunter_ricochet.update
tt.bullet.damage_type = b.damage_type
tt.bullet.damage_min = nil
tt.bullet.damage_max = nil
tt.bullet.vis_flags = F_RANGED
tt.bullet.vis_bans = 0
tt.bullet.hit_time = fts(2)
tt.render = nil
tt.bounces = nil
tt.bounce_range = b.bounce_range
tt.track_target = true
tt.ray_duration = fts(3)
tt.time_between_bounces = fts(2)
tt.bullet.mods = {
	"mod_hero_hunter_ricochet_attack",
	"mod_hero_hunter_ricochet_stun"
}
tt.trail_arrow = "arrow_hero_hunter_ricochet_trail"
tt.sound_bounce = "HeroHunterRicochetBounce"
tt = E:register_t("arrow_hero_hunter_ricochet_trail", "bullet")
b = balance.heroes.hero_hunter.ricochet
tt.main_script.update = scripts.arrow_hero_hunter_ricochet_trail.update
tt.image_width = 137
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].name = "mistystep_trailbetweenclones_run"
tt.render.sprites[1].loop = false
tt.render.sprites[1].animated = true
tt.track_target = true
tt.ray_duration = fts(12)
tt = E:register_t("bullet_hero_hunter_ultimate_ranged_attack", "bullet")
b = balance.heroes.hero_hunter
tt.bullet.hit_fx = "fx_hero_hunter_ultimate_hit"
tt.bullet.flight_time = fts(2)
tt.bullet.damage_type = b.ultimate.entity.basic_ranged.damage_type
tt.bullet.damage_max = nil
tt.bullet.damage_min = nil
tt.bullet.damage_max_config = b.ultimate.entity.basic_ranged.damage_max
tt.bullet.damage_min_config = b.ultimate.entity.basic_ranged.damage_min
tt.bullet.level = 1
tt.render = nil
tt.main_script.update = scripts.bullet_hero_hunter_ultimate_ranged_attack.update
tt = E:register_t("bolt_hero_dragon_gem_attack", "bolt")

E:add_comps(tt, "force_motion")

b = balance.heroes.hero_dragon_gem.basic_ranged_shot
tt.bullet.damage_type = b.damage_type
tt.bullet.hit_fx = nil
tt.bullet.hit_fx_floor = "fx_hero_dragon_gem_bolt_hit"
tt.bullet.hit_fx_flying = "fx_hero_dragon_gem_bolt_hit_flying"
tt.bullet.particles_name = "ps_bolt_hero_dragon_gem_attack"
tt.bullet.max_speed = 600
tt.bullet.align_with_trajectory = true
tt.bullet.min_speed = 600
tt.bullet.xp_gain_factor = b.xp_gain_factor
tt.bullet.use_unit_damage_factor = true
tt.bullet.ignore_hit_offset = true
tt.bullet.payload = {
	"decal_hero_dragon_gem_floor_decal",
	"decal_hero_dragon_gem_floor_circle"
}
tt.bullet.pop_chance = 0
tt.force_motion.a_step = 5
tt.force_motion.max_a = 3000
tt.force_motion.max_v = 600
tt.render.sprites[1].prefix = "hero_evil_dragon_attack_projectile"
tt.render.sprites[1].z = Z_FLYING_HEROES
tt.main_script.update = scripts.bolt_hero_dragon_gem_attack.update
tt.damage_range = b.damage_range
tt.sound_hit = "HeroDragonGemBasicAttackImpact"
tt = E:register_t("ray_hero_dragon_gem_stun", "bullet")
b = balance.heroes.hero_dragon_gem
tt.bullet.damage_type = DAMAGE_NONE
tt.bullet.damage_min = nil
tt.bullet.damage_max = nil
tt.bullet.hit_time = fts(0)
tt.bullet.ignore_hit_offset = true
tt.bullet.hit_payload = "aura_hero_dragon_gem_skill_stun"
tt.hit_fx_only_no_target = true
tt.image_width = 165.5
tt.main_script.update = scripts.ray5_simple.update
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].name = "hero_evil_dragon_breath_idle"
tt.render.sprites[1].loop = false
tt.sound_events.insert = "TowerArcaneWizardBasicAttack"
tt.track_target = false
tt.ray_duration = fts(42)
tt = E:register_t("bullet_hero_dragon_gem_crystal_totem", "bombKR5")
tt.bullet.flight_time = fts(30)
tt.bullet.align_with_trajectory = true
tt.bullet.ignore_hit_offset = true
tt.bullet.pop = nil
tt.bullet.rotation_speed = nil
tt.bullet.hit_payload = "aura_hero_dragon_gem_crystal_totem"
tt.sound_events.hit = nil
tt.sound_events.insert = nil
tt.render.sprites[1].animated = true
tt.render.sprites[1].name = "hero_evil_dragon_conduit_projectile_idle"
tt.bullet.hit_decal = nil
tt.bullet.hit_fx = nil
tt.bullet.damage_type = DAMAGE_EXPLOSION
tt.bullet.damage_min = 0
tt.bullet.damage_max = 0
tt.bullet.g = -0.8 / (fts(1) * fts(1))
tt = E:register_t("bullet_hero_dragon_gem_ultimate_shard", "bullet")
tt.main_script.update = scripts.bullet_hero_dragon_gem_ultimate_shard.update
tt.bullet.arrive_decal = "decal_bullet_hero_dragon_gem_ultimate_shard"
tt.bullet.max_speed = 900
tt.render.sprites[1].name = "hero_evil_dragon_ultimate_projectile"
tt.render.sprites[1].animated = false
tt = E:register_t("bullet_hero_bird", "bombKR5")

local b = balance.heroes.hero_bird.basic_attack

tt.bullet.damage_max = nil
tt.bullet.damage_min = nil
tt.bullet.damage_radius = b.damage_radius
tt.bullet.flight_time = fts(30)
tt.bullet.hit_fx = "fx_bullet_hero_bird"
tt.bullet.hit_decal = "decal_bullet_hero_bird"
tt.bullet.pop_chance = 0.5
tt.bullet.align_with_trajectory = false
tt.bullet.rotation_speed = 10 * FPS * math.pi / 180
tt.bullet.xp_gain_factor = b.xp_gain_factor
tt.main_script.update = scripts.bomb_KR5.update
tt.sound_events.insert = "HeroBirdBasicAttackCast"
tt.sound_events.hit_water = nil
tt.sound_events.hit = "HeroBirdBasicAttackImpact"
tt.render.sprites[1].name = "gryph_proy"
tt.render.sprites[1].animated = false
tt.render.sprites[1].hidden = false
tt = E:register_t("bullet_hero_bird_cluster_bomb", "bombKR5")

local b = balance.heroes.hero_bird.cluster_bomb

tt.bullet.flight_time = fts(22)
tt.bullet.hit_fx = "fx_bullet_hero_bird_cluster_bomb_air"
tt.bullet.hit_decal = nil
tt.bullet.particles_name = "ps_bullet_hero_bird_cluster_bomb"
tt.bullet.pop_chance = 0
tt.bullet.align_with_trajectory = false
tt.bullet.rotation_speed = 0
tt.bullet.hit_payload = "controller_bullet_hero_bird_cluster_bomb_part"
tt.main_script.update = scripts.bomb_KR5.update
tt.sound_events.insert = "HeroBirdBasicCarpetBombingCast"
tt.sound_events.hit_water = nil
tt.sound_events.hit = nil
tt.render.sprites[1].name = "gryph_skillproy_decl"
tt.render.sprites[1].animated = true
tt.render.sprites[1].hidden = false
tt = E:register_t("controller_bullet_hero_bird_cluster_bomb_part")

E:add_comps(tt, "main_script", "pos")

local b = balance.heroes.hero_bird.cluster_bomb

tt.main_script.update = scripts.controller_bullet_hero_bird_cluster_bomb_part.update
tt.explosion_height = b.first_explosion_height
tt.part_template = "bullet_hero_bird_cluster_bomb_part"
tt = E:register_t("bullet_hero_bird_cluster_bomb_part", "bombKR5")

local b = balance.heroes.hero_bird.cluster_bomb

tt.bullet.damage_min = nil
tt.bullet.damage_max = nil
tt.bullet.damage_radius = b.explosion_damage_radius
tt.bullet.damage_type = b.explosion_damage_type
tt.bullet.flight_time = fts(25)
tt.bullet.hit_fx = "fx_bullet_hero_bird_cluster_bomb"
tt.bullet.hit_decal = nil
tt.bullet.hit_payload = "aura_hero_bird_cluster_bomb_fire"
tt.bullet.particles_name = "ps_bullet_hero_bird_cluster_bomb_part"
tt.bullet.pop_chance = 0
tt.bullet.align_with_trajectory = false
tt.bullet.rotation_speed = 20 * FPS * math.pi / 180
tt.main_script.update = scripts.bomb_KR5.update
tt.sound_events.hit_water = nil
tt.sound_events.hit = "HeroBirdBasicCarpetBombingImpact"
tt.sound_events.insert = nil
tt.render.sprites[1].name = "gryph_skillproy_part"
tt.render.sprites[1].animated = false
tt.render.sprites[1].hidden = false
tt = E:register_t("bullet_stage_16_overseer_tentacle_spawn", "bombKR5")

local b = balance.specials.stage16_overseer.tentacle_bullet_explosion_damage

tt.bullet.flight_time = fts(31)
tt.sound_events.hit_water = nil
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "overseer_fx_overseer_proyectile"
tt.bullet.hit_fx = "fx_stage_16_overseer_tentacle_hit_decal"
tt.bullet.hit_decal = "decal_stage_16_overseer_tentacle_projectile"
tt.bullet.particles_name = "ps_bullet_stage_16_overseer_tentacle_spawn"
tt.bullet.rotation_speed = 5
tt.bullet.pop = nil
tt.bullet.damage_min = 0
tt.bullet.damage_max = 0
tt.main_script.update = scripts.bullet_stage_16_overseer_tentacle_spawn.update
tt.spawn_offset = {
	v(-40, 0),
	v(0, 20),
	v(30, 0),
	v(0, -30)
}
tt.explosion_damage = {}
tt.explosion_damage.range = b.range
tt.explosion_damage.vis_flags = bor(F_RANGED)
tt.explosion_damage.vis_bans = bor(F_ENEMY)
tt.explosion_damage.damage_type = b.damage_type
tt.explosion_damage.damage_min = b.damage_min
tt.explosion_damage.damage_max = b.damage_max
tt.spawn_amounts_per_phase = balance.specials.stage16_overseer.tentacle_spawns_per_phase
tt.sound_events.insert = nil
tt.sound_events.hit = "Stage16OverseerSpawnerImpact"
tt = E:register_t("bullet_stage_16_overseer_destroy_holders", "bullet")

local b = balance.towers.arcane_wizard

tt.bullet.damage_type = DAMAGE_NONE
tt.bullet.damage_min = 0
tt.bullet.damage_max = 0
tt.bullet.hit_time = fts(2)
tt.hit_fx_only_no_target = true
tt.image_width = 381
tt.main_script.update = scripts.ray5_simple.update
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].name = "overseer_fx_overseer_destroyray_loop"
tt.render.sprites[1].loop = false
tt.sound_events.insert = "TowerArcaneWizardBasicAttack"
tt.track_target = true
tt.ray_duration = fts(26)

tt = E:register_t("bolt_dragon_bone_basic_attack", "bolt")

E:add_comps(tt, "force_motion")

b = balance.heroes.hero_dragon_bone.basic_attack
tt.bullet.damage_type = b.damage_type
tt.bullet.hit_fx = nil
tt.bullet.hit_fx_floor = "fx_bolt_dragon_bone_basic_attack_hit"
tt.bullet.hit_fx_flying = "fx_bolt_dragon_bone_basic_attack_hit_flying"
tt.bullet.particles_name = "ps_bolt_dragon_bone_basic_attack"
tt.bullet.max_speed = 600
tt.bullet.align_with_trajectory = true
tt.bullet.min_speed = 600
tt.bullet.xp_gain_factor = b.xp_gain_factor
tt.bullet.use_unit_damage_factor = true
tt.bullet.ignore_hit_offset = true
tt.bullet.pop_chance = 0
tt.bullet.mod = "mod_dragon_bone_plague"
tt.force_motion.a_step = 5
tt.force_motion.max_a = 3000
tt.force_motion.max_v = 600
tt.initial_impulse = 10
tt.render.sprites[1].prefix = "hero_dragon_bone_projectile"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].z = Z_FLYING_HEROES
tt.main_script.update = scripts.bolt_dragon_bone_basic_attack.update
tt.damage_range = b.radius
tt.sound_events.insert = "HeroDragonBoneBasicAttackCast"
tt.sound_events.hit = "HeroDragonBoneBasicAttackImpact"
tt = E:register_t("bullet_dragon_bone_cloud", "bullet")
tt.bullet.damage_type = DAMAGE_NONE
tt.bullet.damage_min = 0
tt.bullet.damage_max = 0
tt.bullet.hit_time = fts(10)
tt.bullet.ignore_hit_offset = true
tt.bullet.hit_payload = "aura_dragon_bone_cloud"
tt.hit_fx_only_no_target = true
tt.image_width = 150
tt.main_script.update = scripts.bullet_dragon_bone_cloud.update
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].name = "hero_dragon_bone_breath_idle"
tt.render.sprites[1].loop = false
tt.sound_events.insert = "TowerArcaneWizardBasicAttack"
tt.track_target = false
tt.ray_duration = fts(42)

tt = E:register_t("bullet_dragon_bone_rain", "bullet")
b = balance.heroes.hero_dragon_bone.rain

E:add_comps(tt, "tween")

tt.main_script.insert = scripts.bullet_dragon_bone_rain.insert
tt.main_script.update = scripts.bullet_dragon_bone_rain.update
tt.bullet.damage_max = nil
tt.bullet.damage_min = nil
tt.bullet.damage_radius = 50
tt.bullet.damage_type = b.damage_type
tt.bullet.damage_flags = F_AREA
tt.bullet.damage_bans = F_FRIEND
tt.bullet.mod = "mod_dragon_bone_rain_stun"
tt.bullet.hit_decal = "decal_bullet_dragon_bone_rain"
tt.bullet.hit_fx = "fx_bullet_dragon_bone_rain"
tt.bullet.vanish_fx = "fx_bullet_dragon_bone_rain_vanish"
tt.bullet.hit_time = fts(4)
tt.bullet.duration = 1
tt.render.sprites[1].name = "hero_dragon_bone_bones_"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].name = "hero_dragon_bone_bones_"
tt.render.sprites[2].animated = false
tt.render.sprites[2].z = Z_OBJECTS
tt.render.sprites[2].hidden = true
tt.render.sprites[2].alpha = 0
tt.sprite_prefix = "hero_dragon_bone_bones_"
tt.bone_type = "a"
tt.tween.remove = false
tt.tween.disabled = true
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		tt.bullet.hit_time,
		255
	}
}
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].name = "scale"
tt.tween.props[2].keys = {
	{
		0,
		vv(0.5)
	},
	{
		tt.bullet.hit_time,
		vv(1)
	}
}
tt.tween.props[3] = E:clone_c("tween_prop")
tt.tween.props[3].name = "offset"
tt.tween.props[3].keys = {
	{
		0,
		v(-50, 100)
	},
	{
		tt.bullet.hit_time,
		v(-5, 10)
	}
}
tt.tween.props[4] = E:clone_c("tween_prop")
tt.tween.props[4].name = "alpha"
tt.tween.props[4].sprite_id = 2
tt.tween.props[4].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	}
}
tt.tween.props[4].disabled = true
tt.tween.props[5] = E:clone_c("tween_prop")
tt.tween.props[5].name = "alpha"
tt.tween.props[5].keys = {
	{
		0,
		255
	},
	{
		fts(12),
		0
	}
}
tt.tween.props[5].disabled = true
tt.sound_events.insert = nil
tt.sound_events.hit = "HeroDragonBoneSpineRainImpact"
tt = E:register_t("bolt_dragon_bone_burst", "bolt")
b = balance.heroes.hero_dragon_bone.burst

E:add_comps(tt, "force_motion")

tt.render.sprites[1].prefix = "hero_dragon_bone_burst_projectile"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_BULLETS
-- tt.render.sprites[2] = E:clone_c("sprite")
-- tt.render.sprites[2].name = "stage_3_HeartProy_glow"
-- tt.render.sprites[2].animated = false
-- tt.render.sprites[2].z = Z_BULLETS - 1
tt.height_attack = 70
tt.initial_vel_y = 50
tt.transition_time = 1
tt.target_distance_detection = 20
tt.main_script.insert = scripts.bolt_dragon_bone_burst.insert
tt.main_script.update = scripts.bolt_dragon_bone_burst.update
tt.bullet.damage_type = b.damage_type
tt.bullet.damage_max = b.damage_max
tt.bullet.damage_min = b.damage_min
tt.bullet.acceleration_factor = 0.1
tt.bullet.min_speed = 30
tt.bullet.max_speed = 300
tt.bullet.particles_name = "ps_bolt_dragon_bone_burst"
tt.bullet.max_speed = 1800
tt.bullet.min_speed = 30
tt.bullet.hit_sound = "Stage03HeartOfTheForestBlast"
tt.bullet.hit_fx_floor = "fx_bolt_dragon_bone_basic_attack_hit"
tt.bullet.hit_fx_flying = "fx_bolt_dragon_bone_basic_attack_hit_flying"
tt.bullet.align_with_trajectory = true
tt.bullet.mod = "mod_dragon_bone_plague"
tt.initial_impulse = 12000
tt.initial_impulse_duration = 0.1
tt.initial_impulse_angle = math.pi / 2
tt.force_motion.a_step = 15
tt.force_motion.max_a = 1650
tt.force_motion.max_v = 510
tt.sound_events.insert = nil
tt.sound_events.hit = "HeroDragonBoneSpreadingBurstImpact"
tt = E:register_t("bullet_witch_skill_polymorph", "bolt")
b = balance.heroes.hero_witch

E:add_comps(tt, "force_motion")

tt.render.sprites[1].prefix = "hero_witch_skill_1_particle_idle"
tt.render.sprites[1].name = "idle"
tt.main_script.insert = scripts.bolt.insert
tt.main_script.update = scripts.bullet_witch_skill_polymorph.update
tt.bullet.damage_type = DAMAGE_NONE
tt.bullet.damage_max = 0
tt.bullet.damage_min = 0
tt.bullet.acceleration_factor = 0.1
tt.bullet.min_speed = 30
tt.bullet.max_speed = 300
tt.bullet.hit_fx = "fx_hero_witch_skill_polymorph"
tt.bullet.particles_name = "ps_bullet_hero_witch_skill_polymorph"
tt.bullet.max_speed = 1800
tt.bullet.min_speed = 30
tt.bullet.max_track_distance = 50
tt.bullet.mod = "mod_hero_witch_skill_polymorph"
tt.force_motion.a_step = 6
tt.force_motion.max_a = 3000
tt.force_motion.max_v = 360
tt.initial_impulse = 9000
tt.initial_impulse_duration = 0.1
tt.initial_impulse_angle = math.pi / 2
tt.spawn_time = fts(18)
tt.sound_events.insert = "HeroWitchVeggiefyIn"
tt.shoot_sound = nil
tt.hit_sound = nil

local b = balance.enemies.crocs.quickfeet_gator

tt = E:register_t("quickfeet_gator_chicken_leg_bullet", "bullet")
tt.main_script.insert = scripts.quickfeet_gator_chicken_leg_bullet.insert
tt.main_script.update = scripts.quickfeet_gator_chicken_leg_bullet.update
tt.render.sprites[1].anchor = v(0.5, 0.6)
tt.render.sprites[1].name = "quickfeet_gator_attack_projectile_0001"
tt.render.sprites[1].animated = false
tt.bullet.rotation_speed = 20 * FPS * math.pi / 180
tt.bullet.hit_ts_offset = fts(7)
tt.bullet.hide_radius = nil
tt.bullet.hide_radius_start = 0
tt.bullet.hide_radius_end = 4
tt.bullet.flight_time = nil
tt.bullet.g = -1.2 / (fts(1) * fts(1))
tt.bullet.hit_fx = "fx_quickfeet_chicken_hit"
tt.bullet.hit_blood_fx = nil
tt.bullet.mod = "mod_chicken_leg_polymorph"
tt = E:register_t("bullet_quickfeet_gator_bone", "arrow5_fixed_height")
b = balance.enemies.crocs.quickfeet_gator.ranged_attack
tt.bullet.flight_time = fts(22)
tt.bullet.damage_min = b.damage_min
tt.bullet.damage_max = b.damage_max
tt.bullet.fixed_height = 30
tt.bullet.g = -1000
tt.bullet.hit_blood_fx = nil
tt.bullet.pop = nil
tt.bullet.hide_radius = 6
tt.bullet.prediction_error = false
tt.bullet.predict_target_pos = false
tt.bullet.hit_fx = "fx_quickfeet_bone_hit"
tt.render.sprites[1].prefix = "quickfeet_gator_attack_projectile_bone"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].animated = true
tt.bullet.rotation_speed = 30 * FPS * math.pi / 180 * 0.6
tt.bullet.hide_radius = 2
tt.bullet.hit_distance = 20
tt.bullet.extend_particles_cutoff = true
tt = E:register_t("bullet_ranged_crocs", "arrow5")
b = balance.enemies.crocs.crocs_ranged
tt.bullet.flight_time = fts(13)
tt.bullet.flight_time_variance = 3
tt.bullet.damage_min = b.ranged_attack.damage_min
tt.bullet.damage_max = b.ranged_attack.damage_max
tt.bullet.g = -2.5 / (fts(1) * fts(1))
tt.bullet.hit_blood_fx = nil
tt.bullet.pop = nil
tt.bullet.hide_radius = 6
tt.bullet.prediction_error = false
tt.bullet.predict_target_pos = false
tt.bullet.hit_fx = "fx_ranged_croc_hit"
tt.render.sprites[1].name = "ranged_croc_proyectile"
tt.render.sprites[1].animated = false
tt.bullet.hide_radius = 0
tt.bullet.hit_distance = 20
tt.bullet.extend_particles_cutoff = true
tt = E:register_t("bullet_crocs_shaman", "bolt_enemy")

local b = balance.enemies.crocs.crocs_shaman

tt.bullet.vis_flags = F_RANGED
tt.bullet.vis_bans = 0
tt.render.sprites[1].prefix = "shaman_bolt"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].anchor = v(0.5, 0.485)
tt.sound_events.insert = "EnemyCrocShamanShot"
tt.bullet.hit_fx = "fx_enemy_croc_shaman_hit"
tt.bullet.pop = nil
tt.bullet.pop_conds = nil
tt.bullet.acceleration_factor = 0.5
tt.bullet.damage_min = b.ranged_attack.damage_min
tt.bullet.damage_max = b.ranged_attack.damage_max
tt.bullet.max_speed = 360
tt.bullet.particles_name = "ps_croc_shaman_bullet_trail"
tt.bullet.damage_type = b.ranged_attack.damage_type
tt = E:register_t("bullet_crocs_egg_spawner_spawn", "bombKR5")
tt.bullet.flight_time = fts(30)
tt.bullet.align_with_trajectory = false
tt.bullet.ignore_hit_offset = true
tt.bullet.pop = nil
tt.bullet.rotation_speed = nil
tt.bullet.hit_payload = "enemy_crocs_basic_egg"
tt.sound_events.insert = nil
tt.sound_events.hit = nil
tt.render.sprites[1].animated = true
tt.render.sprites[1].prefix = "crokinder_carrier_attack_projectile"
tt.render.sprites[1].name = "run"
tt.bullet.hide_radius = 0
tt.bullet.hit_decal = nil
tt.bullet.hit_fx = nil
tt.bullet.damage_type = DAMAGE_EXPLOSION
tt.bullet.damage_min = 0
tt.bullet.damage_max = 0
tt.bullet.g = -0.8 / (fts(1) * fts(1))
tt.main_script.update = scripts.bullet_crocs_egg_spawner_spawn.update
tt = E:register_t("bullet_enemy_crocs_hydra", "bombKR5")

local b = balance.enemies.crocs.crocs_hydra

tt.render.sprites[1].prefix = "hydra_projectileDef"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].exo = true
tt.render.sprites[1].animated = true
tt.bullet.hit_fx = nil
tt.bullet.hit_payload = "aura_bullet_enemy_crocs_hydra_dot"
tt.bullet.pop = nil
tt.bullet.pop_conds = nil
tt.bullet.damage_min = 0
tt.bullet.damage_max = 0
tt.bullet.damage_type = DAMAGE_NONE
tt.bullet.particles_name = "ps_bullet_crocs_hydra_tower_debuff"
tt.bullet.align_with_trajectory = true
tt = E:register_t("bullet_boss_crocs_poison_rain_lvl1", "bombKR5")
b = balance.enemies.crocs.boss_crocs.poison_rain
tt.bullet.flight_time = fts(40)
tt.bullet.hit_fx = "boss_gator_vfx_acid_explosion"
tt.bullet.align_with_trajectory = true
tt.bullet.ignore_hit_offset = true
tt.bullet.pop_chance = 0.5
tt.bullet.rotation_speed = nil
tt.bullet.hit_payload = "aura_bullet_boss_crocs_poison_rain_lvl1"
tt.sound_events.hit = "Stage22AbominorAcidHit"
tt.render.sprites[1].animated = true
tt.render.sprites[1].prefix = "boss_gator_vfx_acid_projectile"
tt.render.sprites[1].name = "run"
tt.bullet.particles_name = "ps_bullet_boss_crocs_poison_rain_lvl1"
tt = E:register_t("bullet_boss_crocs_poison_rain_lvl2", "bullet_boss_crocs_poison_rain_lvl1")
tt.bullet.hit_fx = "boss_gator_vfx_fire_explosion"
tt.bullet.hit_payload = "aura_bullet_boss_crocs_poison_rain_lvl2"
tt.render.sprites[1].prefix = "boss_gator_vfx_fire_projetile"
tt.bullet.particles_name = "ps_bullet_boss_crocs_poison_rain_lvl2"
tt.sound_events.hit = "Stage22AbominorFireballHit"
tt = E:register_t("bullet_stage_20_arborean_watchtower", "arrow5_fixed_height")
b = balance.specials.towers.stage_20_arborean_watchtower
tt.bullet.damage_min = b.basic_attack.damage_min
tt.bullet.damage_max = b.basic_attack.damage_max
tt.bullet.damage_type = b.basic_attack.damage_type
tt.bullet.fixed_height = 40
tt.bullet.g = -1000
tt.render.sprites[1].name = "stage_4_special_arborean_sentinels_spearer_spear"
tt.bullet.hit_fx = "fx_arborean_sentinels_spearmen_spear_hit"
tt.bullet.hide_radius = 10
tt.bullet.miss_decal = "stage_4_special_arborean_sentinels_spearer_spear_decal"
tt = E:register_t("bullet_stage_20_arborean_oldtree", "bombKR5")
tt.bullet.flight_time = fts(25)
tt.bullet.hit_fx = nil
tt.bullet.pop = nil
tt.bullet.hit_decal = nil
tt.bullet.hide_radius = 0
tt.bullet.align_with_trajectory = false
tt.bullet.ignore_hit_offset = true
tt.bullet.rotation_speed = nil
tt.bullet.hit_payload = "stage_20_arborean_oldtree_tree"
tt.bullet.particles_name = "ps_bullet_tower_arborean_oldtree_trail"
tt.render.sprites[1].prefix = "arborean_projectileDef"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].loop = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].animated = true
tt = E:register_t("bullet_stage_20_arborean_honey", "bombKR5")
b = balance.specials.towers.stage_20_arborean_honey
tt.bullet.flight_time = fts(25)
tt.bullet.hit_fx = "fx_bullet_tower_arborean_honey_hit"
tt.bullet.hide_radius = 0
tt.bullet.align_with_trajectory = false
tt.bullet.ignore_hit_offset = true
tt.bullet.pop_chance = 0.5
tt.bullet.hit_payload = "aura_bullet_tower_arborean_honey"
tt.render.sprites[1].name = "arborean_honey_tower_projectil"
tt.bullet.damage_max = b.damage_max
tt.bullet.damage_min = b.damage_min
tt.bullet.damage_radius = b.damage_radius
tt.bullet.damage_type = b.damage_type
tt.sound_events.hit = "Stage20BeesImpact"
tt = E:register_t("bullet_stage_22_arborean_mages", "bolt")

E:add_comps(tt, "force_motion")

tt.main_script.update = scripts.bolt_force_motion_kr5.update
tt.main_script.insert = scripts.bolt_force_motion_kr5.insert
b = balance.specials.towers.stage_22_arborean_mages_tower
tt.render.sprites[1].prefix = "Stage_22_shaman_shaman_projectile"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_BULLETS
tt.bullet.damage_min = b.basic_attack.damage_min
tt.bullet.damage_max = b.basic_attack.damage_max
tt.bullet.damage_type = b.basic_attack.damage_type
tt.bullet.hit_fx = "fx_bullet_tower_arborean_mage_hit"
tt.bullet.particles_name = "ps_bullet_tower_stage_22_mages_trail"
tt.bullet.align_with_trajectory = true
tt.initial_impulse = 6000
tt.initial_impulse_duration = 0.08
tt.initial_impulse_angle_abs = math.pi / 2
tt.force_motion.a_step = 10
tt.force_motion.max_a = 6000
tt.force_motion.max_v = 450
tt.sound_events.insert = nil
tt = E:register_t("bullet_tower_hermit_toad_instakill_tongue", "bullet")
b = balance.towers.hermit_toad.instakill
tt.bullet.hit_fx = nil
tt.bullet.flight_time = fts(23)
tt.bullet.hit_time = fts(1)
tt.bullet.damage_type = bor(DAMAGE_EAT, DAMAGE_INSTAKILL, DAMAGE_NO_SPAWNS)
tt.bullet.level = 1
tt.main_script.update = scripts.bullet_tower_hermit_toad_instakill_tongue.update
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].name = "hermit_toad_tower_tongue_run"
tt.render.sprites[1].loop = false
tt.image_width = 137.5
tt.ray_duration = fts(11)
tt.hit_delay = fts(1)
tt = E:register_t("bullet_tower_hermit_toad_mage_basic_lvl1", "bolt")
b = balance.towers.hermit_toad.mage_basic_attack

E:add_comps(tt, "force_motion")

tt.render.sprites[1].prefix = "hermit_toad_tower_projectile"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_BULLETS
tt.render.sprites[1].anchor = v(0.48, 0.51)
tt.bullet.damage_type = b.damage_type
tt.bullet.align_with_trajectory = true
tt.main_script.update = scripts.bolt_force_motion_kr5.update
tt.main_script.insert = scripts.bolt_force_motion_kr5.insert
tt.bullet.damage_max = b.damage_max[1]
tt.bullet.damage_min = b.damage_min[1]
tt.bullet.hit_fx = "fx_bullet_tower_hermit_toad_mage_basic_hit"
tt.bullet.particles_name = "ps_bullet_tower_hermit_toad_mage_basic_trail"
tt.initial_impulse = 6000
tt.initial_impulse_duration = 0.08
tt.initial_impulse_angle_abs = math.pi / 2
tt.force_motion.a_step = 10
tt.force_motion.max_a = 6000
tt.force_motion.max_v = 450
tt.sound_events.insert = nil
b = balance.towers.hermit_toad.mage_basic_attack

for i = 2, 4 do
	tt = E:register_t("bullet_tower_hermit_toad_mage_basic_lvl" .. i, "bullet_tower_hermit_toad_mage_basic_lvl1")
	tt.bullet.damage_max = b.damage_max[i]
	tt.bullet.damage_min = b.damage_min[i]
end

tt = E:register_t("bullet_tower_hermit_toad_engineer_basic_lvl1", "bombKR5")
b = balance.towers.hermit_toad.engineer_basic_attack
tt.main_script.update = scripts.bullet_tower_hermit_toad_engineer_basic.update
tt.bullet.level = 1
tt.bullet.flight_time = fts(25)
tt.sound_events.hit = "TowerHermitToadShootEngineerImpact"
tt.bullet.hit_fx = "fx_bullet_tower_hermit_toad_engineer_basic_hit"
tt.bullet.pop = nil
tt.bullet.align_with_trajectory = true
tt.bullet.ignore_hit_offset = true
tt.bullet.pop_chance = 0.5
tt.bullet.rotation_speed = nil
tt.bullet.hit_payload = "aura_bullet_tower_hermit_toad_engineer_basic"
tt.bullet.damage_max = b.damage_max[1]
tt.bullet.damage_min = b.damage_min[1]
tt.bullet.damage_radius = b.damage_radius
tt.render.sprites[1].animated = true
tt.render.sprites[1].name = "hermit_toad_tower_projectile2_run"
tt.render.sprites[1].anchor = v(0.4, 0.5)
tt.bullet.particles_name = "ps_bullet_tower_hermit_toad_engineer_basic_trail"
tt.aura_duration = b.slow_decal_duration
b = balance.towers.hermit_toad.engineer_basic_attack

for i = 2, 4 do
	tt = E:register_t("bullet_tower_hermit_toad_engineer_basic_lvl" .. i, "bullet_tower_hermit_toad_engineer_basic_lvl1")
	tt.bullet.level = i
	tt.bullet.damage_max = b.damage_max[i]
	tt.bullet.damage_min = b.damage_min[i]
end

tt = E:register_t("bullet_darksteel_anvil", "arrow5_fixed_height")
b = balance.enemies.hammer_and_anvil.darksteel_anvil
tt.bullet.flight_time = fts(8)
tt.bullet.damage_min = b.basic_ranged.damage_min
tt.bullet.damage_max = b.basic_ranged.damage_max
tt.bullet.damage_type = b.basic_ranged.damage_type
tt.bullet.fixed_height = 15
tt.bullet.g = -1.8 / (fts(1) * fts(1))
tt.bullet.hit_blood_fx = nil
tt.bullet.miss_decal = nil
tt.bullet.pop = nil
tt.bullet.hide_radius = 6
tt.bullet.prediction_error = false
tt.bullet.predict_target_pos = false
tt.bullet.hit_fx = "fx_enemy_darksteel_anvil_hit"
tt.render.sprites[1].name = "darksteel_anvil_attack_projectile"
tt.render.sprites[1].animated = true
tt.bullet.hide_radius = 0
tt.bullet.hit_distance = 20
tt.bullet.extend_particles_cutoff = true

tt = E:register_t("bullet_hero_dragon_arb_breath", "bullet")
b = balance.heroes.hero_dragon_arb.basic_breath_attack
tt.render.sprites[1].z = Z_BULLETS
tt.render.sprites[1].prefix = "hero_dragon_arborean_breath"
tt.render.sprites[1].anchor = v(0.464, 0.5)
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].loop = false
tt.bullet.flight_time = fts(19)
tt.image_width = 146.5
tt.hit_delay = fts(1)
tt.bullet.hit_time = fts(1)
tt.bullet.damage_type = DAMAGE_NONE
tt.bullet.damage_max = 0
tt.bullet.damage_min = 0
tt.bullet.ignore_hit_offset = true
tt.main_script.update = scripts.ray_simple.update
tt.passive_mark_mod = "mod_hero_dragon_arb_passive_mark"
tt = E:register_t("bullet_hero_dragon_arb_breath_splint", "bolt")
b = balance.heroes.hero_dragon_arb.basic_breath_attack

E:add_comps(tt, "tween")

tt.render.sprites[1].name = "hero_dragon_arborean_splinter_projectile"
tt.render.sprites[1].animated = false
tt.size_variation = 0.3
tt.bullet.align_with_trajectory = true
tt.bullet.flight_time = fts(19)
tt.bullet.min_speed = 900
tt.bullet.max_speed = 3000
tt.speed_variation = 0.3
tt.bullet.damage_type = b.damage_type
tt.bullet.damage_max = nil
tt.bullet.damage_min = nil
tt.bullet.mod = {
	"mod_bullet_hero_dragon_arb_breath_hit"
}
tt.bullet.damage_radius = 50
tt.bullet.damage_flags = F_AREA
tt.bullet.use_unit_damage_factor = true
tt.bullet.hit_fx = nil
tt.bullet.pop = nil
tt.bullet.pop_conds = nil
tt.bullet.payload = {
	"decal_dragon_arb_breath_splint_a",
	"decal_dragon_arb_breath_splint_b"
}
tt.main_script.update = scripts.bullet_hero_dragon_arb_breath_splint.update
tt.passive_mark_mod = "mod_hero_dragon_arb_passive_mark"
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(2),
		255
	}
}
tt.tween.remove = false
tt.sound_events.insert = nil
tt = E:register_t("bullet_hero_dragon_arb_breath_spikes", "bolt")
b = balance.heroes.hero_dragon_arb.basic_breath_attack

E:add_comps(tt, "tween")

tt.render.sprites[1].name = "hero_dragon_arborean_spikes_projectile"
tt.render.sprites[1].animated = false
tt.bullet.align_with_trajectory = true
tt.bullet.flight_time = fts(19)
tt.bullet.min_speed = 450
tt.bullet.max_speed = 1500
tt.bullet.damage_type = b.damage_type
tt.bullet.damage_max = 0
tt.bullet.damage_min = 0
tt.bullet.mod = nil
tt.bullet.damage_radius = 0
tt.bullet.damage_flags = F_AREA
tt.bullet.use_unit_damage_factor = false
tt.bullet.hit_fx = nil
tt.bullet.pop = nil
tt.bullet.pop_conds = nil
tt.bullet.payload = nil
tt.bullet.particles_name = "ps_bullet_hero_dragon_arb_breath_spikes"
tt.main_script.update = scripts.bullet_hero_dragon_arb_breath_splint.update
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(2),
		255
	}
}
tt.tween.remove = false
tt.sound_events.insert = nil
tt = E:register_t("bullet_hero_dragon_arb_arborean_spawn", "bolt")

E:add_comps(tt, "force_motion")

b = balance.heroes.hero_dragon_arb
tt.bullet.damage_type = DAMAGE_NONE
tt.bullet.hit_fx = "fx_bullet_hero_dragon_arb_arboreans_hit"
tt.bullet.ignore_hit_offset = true
tt.bullet.particles_name = "ps_bullet_hero_dragon_arb_arborean_spawn"
tt.bullet.max_speed = 150
tt.bullet.min_speed = 30
tt.bullet.align_with_trajectory = true
tt.bullet.xp_gain_factor = b.xp_gain_factor
tt.bullet.use_unit_damage_factor = true
tt.bullet.ignore_hit_offset = true
tt.bullet.payload = nil
tt.bullet.pop_chance = 0
tt.initial_impulse = 9000
tt.initial_impulse_duration = 0.2
tt.initial_impulse_angle_abs = math.pi / 2
tt.initial_impulse_angle_variation_d = 20
tt.force_motion.a_step = 5
tt.force_motion.max_a = 3000
tt.force_motion.max_v = 300
tt.render.sprites[1].name = "hero_dragon_arborean_leaf_projectile"
tt.render.sprites[1].animated = false
tt.main_script.update = scripts.bullet_hero_dragon_arb_arborean_spawn.update
tt.sound_events.insert = nil
tt = E:register_t("bullet_hero_dragon_arb_tower_buff", "bolt")

E:add_comps(tt, "force_motion", "tween")

b = balance.heroes.hero_dragon_arb
tt.bullet.damage_type = DAMAGE_NONE
tt.bullet.hit_fx = nil
tt.bullet.ignore_hit_offset = true
tt.bullet.particles_name = "ps_bullet_hero_dragon_arb_rune"
tt.bullet.max_speed = 300
tt.bullet.min_speed = 150
tt.bullet.align_with_trajectory = false
tt.bullet.xp_gain_factor = b.xp_gain_factor
tt.bullet.use_unit_damage_factor = fakse
tt.bullet.ignore_hit_offset = true
tt.bullet.pop_chance = 0
tt.bullet.hit_mod = "mod_hero_dragon_arb_tower_buff"
tt.force_motion.a_step = 5
tt.force_motion.max_a = 3000
tt.force_motion.max_v = 600
tt.render.sprites[1].name = "hero_dragon_arborean_rune_projectile"
tt.render.sprites[1].animated = false
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		fts(4),
		0
	}
}
tt.tween.props[1].name = "alpha"
tt.tween.remove = true
tt.tween.reverse = false
tt.tween.disabled = true
tt.main_script.update = scripts.bullet_hero_dragon_arb_tower_buff.update
tt.sound_events.insert = nil
tt = E:register_t("bullet_hero_dragon_arb_tower_plants", "bombKR5")
tt.bullet.damage_type = DAMAGE_NONE
tt.bullet.damage_radius = 0
tt.bullet.damage_min = 0
tt.bullet.damage_max = 0
tt.bullet.rotation_speed = 0
tt.bullet.hit_decal = "fx_water_bullet_hero_dragon_arb_water_decal"
tt.bullet.hit_fx = "fx_water_bullet_hero_dragon_arb_water_hit"
tt.bullet.particles_name = "ps_bullet_hero_dragon_arb_water"
tt.bullet.align_with_trajectory = true
tt.bullet.xp_gain_factor = b.xp_gain_factor
tt.bullet.use_unit_damage_factor = true
tt.bullet.pop = nil
tt.bullet.pop_chance = 0
tt.bullet.hide_radius = 8
tt.render.sprites[1].prefix = "hero_dragon_arborean_water_projectile"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].z = Z_BULLETS
tt.sound_events.insert = nil
tt.sound_events.hit = nil
tt.sound_events.hit_water = nil
tt = E:register_t("bullet_hero_dragon_arb_linirea_plant_heal", "bolt")

E:add_comps(tt, "force_motion")

tt.render.sprites[1].name = "hero_dragon_arborean_flower_projectile"
tt.render.sprites[1].animated = false
tt.render.sprites[1].anchor = vv(0.5)
tt.bullet.damage_min = 0
tt.bullet.damage_max = 0
tt.bullet.damage_type = DAMAGE_NONE
tt.bullet.hit_fx = "fx_bullet_hero_dragon_arb_linirea_plant_heal_hit"
tt.bullet.particles_name = "ps_bullet_hero_dragon_arb_tower_plants"
tt.bullet.align_with_trajectory = true
tt.bullet.miss_decal = nil
tt.bullet.vis_flags = bor(F_RANGED, F_MOD)
tt.bullet.vis_bans = 0
tt.bullet.max_speed = 300
tt.bullet.min_speed = 30
tt.bullet.use_unit_damage_factor = true
tt.bullet.mod = "mod_hero_dragon_arb_plant_linirea_heal"
tt.initial_impulse = 15000
tt.initial_impulse_duration = 0.15
tt.initial_impulse_angle_abs = math.pi / 2
tt.force_motion.a_step = 5
tt.force_motion.max_a = 3000
tt.force_motion.max_v = 300
tt.main_script.update = scripts.bullet_hero_dragon_arb_linirea_plant_heal.update

tt = E:register_t("bullet_soldier_priests_barrack", "bolt")
b = balance.specials.towers.tower_stage_28_priests_barrack.priest.ranged
tt.render.sprites[1].name = "priest_projectile"
tt.render.sprites[1].animated = false
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.bullet.pop = nil
tt.bullet.pop_conds = nil
tt.bullet.hit_blood_fx = nil
tt.bullet.acceleration_factor = 0.1
tt.bullet.min_speed = 30
tt.bullet.max_speed = 300
tt.bullet.align_with_trajectory = true
tt.bullet.damage_min = b.damage_min
tt.bullet.damage_max = b.damage_max
tt.bullet.damage_type = b.damage_type
tt.bullet.particles_name = "ps_bullet_soldier_priests_barrack_trail"
tt.bullet.hit_fx = "fx_soldier_priests_barrack_bolt_hit"
tt = E:register_t("bullet_boss_spider_queen_tower_stun", "bombKR5")
tt.main_script.update = scripts.bullet_boss_spider_queen_tower_stun.update
tt.bullet.flight_time = fts(35)
tt.bullet.vis_flags = bor(F_RANGED, F_MOD)
tt.bullet.vis_bans = 0
tt.render.sprites[1].prefix = "boss_effects_bolt"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].animated = true
tt.render.sprites[1].scale = vv(0.7)
tt.bullet.hit_fx = nil
tt.bullet.pop = nil
tt.bullet.pop_conds = nil
tt.bullet.hit_mod = "mod_boss_spider_queen_tower_debuff"
tt.bullet.particles_name = "ps_boss_spider_queen_bullet_tower_stun_trail"
tt.bullet.particles_name_2 = "ps_boss_spider_queen_bullet_tower_stun_trail_2"
tt.bullet.align_with_trajectory = true
tt = E:register_t("bullet_boss_spider_queen_lifesteal", "bombKR5")
tt.main_script.update = scripts.bullet_boss_spider_queen_tower_stun.update
tt.bullet.flight_time = fts(10)
tt.bullet.vis_flags = bor(F_RANGED, F_MOD)
tt.bullet.vis_bans = 0
tt.render.sprites[1].name = "spider_queen_boss_effects_trail2_0001"
tt.render.sprites[1].animated = false
tt.bullet.pop = nil
tt.bullet.pop_conds = nil
tt.bullet.particles_name = "ps_boss_spider_queen_lifesteal_trail_1"
tt.bullet.particles_name_2 = "ps_boss_spider_queen_lifesteal_trail_2"
tt.bullet.hit_fx = "fx_boss_spider_queen_lifesteal_healing"
tt.bullet.align_with_trajectory = true

tt = E:register_t("aura_tower_holder_capture", "aura")
tt.aura.duration = -1
tt.aura.radius = 150
tt.aura.track_source = true
tt.aura.vis_bans = 0
tt.aura.vis_flags = bor(F_HERO)
tt.aura.cycle_time = 0.2
tt.capture_multiplier = 1
tt.capture_default_increment = nil
tt.capture_default_decrement = nil
tt.capture_default_decrement_multiplier = 0.5
tt.main_script.update = scripts.aura_tower_holder_capture.update
tt = E:register_t("tunnel_KR5", "tunnel")
tt.main_script.insert = scripts.tunnel_KR5.insert
tt.main_script.update = scripts.tunnel_KR5.update
tt.untargetable_distance = 10
tt.flags_to_tag = {
	F_RANGED,
	F_BLOCK
}

tt = E:register_t("tunnel_KR5_destructible", "tunnel_KR5")
tt.main_script.update = scripts.tunnel_KR5_destructible.update
tt.destroyed = false
tt = E:register_t("tunnel_KR5_watchtower", "tunnel_KR5")
tt.untargetable_distance = 7
tt = E:register_t("tunnel_KR5_stage22_boss", "tunnel_KR5")
tt.untargetable_distance = 20
tt.tunnel.speed_factor = 1000

tt = E:register_t("aura_hero_muyrn_faery_dust", "aura")

E:add_comps(tt, "render")

b = balance.heroes.hero_muyrn
tt.aura.mods = {
	"mod_hero_muyrn_faery_dust",
	"mod_hero_muyrn_faery_dust_fx"
}
tt.aura.duration = fts(13)
tt.aura.cycle_time = 0.3
tt.aura.radius = b.faery_dust.radius
tt.aura.vis_bans = bor(F_FRIEND, F_FLYING)
tt.aura.vis_flags = bor(F_MOD)
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_apply_mod.update
tt.render.sprites[1].name = "hero_nyru_fairy_dust_decal"
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].loop = false
tt.render.sprites[1].anchor = v(0.5, 0.8)
tt = E:register_t("aura_hero_muyrn_ultimate", "aura")
b = balance.heroes.hero_muyrn
tt.aura.duration = nil
tt.aura.cycle_time = 0.3
tt.aura.radius = b.ultimate.radius
tt.aura.vis_bans = bor(F_FLYING, F_FRIEND)
tt.aura.vis_flags = F_RANGED
tt.aura.mods = {
	"mod_hero_muyrn_ultimate",
	"mod_hero_muyrn_ultimate_damage"
}
tt.root_decal = "decal_hero_muyrn_root_defender_root"
tt.roots_count = b.ultimate.roots_count
tt.duration = b.ultimate.duration
tt.main_script.insert = scripts.hero_muyrn_root_defender_aura.insert
tt.main_script.update = scripts.aura_apply_mod.update
tt.main_script.remove = scripts.hero_muyrn_root_defender_aura.remove
tt.end_sound = "HeroNyruRootDefenderEnd"
tt = E:register_t("aura_hero_muyrn_ultimate_sides", "aura_hero_muyrn_ultimate")
tt.main_script.insert = scripts.hero_muyrn_root_defender_aura_sides.insert
tt.main_script.update = scripts.aura_apply_mod.update
tt.end_sound = "HeroNyruRootDefenderEnd"
tt = E:register_t("aura_tower_arborean_emissary_gift_of_nature", "aura")
b = balance.towers.arborean_emissary
tt.aura.cycle_time = 0.3
tt.aura.duration = nil
tt.aura.mods = {
	"mod_tower_arborean_emissary_gift_of_nature_heal",
	"mod_tower_arborean_emissary_gift_of_nature_heal_decal"
}
tt.aura.radius = b.gift_of_nature.radius
tt.aura.track_source = false
tt.aura.vis_flags = F_MOD
tt.aura.vis_bans = bor(F_FLYING)
tt.main_script.update = scripts.aura_tower_arborean_emissary_gift_of_nature.update
tt.main_script.insert = scripts.aura_apply_mod.insert
tt = E:register_t("aura_enemy_skunk_bombardier_death_explosion", "aura")
b = balance.enemies.werebeasts.skunk_bombardier
tt.aura.mod = "mod_enemy_skunk_bombardier_basic_attack"
tt.aura.radius = b.ranged_attack.radius
tt.aura.vis_flags = F_MOD
tt.aura.vis_bans = bor(F_ENEMY)
tt.aura.cycles = 1
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_apply_mod.update
tt = E:register_t("aura_boss_pig_damage_on_fall", "aura")
b = balance.enemies.werebeasts.boss
tt.aura.cycles = 1
tt.aura.cycle_time = 0.3
tt.aura.damage_min = b.fall.damage_min
tt.aura.damage_max = b.fall.damage_max
tt.aura.damage_type = DAMAGE_PHYSICAL
tt.aura.track_source = true
tt.aura.radius = b.fall.radius
tt.aura.vis_bans = F_BOSS
tt.aura.vis_flags = 0
tt.main_script.update = scripts.aura_apply_damage.update
tt = E:register_t("aura_hero_builder_demolition_man", "aura")
b = balance.heroes.hero_builder.demolition_man
tt.aura.duration = nil
tt.aura.damage_min = nil
tt.aura.damage_max = nil
tt.aura.damage_type = b.damage_type
tt.aura.track_source = true
tt.aura.cycle_time = b.damage_every
tt.aura.radius = b.radius
tt.aura.vis_bans = bor(F_FRIEND)
tt.aura.vis_flags = F_RANGED
tt.main_script.update = scripts.aura_apply_damage.update
tt.aura.mods = {
	"mod_hero_builder_demolition_man_hit_fx"
}
tt = E:register_t("aura_hero_builder_ultimate", "aura")
b = balance.heroes.hero_builder.ultimate
tt.aura.cycles = 1
tt.aura.cycle_time = 0.3
tt.aura.damage_min = nil
tt.aura.damage_max = nil
tt.aura.damage_type = b.damage_type
tt.aura.track_source = true
tt.aura.radius = b.radius
tt.aura.vis_bans = bor(F_FRIEND)
tt.aura.vis_flags = F_RANGED
tt.aura.mod = "mod_hero_builder_ultimate_stun"
tt.main_script.update = scripts.aura_apply_damage.update
tt = E:register_t("aura_hero_space_elf_void_rift", "aura")
b = balance.heroes.hero_space_elf

E:add_comps(tt, "track_damage", "render")

tt.aura.duration = nil
tt.aura.track_damage = true
tt.aura.damage_min = nil
tt.aura.damage_max = nil
tt.aura.damage_inc = 0
tt.aura.damage_type = b.void_rift.damage_type
tt.aura.cycle_time = b.void_rift.damage_every
tt.aura.radius = b.void_rift.radius
tt.aura.vis_bans = bor(F_FLYING, F_FRIEND)
tt.aura.vis_flags = F_RANGED
tt.render.sprites[1].prefix = "hero_therien_rift_fx_decal"
tt.render.sprites[1].z = Z_DECALS + 1
tt.render.sprites[1].loop = false
tt.render.sprites[1].animated = true
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "hero_therien_rift_fx_decal2"
tt.render.sprites[2].z = Z_DECALS + 2
tt.render.sprites[2].loop = false
tt.render.sprites[2].animated = true
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].prefix = "hero_therien_rift_fx_decalbrillo"
tt.render.sprites[3].z = Z_DECALS + 3
tt.render.sprites[3].loop = false
tt.render.sprites[3].animated = true
tt.main_script.update = scripts.aura_hero_space_elf_void_rift.update
tt.ignore_damage = false
tt = E:register_t("aura_hero_space_elf_ultimate", "aura")
b = balance.heroes.hero_space_elf

E:add_comps(tt, "track_damage")

tt.aura.duration = fts(1)
tt.aura.radius = b.ultimate.radius
tt.aura.vis_bans = bor(F_BOSS, F_FRIEND)
tt.aura.vis_flags = F_RANGED
tt.aura.mod = "mod_hero_space_elf_ultimate"
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_apply_mod.update
tt = E:register_t("aura_stage_09_spawn_nightmare_convert", "aura")
b = balance.specials.stage09_spawn_nightmares
tt.aura.duration = 1e+99
tt.aura.radius = 4
tt.include_templates = {
	"enemy_lesser_sister_nightmare"
}
tt.entity_to_spawn = "enemy_armored_nightmare"
tt.spawn_fx = "fx_stage_09_portal_path_spawn_fx"
tt.portal_offset = v(-15, 0)
tt.main_script.update = scripts.aura_stage_09_spawn_nightmare_convert.update
tt.wave_config = b.wave_config
tt.sound_spawn = "EnemyTwistedSisterSummonSpawn"
tt = E:register_t("aura_stage_09_spawn_nightmare_convert_spawn_fx", "aura")
tt.aura.duration = 1e+99
tt.aura.radius = 80
tt.aura.vis_bans = bor(F_FLYING, F_FRIEND)
tt.aura.vis_flags = F_RANGED
tt.include_templates = {
	"enemy_lesser_sister_nightmare"
}
tt.main_script.update = scripts.aura_stage_09_spawn_nightmare_convert_spawn_fx.update

tt = E:register_t("aura_tower_necromancer_skill_debuff", "aura")
b = balance.towers.necromancer

E:add_comps(tt, "render", "tween")

tt.aura.enemy_mods = {
	"mod_tower_necromancer_curse"
}
tt.aura.soldier_mods = {
	"mod_tower_necromancer_skill_debuff_skeleton_improve"
}
tt.aura.radius = b.skill_debuff.radius
tt.aura.enemy_vis_flags = bor(F_MOD)
tt.aura.enemy_vis_bans = bor(F_FRIEND)
tt.aura.soldier_vis_flags = bor(F_MOD)
tt.aura.soldier_vis_bans = bor(F_ENEMY)
tt.aura.duration = nil
tt.aura.soldier_allowed_templates = {
	"soldier_death_rider",
	"soldier_dracolich_golem",
	"soldier_dragon_bone_ultimate_dog",
	"hero_dracolich",
	"hero_dragon_bone"
}

for i = 1, 4 do
	table.insert(tt.aura.soldier_allowed_templates, "soldier_tower_necromancer_skeleton_lvl" .. i)
	table.insert(tt.aura.soldier_allowed_templates, "soldier_tower_necromancer_skeleton_golem_lvl" .. i)
end

tt.render.sprites[1].prefix = "necromancer_tower_mark_of_silence_totem"
tt.render.sprites[1].animated = true
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].name = "necromancer_tower_mark_of_silence_floorFX_idle"
tt.render.sprites[2].animated = true
tt.render.sprites[2].z = Z_DECALS
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_tower_necromancer_skill_debuff.update
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.5,
		255
	}
}
tt.tween.props[1].sprite_id = 2
tt.tween.remove = false
tt.sound_events.insert = "TowerNecromancerSigilOfSilence"
tt.modifier_inflicted_damage_factor = b.skill_debuff.damage_factor
tt.modifier_duration_config = b.skill_debuff.mod_duration
tt = E:register_t("aura_tower_necromancer_skill_rider", "aura")
b = balance.towers.necromancer.skill_rider

E:add_comps(tt, "render", "tween", "motion")

tt.aura.mod = "mod_tower_necromancer_skill_rider"
tt.aura.radius = b.radius
tt.aura.vis_flags = bor(F_AREA)
tt.aura.vis_bans = bor(F_FLYING)
tt.aura.duration = b.duration
tt.aura.cycle_time = fts(5)
tt.render.sprites[1].prefix = "necromancer_tower_death_rider"
tt.render.sprites[1].animated = true
tt.render.sprites[1].angles = {}
tt.render.sprites[1].angles.walk = {
	"walk_side",
	"walk_back",
	"walk_front"
}
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_tower_necromancer_skill_rider.update
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.5,
		255
	}
}
tt.tween.props[1].sprite_id = 1
tt.tween.remove = false
tt.motion.max_speed = b.speed
tt.damage_min = nil
tt.damage_max = nil
tt.damage_min_config = b.damage_max
tt.damage_max_config = b.damage_min
tt.damage_type = b.damage_type
tt.hit_fx = "fx_tower_necromancer_rider_hit"
tt.spawn_side_fx = "fx_tower_necromancer_rider_spawn_side"
tt.spawn_front_fx = "fx_tower_necromancer_rider_spawn_front"
tt.spawn_back_fx = "fx_tower_necromancer_rider_spawn_back"
tt.particles_name_A = "ps_tower_necromancer_rider_trail_A"
tt.particles_name_B = "ps_tower_necromancer_rider_trail_B"
tt.sound_events.insert = "TowerNecromancerDeathRider"
tt = E:register_t("aura_bullet_tower_ballista_skill_bomb", "aura")
b = balance.towers.ballista.skill_bomb

E:add_comps(tt, "render", "tween")

tt.aura.mod = "mod_bullet_tower_ballista_skill_bomb_slow"
tt.aura.radius = b.damage_radius
tt.aura.vis_flags = bor(F_AREA)
tt.aura.vis_bans = bor(F_FLYING, F_FRIEND)
tt.aura.duration = nil
tt.aura.cycle_time = fts(5)
tt.aura.excluded_templates = {}
tt.render.sprites[1].prefix = "ballista_tower_bomb_decal"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_DECALS
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_bullet_tower_ballista_skill_bomb.update
tt.damage_min = 0
tt.damage_max = 0
tt.tween.props[1].name = "alpha"
tt.tween.props[1].sprite_id = 1
tt.junk_fx = "fx_bullet_tower_ballista_bomb_junk_floor"
tt = E:register_t("aura_tower_flamespitter", "aura")
b = balance.towers.flamespitter.basic_attack
tt.aura.duration = b.duration
tt.aura.radius = 60
tt.aura.vis_bans = bor(F_FRIEND)
tt.aura.vis_flags = bor(F_RANGED, F_AREA)
tt.aura.mod = "mod_burning_tower_flamespitter"
tt.aura.damage_type = b.damage_type
tt.aura.cycle_time = b.cycle_time
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_tower_flamespitter.update
tt.damage_min_config = b.damage_min
tt.damage_max_config = b.damage_max
tt = E:register_t("aura_tower_stage_13_sunray_special", "aura")

E:add_comps(tt, "render")

local b = balance.specials.towers.stage_13_sunray.special_attack

tt.aura.duration = 1e+99
tt.aura.radius = b.radius
tt.aura.vis_bans = bor(F_FRIEND)
tt.aura.vis_flags = bor(F_RANGED, F_AREA)
tt.aura.damage_type = b.damage_type
tt.aura.cycle_time = b.damage_every
tt.aura.mod = "mod_tower_stage_13_sunray_special"
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_apply_mod.update
tt.render.sprites[1].prefix = "ray_sunraytower_hitDef"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].loop = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_BULLETS + 2
tt.render.sprites[1].offset = v(0, -5)
tt.render.sprites[1].scale = vv(1.25)
tt = E:register_t("aura_bullet_tower_barrel_skill_barrel", "aura")

E:add_comps(tt, "render", "tween")

b = balance.towers.barrel.skill_barrel
tt.aura.duration = b.duration
tt.aura.duration_inc = nil
tt.aura.radius = b.radius
tt.aura.vis_bans = bor(F_FRIEND, F_FLYING)
tt.aura.vis_flags = bor(F_AREA)
tt.aura.mods = {
	"mod_tower_barrel_skill_barrel_poison",
	"mod_tower_barrel_skill_barrel_slow"
}
tt.aura.cycle_time = fts(10)
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_bullet_tower_barrel_skill_barrel.update
tt.render.sprites[1].prefix = "barrel_tower_lvl4_bad_barrel_decal"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].loop = false
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "barrel_tower_lvl4_bad_barrel"
tt.render.sprites[2].name = "start"
tt.render.sprites[2].animated = true
tt.render.sprites[2].z = Z_OBJECTS
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].prefix = "barrel_tower_lvl4_bad_barrel_bubbles_fx"
tt.render.sprites[3].name = "loop"
tt.render.sprites[3].animated = true
tt.render.sprites[3].z = Z_EFFECTS
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		fts(18),
		0
	}
}
tt.tween.props[1].sprite_id = 1
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].name = "alpha"
tt.tween.props[2].keys = {
	{
		0,
		255
	},
	{
		fts(18),
		0
	}
}
tt.tween.props[2].sprite_id = 3
tt.tween.remove = true
tt.tween.disabled = true
tt.explosion_decal = "decal_aura_bullet_tower_barrel_skill_barrel_explosion"
tt.explosion_damage_min = b.explosion.damage_min
tt.explosion_damage_max = b.explosion.damage_max
tt.explosion_damage_type = b.explosion.damage_type
tt.explosion_damage_radius = b.explosion.damage_radius
tt.explosion_vis_bans = bor(F_FRIEND, F_FLYING)
tt.explosion_vis_flags = bor(F_AREA)
tt.explosion_sfx = "TowerBarrelBadBatchExplosion"
tt.sid_barrel = 2
tt = E:register_t("aura_tower_sand_skill_big_blade", "aura")

E:add_comps(tt, "render")

b = balance.towers.sand.skill_big_blade
tt.aura.duration = b.duration[1]
tt.aura.radius = b.radius
tt.aura.vis_bans = bor(F_FRIEND, F_FLYING)
tt.aura.vis_flags = bor(F_AREA)
tt.aura.mod = "mod_tower_sand_skill_big_blade_slow"
tt.aura.cycle_time = b.damage_every
tt.aura.damage_min = nil
tt.aura.damage_max = nil
tt.aura.damage_type = b.damage_type
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_tower_sand_skill_big_blade.update
tt.render.sprites[1].prefix = "tower_sand_lvl4_skill_2_projectile"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].loop = false
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_BULLETS
tt.fixed_speed = FPS * 8
tt.particles_name = "ps_aura_tower_sand_skill_big_blade"
tt.hit_fx = "fx_aura_tower_sand_skill_big_blade"
tt = E:register_t("aura_fire_balls_hero_lumenir", "aura")

E:add_comps(tt, "render", "nav_path", "motion", "tween")

b = balance.heroes.hero_lumenir.fire_balls
tt.aura.duration = b.duration
tt.aura.duration_var = 0.5
tt.flame_damage_min = b.flame_damage_min
tt.flame_damage_max = b.flame_damage_max
tt.aura.damage_radius = b.damage_radius
tt.aura.damage_type = DAMAGE_TRUE
tt.aura.damage_cycle = b.damage_rate
tt.aura.damage_flags = F_AREA
tt.aura.damage_bans = 0
tt.motion.max_speed = 2.5 * FPS
tt.motion.max_speed_var = 0.25 * FPS
tt.main_script.insert = scripts.aura_fire_balls_hero_lumenir.insert
tt.main_script.update = scripts.aura_fire_balls_hero_lumenir.update
tt.render.sprites[1].name = "hero_lumenir_radiant_wave_projectile_idle"
tt.render.sprites[1].sort_y_offset = -21
tt.render.sprites[1].z = Z_OBJECTS
tt.tween.disabled = true
tt.tween.remove = true
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		tt.aura.duration_var,
		0
	}
}
tt = E:register_t("aura_bullet_hero_mecha_tar_bomb", "aura")
b = balance.heroes.hero_mecha.tar_bomb

E:add_comps(tt, "render", "tween")

tt.aura.mod = "mod_bullet_hero_mecha_tar_bomb_slow"
tt.aura.radius = 60
tt.aura.vis_flags = bor(F_AREA)
tt.aura.vis_bans = bor(F_FLYING, F_FRIEND)
tt.aura.cycle_time = fts(5)
tt.render.sprites[1].name = "hero_onagro_skill_2_decal"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].loop = false
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_apply_mod.update
tt.tween.props[1].name = "alpha"
tt.tween.props[1].sprite_id = 1
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		tt.aura.duration - 0.5,
		255
	},
	{
		tt.aura.duration,
		0
	}
}
tt = E:register_t("aura_bullet_hero_mecha_mine", "aura")
b = balance.heroes.hero_mecha.mine_drop

E:add_comps(tt, "render")

tt.aura.radius = b.damage_radius
tt.aura.vis_flags = bor(F_AREA)
tt.aura.vis_bans_trigger = bor(F_FLYING)
tt.aura.vis_bans_damage = 0
tt.aura.cycle_time = fts(5)
tt.render.sprites[1].prefix = "hero_onagro_skill_4_mine"
tt.render.sprites[1].name = "in"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].loop = false
tt.main_script.insert = scripts.aura_bullet_hero_mecha_mine.insert
tt.main_script.update = scripts.aura_bullet_hero_mecha_mine.update
tt.explosion_fx = "fx_hero_mecha_mine_explosion"
tt.sound_explode = "HeroMechaMineDropExplosion"
tt.damage_type = b.damage_type

tt = E:register_t("aura_hero_witch_path_aoe", "aura")
b = balance.heroes.hero_witch.skill_path_aoe

E:add_comps(tt, "render", "tween")

tt.aura.mod = "mod_hero_witch_path_aoe"
tt.aura.duration = nil
tt.aura.radius = 60
tt.aura.vis_flags = bor(F_AREA)
tt.aura.vis_bans = bor(F_FLYING, F_FRIEND)
tt.aura.cycle_time = fts(5)
tt.render.sprites[1].name = "hero_witch_skill_4_potion_decal_1"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].name = "hero_witch_skill_4_potion_decal_2"
tt.render.sprites[2].animated = false
tt.render.sprites[2].z = Z_DECALS
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_hero_witch_path_aoe.update
tt.start_fx = "fx_hero_witch_skill_path_aoe_in"
tt.start_wait_time = fts(14)
tt.tween.disabled = true
tt.tween.props[1].name = "alpha"
tt.tween.props[1].sprite_id = 1
tt.tween.props[1].keys = {}
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].name = "alpha"
tt.tween.props[2].sprite_id = 2
tt.tween.props[2].keys = {}
tt.tween.props[3] = E:clone_c("tween_prop")
tt.tween.props[3].name = "scale"
tt.tween.props[3].sprite_id = 2
tt.tween.props[3].keys = {}
tt.damage_min = nil
tt.damage_max = nil
tt.damage_type = b.damage_type
tt.sound_impact = "HeroWitchSquishNSquashImpact"
tt = E:register_t("aura_hero_witch_decoy_explotion", "aura")
b = balance.heroes.hero_witch.disengage.decoy.explotion

E:add_comps(tt, "render")

tt.aura.mod = "mod_hero_witch_decoy_stun"
tt.aura.radius = b.radius
tt.aura.vis_flags = F_MOD
tt.aura.vis_bans = bor(F_FRIEND)
tt.aura.cycle_time = 99
tt.aura.duration = 3
tt.render.sprites[1].prefix = "hero_witch_skill_2_stun"
tt.render.sprites[1].name = "decal_death"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].loop = false
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].scale = v(1.25, 1.25)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "hero_witch_skill_2_stun"
tt.render.sprites[2].name = "fx_death"
tt.render.sprites[2].animated = true
tt.render.sprites[2].z = Z_OBJECTS
tt.render.sprites[2].loop = false
tt.render.sprites[2].anchor = v(0.5, 0.5)
tt.render.sprites[2].scale = v(1.25, 1.25)
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_apply_mod.update

tt = E:register_t("aura_stage_10_obelisk_teleport", "aura")
b = balance.specials.stage10_obelisk.teleport

E:add_comps(tt, "track_damage", "render")

tt.aura.duration = fts(1)
tt.aura.radius = b.aura_radius
tt.aura.vis_bans = bor(F_FLYING, F_FRIEND)
tt.aura.vis_flags = bor(F_MOD, F_TELEPORT, F_RANGED)
tt.aura.mod = "mod_stage_10_obelisk_teleport"
tt.aura.max_count = b.max_targets
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_stage_10_obelisk_teleport.update
tt.render.sprites[1].prefix = "TeleportDecalDef"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("aura_enemy_stage_11_cult_leader_illusion_shield", "aura")
b = balance.specials.stage11_cult_leader.illusion

E:add_comps(tt, "render", "tween")

tt.aura.mod = "mod_enemy_stage_11_cult_leader_illusion_shield"
tt.aura.mod_denas = "mod_enemy_stage_11_cult_leader_illusion_shield_denas"
tt.aura.radius = b.shield.radius
tt.aura.vis_flags = bor(F_AREA)
tt.aura.vis_bans = bor(F_FLYING, F_FRIEND, F_HERO)
tt.aura.duration = 1e+99
tt.aura.cycle_time = fts(5)
tt.aura.track_source = true
tt.aura.excluded_templates = {
	"enemy_stage_11_cult_leader_illusion"
}
tt.render.sprites[1].prefix = "mydrias_areaskill"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_DECALS
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_enemy_stage_11_cult_leader_illusion_shield.update
tt.tween.props[1].name = "alpha"
tt.tween.props[1].sprite_id = 1
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		tt.aura.duration - 0.5,
		255
	},
	{
		tt.aura.duration,
		0
	}
}
tt = E:register_t("aura_upgrade_alliance_seal_of_punishment", "aura")
b = balance.upgrades.alliance_seal_of_punishment

E:add_comps(tt)

tt.aura.duration = b.duration
tt.aura.cycle_time = fts(5)
tt.aura.radius = b.radius
tt.aura.vis_flags = bor(F_AREA)
tt.aura.vis_bans = bor(F_FRIEND)
tt.aura.damage_min = b.damage_min
tt.aura.damage_max = b.damage_max
tt.aura.damage_type = DAMAGE_TRUE
tt.aura.mod = "mod_upgrade_alliance_seal_of_punishment"
tt.main_script.update = scripts.aura_apply_damage.update
tt = E:register_t("aura_stage_11_portal", "aura")
b = balance.specials.stage11_cult_leader.illusion

E:add_comps(tt, "render")

tt.aura.mod = "mod_stage_11_portal"
tt.aura.radius = 50
tt.aura.vis_flags = bor(F_AREA)
tt.aura.duration = 1e+99
tt.aura.cycle_time = fts(1)
tt.aura.track_source = true
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_apply_mod.update
tt = E:register_t("aura_hero_venom_ultimate", "aura")
b = balance.heroes.hero_venom.ultimate

E:add_comps(tt, "render")

tt.aura.mod = "mod_hero_venom_ultimate_slow"
tt.aura.radius = b.radius
tt.aura.vis_flags = bor(F_AREA)
tt.aura.vis_bans = bor(F_FLYING, F_FRIEND)
tt.aura.cycle_time = fts(5)
tt.aura.duration = nil
tt.render.sprites[1].prefix = "hero_venom_ultimate"
tt.render.sprites[1].name = "in"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].loop = false
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_hero_venom_ultimate.update
tt.slow_delay = b.slow_delay
tt.end_damage_min = nil
tt.end_damage_max = nil
tt.end_damage_type = b.damage_type
tt.sound_attack = "HeroVenomRenewCreepingDeathSpikes"
tt = E:register_t("aura_glare_source", "aura")
b = balance.enemies.void_beyond.glare

E:add_comps(tt, "render")

tt.aura.mod = "mod_glare"
tt.aura.cycle_time = 0.2
tt.aura.duration = 1e+99
tt.aura.radius = b.range
tt.aura.vis_flags = bor(F_AREA)
tt.aura.vis_bans = bor(F_FRIEND)
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_apply_mod.update
tt.render.sprites[1].name = "rally_circle_full"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].scale = vv(1)
tt = E:register_t("aura_enemy_noxious_horror_glare", "aura")
b = balance.enemies.void_beyond.noxious_horror.glare.aura

E:add_comps(tt, "render", "tween")

tt.aura.mod = "mod_enemy_noxious_horror_poison"
tt.aura.radius = b.radius
tt.aura.vis_flags = bor(F_AREA)
tt.aura.vis_bans = bor(F_FLYING, F_ENEMY)
tt.aura.cycle_time = fts(5)
tt.aura.duration = 1e+99
tt.aura.track_source = true
tt.render.sprites[1].prefix = "noxious_horror_glare_aura"
tt.render.sprites[1].name = "on"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].loop = true
tt.render.sprites[1].anchor = v(0.5, 0.75)
tt.tween.remove = false
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.25,
		255
	}
}
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_apply_mod.update
tt = E:register_t("aura_enemy_blinker", "aura")
b = balance.enemies.void_beyond.blinker.ranged_attack

E:add_comps(tt, "render", "tween")

tt.aura.mod = "mod_enemy_blinker_stun"
tt.aura.radius = b.radius
tt.aura.vis_flags = bor(F_AREA)
tt.aura.vis_bans = bor(F_FLYING, F_ENEMY)
tt.aura.cycle_time = b.stun_every
tt.aura.duration = b.duration
tt.aura.track_source = false
tt.render.sprites[1].prefix = "blinker_stun_decal"
tt.render.sprites[1].name = "Idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].loop = true
tt.render.sprites[1].anchor = v(0.5, 0.9)
tt.tween.remove = false
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.25,
		255
	}
}
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_apply_mod.update
tt = E:register_t("aura_enemy_blinker_glare", "aura_enemy_blinker")
tt.aura.mods = {
	"mod_enemy_blinker_stun",
	"mod_enemy_blinker_glare"
}
tt.render.sprites[1].prefix = "blinker_glare_decal"
tt = E:register_t("aura_enemy_amalgam_death_explosion", "aura")
b = balance.enemies.void_beyond.amalgam.explosion
tt.aura.radius = b.damage_radius
tt.aura.vis_flags = F_AREA
tt.aura.vis_bans = bor(F_ENEMY)
tt.aura.cycles = 1
tt.aura.damage_min = b.damage_min
tt.aura.damage_max = b.damage_max
tt.aura.damage_type = b.damage_type
tt.main_script.update = scripts.aura_apply_damage.update
tt = E:register_t("aura_hero_robot_skill_jump", "aura")
b = balance.heroes.hero_robot.jump

E:add_comps(tt, "render", "tween")

tt.aura.mod = "mod_hero_robot_skill_jump"
tt.aura.radius = b.radius
tt.aura.vis_flags = bor(F_AREA)
tt.aura.vis_bans = bor(F_BOSS, F_FRIEND)
tt.aura.duration = fts(22)
tt.render.sprites[1].prefix = "Blaze_skill1y3decal"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].loop = false
tt.render.sprites[1].scale = v(1.1, 1.1)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "Blaze_skill1humito"
tt.render.sprites[2].name = "run"
tt.render.sprites[2].animated = true
tt.render.sprites[2].loop = false
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_apply_mod.update
tt.tween.remove = false
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		fts(18),
		255
	},
	{
		fts(22),
		0
	}
}
tt.tween.props[1].sprite_id = 1
tt = E:register_t("aura_hero_robot_skill_fire_slow", "aura")
b = balance.heroes.hero_robot.fire

E:add_comps(tt, "render", "tween")

tt.aura.mod = "mod_hero_robot_skill_fire_slow"
tt.aura.radius = 20
tt.aura.vis_flags = bor(F_AREA)
tt.aura.vis_bans = bor(F_FRIEND)
tt.aura.duration = nil
tt.aura.cycle_time = fts(1)
tt.aura.track_source = true
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_hero_robot_skill_fire_slow.update
tt.render.sprites[1].prefix = "Blaze_skill2humo"
tt.render.sprites[1].name = "start"
tt.render.sprites[1].z = Z_OBJECTS_COVERS
tt.render.sprites[1].scale = v(1.3, 1.3)
tt.tween.remove = false
tt = E:register_t("aura_hero_robot_ultimate_train", "aura")
b = balance.heroes.hero_robot.ultimate

E:add_comps(tt, "render", "tween", "nav_rally", "motion")

tt.render.sprites[1].prefix = "Blaze_tren"
tt.render.sprites[1].name = "box"
tt.render.sprites[1].angles = {}
tt.render.sprites[1].angles.run = {
	"downright",
	"right",
	"upright",
	"up",
	"down"
}
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.5,
		255
	}
}
tt.tween.props[1].sprite_id = 1
tt.tween.remove = false
tt.main_script.update = scripts.aura_hero_robot_ultimate_train.update
tt.motion.max_speed = b.speed
tt.aura.duration = b.duration
tt.aura.vis_bans = bor(F_FLYING)
tt.aura.vis_flags = bor(F_RANGED)
tt.aura.radius = b.radius
tt.aura.mod = "mod_hero_robot_skill_ultimate_burning"
tt.spawn_fx = "fx_hero_robot_ultimate_train_spawn"
tt.damage_min = nil
tt.damage_max = nil
tt.damage_type = b.damage_type
tt.floor_decal = "decal_hero_robot_ultimate_floor"
tt.smoke_fx = "fx_hero_robot_ultimate_smoke"
tt.hit_fx = "fx_hero_robot_skill_fire"
tt.nodes_to_floor_decal = 5
tt.nodes_to_smoke = 3
tt.sound = "HeroRobotMotorheadCast"
tt.offset_back = 5

tt = E:register_t("aura_hero_hunter_shoot_around", "aura")
b = balance.heroes.hero_hunter.shoot_around
tt.aura.duration = nil
tt.aura.damage_min = nil
tt.aura.damage_max = nil
tt.aura.damage_type = b.damage_type
tt.aura.track_source = true
tt.aura.cycle_time = b.damage_every
tt.aura.radius = b.radius
tt.aura.vis_bans = bor(F_NIGHTMARE, F_FRIEND)
tt.aura.vis_flags = F_RANGED
tt.main_script.update = scripts.aura_hero_hunter_shoot_around.update
tt.aura.mods = {
	"mod_hero_hunter_skill_shoot_around_hit_fx"
}
tt.fx = "fx_hero_hunter_skill_shoot_around_decal"
tt.fx_every = fts(15)
tt.fx_amount = 3
tt = E:register_t("aura_hero_hunter_ultimate", "aura")
b = balance.heroes.hero_hunter.ultimate

E:add_comps(tt, "render")

tt.aura.mod = "mod_hero_hunter_ultimate_slow"
tt.aura.radius = b.slow_radius
tt.aura.vis_bans = bor(F_BOSS, F_FRIEND)
tt.aura.vis_flags = F_RANGED
tt.aura.cycle_time = fts(5)
tt.aura.duration = b.duration
tt.aura.track_source = true
tt.aura.use_mod_offset = false
tt.render.sprites[1].name = "dante_decal_Idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].loop = true
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_apply_mod.update
tt = E:register_t("aura_hero_dragon_gem_skill_stun", "aura")
b = balance.heroes.hero_dragon_gem.stun
tt.aura.mod = "mod_hero_dragon_gem_skill_stun"
tt.aura.radius = b.stun_radius
tt.aura.vis_flags = bor(F_AREA, F_STUN)
tt.aura.vis_bans = bor(F_FLYING, F_FRIEND)
tt.surround_fx = "fx_hero_dragon_gem_skill_stun"
tt.aura.duration = fts(1)
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_hero_dragon_gem_skill_stun.update
tt = E:register_t("aura_hero_dragon_gem_crystal_totem", "aura")
b = balance.heroes.hero_dragon_gem.crystal_totem

E:add_comps(tt, "render", "tween")

tt.aura.mod = "mod_hero_dragon_gem_crystal_totem_slow"
tt.aura.radius = b.aura_radius
tt.aura.vis_bans = bor(F_FRIEND)
tt.aura.vis_flags = F_RANGED
tt.aura.cycle_time = b.trigger_every
tt.aura.duration = nil
tt.render.sprites[1].prefix = "hero_evil_dragon_conduit"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].scale = v(0.7, 0.7)
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_hero_dragon_gem_crystal_totem.update
tt.damage_range = b.aura_radius
tt.damage_bans = bor(F_FRIEND)
tt.damage_min = nil
tt.damage_max = nil
tt.damage_type = DAMAGE_MAGICAL
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		fts(15),
		0
	}
}
tt.tween.disabled = true
tt.floor_decal = "decal_hero_dragon_gem_floor_circle_totem"
tt.pulse_sound = "HeroDragonGemPowerConduitCrystal"
tt = E:register_t("aura_controller_stage_14_amalgam", "aura")
tt.aura.duration = 1e+99
tt.aura.cycle_time = 0.25
tt.aura.radius = 170
tt.aura.allowed_templates = {
	"enemy_glareling"
}
tt.main_script.update = scripts.aura_controller_stage_14_amalgam.update

tt = E:register_t("aura_stage_14_prevent_polymorph", "aura")
tt.aura.duration = 1e+99
tt.aura.cycle_time = 0.25
tt.aura.radius = 100
tt.aura.allowed_templates = {
	"enemy_glareling"
}
tt.main_script.update = scripts.aura_stage_14_prevent_polymorph.update

tt = E:register_t("aura_stage_15_cult_leader_tower_stun", "aura")
b = balance.specials.stage15_cult_leader_tower

E:add_comps(tt, "render", "tween")

tt.aura.mod = "mod_stage_15_cult_leader_tower_stun"
tt.aura.radius = b.aura_radius
tt.aura.vis_bans = bor(F_FLYING)
tt.aura.vis_flags = band(F_RANGED, F_FRIEND)
tt.aura.cycle_time = fts(5)
tt.aura.duration = b.aura_duration
tt.aura.use_mod_offset = false
tt.render.sprites[1].prefix = "mutamydrias_fx_Mutamydrias_Stuncircle"
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].loop = false
tt.render.sprites[1].name = "start"
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "mutamydrias_fx_Mutamydrias_Stuncircle_Eye"
tt.render.sprites[2].name = "start"
tt.render.sprites[2].loop = true
tt.render.sprites[2].z = Z_DECALS
tt.render.sprites[2].offset = v(0, 13)
tt.render.sprites[3] = table.deepclone(tt.render.sprites[2])
tt.render.sprites[3].offset = v(22, 0)
tt.render.sprites[4] = table.deepclone(tt.render.sprites[2])
tt.render.sprites[4].offset = v(0, -13)
tt.render.sprites[5] = table.deepclone(tt.render.sprites[2])
tt.render.sprites[5].offset = v(-22, 0)
tt.decal_on_grab = "decal_stage_15_tentacle_spawn"
tt.decal_on_leave = "decal_stage_15_tentacle_stun_out"
tt.decal_on_activate = "decal_stage_15_tentacle_stun_activate"
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_stage_15_cult_leader_tower_stun.update
tt.time_before_stun = b.aura_time_before_stun
tt.duration = 6
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.25,
		255
	},
	{
		"this.duration",
		255
	}
}
tt.tween.props[1].sprite_id = 1

for i = 2, 5 do
	tt.eye_start = 2 + (i - 3)
	tt.tween.props[i] = E:clone_c("tween_prop")
	tt.tween.props[i].sprite_id = i
	tt.tween.props[i].name = "alpha"
	tt.tween.props[i].keys = {
		{
			0,
			0
		},
		{
			tt.eye_start - 0.5,
			0
		},
		{
			tt.eye_start,
			255
		},
		{
			"this.duration",
			255
		}
	}
end

tt.sound_pre = "Stage15MydriasTentacleCircleCounter"
tt.sound_grab = "Stage15MydriasTentacleCircle"
tt = E:register_t("aura_hero_bird_cluster_bomb_fire", "aura")
b = balance.heroes.hero_bird.cluster_bomb

E:add_comps(tt, "render", "tween")

tt.aura.mod = "mod_hero_bird_cluster_bomb_burn"
tt.aura.radius = b.fire_radius
tt.aura.vis_bans = bor(F_FLYING, F_FRIEND)
tt.aura.vis_flags = F_RANGED
tt.aura.cycle_time = 0.2
tt.aura.duration = nil
tt.render.sprites[1].name = "gryph_skillproy_fire_run"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].anchor = v(0.5, 0.45)
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].scale = vv(1.2)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].name = "gryph_skillproy_fireparticles_run"
tt.render.sprites[2].animated = true
tt.render.sprites[2].loop = true
tt.render.sprites[2].z = Z_OBJECTS
tt.render.sprites[2].scale = vv(1.3)
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_apply_mod.update
tt.main_script.remove = scripts.aura_hero_bird_cluster_bomb_fire.remove
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(3),
		255
	}
}
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].keys = {
	{
		0,
		0
	},
	{
		fts(3),
		255
	}
}
tt.tween.props[2].sprite_id = 2
tt.tween.disabled = false
tt.tween.remove = false
tt = E:register_t("aura_item_loot_box_damage", "aura")
b = balance.items.loot_box
tt.aura.cycles = 1
tt.aura.cycle_time = 0.3
tt.aura.damage_min = b.damage_min
tt.aura.damage_max = b.damage_max
tt.aura.damage_type = b.damage_type
tt.aura.track_source = true
tt.aura.radius = b.radius
tt.aura.vis_bans = bor(F_FRIEND)
tt.aura.vis_flags = F_RANGED
tt.main_script.update = scripts.aura_apply_damage.update

tt = E:register_t("aura_enemy_dust_cryptid", "aura")
b = balance.enemies.undying_hatred.dust_cryptid
tt.aura.mod = "mod_enemy_dust_cryptid"
tt.aura.radius = b.dust_radius
tt.aura.vis_flags = bor(F_AREA)
tt.aura.vis_bans = bor(F_FRIEND)
tt.aura.cycle_time = 0.2
tt.aura.duration = b.dust_duration
tt.aura.track_source = false
tt.main_script.insert = scripts.aura_enemy_dust_cryptid.insert
tt.main_script.update = scripts.aura_apply_mod.update
tt.main_script.remove = scripts.aura_enemy_dust_cryptid.remove
tt.decal_t = "decal_enemy_dust_cryptid_dust"
tt = E:register_t("aura_damage_sprint", "aura")
tt.aura.duration = -1
tt.aura.track_source = true
tt.main_script.update = scripts.aura_damage_sprint.update
tt.main_script.insert = scripts.aura_damage_sprint.insert
tt.main_script.remove = scripts.aura_damage_sprint.remove
tt = E:register_t("aura_boss_navira_tornado", "aura")
b = balance.enemies.undying_hatred.boss_navira.tornado
tt.aura.damage_min = b.damage
tt.aura.damage_max = b.damage
tt.aura.damage_type = b.damage_type
tt.aura.radius = b.radius
tt.aura.vis_flags = bor(F_AREA)
tt.aura.vis_bans = bor(F_FLYING, F_ENEMY)
tt.aura.cycle_time = b.cycle_time
tt.aura.duration = 1e+99
tt.aura.track_source = true
tt.main_script.insert = scripts.aura_apply_damage.insert
tt.main_script.update = scripts.aura_apply_damage.update
tt = E:register_t("aura_dragon_bone_cloud", "aura")

E:add_comps(tt, "render", "tween")

b = balance.heroes.hero_dragon_bone.cloud
tt.aura.duration = nil
tt.aura.radius = b.radius
tt.aura.vis_bans = bor(F_FRIEND)
tt.aura.vis_flags = bor(F_AREA)
tt.aura.mods = {
	"mod_dragon_bone_plague",
	"mod_dragon_bone_cloud_slow"
}
tt.aura.cycle_time = fts(10)
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_dragon_bone_cloud.update
tt.render.sprites[1].prefix = "hero_dragon_bone_cloud_decal"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].z = Z_DECAL
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "hero_dragon_bone_cloud_b_bubbles"
tt.render.sprites[2].name = "idle"
tt.render.sprites[2].z = Z_OBJECTS
tt.render.sprites[2].offset = v(0, 10)
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].prefix = "hero_dragon_bone_cloud_b_bubbles"
tt.render.sprites[3].name = "idle"
tt.render.sprites[3].z = Z_OBJECTS
tt.render.sprites[3].flip_x = true
tt.render.sprites[3].offset = v(0, -10)
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(18),
		255
	}
}
tt.tween.props[1].sprite_id = 1
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].name = "alpha"
tt.tween.props[2].keys = {
	{
		0,
		0
	},
	{
		fts(18),
		255
	}
}
tt.tween.props[2].sprite_id = 2
tt.tween.props[3] = E:clone_c("tween_prop")
tt.tween.props[3].name = "alpha"
tt.tween.props[3].keys = {
	{
		0,
		0
	},
	{
		fts(18),
		255
	}
}
tt.tween.props[3].sprite_id = 2
tt.tween.remove = false
tt.decal_cloud_t = "decal_dragon_bone_cloud"

tt.decal_cloud_t = "decal_dragon_bone_cloud"
tt = E:register_t("aura_bullet_tower_hermit_toad_engineer_basic", "aura")
b = balance.towers.hermit_toad.engineer_basic_attack

E:add_comps(tt, "render", "tween")

tt.aura.mod = "mod_tower_hermit_toad_engineer_basic_slow"
tt.aura.radius = 60
tt.aura.vis_flags = bor(F_AREA)
tt.aura.vis_bans = bor(F_FLYING, F_FRIEND)
tt.aura.cycle_time = fts(5)
tt.render.sprites[1].name = "hermit_toad_tower_decal2_run"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].loop = false
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_apply_mod.update
tt.tween.props[1].name = "alpha"
tt.tween.props[1].sprite_id = 1
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		tt.aura.duration - 0.5,
		255
	},
	{
		tt.aura.duration,
		0
	}
}
tt = E:register_t("aura_bullet_enemy_crocs_hydra_dot", "aura")
b = balance.enemies.crocs.crocs_hydra.dot

E:add_comps(tt, "render")

tt.aura.mod = "mod_crocs_hydra_dot"
tt.aura.radius = b.radius
tt.aura.vis_flags = bor(F_AREA)
tt.aura.vis_bans = bor(F_FLYING, F_ENEMY)
tt.aura.cycle_time = fts(5)
tt.aura.duration = b.duration
tt.render.sprites[1].prefix = "hydra_decal_skill2Def"
tt.render.sprites[1].name = "in"
tt.render.sprites[1].exo = true
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].loop = false
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_bullet_enemy_crocs_hydra_dot.update

tt = E:register_t("aura_bullet_soldier_tower_dwarf", "aura")
b = balance.towers.dwarf.incendiary_ammo.burn.aura
tt.aura.mod = "mod_aura_bullet_soldier_tower_dwarf"
tt.aura.duration = b.duration
tt.aura.cycle_time = b.cycle_time
tt.aura.radius = b.radius
tt.aura.vis_bans = bor(F_FRIEND, F_FLYING)
tt.aura.vis_flags = bor(F_MOD)
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_apply_mod.update

tt = E:register_t("aura_bullet_boss_crocs_poison_rain_lvl1", "aura")
b = balance.enemies.crocs.boss_crocs.poison_rain

E:add_comps(tt, "render", "tween")

tt.aura.mod = "mod_croc_boss_poison_rain_lvl1"
tt.aura.radius = b.poison_radius
tt.aura.vis_flags = bor(F_AREA)
tt.aura.vis_bans = bor(F_FLYING, F_ENEMY)
tt.aura.cycle_time = fts(5)
tt.aura.duration = b.poison_decal_duration[1]
tt.render.sprites[1].prefix = "boss_gator_lvl2_puddleDef"
tt.render.sprites[1].name = "in"
tt.render.sprites[1].exo = true
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].loop = true
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_bullet_boss_crocs_poison_rain_lvl1.update
tt.tween.props[1].name = "alpha"
tt.tween.props[1].sprite_id = 1
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		tt.aura.duration - 0.5,
		255
	},
	{
		tt.aura.duration,
		0
	}
}
tt = E:register_t("aura_bullet_boss_crocs_poison_rain_lvl2", "aura_bullet_boss_crocs_poison_rain_lvl1")
tt.aura.duration = b.poison_decal_duration[2]
tt.render.sprites[1].prefix = "boss_gator_lvl3_puddleDef"
tt.aura.mod = "mod_croc_boss_poison_rain_lvl2"

tt = E:register_t("aura_enemy_brute_welder", "aura")
b = balance.enemies.hammer_and_anvil.brute_welder.basic_attack.flame
tt.aura.duration = b.duration
tt.aura.radius = b.radius
tt.aura.vis_bans = bor(F_ENEMY)
tt.aura.vis_flags = bor(F_RANGED, F_AREA)
tt.aura.mod = "mod_burning_enemy_brute_welder"
tt.aura.cycle_time = b.cycle_time
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_apply_mod.update
tt = E:register_t("aura_enemy_darksteel_anvil", "aura")
b = balance.enemies.hammer_and_anvil.darksteel_anvil.aura
tt.aura.duration = b.duration
tt.aura.radius = b.aura_radius
tt.aura.vis_bans = bor(F_FRIEND)
tt.aura.vis_flags = bor(F_RANGED, F_AREA)
tt.aura.mod = "mod_enemy_darksteel_anvil_buff"
tt.aura.cycle_time = b.cycle_time
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_apply_mod.update
tt = E:register_t("aura_boss_machinist_burn", "aura")

E:add_comps(tt, "render", "tween")

b = balance.enemies.hammer_and_anvil.boss_machinist.fire_floor
tt.aura.damage_min = b.damage_min
tt.aura.damage_max = b.damage_max
tt.aura.damage_type = b.damage_type
tt.aura._radius = b.radius
tt.aura.radius = b.radius
tt.aura.vis_flags = bor(F_AREA)
tt.aura.vis_bans = bor(F_FLYING, F_ENEMY)
tt.aura.cycle_time = b.cycle_time
tt.aura.duration = 1e+99
tt.aura.track_source = true
tt.aura.mod = "mod_boss_machinist_burn"
tt.main_script.insert = scripts.aura_apply_damage.insert
tt.main_script.update = scripts.aura_apply_damage.update
tt.aura_floor_t = "aura_boss_machinist_burn_floor"
tt.render.sprites[1].prefix = "dlcdwarfbossstage02_floorsmokeDef"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].loop = true
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].alpha = 0
tt.tween.remove = false
tt.tween.disabled = true
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.5,
		255
	}
}

tt = E:register_t("aura_bullet_tower_arborean_honey", "aura")
b = balance.specials.towers.stage_20_arborean_honey

E:add_comps(tt, "render", "tween")

tt.aura.mod = "mod_tower_arborean_honey_basic_slow"
tt.aura.radius = 60
tt.aura.vis_flags = bor(F_AREA)
tt.aura.vis_bans = bor(F_FLYING, F_FRIEND)
tt.aura.cycle_time = fts(5)
tt.aura.duration = b.aura_duration
tt.render.sprites[1].name = "arborean_honey_tower_decal_in"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].loop = false
tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_apply_mod.update
tt.tween.props[1].name = "alpha"
tt.tween.props[1].sprite_id = 1
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		tt.aura.duration - 0.5,
		255
	},
	{
		tt.aura.duration,
		0
	}
}

tt = E:register_t("aura_boss_spider_queen_spiderweb", "aura")
b = balance.enemies.arachnids.boss_spider_queen.spiderweb
tt.aura.track_source = true
tt.aura.cycle_time = b.cycle_time
tt.main_script.update = scripts.aura_boss_spider_queen_spiderweb.update
tt.min_decal_distance = b.min_distance
tt.decal = "decal_boss_spider_queen_spiderweb"
tt.decal_duration = b.duration
tt = RT("aura_spider_webs_sprint", "aura")

AC(tt, "editor", "editor_script")

tt.main_script.insert = scripts.aura_apply_mod.insert
tt.main_script.update = scripts.aura_spider_webs.update
tt.aura.ignore_flywalk = true
tt.aura.duration = -1
tt.aura.mod = "mod_spider_web_sprint"
tt.aura.radius = 80
tt.aura.cycle_time = fts(3)
tt.aura.vis_bans = bor(F_FLYING)
tt.aura.allowed_templates = {
	"enemy_spiderling",
	"enemy_spider_priest",
	"enemy_glarenwarden",
	"enemy_ballooning_spider",
	"enemy_ballooning_spider_flyer",
	"enemy_spider_sister",
	"enemy_cultbrood",
	"enemy_drainbrood",
	"enemy_spidead",
	"hero_spider",
	"soldier_hero_spider_ultimate"
}
tt.editor.components = {
	"render"
}
tt.editor.overrides = {
	["render.sprites[1].hidden"] = false,
	["render.sprites[1].animated"] = false,
	["render.sprites[1].name"] = "editor_red_circle"
}
tt.editor.props = {
	{
		"aura.radius",
		PT_NUMBER
	}
}
tt.editor_script.update = scripts.editor_aura_spider_web_sprint.update
tt = RT("aura_spider_webs_slowness", "aura_spider_webs_sprint")
tt.aura.allowed_templates = nil
tt.aura.mod = "mod_spider_web_slowness"
tt.aura.vis_bans = bor(F_ENEMY, F_FLYING)
tt.aura.excluded_templates = {
	"hero_spider",
	"soldier_hero_spider_ultimate",
	"hero_witch",
	"hero_space_elf"
}
tt = E:register_t("priests_tentacle_aura", "aura")
b = balance.specials.towers.tower_stage_28_priests_barrack.tentacle.area_attack
tt.aura.cycles = 1
tt.aura.damage_min = b.damage_min
tt.aura.damage_max = b.damage_max
tt.aura.damage_type = b.damage_type
tt.aura.radius = b.radius
tt.aura.vis_bans = bor(F_FRIEND, F_FLYING)
tt.main_script.update = scripts.aura_apply_damage.update
tt = E:register_t("aura_tower_sparking_geode_spike_burst", "aura")
b = balance.towers.sparking_geode.spike_burst
tt.aura.mods = {
	"mod_tower_sparking_geode_burst_slow",
	"mod_tower_sparking_geode_burst_damage"
}
tt.aura.radius = b.radius
tt.aura.vis_flags = bor(F_MOD)
tt.aura.vis_bans = bor(F_FRIEND, F_FLYING)
tt.aura.duration = nil
tt.aura.cycle_time = b.damage_every
tt.distance_between_crystals = {
	115,
	110,
	70
}
tt.main_script.insert = scripts.aura_tower_sparking_geode_spike_burst.insert
tt.main_script.update = scripts.aura_tower_sparking_geode_spike_burst.update
tt.ps_names = {
	"ps_tower_sparking_geode_sparks_1",
	"ps_tower_sparking_geode_sparks_2"
}

tt = E:register_t("instant_heal_mod", "modifier")

E:add_comps(tt, "render")

tt.heal_hp = nil
tt.main_script.insert = scripts.instant_heal_mod.insert
tt.main_script.update = scripts.mod_track_target.update
tt.modifier.bans = {}
tt.modifier.duration = 1
tt.render.sprites[1].name = "instant_heal_mod_fx"
tt = E:register_t("mod_stage_guardian_tree_wave_of_roots_stun", "modifier")

E:add_comps(tt, "render")

b = balance.specials.trees.guardian_tree
tt.modifier.duration = b.effect_duration
tt.modifier.replaces_lower = false
tt.modifier.resets_same = false
tt.modifier.use_mod_offset = false
tt.modifier.immune_for_seconds = b.immune_for_seconds
tt.render.sprites[1].prefix = "stage_2_special_treeFX_holdFX"
tt.render.sprites[1].name = "start"
tt.render.sprites[1].size_names = {
	"small",
	"big",
	"big"
}
tt.render.sprites[1].scale = v(1, 1)
tt.render.sprites[1].sort_y_offset = -3
tt.main_script.insert = scripts.trees_guardian_tree_vine_mod.insert
tt.main_script.remove = scripts.trees_guardian_tree_vine_mod.remove
tt.main_script.update = scripts.trees_guardian_tree_vine_mod.update
tt = E:register_t("mod_cutthroat_rat_bleed", "mod_blood")
b = balance.enemies.werebeasts.cutthroat_rat
tt.dps.damage_min = b.gut_stab.bleed_damage_min
tt.dps.damage_max = b.gut_stab.bleed_damage_max
tt.dps.damage_inc = 0
tt.dps.damage_every = b.gut_stab.bleed_every
tt.dps.fx_every = fts(20)
tt.modifier.duration = b.gut_stab.bleed_duration
tt = E:register_t("mod_hero_lumenir_sword_hit", "modifier")

E:add_comps(tt, "render")

b = balance.heroes.hero_lumenir.celestial_judgement
tt.modifier.duration = fts(39)
tt.render.sprites[1].name = "hero_lumenir_celestial_judgement_fx_idle"
tt.render.sprites[1].draw_order = 10
tt.render.sprites[1].loop = false
tt.mod_stun = "mod_hero_lumenir_stun"
tt.hit_decal = "decal_hero_lumenir_sword"
tt.decal_spawn_time = fts(25)
tt.time_hit = fts(22)
tt.damage = b.damage
tt.stun_duration = b.stun_duration
tt.damage_type = b.damage_type
tt.stun_range = b.stun_range
tt.stun_vis_flags = F_RANGED
tt.stun_bans = bor(F_BOSS)
tt.main_script.update = scripts.mod_hero_lumenir_sword_hit.update
tt.sound = "HeroLumenirCelestialJudgementImpact"

tt = E:register_t("mod_hero_lumenir_stun", "mod_stun")
tt.modifier.duration = fts(23)

tt = E:register_t("mod_hero_dragon_shield", "modifier")

E:add_comps(tt, "render", "tween")

tt.modifier.duration = nil
tt.spiked_armor = nil
tt.armor = nil
tt.main_script.insert = scripts.mod_hero_lumenir_shield.insert
tt.main_script.update = scripts.mod_hero_lumenir_shield.update
tt.main_script.remove = scripts.mod_hero_lumenir_shield.remove
tt.render.sprites[1].prefix = "hero_lumenir_blessing_of_retribution_shield"
tt.render.sprites[1].size_names = {
	"small",
	"mid",
	"big"
}
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].name = "hero_lumenir_blessing_of_retribution_shield_decal"
tt.render.sprites[2].size_names = {
	"small",
	"mid",
	"big"
}
tt.render.sprites[2].animated = false
tt.render.sprites[2].z = Z_DECALS
tt.tween.remove = false
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.25,
		255
	}
}
tt = E:register_t("mod_lumenir_ulti_stun", "mod_stun")
b = balance.heroes.hero_lumenir
tt.modifier.duration = b.ultimate.stun_target_duration
tt.modifier.allows_duplicates = true
tt.modifier.vis_flags = bor(F_MOD, F_STUN)
tt.modifier.vis_bans = bor(F_BOSS)
tt = E:register_t("mod_hero_vesper_martial_flourish_fx", "modifier")

E:add_comps(tt, "render")

tt.modifier.duration = fts(23)
tt.render.sprites[1].name = "hero_vesper_martial_flourish_hit"
tt.render.sprites[1].draw_order = 10
tt.render.sprites[1].loop = false
tt.main_script.update = scripts.mod_track_target.update
tt = E:register_t("mod_tower_elven_stargazers_ray_hit", "modifier")

AC(tt, "render")

b = balance.towers.elven_stargazers
tt.modifier.damage_min = nil
tt.modifier.damage_max = nil
tt.damage_type = DAMAGE_MAGICAL
tt.main_script.update = scripts.mod_ray_stargazers.update
tt.modifier.duration = fts(10)
tt.modifier.allows_duplicates = true
tt.modifier.use_mod_offset = true
tt.render.sprites[1].name = "elven_stargazers_tower_ray_end_end"
tt.render.sprites[1].loop = false
tt.render.sprites[1].z = Z_BULLETS + 1
tt.damage_from_bullet = true
tt = E:register_t("mod_tower_elven_stargazers_star_death", "modifier")
b = balance.towers.elven_stargazers
tt.main_script.update = scripts.mod_stargazers_stars_death.update
tt.modifier.duration = b.stars_death.duration
tt.modifier.allows_duplicates = false
tt.modifier.use_mod_offset = true
tt.modifier.bullet = "arrow_tower_stargazers_death_star"
tt.modifier.stars_death_min_range = b.stars_death.min_range
tt.modifier.stars_death_max_range = b.stars_death.max_range
tt.modifier.stars_death_chance = b.stars_death.chance
tt.modifier.stars_death_stars = b.stars_death.stars
tt = E:register_t("mod_tower_arcane_wizard_power_empowerment", "modifier")
tt.main_script.insert = scripts.mod_tower_factors.insert
tt.main_script.remove = scripts.mod_tower_arcane_wizard_power_empowerment.remove
tt.main_script.update = scripts.mod_tower_arcane_wizard_power_empowerment.update
tt.range_factor = 1
tt.damage_factor = nil
tt.modifier.duration = 1e+99
tt.modifier.use_mod_offset = false
tt = E:register_t("mod_tower_arcane_wizard_power_empowerment_fx", "modifier")

E:add_comps(tt, "render", "tween")

tt.main_script.update = scripts.tower_arcane_wizard_power_empowerment_mark_mod.update
tt.modifier.duration = 1e+99
tt.modifier.use_mod_offset = false
tt.modifier.keep_on_tower_upgrade = true
tt.render.sprites[1].name = "arcane_wizard_tower_empowerment_decal"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_TOWER_BASES + 1
tt.render.sprites[1].offset.y = 5
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].draw_order = 11
tt.render.sprites[2].name = "arcane_wizard_tower_empowerment_particles_idle"
tt.render.sprites[2].loop = true
tt.render.sprites[2].z = Z_OBJECTS
tt.render.sprites[2].offset.y = 5
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.5,
		255
	}
}
tt.tween.remove = false
tt.sound_events.insert = "TowerArcaneWizardEmpowerment"
tt = E:register_t("tower_arcane_wizard_power_empowerment_mark_mod", "modifier")

E:add_comps(tt, "mark_flags")

tt.mark_flags.vis_bans = 0
tt.main_script.update = scripts.tower_arcane_wizard_power_empowerment_mark_mod.update
tt.modifier.allows_duplicates = true
tt.modifier.duration = 1e+99
tt = E:register_t("mod_tower_arcane_wizard_ray_hit", "modifier")

AC(tt, "render", "dps")

b = balance.towers.arcane_wizard
tt.damage_min = b.basic_attack.damage_min
tt.damage_max = b.basic_attack.damage_max
tt.dps.damage_min = nil
tt.dps.damage_max = nil
tt.dps.damage_type = bor(DAMAGE_MAGICAL, DAMAGE_ONE_SHIELD_HIT)
tt.dps.damage_every = b.basic_attack.damage_every
tt.dps.pop = {
	"pop_zap_arcane"
}
tt.dps.pop_conds = DR_KILL
tt.main_script.update = scripts.mod_ray_arcane.update
tt.modifier.duration = fts(10)
tt.modifier.allows_duplicates = true
tt.modifier.use_mod_offset = true
tt.render.sprites[1].name = "arcane_wizard_tower_ray_end_idle"
tt.render.sprites[1].loop = true
tt.render.sprites[1].z = Z_BULLETS + 1
tt.damage_from_bullet = true

tt = E:register_t("mod_hero_lava_hotheaded", "modifier")
tt.main_script.insert = scripts.mod_tower_factors.insert
tt.main_script.remove = scripts.mod_tower_factors.remove
tt.main_script.update = scripts.mod_tower_arcane_wizard_power_empowerment.update
tt.range_factor = 1
tt.damage_factor = nil
tt.modifier.duration = 1e+99
tt.modifier.use_mod_offset = false
tt = E:register_t("mod_hero_lava_hotheaded_fx", "modifier")

E:add_comps(tt, "render")

tt.main_script.update = scripts.mod_hero_lava_hotheaded_fx.update
tt.modifier.duration = 1e+99
tt.modifier.use_mod_offset = false
tt.modifier.keep_on_tower_upgrade = true
tt.render.sprites[1].prefix = "hero_lava_respawn_tower_FX"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].offset.y = 5
tt.render.sprites[1].sort_y_offset = -5
tt.sound_events.insert = "TowerArcaneWizardEmpowerment"

tt = E:register_t("mod_hero_lava_burn", "mod_slow")
E:add_comps(tt, "render")
b = balance.heroes.hero_lava.death_aura
tt.slow.factor = b.slow_factor
tt.modifier.duration = 1
tt.render.sprites[1].prefix = "brute_welder_attack_mod"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].draw_order = 2
tt.render.sprites[1].loop = true

tt = E:register_t("mod_hero_muyrn_faery_dust", "modifier")

E:add_comps(tt, "render")

tt.main_script.insert = scripts.mod_damage_factors.insert
tt.main_script.remove = scripts.mod_damage_factors.remove
tt.main_script.update = scripts.mod_track_target.update
tt.inflicted_damage_factor = nil
tt.modifier.duration = nil
tt.render.sprites[1] = E:clone_c("sprite")
tt.render.sprites[1].name = "hero_nyru_fairy_dust_modifier"
tt.render.sprites[1].draw_order = DO_MOD_FX
tt = E:register_t("mod_hero_muyrn_faery_dust_fx", "modifier")

E:add_comps(tt, "render")

tt.main_script.insert = scripts.mod_hero_muyrn_faery_dust_fx.insert
tt.main_script.update = scripts.mod_track_target.update
tt.inflicted_damage_factor = nil
tt.modifier.duration = nil
tt.modifier.use_mod_offset = false
tt.render.sprites[1] = E:clone_c("sprite")
tt.render.sprites[1].name = "hero_nyru_fairy_dust_FX"
tt.render.sprites[1].draw_order = DO_MOD_FX
tt.render.sprites[1].loop = false
tt.render.sprites[1].size_scales = {
	vv(0.9),
	vv(1),
	vv(1)
}
tt = E:register_t("mod_hero_muyrn_ultimate", "mod_slow")
tt.modifier.duration = 1
tt.slow.factor = nil
tt = E:register_t("mod_hero_muyrn_ultimate_damage", "modifier")
b = balance.heroes.hero_muyrn

E:add_comps(tt, "dps")

tt.modifier.duration = 1
tt.dps.damage_min = nil
tt.dps.damage_max = nil
tt.dps.damage_type = b.ultimate.damage_type
tt.dps.damage_every = b.ultimate.damage_every
tt.main_script.insert = scripts.mod_dps.insert
tt.main_script.update = scripts.mod_dps.update
tt = E:register_t("mod_tower_arborean_emissary_gift_of_nature_heal", "modifier")
b = balance.towers.arborean_emissary

E:add_comps(tt, "render", "hps")

tt.heal_min = b.gift_of_nature.heal_min
tt.heal_max = b.gift_of_nature.heal_max
tt.duration = b.gift_of_nature.duration
tt.hps.heal_min = nil
tt.hps.heal_max = nil
tt.hps.heal_every = b.gift_of_nature.heal_every
tt.main_script.insert = scripts.tower_arborean_emissary_gift_of_nature_heal_mod.insert
tt.main_script.update = scripts.mod_hps.update
tt.modifier.duration = nil
tt.render.sprites[1].name = "arborean_emissary_gift_of_nature_heal"
tt.render.sprites[1].loop = true
tt.render.sprites[1].animated = true
tt.modifier.vis_bans = bor(F_ENEMY)
tt.modifier.resets_same = false
tt = E:register_t("mod_tower_arborean_emissary_gift_of_nature_heal_decal", "modifier")
b = balance.towers.arborean_emissary

E:add_comps(tt, "render")

tt.duration = b.gift_of_nature.duration
tt.main_script.insert = scripts.tower_arborean_emissary_gift_of_nature_heal_mod_decal.insert
tt.main_script.update = scripts.mod_track_fx.update
tt.modifier.duration = nil
tt.render.sprites[1].name = "arborean_emissary_gift_of_nature_heal_glow"
tt.render.sprites[1].loop = true
tt.render.sprites[1].animated = true
tt.modifier.vis_bans = bor(F_ENEMY)
tt.modifier.use_mod_offset = false
tt.modifier.resets_same = false
tt = E:register_t("mod_tower_arborean_emissary_gift_of_nature_totem_inflicted_damage", "modifier")
b = balance.towers.arborean_emissary
tt.modifier_duration = b.basic_attack.modifier_duration
tt.inflicted_damage_factor_config = b.gift_of_nature.inflicted_damage_factor
tt.modifier.duration = nil
tt.main_script.insert = scripts.mod_arborean_emissary_weak.insert
tt.main_script.remove = scripts.mod_arborean_emissary_weak.remove
tt.main_script.update = scripts.mod_track_target.update
tt.modifier.vis_flags = F_MOD
tt.inflicted_damage_factor = nil
tt = E:register_t("mod_tower_arborean_emissary_basic_attack", "modifier")
b = balance.towers.arborean_emissary

E:add_comps(tt, "render")

tt.received_damage_factor_config = b.basic_attack.received_damage_factor
tt.modifier_duration = b.basic_attack.modifier_duration
tt.modifier.duration = nil
tt.main_script.insert = scripts.mod_arborean_emissary_weak.insert
tt.main_script.remove = scripts.mod_arborean_emissary_weak.remove
tt.main_script.update = scripts.mod_track_target.update
tt.modifier.vis_flags = F_MOD
tt.modifier.type = MOD_TYPE_POISON
tt.inflicted_damage_factor = nil
tt.received_damage_factor = nil
tt.render.sprites[1].name = "arborean_emissary_basic_attack_modifier"
tt.render.sprites[1].draw_order = DO_MOD_FX
tt.render.sprites[1].size_names = {
	"arborean_emissary_basic_attack_modifier",
	"arborean_emissary_basic_attack_modifier",
	"arborean_emissary_basic_attack_modifier_big"
}
tt = E:register_t("mod_enemy_skunk_bombardier_basic_attack", "modifier")
b = balance.enemies.werebeasts.skunk_bombardier

E:add_comps(tt, "render")

tt.modifier.duration = b.ranged_attack.mod_duration
tt.received_damage_factor = b.ranged_attack.received_damage_factor
tt.main_script.insert = scripts.mod_damage_factors.insert
tt.main_script.remove = scripts.mod_damage_factors.remove
tt.main_script.update = scripts.mod_track_target.update
tt.modifier.vis_flags = F_MOD
tt.render.sprites[1].name = "skunk_bombardier_modifier_modifier"
tt.render.sprites[1].draw_order = DO_MOD_FX
tt = E:register_t("mod_enemy_rhino_charge_enemy", "modifier")
b = balance.enemies.werebeasts.rhino

E:add_comps(tt, "dps", "render")

tt.dps.damage_min = b.charge.damage_enemy_min
tt.dps.damage_max = b.charge.damage_enemy_max
tt.dps.damage_type = b.charge.damage_type
tt.dps.damage_every = fts(10)
tt.modifier.duration = fts(7)
tt.modifier.use_mod_offset = true
tt.main_script.insert = scripts.mod_dps.insert
tt.main_script.update = scripts.mod_dps.update
tt.render.sprites[1].name = "razing_rhino_razing_rhino_charge_hit_fx"
tt.render.sprites[1].loop = false
tt = E:register_t("mod_enemy_rhino_charge_soldier", "mod_enemy_rhino_charge_enemy")
b = balance.enemies.werebeasts.rhino
tt.dps.damage_min = b.charge.damage_soldier_min
tt.dps.damage_max = b.charge.damage_soldier_max
tt = E:register_t("mod_hero_builder_lunch_break", "modifier")
tt.heal_hp = nil
tt.main_script.insert = scripts.mod_hero_builder_lunch_break.insert
tt.main_script.update = scripts.mod_track_target.update
tt.modifier.bans = {}
tt.modifier.duration = 1
tt = E:register_t("mod_hero_builder_ultimate_stun", "mod_stun")
tt.modifier.duration = nil
tt.modifier.vis_flags = bor(F_MOD, F_STUN)
tt.modifier.vis_bans = bor(F_BOSS)
tt = E:register_t("mod_hero_builder_demolition_man_hit_fx", "modifier")

E:add_comps(tt, "render")

tt.render.sprites[1].name = "hero_obdul_skill_3_hit"
tt.main_script.insert = scripts.mod_track_target.insert
tt.main_script.remove = scripts.mod_track_target.remove
tt.main_script.update = scripts.mod_track_target.update
tt.modifier.duration = fts(7)
tt = E:register_t("mod_tower_stargazers_teleport_stun", "mod_stun")
tt.modifier.duration = 5
tt.modifier.vis_flags = bor(F_MOD, F_STUN)
tt.modifier.vis_bans = bor(F_BOSS)
tt.render.sprites[1] = nil
tt = E:register_t("mod_tower_stargazers_death_star_stun", "mod_stun")
b = balance.towers.elven_stargazers.stars_death
tt.modifier.duration = b.stun
tt.modifier.vis_flags = bor(F_MOD, F_STUN)
tt.modifier.vis_bans = bor(F_BOSS)
tt.render.sprites[1] = nil
tt = E:register_t("mod_enemy_unblinded_abomination_eat", "modifier")
b = balance.enemies.cult_of_the_overseer.unblinded_priest
tt.main_script.queue = scripts.mod_enemy_unblinded_abomination_eat.queue
tt.main_script.update = scripts.mod_enemy_unblinded_abomination_eat.update
tt.explode_fx = "fx_enemy_unblinded_abomination_eat"
tt.required_hp = b.abomination.eat.hp_required

tt = E:register_t("mod_priests_abomination_eat", "modifier")
b = balance.specials.towers.tower_stage_28_priests_barrack.abomination
tt.main_script.queue = scripts.mod_enemy_unblinded_abomination_eat.queue
tt.main_script.update = scripts.mod_enemy_unblinded_abomination_eat.update
tt.explode_fx = "fx_soldier_priests_barrack_abomination_eat"
tt.required_hp = b.eat.hp_required

tt = E:register_t("mod_hero_space_elf_black_aegis", "modifier")

E:add_comps(tt, "render", "health_bar", "health")

b = balance.heroes.hero_space_elf
tt.modifier.vis_flags = bor(F_MOD)
tt.modifier.duration = nil
tt.modifier.use_mod_offset = false
tt.shield_base = nil
tt.damage_taken = 0
tt.main_script.insert = scripts.mod_hero_space_elf_black_aegis.insert
tt.main_script.remove = scripts.mod_hero_space_elf_black_aegis.remove
tt.main_script.update = scripts.mod_hero_space_elf_black_aegis.update
tt.health_bar.offset = v(0, 42)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.health_bar.colors = {}
tt.health_bar.colors.fg = {
	255,
	255,
	0,
	255
}
tt.health_bar.colors.bg = {
	0,
	0,
	0,
	255
}
tt.health_bar.sort_y_offset = -2
tt.health_bar.disable_fade = true
tt.health_bar.hidden = true
tt.animation_start = "in"
tt.animation_loop = "idle"
tt.animation_end = "out"
tt.explosion_damage = nil
tt.explosion_range = b.black_aegis.explosion_range
tt.explosion_damage_type = b.black_aegis.explosion_damage_type
tt.explosion_time = fts(8)
tt.render.sprites[1].prefix = "hero_therien_black_aegis_top"
tt.render.sprites[1].name = ""
tt.render.sprites[1].loop = true
tt.render.sprites[1].size_names = {
	"small",
	"big",
	"big"
}
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].draw_order = DO_MOD_FX
tt.render.sprites[1].scale = v(0.8, 0.8)
tt.render.sprites[1].offset = v(0, 3)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].prefix = "hero_therien_black_aegis_bottom"
tt.render.sprites[2].name = ""
tt.render.sprites[2].z = Z_DECALS
tt.render.sprites[2].size_names = {
	"small",
	"big",
	"big"
}
tt.render.sprites[2].scale = v(0.8, 0.8)
tt.render.sprites[2].offset = v(0, 3)
tt.modifier.damage_fx = "fx_hero_space_elf_black_aegis_hit"
tt.sound_explosion = "HeroSpaceElfBlackAegisExplosion"
tt = E:register_t("mod_hero_space_elf_spatial_distortion", "modifier")

E:add_comps(tt, "render", "tween")

tt.main_script.insert = scripts.mod_tower_factors.insert
tt.main_script.remove = scripts.mod_tower_factors.remove
tt.main_script.update = scripts.mod_tower_factors.update
tt.modifier.duration = nil
tt.range_factor = nil
tt.damage_factor = 1
tt.render.sprites[1].name = "hero_therien_space_warp_idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].offset.y = 13
tt.render.sprites[1].draw_order = DO_TOWER_MODS
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.5,
		255
	},
	{
		3,
		255
	},
	{
		3.5,
		0
	}
}
tt.fade_duration = 0.4
tt.offset_y_per_tower = {
	necromancer = 16,
	royal_archers = 20,
	elven_stargazers = 16,
	tricannon = 10,
	arborean_emissary = 20,
	flamespitter = 16,
	ballista = 20
}
tt = E:register_t("mod_hero_space_elf_ultimate", "modifier")
b = balance.heroes.hero_space_elf

E:add_comps(tt, "render", "tween", "track_kills", "sound_events")

tt.modifier.type = MOD_TYPE_TIMELAPSE
tt.modifier.vis_flags = F_MOD
tt.modifier.vis_bans = F_BOSS
tt.render.sprites[1].prefix = "hero_therien_void_prison_fx"
tt.render.sprites[1].sort_y_offset = -1
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].size_names = {
	"small",
	"big",
	"big"
}
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "decal_flying_shadow_hard"
tt.render.sprites[2].z = Z_DECALS
tt.render.sprites[2].scale = vv(0.7)
tt.tween.remove = false
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		0
	},
	{
		fts(15),
		255
	}
}
tt.tween.props[1].sprite_id = 2
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].name = "offset"
tt.tween.props[2].keys = {
	{
		0,
		v(0, 0)
	},
	{
		fts(30),
		v(0, 10)
	},
	{
		fts(60),
		v(0, 0)
	}
}
tt.tween.props[2].sprite_id = 1
tt.tween.props[2].disabled = true
tt.tween.props[2].loop = true
tt.main_script.queue = scripts.mod_hero_space_elf_ultimate.queue
tt.main_script.dequeue = scripts.mod_hero_space_elf_ultimate.dequeue
tt.main_script.update = scripts.mod_hero_space_elf_ultimate.update
tt.main_script.insert = scripts.mod_hero_space_elf_ultimate.insert
tt.main_script.remove = scripts.mod_hero_space_elf_ultimate.remove
tt.damage_type = bor(b.ultimate.damage_type, DAMAGE_NO_SPAWNS)
tt.damage = nil
tt.modifier.duration = nil
tt.sound_events.insert = "HeroSpaceElfCosmicPrisonIn"
tt.out_sfx = "HeroSpaceElfCosmicPrisonOut"
tt.decal = "decal_hero_space_elf_ultimate_mod"
tt = E:register_t("mod_upgrade_desperate_effort", "modifier")
b = balance.upgrades.heroes_desperate_effort
tt.main_script.insert = scripts.mod_damage_factors.insert
tt.main_script.remove = scripts.mod_damage_factors.remove
tt.main_script.update = scripts.mod_track_target.update
tt.inflicted_damage_factor = b.damage_factor
tt.modifier.duration = b.duration
tt = E:register_t("mod_upgrade_visual_learning", "modifier")
b = balance.upgrades.heroes_visual_learning
tt.main_script.insert = scripts.mod_upgrade_visual_learning.insert
tt.main_script.remove = scripts.mod_upgrade_visual_learning.remove
tt.main_script.update = scripts.mod_track_target.update
tt.modifier.duration = b.duration
tt.armor_bonus = b.armor_bonus
tt = E:register_t("mod_upgrade_lone_wolves", "modifier")
b = balance.upgrades.heroes_lone_wolves
tt.main_script.insert = scripts.mod_upgrade_lone_wolves.insert
tt.main_script.remove = scripts.mod_upgrade_lone_wolves.remove
tt.main_script.update = scripts.mod_track_target.update
tt.xp_gain_factor = b.xp_gain_factor
tt.modifier.duration = b.duration
tt = E:register_t("mod_soldier_tower_demon_pit_explosion", "mod_stun")
tt.modifier.duration = nil
tt.modifier.vis_flags = bor(F_MOD, F_STUN)
tt.modifier.vis_bans = bor(F_BOSS)
tt = E:register_t("mod_tower_demon_pit_master_explosion_burning", "modifier")
b = balance.towers.demon_pit.master_exploders

E:add_comps(tt, "dps", "render")

tt.modifier.duration = nil
tt.dps.damage_min = nil
tt.dps.damage_max = nil
tt.dps.damage_type = b.damage_type
tt.dps.damage_every = b.damage_every
tt.main_script.insert = scripts.mod_dps.insert
tt.main_script.update = scripts.mod_dps.update
tt.render.sprites[1].size_names = {
	"small",
	"medium",
	"large"
}
tt.render.sprites[1].prefix = "fire"
tt.render.sprites[1].name = "small"
tt.render.sprites[1].draw_order = 2
tt.render.sprites[1].loop = true

tt = E:register_t("mod_hero_lava_wild_eruption_burning", "modifier")
b = balance.heroes.hero_lava.wild_eruption

E:add_comps(tt, "dps", "render")

tt.modifier.duration = nil
tt.dps.damage_min = nil
tt.dps.damage_max = nil
tt.dps.damage_type = b.damage_type
tt.dps.damage_every = b.damage_every
tt.main_script.insert = scripts.mod_dps.insert
tt.main_script.update = scripts.mod_dps.update
tt.render.sprites[1].size_names = {
	"small",
	"medium",
	"large"
}
tt.render.sprites[1].prefix = "fire"
tt.render.sprites[1].name = "small"
tt.render.sprites[1].draw_order = 2
tt.render.sprites[1].loop = true

tt = E:register_t("mod_enemy_unblinded_shackler_shackles", "modifier")
b = balance.enemies.cult_of_the_overseer.unblinded_shackler

E:add_comps(tt, "render")

tt.main_script.update = scripts.mod_enemy_unblinded_shackler_shackles.update
tt.modifier.duration = 1e+99
tt.render.sprites[1].prefix = "unblinded_shackler_tower_mod"
tt.render.sprites[1].animated = true
tt.render.sprites[1].draw_order = 20
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = -10
tt = E:register_t("mod_enemy_unblinded_shackler_mark", "modifier")

E:add_comps(tt, "mark_flags")

tt.mark_flags.vis_bans = F_CUSTOM
tt.modifier.duration = 1e+99
tt.main_script.queue = scripts.mod_mark_flags.queue
tt.main_script.dequeue = scripts.mod_mark_flags.dequeue
tt.main_script.update = scripts.mod_mark_flags.update
tt = E:register_t("mod_soldier_tower_rocket_gunners_sting_missiles_target", "modifier")

E:add_comps(tt, "render")

tt.main_script.update = scripts.mod_soldier_tower_rocket_gunners_sting_missiles_target.update
tt.modifier.use_mod_offset = true
tt.modifier.duration = 1e+99
tt.render.sprites[1].prefix = "rocket_gunners_tower_reticle"
tt.render.sprites[1].draw_order = DO_MOD_FX
tt = E:register_t("mod_soldier_tower_rocket_gunners_sting_missiles_mark", "modifier")

E:add_comps(tt, "mark_flags")

tt.mark_flags.vis_bans = F_CUSTOM
tt.main_script.queue = scripts.mod_mark_flags.queue
tt.main_script.dequeue = scripts.mod_mark_flags.dequeue
tt.main_script.update = scripts.mod_mark_flags.update
tt = E:register_t("mod_tower_necromancer_curse", "modifier")
b = balance.towers.necromancer.curse

E:add_comps(tt, "render")

tt.modifier.duration = b.duration
tt.main_script.insert = scripts.mod_tower_necromancer_curse.insert
tt.main_script.remove = scripts.mod_tower_necromancer_curse.remove
tt.main_script.update = scripts.mod_track_target.update
tt.modifier.vis_flags = F_MOD
tt.render.sprites[1].name = "necromancer_tower_curse_idle"
tt.render.sprites[1].draw_order = DO_MOD_FX
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].name = "necromancer_tower_curse_decal"
tt.render.sprites[2].z = Z_DECALS
tt.render.sprites[2].animated = false
tt.skeleton_prefix = "soldier_tower_necromancer_skeleton_lvl"
tt.skeleton_golem_prefix = "soldier_tower_necromancer_skeleton_golem_lvl"
tt.sprite_small = "necromancer_tower_curse_idle"
tt.sprite_big = "necromancer_tower_curse_big_idle"
tt.decal_small = "necromancer_tower_curse_decal"
tt.decal_big = "necromancer_tower_curse_decal_big"
tt.excluded_templates = {
	"enemy_acolyte_tentacle",
	"enemy_armored_nightmare",
	"enemy_specter",
	"enemy_animated_armor",
	"enemy_darksteel_shielder",
	"enemy_surveillance_sentry"
}
tt.excluded_templates_golem = {
	""
}
tt = E:register_t("mod_tower_necromancer_skill_debuff", "modifier")
b = balance.towers.necromancer
tt.main_script.insert = scripts.mod_track_target.insert
tt.modifier.duration = nil
tt.modifier.duration_config = b.skill_debuff.mod_duration
tt.main_script.insert = scripts.mod_tower_necromancer_skill_debuff.insert
tt.main_script.update = scripts.mod_tower_necromancer_skill_debuff.update
tt.main_script.remove = scripts.mod_tower_necromancer_skill_debuff.remove
tt = E:register_t("mod_tower_necromancer_skill_debuff_skeleton_improve", "modifier")
b = balance.towers.necromancer
tt.main_script.insert = scripts.mod_damage_factors.insert
tt.main_script.remove = scripts.mod_damage_factors.remove
tt.main_script.update = scripts.mod_track_target.update
tt = E:register_t("mod_tower_necromancer_skill_rider", "modifier")
b = balance.towers.necromancer.skill_rider
tt.modifier.duration = 3
tt.modifier.allows_duplicates = true
tt.main_script.insert = scripts.mod_track_target.insert
tt.main_script.update = scripts.mod_track_target.update
tt.main_script.remove = scripts.mod_track_target.remove
tt = E:register_t("mod_bullet_tower_ballista_skill_final_shot_stun", "mod_stun")
b = balance.towers.ballista.skill_final_shot
tt.stun_time = b.stun_time
tt.modifier.duration = b.stun_time[1]
tt.modifier.vis_flags = bor(F_MOD, F_STUN)
tt.modifier.vis_bans = bor(F_BOSS)
tt = E:register_t("mod_bullet_tower_ballista_skill_bomb_slow", "mod_slow")
b = balance.towers.ballista.skill_bomb
tt.slow.factor = 0.5
tt.modifier.duration = 0.5
tt = E:register_t("mod_bullet_hero_mecha_tar_bomb_slow", "mod_slow")
b = balance.heroes.hero_mecha.tar_bomb
tt.slow.factor = b.slow_factor
tt.modifier.duration = 0.5
tt = E:register_t("mod_hero_mecha_power_slam_stun", "mod_stun")
b = balance.heroes.hero_mecha.power_slam
tt.modifier.vis_flags = bor(F_MOD, F_STUN)
tt.modifier.vis_bans = bor(F_BOSS)

tt = E:register_t("mod_hero_spider_area_attack_stun", "mod_stun")
b = balance.heroes.hero_spider.area_attack
tt.modifier.vis_flags = bor(F_MOD, F_STUN)
tt.modifier.vis_bans = bor(F_BOSS, F_FLYING)

tt = E:register_t("mod_hero_witch_path_aoe", "mod_slow")
b = balance.heroes.hero_witch.skill_path_aoe
tt.slow.factor = b.slow_factor
tt.modifier.duration = 0.5
tt = E:register_t("mod_hero_witch_decoy_stun", "mod_stun")
b = balance.heroes.hero_witch.disengage.decoy.explotion
tt.modifier.vis_flags = bor(F_MOD, F_STUN)

tt = E:register_t("mod_stage_10_obelisk_stun", "mod_stun")
tt.render.sprites[1].prefix = "stage10_obelisk_stunfx"
tt.render.sprites[1].size_names = {
	"normal",
	"big",
	"big"
}
tt.prefix_flying = "stage10_obelisk_stunfx_volador"
tt.modifier.animation_phases = true
tt.modifier.use_mod_offset = false
tt.main_script.update = scripts.mod_stage_10_obelisk_stun.update
tt = E:register_t("mod_stage_10_obelisk_heal", "modifier")
b = balance.specials.stage10_obelisk.heal

E:add_comps(tt, "hps", "render")

tt.modifier.duration = b.heal_duration
tt.modifier.use_mod_offset = false
tt.hps.heal_min = b.heal_min
tt.hps.heal_max = b.heal_max
tt.hps.heal_every = b.heal_every
tt.main_script.insert = scripts.mod_track_target.insert
tt.main_script.update = scripts.mod_stage_10_obelisk_heal.update
tt.render.sprites[1].prefix = "HealFx1Def"
tt.render.sprites[1].name = "Idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].size_prefix = {
	"HealFx1Def",
	"HealFx1BigDef",
	"HealFx1BigDef"
}
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "HealFx2Def"
tt.render.sprites[2].name = "Idle"
tt.render.sprites[2].exo = true
tt.render.sprites[2].z = Z_DECALS
tt.render.sprites[2].size_prefix = {
	"HealFx2Def",
	"HealFx2BigDef",
	"HealFx2BigDef"
}
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].prefix = "HealFx3Def"
tt.render.sprites[3].name = "Idle"
tt.render.sprites[3].exo = true
tt.render.sprites[3].z = Z_OBJECTS
tt = E:register_t("mod_stage_10_obelisk_teleport", "mod_teleport")
b = balance.specials.stage10_obelisk.teleport
tt.modifier.vis_flags = bor(F_MOD, F_TELEPORT)
tt.modifier.vis_bans = bor(F_BOSS)
tt.nodes_offset = b.nodes_advance
tt.nodeslimit = b.nodes_limit
tt.delay_start = fts(2)
tt.hold_time = 0.34
tt.delay_end = fts(4)
tt.fx_start = "fx_stage_10_obelisk_teleport"
tt.fx_end = "fx_stage_10_obelisk_teleport"
tt.max_times_applied = 1e+99
tt = E:register_t("mod_enemy_stage_11_cult_leader_illusion_chain", "modifier")

E:add_comps(tt, "render", "tween")

tt.main_script.update = scripts.mod_enemy_stage_11_cult_leader_illusion_chain.update
tt.modifier.duration = 1e+99
tt.modifier.resets_same = true
tt.render.sprites[1].prefix = "mydrias_stuntower_back"
tt.render.sprites[1].animated = true
tt.render.sprites[1].draw_order = 10
tt.render.sprites[1].z = Z_TOWER_BASES + 1
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "mydrias_stuntower_front"
tt.render.sprites[2].draw_order = 20
tt.render.sprites[2].z = Z_OBJECTS
tt.render.sprites[2].sort_y_offset = -10
tt.tween.remove = false
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(20),
		255
	}
}
tt.tween.disabled = true
tt = E:register_t("mod_enemy_stage_11_cult_leader_illusion_shield", "modifier")

E:add_comps(tt, "render")

tt.modifier.duration = 1
tt.modifier.use_mod_offset = false
tt.main_script.insert = scripts.mod_enemy_stage_11_cult_leader_illusion_shield.insert
tt.main_script.remove = scripts.mod_enemy_stage_11_cult_leader_illusion_shield.remove
tt.main_script.update = scripts.mod_enemy_stage_11_cult_leader_illusion_shield.update
tt.render.sprites[1].prefix = "mydrias_areaskill_status"
tt = E:register_t("mod_enemy_stage_11_cult_leader_illusion_shield_denas", "mod_enemy_stage_11_cult_leader_illusion_shield")
tt.render.sprites[1].prefix = "mydrias_areaskill_status_Denas"
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "mydrias_areaskill_status_Denas_decal"
tt.render.sprites[2].z = Z_DECALS
tt = E:register_t("mod_upgrade_alliance_display_of_true_might_dark_army", "mod_slow")

E:add_comps(tt, "render")

b = balance.upgrades.alliance_display_of_true_might_dark
tt.slow.factor = b.slowdown_factor
tt.modifier.duration = b.slowdown_duration
tt.modifier.vis_flags = bor(F_MOD)
tt.main_script.insert = scripts.mod_upgrade_alliance_display_of_true_might_dark_army.insert
tt.render.sprites[1].prefix = "display_of_true_might"
tt.render.sprites[1].size_names = {
	"slow",
	"slow_big",
	"slow_big"
}
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].z = Z_EFFECTS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].size_names = {
	"display_of_true_might_slow_deco",
	"display_of_true_might_slow_big_deco",
	"display_of_true_might_slow_big_deco"
}
tt.render.sprites[2].anchor = v(0.5, 0.5)
tt.render.sprites[2].animated = false
tt.render.sprites[2].z = Z_DECALS
tt = E:register_t("mod_upgrade_alliance_display_of_true_might_linirea", "modifier")

E:add_comps(tt, "render", "tween")

b = balance.upgrades.alliance_display_of_true_might_linirea
tt.modifier.duration = fts(44)
tt.main_script.insert = scripts.mod_track_target.insert
tt.main_script.update = scripts.mod_upgrade_alliance_display_of_true_might_linirea.update
tt.main_script.remove = scripts.mod_track_target.remove
tt.render.sprites[1].prefix = "display_of_true_might_heal"
tt.render.sprites[1].size_names = {
	"front_idle",
	"big_front_idle",
	"big_front_idle"
}
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].z = Z_EFFECTS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "display_of_true_might_heal"
tt.render.sprites[2].size_names = {
	"back_idle",
	"big_back",
	"big_back"
}
tt.render.sprites[2].anchor = v(0.5, 0.5)
tt.render.sprites[2].z = Z_DECALS
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		tt.modifier.duration - fts(10),
		255
	},
	{
		tt.modifier.duration,
		0
	}
}
tt = E:register_t("mod_burning_tower_flamespitter", "modifier")
b = balance.towers.flamespitter.burning

E:add_comps(tt, "dps", "render")

tt.modifier.duration = b.duration
tt.dps.damage_min = nil
tt.dps.damage_max = nil
tt.dps.damage_type = DAMAGE_TRUE
tt.dps.damage_every = b.cycle_time
tt.render.sprites[1].size_names = {
	"small",
	"medium",
	"large"
}
tt.render.sprites[1].prefix = "fire"
tt.render.sprites[1].name = "small"
tt.render.sprites[1].draw_order = 2
tt.render.sprites[1].loop = true
tt.main_script.insert = scripts.mod_dps.insert
tt.main_script.update = scripts.mod_dps.update
tt.damage = b.damage
tt = E:register_t("mod_burning_tower_flamespitter_skill_bomb", "mod_burning_tower_flamespitter")
b = balance.towers.flamespitter.skill_bomb.burning
tt.modifier.duration = b.duration
tt.dps.damage_min = b.damage
tt.dps.damage_max = b.damage
tt.dps.damage_every = b.cycle_time
tt.damage = b.damage
tt = E:register_t("mod_tower_stage_13_sunray_special", "modifier")

local b = balance.specials.towers.stage_13_sunray.special_attack

E:add_comps(tt, "dps")

tt.modifier.duration = b.duration
tt.dps.damage_min = b.damage_min
tt.dps.damage_max = b.damage_max
tt.dps.damage_type = DAMAGE_DISINTEGRATE
tt.dps.damage_every = 1e+99
tt.main_script.insert = scripts.mod_dps.insert
tt.main_script.update = scripts.mod_dps.update
tt.main_script.remove = scripts.mod_tower_stage_13_sunray_special.remove
tt = E:register_t("mod_stage_11_veznan_skill_cage", "mod_stun")
b = balance.specials.stage11_veznan.skill_cage
tt.render.sprites[1].prefix = "stage11_veznan_export_cage"
tt.render.sprites[1].size_names = nil
tt.render.sprites[1].anchor = v(0.5, 0.41)
tt.render.sprites[1].scale = v(1.1, 1)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "stage11_veznan_export_cage_piso"
tt.render.sprites[2].anchor = v(0.5, 0.5)
tt.render.sprites[2].z = Z_DECALS
tt.main_script.update = scripts.mod_stage_11_veznan_skill_cage.update
tt.modifier.animation_phases = true
tt.modifier.use_mod_offset = false
tt.modifier.duration = b.duration
tt.sound_cast = "Stage11VeznanMagicShacklesCast"
tt.sound_end = "Stage11VeznanMagicShacklesRelease"
tt = E:register_t("mod_tower_flamesplitter_skill_columns", "mod_stun")
b = balance.towers.flamespitter.skill_columns
tt.duration_config = b.stun
tt.modifier.duration = 1
tt.modifier.vis_flags = bor(F_MOD, F_STUN)
tt.modifier.vis_bans = bor(F_BOSS)
tt = E:register_t("mod_upgrade_alliance_seal_of_punishment", "modifier")

E:add_comps(tt, "render")

tt.modifier.duration = 2
tt.modifier.use_mod_offset = true
tt.render.sprites[1].animated = true
tt.render.sprites[1].prefix = "seal_of_punishment_damage_fx"
tt.render.sprites[1].size_names = {
	"idle",
	"big_idle",
	"big_idle"
}
tt.render.sprites[1].offset_y = 10
tt.main_script.insert = scripts.mod_upgrade_alliance_seal_of_punishment.insert
tt.main_script.update = scripts.mod_upgrade_alliance_seal_of_punishment.update
tt.sound_burn = "UpgradeSealOfPunishmentHit"
tt = E:register_t("mod_upgrade_alliance_flux_altering_coils_teleport", "mod_teleport")
b = balance.upgrades.alliance_flux_altering_coils
tt.modifier.vis_flags = bor(F_MOD)
tt.modifier.vis_bans = bor(F_BOSS)
tt.modifier.duration = 1
tt.nodes_offset = -b.nodes_teleport
tt.max_times_applied = 5
tt.dest_valid_node = true
tt.delay_start = fts(3)
tt.hold_time = 0.34
tt.delay_end = fts(3)
tt.fx_start = "fx_upgrade_alliance_flux_altering_coils_teleport"
tt.fx_end = "fx_upgrade_alliance_flux_altering_coils_teleport"
tt = E:register_t("mod_upgrade_alliance_flux_altering_coils_mark", "modifier")

E:add_comps(tt, "mark_flags")

tt.mark_flags.vis_bans = F_TELEPORT
tt.modifier.duration = fts(50)
tt.main_script.queue = scripts.mod_mark_flags.queue
tt.main_script.dequeue = scripts.mod_mark_flags.dequeue
tt.main_script.update = scripts.mod_mark_flags.update
tt = E:register_t("mod_stage_11_portal", "modifier")

E:add_comps(tt, "render")

tt.modifier.duration = 1e+99
tt.modifier.use_mod_offset = false
tt.main_script.insert = scripts.mod_stage_11_portal.insert
tt.fx = "fx_stage_11_portal_spawn"
tt = E:register_t("mod_bullet_hero_venom_ranged_tentacle_bleed", "mod_blood")
b = balance.heroes.hero_venom.ranged_tentacle
tt.dps.damage_min = nil
tt.dps.damage_max = nil
tt.dps.damage_inc = 0
tt.dps.damage_every = nil
tt.dps.fx_every = tt.dps.damage_every
tt.dps.fx_every = fts(20)
tt.modifier.duration = nil
tt = E:register_t("mod_bullet_hero_venom_ranged_tentacle_stun", "mod_stun")
tt.modifier.duration = fts(7)
tt.modifier.vis_flags = bor(F_MOD, F_STUN)
tt = E:register_t("mod_item_winter_age_freeze", "mod_stun")
b = balance.items.winter_age

E:add_comps(tt, "render")

tt.modifier.duration = b.stun_duration
tt.render.sprites[1].prefix = "winter_age_stun_fx"
tt.render.sprites[1].draw_order = DO_MOD_FX
tt.modifier.animation_phases = true
tt.modifier.use_mod_offset = false
tt.modifier.vis_flags = bor(F_MOD, F_STUN)
tt.main_script.insert = scripts.mod_item_winter_age_freeze.insert
tt.main_script.update = scripts.mod_item_winter_age_freeze.update
tt.main_script.remove = scripts.mod_freeze.remove
tt.freeze_decal_name = "decal_freeze_enemy"
tt = E:register_t("mod_hero_venom_eat_enemy_regen", "modifier")

E:add_comps(tt, "render", "tween")

tt.modifier.duration = fts(43)
tt.main_script.insert = scripts.mod_track_target.insert
tt.main_script.update = scripts.mod_hero_venom_eat_enemy_regen.update
tt.main_script.remove = scripts.mod_track_target.remove
tt.render.sprites[1].prefix = "hero_venom_heal_fx_back"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].z = Z_EFFECTS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "hero_venom_heal_fx_front"
tt.render.sprites[2].name = "idle"
tt.render.sprites[2].anchor = v(0.5, 0.5)
tt.render.sprites[2].z = Z_DECALS
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		tt.modifier.duration - fts(10),
		255
	},
	{
		tt.modifier.duration,
		0
	}
}
tt = E:register_t("mod_hero_venom_ultimate_slow", "mod_slow")
b = balance.heroes.hero_mecha.tar_bomb
tt.slow.factor = b.slow_factor
tt.modifier.duration = 0.5
tt = E:register_t("mod_glare", "modifier")

E:add_comps(tt, "hps", "render", "tween")

b = balance.enemies.void_beyond.glare
tt.modifier.duration = b.extra_duration
tt.hps.heal_min = nil
tt.hps.heal_max = nil
tt.hps.heal_every = b.regen_every
tt.main_script.insert = scripts.mod_glare.insert
tt.main_script.update = scripts.mod_glare.update
tt.main_script.remove = scripts.mod_glare.remove
tt.render.sprites[1].name = "turtle_shaman_HealFX_a_Idle_1"
tt.render.sprites[1].loop = true
tt.render.sprites[1].alpha = 0
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].name = "turtle_shaman_HealFX_b_Idle_1"
tt.render.sprites[2].z = Z_DECALS
tt.render.sprites[2].exclude_mod_offset = true
tt.render.sprites[2].alpha = 0
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		fts(10),
		0
	}
}
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].keys = {
	{
		0,
		255
	},
	{
		fts(10),
		0
	}
}
tt.tween.props[2].sprite_id = 2
tt.tween.disabled = true
tt.tween.reverse = true
tt.tween.remove = false
tt = E:register_t("mod_enemy_noxious_horror_poison", "mod_poison")
b = balance.enemies.void_beyond.noxious_horror.poison
tt.dps.damage_every = b.every
tt.dps.damage_min = b.damage_min
tt.dps.damage_max = b.damage_max
tt.dps.kill = true
tt.modifier.duration = b.duration
tt.render.sprites[1].prefix = "noxious_horror_ranged_attack_modifier"
tt.render.sprites[1].size_names = {
	"idle",
	"idle",
	"idle"
}
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].draw_order = DO_MOD_FX
tt.main_script.insert = scripts.mod_enemy_noxious_horror_poison.insert
tt.start_fx = "fx_bullet_enemy_noxious_horror_hit"
tt = E:register_t("mod_bullet_tower_stage_13_sunray", "modifier")

AC(tt, "render", "dps")

b = balance.specials.towers.stage_13_sunray
tt.dps.damage_min = b.basic_attack.damage_min
tt.dps.damage_max = b.basic_attack.damage_max
tt.dps.damage_type = bor(DAMAGE_TRUE, DAMAGE_ONE_SHIELD_HIT)
tt.dps.damage_every = b.basic_attack.damage_every
tt.dps.pop = {
	"pop_zap_arcane"
}
tt.dps.pop_conds = DR_KILL
tt.main_script.update = scripts.mod_sunray.update
tt.modifier.duration = b.basic_attack.duration
tt.modifier.allows_duplicates = true
tt.modifier.use_mod_offset = true
tt.render.sprites[1].prefix = "ray_sunraytower_hitDef"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].loop = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_BULLETS + 2
tt.render.sprites[1].base_offset = v(0, -10)
tt = E:register_t("mod_bullet_tower_barrel_lvl1", "modifier")
b = balance.towers.barrel.basic_attack.debuff

E:add_comps(tt, "render")

tt.modifier.duration = b.duration[1]
tt.modifier.vis_flags = F_MOD
tt.modifier.type = MOD_TYPE_POISON
tt.modifier.level = 1
tt.modifier.resets_same = true
tt.modifier.replaces_lower = true
tt.damage_reduction = b.damage_reduction[1]
tt.speed_factor = b.speed_factor[1]
tt.main_script.insert = scripts.mod_bullet_tower_barrel.insert
tt.main_script.remove = scripts.mod_bullet_tower_barrel.remove
tt.main_script.update = scripts.mod_track_target.update
tt.render.sprites[1].prefix = "barrel_tower_projectile_mod"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].draw_order = DO_MOD_FX
tt.render.sprites[1].size_names = {
	"barrel_tower_projectile_mod",
	"barrel_tower_projectile_mod",
	"barrel_tower_projectile_mod_big"
}
tt = E:register_t("mod_bullet_tower_barrel_lvl2", "mod_bullet_tower_barrel_lvl1")
tt.modifier.level = 2
tt.modifier.duration = b.duration[2]
tt.damage_reduction = b.damage_reduction[2]
tt.speed_factor = b.speed_factor[2]
tt = E:register_t("mod_bullet_tower_barrel_lvl3", "mod_bullet_tower_barrel_lvl1")
tt.modifier.level = 3
tt.modifier.duration = b.duration[3]
tt.damage_reduction = b.damage_reduction[3]
tt.speed_factor = b.speed_factor[3]
tt = E:register_t("mod_bullet_tower_barrel_lvl4", "mod_bullet_tower_barrel_lvl1")
tt.modifier.level = 4
tt.modifier.duration = b.duration[4]
tt.damage_reduction = b.damage_reduction[4]
tt.speed_factor = b.speed_factor[4]
tt = E:register_t("mod_tower_barrel_skill_barrel_poison", "mod_poison")
b = balance.towers.barrel.skill_barrel.poison
tt.dps.damage_every = b.every
tt.dps.damage_min = b.damage_min
tt.dps.damage_max = b.damage_max
tt.dps.kill = true
tt.modifier.duration = b.duration
tt.render.sprites[1].draw_order = DO_MOD_FX
tt = E:register_t("mod_tower_barrel_skill_barrel_slow", "mod_slow")
b = balance.towers.barrel.skill_barrel.slow
tt.slow.factor = b.factor
tt.modifier.duration = b.duration
tt = E:register_t("mod_tower_sand_skill_big_blade_slow", "mod_slow")
b = balance.towers.sand.skill_big_blade
tt.slow.factor = b.slow_factor
tt.modifier.duration = b.slow_duration
tt = E:register_t("mod_tower_ghost_soul_slow", "mod_slow")
b = balance.towers.ghost.soul_attack
tt.slow.factor = b.slow_factor[1]
tt.modifier.duration = b.slow_duration[1]
tt = E:register_t("mod_tower_ghost_soul_damage_factor", "modifier")
b = balance.towers.ghost.soul_attack

E:add_comps(tt, "render")

tt.main_script.insert = scripts.mod_damage_factors.insert
tt.main_script.remove = scripts.mod_damage_factors.remove
tt.main_script.update = scripts.mod_track_target.update
tt.inflicted_damage_factor = b.damage_factor
tt.modifier.duration = b.damage_factor_duration[1]
tt.modifier.use_mod_offset = false
tt.render.sprites[1].size_names = {
	"small",
	"medium",
	"large"
}
tt.render.sprites[1].prefix = "ghost_tower_soul_skill_enemy_fx"
tt.render.sprites[1].name = "small"
tt = E:register_t("mod_tower_ghost_increase_damage_factor", "modifier")
b = balance.towers.ghost.extra_damage

E:add_comps(tt, "render")

tt.main_script.insert = scripts.mod_damage_factors.insert
tt.main_script.remove = scripts.mod_damage_factors.remove
tt.main_script.update = scripts.mod_track_target.update
tt.inflicted_damage_factor = nil
tt.modifier.duration = b.duration
tt.modifier.use_mod_offset = false
tt.render.sprites[1].prefix = "ghost_tower_buff_skill_back"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].z = Z_OBJECTS - 1
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "ghost_tower_buff_skill_front"
tt.render.sprites[2].name = "loop"
tt.render.sprites[1].draw_order = 1
tt.sound_events.insert = "TowerGhostExtraDamageCast"
tt = E:register_t("mod_tower_ray_damage", "modifier")

AC(tt, "render", "dps", "tween")

b = balance.towers.ray.basic_attack
tt.dps.damage_min = nil
tt.dps.damage_max = nil
tt.dps.damage_type = bor(DAMAGE_MAGICAL, DAMAGE_ONE_SHIELD_HIT)
tt.dps.damage_every = b.damage_every
tt.dps.pop = {
	"pop_zap_arcane"
}
tt.dps.pop_conds = DR_KILL
tt.main_script.update = scripts.mod_tower_ray_damage.update
tt.modifier.duration = b.duration
tt.modifier.allows_duplicates = true
tt.modifier.use_mod_offset = true
tt.render.sprites[1].name = "channeler_tower_ray_end_loop"
tt.render.sprites[1].loop = true
tt.render.sprites[1].z = Z_BULLETS + 1
tt.render.sprites[1].scale = vv(0.4)
tt.damage_from_bullet = true
tt.damage_tiers = b.damage_per_second
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		fts(2),
		0
	}
}
tt.tween.remove = true
tt.tween.disabled = true

tt = E:register_t("mod_tower_ray_slow", "mod_slow")
b = balance.towers.ray.basic_attack
tt.slowConfig = b.slow
tt.slow.factor = b.slow[1]
tt.modifier.duration = b.duration
tt.main_script.insert = scripts.mod_tower_ray_slow.insert
tt.main_script.remove = scripts.mod_tower_ray_slow.remove

tt = E:register_t("mod_arrow_soldier_elf_stage_08", "mod_stun")
b = balance.specials.stage08_elf_rescue.elf
tt.modifier.duration = fts(b.stun_duration)
tt.modifier.vis_flags = bor(F_MOD, F_STUN)
tt = E:register_t("mod_enemy_blinker_stun", "mod_stun")

local b = balance.enemies.void_beyond.blinker

tt.modifier.duration = b.ranged_attack.stun_duration
tt.modifier.vis_flags = bor(F_MOD, F_STUN)
tt = E:register_t("mod_enemy_blinker_glare", "modifier")

AC(tt, "dps")

local b = balance.enemies.void_beyond.blinker.glare

tt.modifier.duration = b.dot_duration
tt.modifier.vis_flags = bor(F_MOD, F_STUN)
tt.dps.damage_min = b.dot_damage_min
tt.dps.damage_max = b.dot_damage_max
tt.dps.damage_type = DAMAGE_TRUE
tt.dps.damage_every = b.dot_every
tt.main_script.insert = scripts.mod_dps.insert
tt.main_script.update = scripts.mod_dps.update
tt = E:register_t("mod_enemy_evolving_scourge_eat", "modifier")
tt.main_script.queue = scripts.mod_enemy_evolving_scourge_eat.queue
tt.main_script.update = scripts.mod_enemy_evolving_scourge_eat.update
tt.explode_fx = "fx_enemy_evolving_scourge_eat"
tt = E:register_t("mod_hero_robot_skill_jump", "mod_stun")
tt.modifier.duration = nil
tt.modifier.vis_flags = bor(F_MOD, F_STUN)
tt = E:register_t("mod_hero_robot_skill_explode", "modifier")
b = balance.heroes.hero_robot.explode

E:add_comps(tt, "dps", "render")

tt.modifier.duration = b.burning_duration
tt.dps.damage_min = nil
tt.dps.damage_max = nil
tt.dps.damage_type = b.burning_damage_type
tt.dps.damage_every = b.damage_every
tt.render.sprites[1].size_names = {
	"small",
	"medium",
	"large"
}
tt.render.sprites[1].prefix = "fire"
tt.render.sprites[1].name = "small"
tt.render.sprites[1].draw_order = 2
tt.render.sprites[1].loop = true
tt.main_script.insert = scripts.mod_dps.insert
tt.main_script.update = scripts.mod_dps.update
tt = E:register_t("mod_hero_robot_skill_fire_slow", "mod_slow")

E:add_comps(tt, "render", "tween")

b = balance.heroes.hero_robot.fire
tt.slow.factor = b.slow_factor
tt.modifier.duration = nil
tt.render.sprites[1].prefix = "Blaze_skill2humostatus"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].draw_order = DO_MOD_FX
tt.render.sprites[1].loop = true
tt.modifier.use_mod_offset = false
tt.main_script.update = scripts.mod_hero_robot_skill_fire_slow.update
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	}
}
tt.tween.remove = false
tt = E:register_t("mod_hero_robot_skill_uppercut", "modifier")
b = balance.heroes.hero_robot.uppercut

E:add_comps(tt, "dps", "render")

tt.modifier.duration = fts(10)
tt.main_script.insert = scripts.mod_hero_robot_skill_uppercut.insert
tt.main_script.update = scripts.mod_hero_robot_skill_uppercut.update
tt.clone_decal = "decal_hero_robot_skill_uppercut_clone"
tt.fly_speed = v(7, 8)
tt.rotation_speed = 0.17
tt = E:register_t("mod_hero_robot_skill_ultimate_burning", "modifier")
b = balance.heroes.hero_robot.ultimate

E:add_comps(tt, "dps", "render")

tt.modifier.duration = b.burning_duration
tt.dps.damage_min = nil
tt.dps.damage_max = nil
tt.dps.damage_type = b.burning_damage_type
tt.dps.damage_every = b.damage_every
tt.render.sprites[1].size_names = {
	"small",
	"medium",
	"large"
}
tt.render.sprites[1].prefix = "fire"
tt.render.sprites[1].name = "small"
tt.render.sprites[1].draw_order = 2
tt.render.sprites[1].loop = true
tt.main_script.insert = scripts.mod_dps.insert
tt.main_script.update = scripts.mod_dps.update
tt = E:register_t("mod_hero_hunter_skill_shoot_around_hit_fx", "modifier")

E:add_comps(tt, "render")

tt.render.sprites[1].name = "shothit_run"
tt.main_script.insert = scripts.mod_track_target.insert
tt.main_script.remove = scripts.mod_track_target.remove
tt.main_script.update = scripts.mod_track_target.update
tt.modifier.duration = fts(10)
tt = E:register_t("mod_hero_hunter_ricochet_attack", "modifier")
b = balance.heroes.hero_hunter.ricochet

E:add_comps(tt, "render", "tween")

tt.render.sprites[1].name = "mistystep_clone1_run"
tt.render.sprites[1].anchor = v(0.5, 0.28)
tt.main_script.insert = scripts.mod_track_target.insert
tt.main_script.remove = scripts.mod_track_target.remove
tt.main_script.update = scripts.mod_hero_hunter_ricochet_attack.update
tt.modifier.duration = fts(8)
tt.modifier.use_mod_offset = true
tt.animations = {
	"mistystep_clone1_run",
	"mistystep_clone2_run",
	"mistystep_clone3_run"
}
tt.enemy_distance = 30
tt.hit_delay = fts(3)
tt.damage_type = b.damage_type
tt.damage_min = nil
tt.damage_max = nil
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		tt.modifier.duration - fts(4),
		255
	},
	{
		tt.modifier.duration,
		0
	}
}
tt = E:register_t("mod_hero_hunter_ricochet_stun", "mod_stun")
tt.modifier.duration = fts(9)
tt = E:register_t("mod_hero_hunter_beast_mark", "modifier")

E:add_comps(tt, "mark_flags")

tt.mark_flags.vis_bans = F_CUSTOM
tt.main_script.queue = scripts.mod_mark_flags.queue
tt.main_script.dequeue = scripts.mod_mark_flags.dequeue
tt.main_script.update = scripts.mod_mark_flags.update

tt = E:register_t("mod_hero_hunter_ultimate_slow", "mod_slow")
b = balance.heroes.hero_hunter.ultimate
tt.slow.factor = b.slow_factor
tt.modifier.duration = b.slow_duration
tt = E:register_t("mod_hero_dragon_gem_skill_stun", "mod_stun")

E:add_comps(tt, "render")

tt.modifier.duration = nil
tt.render.sprites[1].prefix = "hero_evil_dragon_breath_crystal"
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].size_names = {
	"small",
	"medium",
	"big"
}
tt.render.sprites[1].draw_order = DO_MOD_FX
tt.modifier.animation_phases = true
tt = E:register_t("mod_hero_dragon_gem_crystal_instakill", "modifier")
b = balance.heroes.hero_dragon_gem.crystal_instakill

E:add_comps(tt, "render")

tt.modifier.duration = fts(30)
tt.modifier.animation_phases = true
tt.main_script.insert = scripts.mod_stun.insert
tt.main_script.update = scripts.mod_hero_dragon_gem_crystal_instakill.update
tt.main_script.remove = scripts.mod_stun.remove
tt.explode_fx = "decal_hero_dragon_gem_floor_circle"
tt.explode_sound = "HeroDragonGemRedDeathExplosion"
tt.render.sprites[1].prefix = "hero_evil_dragon_red_death_crystal"
tt.render.sprites[1].name = "start"
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].draw_order = DO_MOD_FX
tt.explode_time = b.explode_time
tt.damage_type = bor(DAMAGE_DISINTEGRATE, DAMAGE_INSTAKILL, DAMAGE_NO_SPAWNS)
tt.damage_aoe_min = nil
tt.damage_aoe_max = nil
tt.damage_type_aoe = DAMAGE_TRUE
tt.damage_range = b.damage_range
tt.damage_aoe_bans = bor(F_CLIFF)
tt = E:register_t("mod_hero_dragon_gem_crystal_totem_slow", "mod_slow")
b = balance.heroes.hero_dragon_gem.crystal_totem
tt.slow.factor = b.slow_factor
tt.modifier.duration = b.slow_duration
tt = E:register_t("mod_hero_dragon_gem_passive_charge", "modifier")
b = balance.heroes.hero_dragon_gem.passive_charge

E:add_comps(tt, "render")

tt.main_script.insert = scripts.mod_damage_factors.insert
tt.main_script.remove = scripts.mod_damage_factors.remove
tt.main_script.update = scripts.mod_hero_dragon_gem_passive_charge.update
tt.inflicted_damage_factor = b.damage_factor
tt.modifier.duration = 1e+99
tt.modifier.use_mod_offset = true
tt.render.sprites[1].prefix = "hero_evil_dragon_passive"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].z = Z_FLYING_HEROES + 1
tt = E:register_t("mod_stage_15_cult_leader_tower_stun", "mod_stun")

E:add_comps(tt, "render")

tt.modifier.duration = nil
tt.render.sprites[1].prefix = "mutamydrias_fx_Mutamydrias_Tentacle"
tt.render.sprites[1].size_names = {
	"small",
	"big",
	"big"
}
tt.render.sprites[1].draw_order = DO_MOD_FX
tt.modifier.animation_phases = true
tt.modifier.use_mod_offset = false
tt.modifier.vis_flags = F_MOD
tt.modifier.vis_bans = bor(F_ENEMY)
tt.main_script.remove = scripts.mod_stage_15_cult_leader_tower_stun.remove
tt = E:register_t("mod_hero_bird_cluster_bomb_burn", "modifier")
b = balance.heroes.hero_bird.cluster_bomb.burning

E:add_comps(tt, "dps", "render")

tt.modifier.duration = b.duration
tt.dps.damage_min = nil
tt.dps.damage_max = nil
tt.dps.damage_type = b.damage_type
tt.dps.damage_every = b.cycle_time
tt.render.sprites[1].size_names = {
	"small",
	"medium",
	"large"
}
tt.render.sprites[1].prefix = "fire"
tt.render.sprites[1].name = "small"
tt.render.sprites[1].draw_order = 2
tt.render.sprites[1].loop = true
tt.main_script.insert = scripts.mod_dps.insert
tt.main_script.update = scripts.mod_dps.update
tt.damage = b.damage

tt = E:register_t("mod_hero_bird_shout_stun", "mod_stun")
b = balance.heroes.hero_bird.shout_stun
tt.modifier.duration = nil
tt.modifier.vis_bans = bor(F_BOSS)

tt = E:register_t("mod_hero_bird_shout_slow", "mod_slow")

E:add_comps(tt, "render")

b = balance.heroes.hero_bird.shout_stun
tt.slow.factor = b.slow_factor
tt.modifier.duration = nil
tt.modifier.health_bar_offset = v(0, -5)
tt.modifier.vis_bans = bor(F_BOSS)
tt.render.sprites[1].prefix = "gryph_slow_mod"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].draw_order = 2
tt.render.sprites[1].loop = true
tt.render.sprites[1].anchor = v(0.5, 0.75)
tt.render.sprites[1].fps = 20

tt = E:register_t("mod_hero_spider_skill_instakill_melee", "modifier")

E:add_comps(tt, "dps", "render")

tt.modifier.duration = fts(2)
tt.main_script.insert = scripts.mod_hero_spider_skill_instakill_melee.insert
tt.main_script.update = scripts.mod_hero_spider_skill_instakill_melee.update
tt.render.sprites[1] = E:clone_c("sprite")
tt.render.sprites[1].prefix = "hero_spider_05_instakill"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].draw_order = DO_MOD_FX

tt = E:register_t("mod_stage_16_overseer_tower_disable", "modifier")

E:add_comps(tt, "render")

tt.main_script.insert = scripts.mod_stage_16_overseer_tower_disable.insert
tt.main_script.remove = scripts.mod_stage_16_overseer_tower_disable.remove
tt.main_script.update = scripts.mod_stage_16_overseer_tower_disable.update
tt.modifier.duration = 1e+99
tt.render.sprites[1].prefix = "overseer_fx_overseer_tentaclesback"
tt.render.sprites[1].animated = true
tt.render.sprites[1].offset.y = 13
tt.render.sprites[1].sort_y_offset = 35
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "overseer_fx_overseer_tentaclesfront"
tt.render.sprites[2].animated = true
tt.render.sprites[2].offset.y = 13
tt.render.sprites[2].draw_order = DO_TOWER_MODS
tt.fade_duration = 0.4
tt.offset_y_per_tower = {
	necromancer = 16,
	royal_archers = 20,
	elven_stargazers = 16,
	tricannon = 10,
	arborean_emissary = 20,
	flamespitter = 16,
	ballista = 20
}
tt = E:register_t("mod_soldier_reinforcement_item_summon_blackburn_spawn_stun", "mod_stun")
b = balance.items.summon_blackburn.spawn
tt.modifier.duration = b.stun_duration
tt.modifier.vis_flags = bor(F_MOD, F_STUN)
tt.modifier.vis_bans = bor(F_BOSS)

tt = E:register_t("mod_enemy_revenant_soulcaller_branches", "modifier")
b = balance.enemies.undying_hatred.revenant_soulcaller.tower_stun

E:add_comps(tt, "render")

tt.main_script.update = scripts.mod_enemy_revenant_soulcaller_branches.update
tt.modifier.duration = b.duration
tt.render.sprites[1].prefix = "revenant_soulcaller_stuntower"
tt.render.sprites[1].name = "in"
tt.render.sprites[1].animated = true
tt.render.sprites[1].draw_order = 20
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = -10
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "revenant_soulcaller_stuntower"
tt.render.sprites[2].animated = true
tt.render.sprites[2].draw_order = 20
tt.render.sprites[2].z = Z_OBJECTS
tt.render.sprites[2].sort_y_offset = 15
tt.render.sprites[2].flip_x = true
tt.render.sprites[2].offset = v(0, 20)
tt.sound_events.insert = "EnemyRevenantSoulcallerBlockTowerIn"
tt.sound_events.remove = "EnemyRevenantSoulcallerBlockTowerOut"
tt = E:register_t("mod_enemy_revenant_soulcaller_mark", "modifier")
b = balance.enemies.undying_hatred.revenant_soulcaller.tower_stun

E:add_comps(tt, "mark_flags")

tt.mark_flags.vis_bans = F_CUSTOM
tt.modifier.duration = b.duration
tt.main_script.queue = scripts.mod_mark_flags.queue
tt.main_script.dequeue = scripts.mod_mark_flags.dequeue
tt.main_script.update = scripts.mod_mark_flags.update
tt = E:register_t("mod_stage_18_eridan_stun", "mod_stun")
tt.modifier.duration = 1e+99
tt.modifier.vis_flags = bor(F_MOD, F_STUN)
tt.modifier.vis_bans = bor(F_BOSS)
tt.render.sprites[1].hidden = true
tt = E:register_t("mod_bullet_stage_19_navira_fire_ball_ray_stun", "modifier")
b = balance.enemies.undying_hatred.boss_navira

E:add_comps(tt, "render")

tt.main_script.update = scripts.mod_bullet_stage_19_navira_fire_ball_ray_stun.update
tt.modifier.duration = b.fire_balls.stun_duration
tt.render.sprites[1].prefix = "navira_towerstun"
tt.render.sprites[1].name = "in"
tt.render.sprites[1].animated = true
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = -10
tt.sound_events.insert = "Stage19NaviraFireballHit"
tt = E:register_t("mod_bullet_stage_19_navira_heal", "modifier")

E:add_comps(tt, "render")

tt.main_script.update = scripts.mod_track_target.update
tt.modifier.duration = 3
tt.modifier.use_mod_offset = false
tt.render.sprites[1].prefix = "navira_heal_fx"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].offset = v(0, 90)
tt = E:register_t("mod_dragon_bone_plague", "modifier")
b = balance.heroes.hero_dragon_bone.plague

E:add_comps(tt, "render", "dps")

tt.modifier.duration = b.duration
tt.modifier.vis_flags = F_MOD
tt.render.sprites[1].prefix = "hero_dragon_bone_plague_fx"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].draw_order = 2
tt.dps.damage_min = b.damage_min
tt.dps.damage_max = b.damage_max
tt.dps.damage_type = DAMAGE_TRUE
tt.dps.damage_every = b.every
tt.dps.kill = true
tt.spread_radius = b.explotion.damage_radius
tt.spread_damage_min = b.explotion.damage_min
tt.spread_damage_max = b.explotion.damage_min
tt.spread_fx = "fx_dragon_bone_plague_explosion"
tt.main_script.insert = scripts.mod_dps.insert
tt.main_script.update = scripts.mod_dps.update
tt.main_script.remove = scripts.mod_dragon_bone_plague.remove
tt = E:register_t("mod_dragon_bone_cloud_slow", "mod_slow")
b = balance.heroes.hero_dragon_bone.cloud
tt.slow.factor = b.slow_factor
tt.modifier.duration = 0.5

tt = E:register_t("mod_dragon_bone_rain_stun", "mod_stun")
b = balance.heroes.hero_dragon_bone.rain
tt.modifier.duration = b.stun_time[1]
tt.modifier.vis_flags = bor(F_MOD, F_STUN)
tt.modifier.vis_bans = bor(F_BOSS)

tt = E:register_t("mod_bullet_enemy_brute_welder_death_mark", "modifier")

E:add_comps(tt, "mark_flags")

tt.mark_flags.vis_bans = F_STUN
tt.modifier.duration = 5
tt.main_script.queue = scripts.mod_bullet_enemy_brute_welder_death_mark.queue
tt.main_script.dequeue = scripts.mod_bullet_enemy_brute_welder_death_mark.dequeue
tt.main_script.update = scripts.mod_mark_flags.update
tt = E:register_t("mod_bullet_enemy_brute_welder_death_stun", "modifier")

local b = balance.enemies.hammer_and_anvil.brute_welder

E:add_comps(tt, "render", "tween")

tt.main_script.update = scripts.mod_bullet_enemy_brute_welder_death_stun.update
tt.modifier.duration = b.death_missile.block_duration
tt.render.sprites[1].prefix = "brute_welder_tower_mod"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].animated = true
tt.render.sprites[1].draw_order = 20
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].offset = v(2, 10)
tt.render.sprites[1].sort_y_offset = -10
tt.sound_events.insert = "EnemyRevenantSoulcallerBlockTowerIn"
tt.sound_events.remove = "EnemyRevenantSoulcallerBlockTowerOut"
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	}
}
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].name = "scale"
tt.tween.props[2].keys = {
	{
		0,
		v(0.7, 0.7)
	},
	{
		fts(10),
		v(1, 1)
	}
}
tt.tween.remove = false
tt = E:register_t("mod_enemy_darksteel_fist_stun", "mod_stun")

local b = balance.enemies.hammer_and_anvil.darksteel_fist.stun_attack

tt.modifier.duration = b.stun_duration
tt.modifier.vis_flags = bor(F_MOD, F_STUN)
tt.modifier.vis_bans = bor(F_BOSS)
tt = E:register_t("mod_stage_25_torso_missile_mark", "modifier")

E:add_comps(tt, "mark_flags", "render", "tween")

tt.mark_flags.vis_bans = F_STUN
tt.modifier.duration = 7
tt.main_script.queue = scripts.mod_stage_25_torso_missile_mark.queue
tt.main_script.dequeue = scripts.mod_stage_25_torso_missile_mark.dequeue
tt.main_script.update = scripts.mod_mark_flags.update
tt.render.sprites[1].prefix = "DLC_stage_03_missile_decal_tower"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].offset = v(0, 10)
tt.render.sprites[1].z = Z_DECALS
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(15),
		255
	}
}
tt.tween.remove = false
tt = E:register_t("mod_stage_25_torso_missile_stun", "modifier")

local b = balance.specials.stage25_torso.missile

E:add_comps(tt, "render", "tween")

tt.main_script.update = scripts.mod_stage_25_torso_missile_stun.update
tt.main_script.remove = scripts.mod_stage_25_torso_missile_stun.remove
tt.modifier.duration = b.max_duration
tt.render.sprites[1].prefix = "DLC_stage_03_missile_tower_fx"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].animated = true
tt.render.sprites[1].draw_order = 20
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].offset = v(2, 10)
tt.render.sprites[1].sort_y_offset = -10
tt.sound_events.insert = "EnemyRevenantSoulcallerBlockTowerIn"
tt.sound_events.remove = "EnemyRevenantSoulcallerBlockTowerOut"
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	}
}
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].name = "scale"
tt.tween.props[2].keys = {
	{
		0,
		v(0.7, 0.7)
	},
	{
		fts(10),
		v(1, 1)
	}
}
tt.tween.remove = false
tt.repair_cost = b.repair_cost
tt.water_decal_t = "decal_mod_stage_25_torso_missile_stun_water"
tt.hand_decal_t = "decal_mod_stage_25_torso_missile_stun_hand"
tt = E:register_t("mod_stage_27_ray_stun", "modifier")
b = balance.specials.stage27_head

E:add_comps(tt, "render", "tween")

tt.main_script.update = scripts.mod_stage_27_ray_stun.update
tt.modifier.duration = b.ray_stun_duration
tt.render.sprites[1].prefix = "dclenanos_stage05_headplasmaDef"
tt.render.sprites[1].name = "in"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].draw_order = 20
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = -10
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "dclenanos_stage05_headplasmabgDef"
tt.render.sprites[2].animated = true
tt.render.sprites[2].exo = true
tt.render.sprites[2].draw_order = 20
tt.render.sprites[2].z = Z_OBJECTS
tt.render.sprites[2].sort_y_offset = 15
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(15),
		255
	}
}
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].name = "alpha"
tt.tween.props[2].sprite_id = 2
tt.tween.props[2].keys = {
	{
		0,
		0
	},
	{
		fts(15),
		255
	}
}
tt.tween.remove = false
tt.sound_events.insert = "EnemyRevenantSoulcallerBlockTowerIn"
tt.sound_events.remove = "EnemyRevenantSoulcallerBlockTowerOut"
tt = E:register_t("mod_bullet_stage_27_tower_stun", "modifier")

local b = balance.specials.stage27_head

E:add_comps(tt, "render")

tt.main_script.update = scripts.mod_bullet_stage_27_tower_stun.update
tt.main_script.remove = scripts.mod_bullet_stage_27_tower_stun.remove
tt.render.sprites[1].prefix = "boss_fx_scrap_tower_fx"
tt.render.sprites[1].name = "in"
tt.render.sprites[1].animated = true
tt.render.sprites[1].draw_order = 20
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].offset = v(-1, 10)
tt.render.sprites[1].sort_y_offset = -10
tt.sound_events.insert = "EnemyRevenantSoulcallerBlockTowerIn"
tt.sound_events.remove = "EnemyRevenantSoulcallerBlockTowerOut"
tt.repair_cost = b.tower_stun_repair_cost
tt.hand_decal_t = "decal_mod_stage_25_torso_missile_stun_hand"
tt = E:register_t("mod_hero_lava_temper_tantrum_stun", "mod_stun")

local b = balance.heroes.hero_lava.temper_tantrum

tt.modifier.duration = b.stun_duration
tt.modifier.vis_flags = bor(F_MOD, F_STUN)
tt.modifier.vis_bans = bor(F_BOSS)

tt = E:register_t("mod_decal_item_portable_coil_stun", "mod_stun")
b = balance.items.portable_coil
tt.modifier.duration = b.stun_duration
tt.modifier.vis_flags = bor(F_MOD, F_STUN)
tt.modifier.vis_bans = bor(F_BOSS)
tt = E:register_t("mod_item_scroll_of_spaceshift_mark", "modifier")

E:add_comps(tt, "mark_flags")

tt.mark_flags.vis_bans = F_TELEPORT
tt.modifier.duration = fts(50)
tt.main_script.queue = scripts.mod_mark_flags.queue
tt.main_script.dequeue = scripts.mod_mark_flags.dequeue
tt.main_script.update = scripts.mod_mark_flags.update
tt = E:register_t("mod_item_scroll_of_spaceshift_teleport", "mod_teleport")
b = balance.items.scroll_of_spaceshift
tt.modifier.vis_flags = bor(F_MOD)
tt.modifier.vis_bans = bor(F_BOSS)
tt.modifier.duration = 1
tt.nodes_offset = -b.nodes_teleport
tt.dest_valid_node = true
tt.max_times_applied = 1e+99
tt.delay_start = fts(3)
tt.hold_time = 0.34
tt.delay_end = fts(3)
tt.fx_start = "fx_item_scroll_of_spaceshift"
tt.fx_end = "fx_item_scroll_of_spaceshift"
tt = E:register_t("mod_item_second_breath_heal", "modifier")

E:add_comps(tt, "render", "tween")

tt.modifier.duration = fts(44)
tt.main_script.insert = scripts.mod_track_target.insert
tt.main_script.update = scripts.mod_item_second_breath_heal.update
tt.main_script.remove = scripts.mod_track_target.remove
tt.render.sprites[1].prefix = "item_second_breath_healing_fx"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].z = Z_EFFECTS
tt.render.sprites[1].loop = true
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		tt.modifier.duration - fts(10),
		255
	},
	{
		tt.modifier.duration,
		0
	}
}
tt = E:register_t("mod_soldier_reinforcement_stage_15_denas_spawn_stun", "mod_stun")
b = balance.specials.stage15_denas
tt.modifier.duration = b.spawn_stun_duration
tt.modifier.vis_flags = bor(F_MOD, F_STUN)
tt.modifier.vis_bans = bor(F_BOSS)

tt = E:register_t("mod_enemy_dust_cryptid", "modifier")

E:add_comps(tt, "render")

tt.modifier.duration = 0.25
tt.main_script.insert = scripts.mod_enemy_dust_cryptid.insert
tt.main_script.update = scripts.mod_track_target.update
tt.main_script.remove = scripts.mod_enemy_dust_cryptid.remove
tt.render.sprites[1].prefix = "dust_cryptid_modifier"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].loop = true
tt = E:register_t("mod_enemy_revenant_harvester_mark", "modifier")

E:add_comps(tt, "mark_flags")

tt.mark_flags.vis_bans = F_CUSTOM
tt.modifier.duration = b.duration
tt.main_script.queue = scripts.mod_mark_flags.queue
tt.main_script.dequeue = scripts.mod_mark_flags.dequeue
tt.main_script.update = scripts.mod_mark_flags.update
tt = E:register_t("mod_tower_dark_elf_skill_buff", "modifier")
tt.modifier.duration = fts(3)
tt.main_script.update = scripts.mod_track_target.update
tt.main_script.remove = scripts.mod_tower_dark_elf_skill_buff.remove
tt.skill_buff_bullet = "bullet_tower_dark_elf_skill_buff"
tt.tower_offset = v(0, 35)
tt = E:register_t("mod_hero_witch_skill_polymorph", "modifier")
b = balance.heroes.hero_witch.skill_polymorph
tt.modifier.duration = nil
tt.entity_hp = b.pumpkin.hp
tt.main_script.insert = scripts.mod_hero_witch_skill_polymorph.insert
tt.main_script.update = scripts.mod_hero_witch_skill_polymorph.update
tt.main_script.remove = scripts.mod_hero_witch_skill_polymorph.remove
tt.entity_t = "enemy_pumpkin_witch"
tt.entity_t_flying = "enemy_pumpkin_witch_flying"
tt.transform_fx = "fx_hero_witch_skill_polymorph"
tt.sound_transform_out = "HeroWitchVeggiefyOut"
tt = E:register_t("mod_hero_witch_ultimate_teleport", "mod_teleport")
b = balance.heroes.hero_witch.ultimate
tt.main_script.remove = scripts.mod_hero_witch_ultimate_teleport.remove
tt.modifier.vis_flags = bor(F_MOD)
tt.modifier.vis_bans = bor(F_BOSS)
tt.modifier.duration = 1
tt.nodes_offset = -b.nodes_teleport
tt.dest_valid_node = true
tt.max_times_applied = 1e+99
tt.delay_start = fts(3)
tt.hold_time = 0.34
tt.delay_end = fts(3)
tt.fx_start = "fx_hero_witch_ultimate"
tt.fx_end = "fx_hero_witch_ultimate"
tt.end_mod = "mod_hero_witch_ultimate_sleep"
tt.sound_events.insert = "HeroDragonBoneUltimateOut"
tt.sound_events.remove = "HeroDragonBoneUltimateIn"
tt = E:register_t("mod_hero_witch_ultimate_mark", "modifier")

E:add_comps(tt, "mark_flags")

tt.mark_flags.vis_bans = F_TELEPORT
tt.modifier.duration = fts(50)
tt.main_script.queue = scripts.mod_mark_flags.queue
tt.main_script.dequeue = scripts.mod_mark_flags.dequeue
tt.main_script.update = scripts.mod_mark_flags.update
tt = E:register_t("mod_hero_witch_ultimate_sleep", "modifier")

E:add_comps(tt, "render")

tt.main_script.insert = scripts.mod_stun.insert
tt.main_script.update = scripts.mod_stun.update
tt.main_script.remove = scripts.mod_stun.remove
tt.modifier.duration = nil
tt.render.sprites[1].prefix = "hero_witch_ultimate_sleep_fx"
tt.render.sprites[1].loop = true
tt.render.sprites[1].keep_flip_x = true
tt.render.sprites[1].draw_order = DO_MOD_FX
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "hero_witch_ultimate_sleep_particles"
tt.render.sprites[2].name = "loop"
tt.render.sprites[2].loop = true
tt.render.sprites[2].keep_flip_x = true
tt.render.sprites[2].draw_order = DO_MOD_FX
tt = E:register_t("mod_tower_dark_elf_big_target", "modifier")

E:add_comps(tt, "render")

tt.main_script.update = scripts.mod_tower_dark_elf_big_target.update
tt.modifier.use_mod_offset = true
tt.modifier.duration = fts(60) + fts(13) + fts(2)
tt.render.sprites[1].prefix = "twilight_longbows_tower_mira"
tt.render.sprites[1].draw_order = DO_MOD_FX

tt = E:register_t("mod_chicken_leg_polymorph", "modifier")
tt.modifier.duration = fts(2)
tt.main_script.insert = scripts.mod_chicken_leg_polymorph.insert
tt.entity_t = {
	{
		"enemy_crocs_basic_egg",
		"enemy_crocs_basic"
	},
	{
		"enemy_crocs_basic",
		"enemy_killertile"
	},
	{
		"enemy_killertile",
		"enemy_crocs_tank"
	}
}
tt = E:register_t("mod_chicken_leg_polymorph_mark", "modifier")

E:add_comps(tt, "mark_flags")

tt.modifier.duration = fts(80)
tt.main_script.queue = scripts.mod_mark_flags.queue
tt.main_script.dequeue = scripts.mod_mark_flags.dequeue
tt.main_script.update = scripts.mod_mark_flags.update
tt = E:register_t("mod_enemy_crocs_tank_charge_soldier", "modifier")
b = balance.enemies.crocs.crocs_tank

E:add_comps(tt, "dps")

tt.dps.damage_min = b.charge.damage_soldier_min
tt.dps.damage_max = b.charge.damage_soldier_max
tt.dps.damage_type = b.charge.damage_type
tt.dps.damage_every = fts(10)
tt.dps.fx = "fx_crocs_tank_spin_hit"
tt.modifier.duration = fts(7)
tt.modifier.use_mod_offset = true
tt.main_script.insert = scripts.mod_dps.insert
tt.main_script.update = scripts.mod_enemy_crocs_tank_charge_soldier.update
tt = E:register_t("mod_enemy_crocs_shaman_healing", "modifier")
b = balance.enemies.crocs.crocs_shaman

E:add_comps(tt, "render", "tween", "hps")

tt.modifier.duration = b.healing.duration
tt.hps.heal_min = b.healing.heal_min
tt.hps.heal_max = b.healing.heal_max
tt.hps.heal_every = b.healing.heal_every
tt.main_script.insert = scripts.mod_track_target.insert
tt.main_script.update = scripts.mod_hps.update
tt.render.sprites[1].name = "shaman_buff"
tt.render.sprites[1].anchor = v(0.5, 0.2)
tt.render.sprites[1].scale = vv(0.5)
tt.render.sprites[1].z = Z_EFFECTS
tt.render.sprites[1].loop = true
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	},
	{
		tt.modifier.duration - fts(10),
		255
	},
	{
		tt.modifier.duration,
		0
	}
}
tt = E:register_t("mod_enemy_crocs_shaman_tower_mark", "modifier")

E:add_comps(tt, "mark_flags")

tt.modifier.duration = fts(20)
tt.main_script.queue = scripts.mod_mark_flags.queue
tt.main_script.dequeue = scripts.mod_mark_flags.dequeue
tt.main_script.update = scripts.mod_mark_flags.update
tt = E:register_t("mod_crocs_shaman_tower_debuff", "modifier")
b = balance.enemies.crocs.crocs_shaman.debuff_towers

E:add_comps(tt, "render")

tt.main_script.insert = scripts.mod_crocs_shaman_tower_debuff.insert
tt.main_script.update = scripts.mod_crocs_shaman_tower_debuff.update
tt.main_script.remove = scripts.mod_crocs_shaman_tower_debuff.remove
tt.modifier.duration = b.stun_duration
tt.modifier.vis_flags = F_CUSTOM
tt.render.sprites[1].prefix = "Fx_Shaman_BlocktowerDef"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].offset.y = 14
tt.render.sprites[1].draw_order = 20
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = -10
tt.offset_y_per_tower = {
	hermit_toad = 4
}
tt = E:register_t("mod_tower_hermit_toad_engineer_basic_slow", "mod_slow")
b = balance.towers.hermit_toad.engineer_basic_attack
tt.balance_slow_factor = b.slow_factor
tt.balance_duration = b.slow_mod_duration
tt.slow.factor = nil
tt.modifier.duration = nil

function tt.main_script.insert(this, store, script)
	this.slow.factor = this.balance_slow_factor[this.modifier.level]
	this.modifier.duration = this.balance_duration[this.modifier.level]

	return scripts.mod_slow.insert(this, store, script)
end

tt = E:register_t("mod_tower_hermit_toad_jump", "mod_stun")
b = balance.towers.hermit_toad
tt.balance_duration = b.power_jump.stun_duration
tt.modifier.duration = nil
tt.modifier.vis_flags = bor(F_MOD, F_STUN)
tt.modifier.vis_bans = bor(F_BOSS)

function tt.main_script.insert(this, store, script)
	this.modifier.duration = this.balance_duration[this.modifier.level]

	return scripts.mod_stun.insert(this, store, script)
end

tt = E:register_t("mod_tower_hermit_toad_instakill_mark", "modifier")

E:add_comps(tt, "mark_flags")

tt.modifier.duration = fts(120)
tt.main_script.queue = scripts.mod_mark_flags.queue
tt.main_script.dequeue = scripts.mod_mark_flags.dequeue
tt.main_script.update = scripts.mod_mark_flags.update
tt = E:register_t("mod_boss_crocs_tower_timed_destroy", "modifier")
b = balance.enemies.crocs.boss_crocs.pre_fight_towers_destroy

E:add_comps(tt, "render")

tt.main_script.insert = scripts.mod_boss_crocs_tower_timed_destroy.insert
tt.main_script.remove = scripts.mod_boss_crocs_tower_timed_destroy.remove
tt.main_script.update = scripts.mod_boss_crocs_tower_timed_destroy.update
tt.modifier.duration = 1e+99
tt.render.sprites[1].prefix = "overseer_fx_overseer_tentaclesback"
tt.render.sprites[1].animated = true
tt.render.sprites[1].offset.y = 13
tt.render.sprites[1].sort_y_offset = 35
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "overseer_fx_overseer_tentaclesfront"
tt.render.sprites[2].animated = true
tt.render.sprites[2].offset.y = 13
tt.render.sprites[2].draw_order = DO_TOWER_MODS
tt.fade_duration = 0.4
tt.can_prevent_destroy = b.can_prevent_destroy
tt._prevent_timed_destroy_price = b.prevent_timed_destroy_price
tt.destroy_tower_cooldown = b.destroy_tower_time
tt.needs_arborean_mages_to_clean = b.needs_arborean_mages_to_clean
tt.offset_y_per_tower = {
	necromancer = 16,
	royal_archers = 20,
	elven_stargazers = 16,
	tricannon = 10,
	arborean_emissary = 20,
	flamespitter = 16,
	ballista = 20
}
tt = E:register_t("mod_boss_crocs_tower_eat", "modifier")

E:add_comps(tt, "render")

tt.main_script.queue = scripts.mod_boss_crocs_tower_eat.queue
tt.main_script.dequeue = scripts.mod_boss_crocs_tower_eat.dequeue
tt.main_script.insert = scripts.mod_boss_crocs_tower_eat.insert
tt.main_script.remove = scripts.mod_boss_crocs_tower_eat.remove
tt.main_script.update = scripts.mod_boss_crocs_tower_eat.update
tt.modifier.duration = 1e+99
tt.render.sprites[1].hidden = true
tt.render.sprites[1].sort_y_offset = -10
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "boss_gator_tower_killDef"
tt.render.sprites[2].name = "attack1"
tt.render.sprites[2].animated = true
tt.render.sprites[2].exo = true
tt.render.sprites[2].draw_order = DO_TOWER_MODS
tt.render.sprites[2].sort_y_offset = -10
tt.sound_eat = "Stage22AbominorEatTower"
tt.sound_fist_remove = "Stage22AbominorEatTowerFistRemove"
-- tt.broken_tower_mod = "mod_stage_22_tower_destroyed"
tt.fade_duration = 0.4
tt.offset_y_per_tower = {
	necromancer = 16,
	royal_archers = 20,
	elven_stargazers = 16,
	tricannon = 10,
	arborean_emissary = 20,
	flamespitter = 16,
	ballista = 20
}
tt = E:register_t("mod_crocs_hydra_dot", "modifier")
b = balance.enemies.crocs.crocs_hydra.dot

E:add_comps(tt, "dps", "render")

tt.dps.damage_min = b.damage_min
tt.dps.damage_max = b.damage_max
tt.dps.damage_type = b.damage_type
tt.dps.damage_every = b.damage_every
tt.modifier.duration = fts(10)
tt.modifier.use_mod_offset = true
tt.main_script.insert = scripts.mod_dps.insert
tt.main_script.update = scripts.mod_dps.update
tt.render.sprites[1].prefix = "hydra_poisonDef"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].exo = true
tt.render.sprites[1].animated = true
tt = E:register_t("mod_croc_boss_evolution_polymorph", "modifier")
b = balance.enemies.crocs.boss_crocs.primordial_hunger
tt.hp_evolution_method = {
	b[1].hp_evolution_method,
	b[2].hp_evolution_method,
	b[3].hp_evolution_method,
	b[4].hp_evolution_method,
	b[5].hp_evolution_method
}
tt.hp_restore_fixed_amount = {
	b[1].hp_restore_fixed_amount,
	b[2].hp_restore_fixed_amount,
	b[3].hp_restore_fixed_amount,
	b[4].hp_restore_fixed_amount,
	b[5].hp_restore_fixed_amount
}
tt.modifier.duration = fts(2)
tt.main_script.insert = scripts.mod_croc_boss_evolution_polymorph.insert
tt.entity_t = {
	{
		"boss_crocs_lvl1",
		"boss_crocs_lvl2"
	},
	{
		"boss_crocs_lvl2",
		"boss_crocs_lvl3"
	},
	{
		"boss_crocs_lvl3",
		"boss_crocs_lvl4"
	},
	{
		"boss_crocs_lvl4",
		"boss_crocs_lvl5"
	}
}
tt = E:register_t("mod_croc_boss_poison_rain_lvl1", "modifier")
b = balance.enemies.crocs.boss_crocs.poison_rain

E:add_comps(tt, "dps", "render", "tween")

tt.dps.damage_min = b.poison_damage_min[1]
tt.dps.damage_max = b.poison_damage_max[1]
tt.dps.damage_type = b.damage_type
tt.dps.damage_every = b.poison_damage_every
tt.modifier.duration = b.poison_mod_duration[1]
tt.modifier.use_mod_offset = true
tt.main_script.insert = scripts.mod_dps.insert
tt.main_script.update = scripts.mod_dps.update
tt.render.sprites[1].prefix = "boss_gator_vfx_acid_modifier"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].z = Z_EFFECTS
tt.render.sprites[1].loop = true
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	},
	{
		tt.modifier.duration - fts(10),
		255
	},
	{
		tt.modifier.duration,
		0
	}
}
tt = E:register_t("mod_croc_boss_poison_rain_lvl2", "mod_croc_boss_poison_rain_lvl1")
tt.dps.damage_min = b.poison_damage_min[2]
tt.dps.damage_max = b.poison_damage_max[2]
tt.modifier.duration = b.poison_mod_duration[2]
tt.render.sprites[1].prefix = "boss_gator_vfx_fire_modifier"
tt = E:register_t("mod_boss_crocs_stomp", "modifier")
b = balance.enemies.crocs.boss_crocs.stomper

E:add_comps(tt, "dps")

tt.dps.damage_min = b.damage_soldiers_min
tt.dps.damage_max = b.damage_soldiers_max
tt.dps.damage_type = b.damage_type
tt.dps.damage_every = b.damage_every
tt.modifier.duration = fts(7)
tt.modifier.use_mod_offset = true
tt.main_script.insert = scripts.mod_dps.insert
tt.main_script.update = scripts.mod_dps.update

tt = E:register_t("mod_burning_enemy_brute_welder", "modifier")
b = balance.enemies.hammer_and_anvil.brute_welder.basic_attack.burn

E:add_comps(tt, "dps", "render")

tt.modifier.duration = b.duration
tt.dps.damage_min = b.damage_min
tt.dps.damage_max = b.damage_max
tt.dps.damage_type = b.damage_type
tt.dps.damage_every = b.cycle_time
tt.render.sprites[1].prefix = "brute_welder_attack_mod"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].draw_order = 2
tt.render.sprites[1].loop = true
tt.main_script.insert = scripts.mod_dps.insert
tt.main_script.update = scripts.mod_dps.update
tt = E:register_t("mod_enemy_darksteel_anvil_buff", "modifier")
b = balance.enemies.hammer_and_anvil.darksteel_anvil.aura

E:add_comps(tt, "render", "fast")

tt.main_script.insert = scripts.mod_enemy_darksteel_anvil_buff.insert
tt.main_script.update = scripts.mod_enemy_darksteel_anvil_buff.update
tt.main_script.remove = scripts.mod_enemy_darksteel_anvil_buff.remove
tt.modifier.use_mod_offset = true
tt.extra_armor = b.mod.extra_armor
tt.fast.factor = b.mod.speed_factor
tt.modifier.duration = b.mod.duration
tt.target_self = b.target_self
tt.render.sprites[1].prefix = "darksteel_anvil_skill_FX"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].draw_order = 2
tt.render.sprites[1].loop = true
tt.render.sprites[1].anchor = v(0.5, 0.6)
tt = E:register_t("mod_enemy_darksteel_hulk_charge_enemy", "modifier")
b = balance.enemies.hammer_and_anvil.darksteel_hulk

E:add_comps(tt, "dps", "render")

tt.dps.damage_min = b.charge.damage_enemy_min
tt.dps.damage_max = b.charge.damage_enemy_max
tt.dps.damage_type = b.charge.damage_type
tt.dps.damage_every = fts(10)
tt.modifier.duration = fts(7)
tt.modifier.use_mod_offset = true
tt.main_script.insert = scripts.mod_dps.insert
tt.main_script.update = scripts.mod_dps.update
tt.render.sprites[1].name = "darksteel_hulk_attack_hit_idle"
tt.render.sprites[1].loop = false
tt = E:register_t("mod_enemy_darksteel_hulk_charge_soldier", "mod_enemy_darksteel_hulk_charge_enemy")
b = balance.enemies.hammer_and_anvil.darksteel_hulk
tt.dps.damage_min = b.charge.damage_soldier_min
tt.dps.damage_max = b.charge.damage_soldier_max

tt = E:register_t("mod_hero_dragon_arb_ultimate_paragons_polymorph", "modifier")
tt.modifier.duration = fts(2)
tt.main_script.insert = scripts.mod_hero_dragon_arb_ultimate_paragons_polymorph.insert
tt.entity_t = {
	{
		"soldier_hero_dragon_arb_spawn_lvl1",
		"soldier_hero_dragon_arb_spawn_paragon_lvl1"
	},
	{
		"soldier_hero_dragon_arb_spawn_lvl2",
		"soldier_hero_dragon_arb_spawn_paragon_lvl2"
	},
	{
		"soldier_hero_dragon_arb_spawn_lvl3",
		"soldier_hero_dragon_arb_spawn_paragon_lvl3"
	}
}

tt = E:register_t("mod_hero_spider_melee_dot", "modifier")
b = balance.heroes.hero_spider.basic_melee.dot

E:add_comps(tt, "dps", "render", "tween")

tt.dps.damage_min = nil
tt.dps.damage_max = nil
tt.dps.damage_type = b.damage_type
tt.dps.damage_every = b.poison_damage_every
tt.modifier.duration = b.poison_mod_duration
tt.modifier.use_mod_offset = false
tt.main_script.insert = scripts.mod_dps.insert
tt.main_script.update = scripts.mod_dps.update
tt.render.sprites[1].prefix = "hero_spider_05_modifier"
tt.render.sprites[1].name = "run"
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].z = Z_EFFECTS
tt.render.sprites[1].loop = true
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	},
	{
		tt.modifier.duration - fts(10),
		255
	},
	{
		tt.modifier.duration,
		0
	}
}

tt = E:register_t("mod_tower_arborean_honey_basic_slow", "mod_slow")
b = balance.specials.towers.stage_20_arborean_honey

E:add_comps(tt, "render", "tween")

tt.balance_slow_factor = b.slow_factor
tt.balance_duration = b.slow_mod_duration
tt.slow.factor = b.slow_factor
tt.modifier.duration = b.slow_mod_duration
tt.render.sprites[1].name = "arborean_honey_tower_modifier"
tt.render.sprites[1].z = Z_EFFECTS
tt.render.sprites[1].anchor = v(0.5, 0.6)
tt.render.sprites[1].loop = true
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		fts(10),
		255
	},
	{
		tt.modifier.duration - fts(10),
		255
	},
	{
		tt.modifier.duration,
		0
	}
}

tt = E:register_t("mod_hide_tower", "modifier")
tt.main_script.insert = scripts.mod_hide_tower.insert
tt.main_script.remove = scripts.mod_hide_tower.remove
tt.skip_sprite_index = {}
tt.skip_all_modifiers = false
tt.skip_all_auras = false
tt.skip_modifiers = {}
tt.skip_auras = {}
tt.handle_stun = true
tt.skip_hide_modifier_self = true
tt.allows_duplicates = false
tt.replaces_lower = false
tt.resets_same = false
tt = E:register_t("mod_stage_22_tower_destroyed", "mod_hide_tower")

local b = balance.specials.stage22_tower_destroyed

E:add_comps(tt, "render")

tt.main_script.update = scripts.mod_stage_22_tower_destroyed.update
tt.main_script.remove = nil
tt.render.sid_holder = 1
tt.render.sprites[tt.render.sid_holder].name = "terrains_holders_0007"
tt.render.sprites[tt.render.sid_holder].animated = false
tt.render.sprites[tt.render.sid_holder].z = Z_DECALS
tt.render.sprites[tt.render.sid_holder].offset = v(0, 16)
tt.render.sid_flag = 2
tt.render.sprites[tt.render.sid_flag] = E:clone_c("sprite")
tt.render.sprites[tt.render.sid_flag].name = "terrains_holders_0019_flag"
tt.render.sprites[tt.render.sid_flag].animated = false
tt.render.sprites[tt.render.sid_flag].z = Z_OBJECTS
tt.render.sprites[tt.render.sid_flag].offset = v(-1, 17)
tt.render.sid_exo = 3
tt.render.sprites[tt.render.sid_exo] = E:clone_c("sprite")
tt.render.sprites[tt.render.sid_exo].prefix = "animations_tower_killDef"
tt.render.sprites[tt.render.sid_exo].name = "idle"
tt.render.sprites[tt.render.sid_exo].exo = true
tt.render.sprites[tt.render.sid_exo].animated = true
tt.render.sprites[tt.render.sid_exo].draw_order = 20
tt.render.sprites[tt.render.sid_exo].z = Z_OBJECTS
tt.render.sprites[tt.render.sid_exo].offset = v(-2, -15)
tt.sound_restore = "Stage22TowerRestore"
tt.repair_cost = b.repair_cost
tt.hand_decal_t = "decal_mod_stage_22_tower_stun_hand"
tt.skip_modifiers = {
	"mod_boss_crocs_tower_eat"
}
tt.click_rect = r(-30, 0, 60, 46)
tt.menu_offset = v(0, 12)
tt = E:register_t("mod_boss_machinist_burn", "modifier")
b = balance.enemies.hammer_and_anvil.boss_machinist.fire_floor.burn

E:add_comps(tt, "dps", "render")

tt.modifier.duration = b.duration
tt.dps.damage_min = b.damage_min
tt.dps.damage_max = b.damage_max
tt.dps.damage_type = b.damage_type
tt.dps.damage_every = b.cycle_time
tt.render.sprites[1].size_names = {
	"small",
	"medium",
	"large"
}
tt.render.sprites[1].prefix = "fire"
tt.render.sprites[1].name = "small"
tt.render.sprites[1].draw_order = 2
tt.render.sprites[1].loop = true
tt.main_script.insert = scripts.mod_dps.insert
tt.main_script.update = scripts.mod_dps.update

tt = RT("mod_enemy_glarenwarden_melee_lifesteal", "modifier")
b = balance.enemies.arachnids.glarenwarden.basic_attack
tt.main_script.insert = scripts.mod_lifesteal_kr5.insert
tt.damage_min = b.damage_min
tt.damage_max = b.damage_max
tt.heal_hp_damage_factor = b.lifesteal.damage_factor
tt.heal_hp_fixed = b.lifesteal.fixed_heal
tt.damage_type = b.damage_type
tt.only_predict_damage = true
tt.heal_fx = "fx_glarenwarden_healing"
tt.heal_fx_offset = v(0, 12)
tt = E:register_t("mod_test_head_pos_kr5", "modifier")

E:add_comps(tt, "render")

tt.modifier.duration = 5
tt.render.sprites[1].prefix = "poison"
tt.render.sprites[1].size_names = {
	"small",
	"big",
	"big"
}
tt.render.sprites[1].name = "small"
tt.render.sprites[1].scale = vv(0.4)
tt.render.sprites[1].draw_order = 2

for i = 2, 20 do
	tt.render.sprites[i] = table.deepclone(tt.render.sprites[1])
	tt.render.sprites[i].r = math.rad(math.random(0, 360))
end

tt.position_test = "HEAD"
tt.main_script.update = scripts.mod_test_unit_pos_kr5.update
tt = E:register_t("mod_test_mod_pos_kr5", "mod_test_head_pos_kr5")
tt.position_test = "MOD"
tt = E:register_t("mod_test_hit_pos_kr5", "mod_test_head_pos_kr5")
tt.position_test = "HIT"
tt = E:register_t("mod_cultbrood_poison", "modifier")
b = balance.enemies.arachnids.cultbrood.poison_attack

E:add_comps(tt, "render", "dps")

tt.modifier.duration = b.poison.duration
tt.modifier.vis_flags = bor(F_MOD)
tt.render.sprites[1].name = "cultbrood_modifier_idle"
tt.main_script.insert = scripts.mod_dps.insert
tt.main_script.update = scripts.mod_cultbrood_poison.update
tt.dps.damage_every = b.poison.damage_every
tt.dps.damage_max = b.poison.damage
tt.dps.damage_min = b.poison.damage
tt.dps.damage_type = b.poison.damage_type
tt.transformation_nodes_limit = b.transformation_nodes_limit
tt = E:register_t("mod_drainbrood_web", "modifier")
b = balance.enemies.arachnids.drainbrood.webspit

E:add_comps(tt, "render")

tt.main_script.insert = scripts.mod_stun.insert
tt.main_script.update = scripts.mod_drainbrood_web.update
tt.main_script.remove = scripts.mod_stun.remove
tt.modifier.animation_phases = true
tt.modifier.duration = b.duration
tt.modifier.hide_target_delay = fts(0)
tt.modifier.use_mod_offset = false
tt.render.sprites[1].prefix = "drainblood_cucoon"
tt.render.sprites[1].name = "in"
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt = E:register_t("mod_boss_spider_queen_poison", "mod_poison")
b = balance.enemies.arachnids.boss_spider_queen.ranged_attack.poison
tt.dps.damage_every = b.damage_every
tt.dps.damage_min = b.damage_min
tt.dps.damage_max = b.damage_max
tt.dps.kill = true
tt.modifier.duration = b.duration
tt.modifier.use_mod_offset = false
tt.render.sprites[1].prefix = "boss_effects_poison"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].size_names = {
	"idle",
	"idle",
	"idle"
}
tt.render.sprites[1].anchor = vv(0.5)
tt.render.sprites[1].draw_order = DO_MOD_FX
tt = RT("mod_boss_spider_queen_area_lifesteal_end", "modifier")
b = balance.enemies.arachnids.boss_spider_queen.drain_life.lifesteal_end
tt.main_script.insert = scripts.mod_boss_spider_queen_area_lifesteal.insert
tt.damage_min = b.damage_min
tt.damage_max = b.damage_max
tt.heal_hp_damage_factor = b.damage_factor
tt.heal_hp_fixed = b.fixed_heal
tt.damage_type = b.damage_type
tt = RT("mod_boss_spider_queen_area_lifesteal_loop", "modifier")
b = balance.enemies.arachnids.boss_spider_queen.drain_life.lifesteal_loop
tt.main_script.insert = scripts.mod_lifesteal_kr5.insert
tt.damage_min = b.damage_min
tt.damage_max = b.damage_max
tt.heal_hp_damage_factor = b.damage_factor
tt.heal_hp_fixed = b.fixed_heal
tt.damage_type = b.damage_type
tt = RT("mod_spider_web_sprint", "mod_slow")
b = balance.specials.terrain_7.spider_floor_webs
tt.slow.factor = b.sprint_factor
tt.modifier.duration = fts(5)
tt = RT("mod_spider_web_slowness", "mod_spider_web_sprint")
b = balance.specials.terrain_7.spider_floor_webs
tt.slow.factor = b.slow_factor
tt = E:register_t("mod_tower_sparking_geode_stun", "mod_stun")
tt.main_script.insert = scripts.mod_tower_sparking_geode_stun.insert
tt.main_script.remove = scripts.mod_tower_sparking_geode_stun.remove
tt.main_script.update = scripts.mod_tower_sparking_geode_stun.update
tt.modifier.animation_phases = true
tt.render.sid_decal = 1
tt.render.sprites[tt.render.sid_decal].prefix = "sparking_geode_longray_decal_down"
tt.render.sprites[tt.render.sid_decal].name = "run"
tt.render.sprites[tt.render.sid_decal].z = Z_DECALS
tt.render.sid_ray = 2
tt.render.sprites[tt.render.sid_ray] = E:clone_c("sprite")
tt.render.sprites[tt.render.sid_ray].size_prefixes = nil
tt.render.sprites[tt.render.sid_ray].prefix = "sparking_geode_longray_ray"
tt.render.sprites[tt.render.sid_ray].name = "down"
tt.render.sprites[tt.render.sid_ray].anchor = vv(0.5)
tt.render.sprites[tt.render.sid_ray].scale = vv(2)
tt.render.sid_crystal = 3
tt.render.sprites[tt.render.sid_crystal] = E:clone_c("sprite")
tt.render.sprites[tt.render.sid_crystal].prefix = "sparking_geode_crystal_"
tt.render.sprites[tt.render.sid_crystal].size_prefixes = {
	"small",
	"mid",
	"big"
}
tt.render.sid_fx = 4
tt.render.sprites[tt.render.sid_fx] = E:clone_c("sprite")
tt.render.sprites[tt.render.sid_fx].prefix = "sparking_geode_cystal_fx"
tt.modifier.duration = nil
tt.inflicted_damage_factor = 1
tt.received_damage_factor = nil
tt.modifier.use_mod_offset = false
tt.health_bar_offset = {
	v(0, 40),
	v(0, 60),
	v(0, 78)
}
tt.out_fx = "fx_mod_tower_sparking_geode_stun_death"
tt.mod_sound = "TowerSparkingGeodeCristalizeBolt"
tt = E:register_t("mod_tower_sparking_geode_burst_slow", "mod_slow")
b = balance.towers.sparking_geode.spike_burst
tt.modifier.duration = b.damage_every + fts(1)
tt.slow.factor = b.speed_factor

function tt.main_script.insert(this, store, script)
	this.slow.factor = this.slow.factor[this.modifier.level]

	return scripts.mod_slow.insert(this, store, script)
end

tt = E:register_t("mod_tower_sparking_geode_burst_damage", "modifier")
b = balance.towers.sparking_geode.spike_burst

E:add_comps(tt, "dps", "render")

tt.render.sprites[1].name = "sparking_geode_modifier_run"
tt.modifier.duration = b.damage_every + fts(1)
tt.modifier.vis_bans = bor(F_BOSS)
tt.dps.damage_every = b.damage_every
tt.dps.damage_min = b.damage_min
tt.dps.damage_max = b.damage_max
tt.dps.damage_type = b.damage_type

function tt.main_script.insert(this, store, script)
	this.dps.damage_min = this.dps.damage_min[this.modifier.level]
	this.dps.damage_max = this.dps.damage_max[this.modifier.level]

	return scripts.mod_dps.insert(this, store, script)
end

tt.main_script.update = scripts.mod_dps.update

tt = E:register_t("controller_upgrade_heroes_nimble_physique")
b = balance.upgrades.heroes_nimble_physique

E:add_comps(tt, "main_script")

tt.main_script.update = scripts.controller_upgrade_heroes_nimble_physique.update
tt.trigger_cards = b.deck_data.trigger_cards
tt.total_cards = b.deck_data.total_cards
tt = E:register_t("controller_upgrades_alliance")
b = balance.upgrades.alliance_shared_reserves

E:add_comps(tt, "main_script")

tt.main_script.insert = scripts.controller_upgrades_alliance.insert
tt.main_script.update = scripts.controller_upgrades_alliance.update
tt.extra_gold = b.extra_gold
tt = E:register_t("controller_tower_arborean_emissary_gift_of_nature")

E:add_comps(tt, "pos", "main_script")

tt.main_script.update = scripts.controller_tower_arborean_emissary_gift_of_nature.update
tt.entity = "decal_tower_arborean_emissary_gift_of_nature_wisp"
tt.aura = "aura_tower_arborean_emissary_gift_of_nature"
tt.start_offset = {
	v(-35, 67),
	v(35, 68),
	v(0, 50)
}
tt.end_offset = {
	v(-50, 60),
	v(0, 80),
	v(50, 60)
}
tt = E:register_t("controller_path_direction")

E:add_comps(tt, "main_script")

tt.main_script.update = scripts.controller_path_direction.update
tt.path_marker_entity = "decal_path_hero_movement"
tt.distance_between = 15
tt.pool_batch_size = 10
tt = E:register_t("controller_tower_swap")

E:add_comps(tt, "main_script")

tt.main_script.update = scripts.controller_tower_swap.update
tt.path_marker_entity = "decal_path_hero_movement"
tt.swap_sound = "TowerGhostTeleport"
tt.tower_1 = nil
tt.tower_2 = nil
tt.delay = 0.25
tt.delay_empty = 0.25
tt.fx_out = "tower_ghost_teleport_out"
tt.fx_in = "tower_ghost_teleport_in"
tt.fx_spawn_delay = fts(14)
tt.fx_in_delay = fts(14)
tt.fx_delay_between = 0
tt = E:register_t("controller_tower_swap_overseer", "controller_tower_swap")
tt.delay = 0.25
tt.delay_empty = 0.25
tt.fx_out = "decal_tower_swap_fx_in"
tt.fx_in = "decal_tower_swap_fx_in"
tt.fx_spawn_delay = 0
tt.fx_in_delay = 0
tt.fx_delay_between = fts(14)
tt.swap_sound = "Stage16OverseerTeleport"

tt = E:register_t("controller_tower_dark_elf_soldiers")

E:add_comps(tt, "render", "main_script", "pos")

tt.render.sprites[1].prefix = "Tower_lvl4_door"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].offset = v(2, 11)
tt.render.sprites[1].hidden = true
tt.render.sprites[1].sort_y_offset = 10
tt.main_script.update = scripts.controller_tower_dark_elf_soldiers.update
tt.main_script.remove = scripts.controller_tower_dark_elf_soldiers.remove
tt.spawn_delay = 1
tt.check_soldiers_cooldown = fts(10)
tt.sound_open = "TowerDarkElfSupportBladesSpawn"

tt = E:register_t("tower_ghost_hover", "decal")
tt.render.sprites[1].name = "ghost_tower_swap_indicator_back"
tt.render.sprites[1].animated = false
tt.render.sprites[1].z = Z_TOWER_BASES + 1
tt.render.sprites[1].offset.y = 14
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].draw_order = 11
tt.render.sprites[2].prefix = "ghost_tower_swap_indicator_particles"
tt.render.sprites[2].name = "idle"
tt.render.sprites[2].loop = true
tt.render.sprites[2].z = Z_OBJECTS
tt.render.sprites[2].offset.y = 14
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[2].draw_order = 11
tt.render.sprites[3].name = "ghost_tower_swap_indicator_front"
tt.render.sprites[3].animated = false
tt.render.sprites[3].z = Z_OBJECTS
tt.render.sprites[3].offset.y = 14
tt.render.sprites[4] = E:clone_c("sprite")
tt.render.sprites[4].prefix = "ghost_tower_swap_indicator_fx"
tt.render.sprites[4].name = "idle"
tt.render.sprites[4].loop = true
tt.render.sprites[4].z = Z_TOWER_BASES + 1
tt.render.sprites[4].alpha = 155
tt.render.sprites[4].offset.y = 14
tt.render.sprites[4].draw_order = 11
tt = E:register_t("tower_ghost_teleport_out", "decal_timed")
tt.render.sprites[1].name = "ghost_tower_teleport_fx_out_idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = false
tt.render.sprites[1].z = Z_OBJECTS_COVERS + 1
tt.render.sprites[1].offset = v(0, 10)
tt.timed.duration = fts(20)
tt = E:register_t("tower_ghost_teleport_in", "decal_timed")
tt.render.sprites[1].name = "ghost_tower_teleport_fx_in_idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = false
tt.render.sprites[1].z = Z_OBJECTS_COVERS + 1
tt.render.sprites[1].offset = v(0, 10)
tt.timed.duration = fts(20)
tt = E:register_t("decal_tower_swap_fx_out", "decal_timed")
tt.render.sprites[1].name = "overseer_fx_overseer_teleportfx_out_run"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = false
tt.render.sprites[1].z = Z_OBJECTS_COVERS + 1
tt.render.sprites[1].offset = v(0, 10)
tt.timed.duration = fts(20)
tt = E:register_t("decal_tower_swap_fx_in", "decal_timed")
tt.render.sprites[1].name = "overseer_fx_overseer_teleportfx_run"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = false
tt.render.sprites[1].z = Z_OBJECTS_COVERS + 1
tt.render.sprites[1].offset = v(0, 10)
tt.timed.duration = fts(20)
tt = E:register_t("decal_soldier_tower_ghost_spawn", "decal_timed")
tt.render.sprites[1].name = "ghost_tower_unit_spawn_fx_idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].loop = false
tt.render.sprites[1].z = Z_OBJECTS_COVERS + 1
tt.render.sprites[1].offset = v(0, 0)
tt.timed.duration = fts(24)
tt = E:register_t("tower_ghost_hover_controller")

E:add_comps(tt, "main_script")

tt.template_hover = "tower_ghost_hover"
tt.main_script.insert = scripts.tower_ghost_hover_controller.insert
tt.main_script.remove = scripts.tower_ghost_hover_controller.remove
tt = E:register_t("controller_hero_builder_ultimate")

E:add_comps(tt, "pos", "main_script", "sound_events")

tt.can_fire_fn = scripts.hero_builder_ultimate.can_fire_fn
tt.cooldown = nil
tt.entity = "decal_hero_builder_ultimate_projectile"
tt.main_script.update = scripts.hero_builder_ultimate.update
tt.sound = "HeroBuilderWreckingBall"
tt = E:register_t("controller_hero_space_elf_ultimate")

E:add_comps(tt, "pos", "main_script", "sound_events")

tt.can_fire_fn = scripts.hero_space_elf_ultimate.can_fire_fn
tt.cooldown = nil
tt.entity = "aura_hero_space_elf_ultimate"
tt.decal = "decal_hero_space_elf_ultimate"
tt.main_script.update = scripts.hero_space_elf_ultimate.update
tt = E:register_t("controller_hero_mecha_ultimate")

E:add_comps(tt, "pos", "main_script", "sound_events")

tt.can_fire_fn = scripts.hero_mecha_ultimate.can_fire_fn
tt.cooldown = nil
tt.entity = "zeppelin_hero_mecha"
tt.main_script.update = scripts.hero_mecha_ultimate.update
tt.sound = "HeroMechaDeathFromAboveCast"
tt = E:register_t("controller_hero_venom_ultimate")

E:add_comps(tt, "pos", "main_script", "sound_events")

tt.can_fire_fn = scripts.hero_venom_ultimate.can_fire_fn
tt.cooldown = nil
tt.offset_back = -5
tt.offset_forward = 5
tt.aura = "aura_hero_venom_ultimate"
tt.main_script.update = scripts.hero_venom_ultimate.update
tt.sound = "HeroVenomRenewCreepingDeathCast"
tt = E:register_t("controller_hero_robot_ultimate")

E:add_comps(tt, "pos", "main_script", "sound_events")

tt.can_fire_fn = scripts.hero_robot_ultimate.can_fire_fn
tt.cooldown = nil
tt.offset_back = -5
tt.entity = "aura_hero_robot_ultimate_train"
tt.main_script.update = scripts.hero_robot_ultimate.update
tt = E:register_t("controller_hero_hunter_ultimate")

E:add_comps(tt, "pos", "main_script", "sound_events")

tt.can_fire_fn = scripts.hero_hunter_ultimate.can_fire_fn
tt.cooldown = nil
tt.entity = "soldier_hero_hunter_ultimate"
tt.aura = "aura_hero_hunter_ultimate"
tt.main_script.update = scripts.hero_hunter_ultimate.update
tt.sound = "HeroHunterUltimateCast"

tt = E:register_t("controller_hero_witch_ultimate")
b = balance.heroes.hero_witch.ultimate

E:add_comps(tt, "pos", "main_script", "sound_events")

tt.main_script.update = scripts.hero_witch_ultimate.update
tt.can_fire_fn = scripts.hero_witch_ultimate.can_fire_fn
tt.cooldown = nil
tt.teleport_decal = "decal_hero_witch_ultimate"
tt.vis_bans = bor(F_BOSS)
tt.vis_flags = bor(F_TELEPORT)
tt.radius = b.radius
tt.max_targets = nil
tt.mod_mark = "mod_hero_witch_ultimate_mark"
tt.mod_teleport = "mod_hero_witch_ultimate_teleport"

tt = E:register_t("controller_stage_04_easteregg_sheepy")

E:add_comps(tt, "ui", "pos", "main_script")

tt.main_script.update = scripts.controller_stage_04_easteregg_sheepy.update
tt.entity_baby = "decal_stage_04_easteregg_sheepy_baby"
tt.entity_old_man = "decal_stage_04_easteregg_sheepy_old_man"
tt.entity_sheepy = "decal_stage_04_easteregg_sheepy_sheepy"
tt.old_man_cooldown = 5
tt.sheepy_man_cooldown = 5
tt.ui.click_rect = r(-65, -10, 80, 40)
tt = E:register_t("controller_stage_06_pool_party")

E:add_comps(tt, "editor", "pos", "main_script")

tt.main_script.update = scripts.controller_stage_06_pool_party.update
tt.entity_demon_in_pool = "decal_pool_party2"
tt.entity_demon_jumping = "decal_pool_party4"
tt.entity_volleyball = "decal_pool_party5"
tt = E:register_t("controller_stage_06_tiki_bar")

E:add_comps(tt, "editor", "pos", "main_script")

tt.main_script.insert = scripts.controller_stage_06_tiki_bar.insert
tt.main_script.update = scripts.controller_stage_06_tiki_bar.update
tt.entity_baby1 = "decal_tiki_bar2"
tt.entity_baby2 = "decal_tiki_bar3"
tt.entity_barman = "decal_tiki_bar5"
tt.entity_old_man = "decal_tiki_bar4"
tt = E:register_t("controller_stage_08_elf_rescue")
b = balance.specials.stage08_elf_rescue

E:add_comps(tt, "editor", "pos", "main_script")

tt.main_script.update = scripts.controller_stage_08_elf_rescue.update
tt.entity_elf = "soldier_elf_stage_08"
tt.entity_guard = "enemy_unblinded_abomination_stage_8"
tt.entity_elf_slave = "decal_stage_08_elf_rescue_elf_slave"
tt.entity_chain = "decal_stage_08_elf_rescue_chains"
tt.elf_pos = {
	v(390, 625),
	v(750, 675),
	v(230, 625),
	v(930, 640)
}
tt.pos_guard = v(490, 550)
tt.pos_chain = v(448, 541)
tt.pos_elf_slave = v(428, 540)
tt.spawn_cooldown = b.spawn_cooldown
tt = E:register_t("controller_stage_09_spawn_nightmares")
b = balance.specials.stage09_spawn_nightmares

E:add_comps(tt, "editor", "pos", "main_script")

tt.main_script.insert = scripts.controller_stage_09_spawn_nightmares.insert
tt.main_script.update = scripts.controller_stage_09_spawn_nightmares.update
tt.wave_config = b.wave_config
tt.entity_portal = "decal_stage_09_portal"
tt.entity_aura = "aura_stage_09_spawn_nightmare_convert"
tt.spawn_fx_aura = "aura_stage_09_spawn_nightmare_convert_spawn_fx"
tt.entity_candles = {
	"decal_stage_09_candle_back1",
	"decal_stage_09_candle_back2",
	"decal_stage_09_candle_back3",
	"decal_stage_09_candle_front1",
	"decal_stage_09_candle_front2",
	"decal_stage_09_candle_front3"
}
tt.entity_glows = {
	"decal_stage_09_candle_glow_back",
	"decal_stage_09_candle_glow_front"
}
tt.path_portal = "decal_stage_09_portal_path_spawn"
tt.portal_offset = v(-15, 0)
tt.pos_portal = v(1048 + tt.portal_offset.x, 446 + tt.portal_offset.y)
tt.pos_aura = {
	v(661 + tt.portal_offset.x, 280 + tt.portal_offset.y),
	v(659 + tt.portal_offset.x, 300 + tt.portal_offset.y),
	v(658 + tt.portal_offset.x, 260 + tt.portal_offset.y)
}
tt.path_portal_off_delay = b.path_portal_off_delay
tt.sound_candles_in = "Stage09NightmarePortalCandles"
tt.sound_portal_in = "Stage09NightmarePortalEye"
tt = E:register_t("decal_stage_09_skeleton", "decal_scripted")

E:add_comps(tt, "ui", "motion")

tt.render.sprites[1].prefix = "skeleton_koopaDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt.main_script.update = scripts.decal_stage_09_skeleton.update
tt.death_time = 12
tt.walk_destination = v(120, 0)
tt.motion.speed = v(10, 10)
tt.motion.max_speed = 20
tt.ui.click_rect = r(-20, -10, 40, 40)
tt = E:register_t("controller_stage_10_obelisk")
b = balance.specials.stage10_obelisk

E:add_comps(tt, "editor", "pos", "main_script")

tt.main_script.insert = scripts.controller_stage_10_obelisk.insert
tt.main_script.update = scripts.controller_stage_10_obelisk_by_wave.update
tt.entity_cultist = "decal_stage_10_obelisk_priests"
tt.entity_crystal = "decal_stage_10_obelisk_crystal"
tt.entity_light = "decal_stage_10_obelisk_light"
tt.entity_base_crystals = "decal_stage_10_obelisk_crystals"
tt.template_crystal_fx = "decal_stage_10_obelisk_crystal_fx"
tt.fx_stun_explosion = "fx_stage_10_obelisk_stun_explosion"
tt.fx_stun_explosion_white = "fx_stage_10_obelisk_stun_explosion_white"
tt.fx_stun_circle = "fx_stage_10_obelisk_stun_circle"
tt.fx_teleport = "fx_stage_10_obelisk_teleport_crystal"
tt.obelisk_pos = v(531, 545)
tt.crystal_pos = v(531, 539)
tt.fx_heal_pos = v(528, 557)
tt.config = b
tt.stun_bans = bor(F_ENEMY, F_HERO, F_FLYING)
tt.stun_flags = bor(F_FRIEND, F_MOD)
tt.stun_mod = "mod_stage_10_obelisk_stun"
tt.heal_bans = bor(F_FRIEND)
tt.heal_flags = bor(F_ENEMY, F_MOD)
tt.heal_mod = "mod_stage_10_obelisk_heal"
tt.teleport_bans = bor(F_FRIEND, F_FLYING)
tt.teleport_flags = bor(F_ENEMY, F_MOD)
tt.teleport_aura = "aura_stage_10_obelisk_teleport"
tt.bullet_golem_spawn = "bullet_stage_10_obelisk_priests"
tt.bullet_offset = v(0, 20)
tt.bullet_spawn_pos = {
	v(-71, 38),
	v(3, 3),
	v(71, 35)
}
tt.golem_selected_paths = {
	4,
	3,
	1
}
tt.golem_holder_pos = {
	v(310, 441),
	v(482, 345),
	v(328, 205)
}
tt.golem_activate_holder = {
	"4",
	"9",
	"6"
}
tt.golem_walk_pos = {
	v(375, 465),
	v(572, 392),
	v(381, 275)
}
tt.template_golem = "enemy_crystal_golem"
tt.sacrifice_duration = 4
tt.sound_activation = "Stage10ObeliskActivation"
tt.sound_cast_stun = "Stage10ObeliskEffectStun"
tt.sound_cast_heal = "Stage10ObeliskEffectHealLoopStart"
tt.sound_heal_loop = "Stage10ObeliskEffectHealLoop"
tt.sound_change_mode = "Stage10ObeliskEffectChange"
tt.sound_cast_golem = "Stage10ObeliskEffectGolemSpawnCast"
tt.sound_cast_teleport = "EnemyVoidBlinkerTeleport"
tt = E:register_t("controller_stage_10_obelisk_iron", "controller_stage_10_obelisk")
tt.main_script.update = scripts.controller_stage_10_obelisk_iron.update
tt.golem_holder_pos = {
	v(74, 524),
	v(310, 440),
	v(60, 308),
	v(700, 400),
	v(328, 204)
}
tt.golem_walk_pos = {
	v(26, -34),
	v(50, 50),
	v(30, 0),
	v(0, -70),
	v(54, 60)
}
tt.golem_activate_holder = {
	"2",
	"4",
	"1",
	"11",
	"6"
}
tt.golem_selected_paths = {
	4,
	3,
	2,
	3,
	1
}
tt.prepare_delay = 3
tt = E:register_t("controller_stage_10_obelisk_wave_fixed", "controller_stage_10_obelisk")
tt.main_script.update = scripts.controller_stage_10_obelisk_wave_fixed.update
tt = E:register_t("controller_stage_10_ymca")
b = balance.specials.stage10_ymca

E:add_comps(tt, "editor", "pos", "main_script")

tt.main_script.insert = scripts.controller_stage_10_ymca.insert
tt.main_script.update = scripts.controller_stage_10_ymca.update
tt.entities_soldiers = {
	"soldier_stage_10_ymca_indio",
	"soldier_stage_10_ymca_constructor",
	"soldier_stage_10_ymca_biker",
	"soldier_stage_10_ymca_policia"
}
tt.entity_statue = "decal_stage_10_ymca_statue"
tt.entity_dots = "decal_stage_10_ymca_dots"
tt.entity_fireworks = "decal_stage_10_ymca_fireworks"
tt.entity_lights = "decal_stage_10_ymca_lights"
tt.dots_pos = v(1025, 590)
tt.start_formation = {
	3,
	4,
	2,
	1
}

local sb = v(-30, -30)

tt.statue_position = {
	v(sb.x + 975, sb.y + 620),
	v(sb.x + 1030, sb.y + 650),
	v(sb.x + 1090, sb.y + 645),
	v(sb.x + 1133, sb.y + 590)
}
tt.soldier_spawn_pos = {
	v(985, 585),
	v(1015, 600),
	v(1045, 580),
	v(1015, 560),
	v(1045, 580)
}
tt.soldier_line_pos_offset = {
	v(25, -20),
	v(20, -10),
	v(-15, 5),
	v(-25, -10)
}

local base = v(925, 445)

tt.soldier_path_pos = {
	v(base.x - 20, base.y + 20),
	v(base.x + 13, base.y + 33),
	v(base.x + 25, base.y),
	v(base.x - 10, base.y - 10),
	v(base.x + 25, base.y)
}
tt.soldier_spawn_delay = {
	1.5,
	1.8,
	1.7,
	1.5
}
tt = E:register_t("controller_stage_11_cult_leader")
b = balance.specials.stage11_cult_leader

E:add_comps(tt, "editor", "pos", "main_script")

tt.main_script.insert = scripts.controller_stage_11_cult_leader.insert
tt.main_script.update = scripts.controller_stage_11_cult_leader.update
tt.entity_cultist = "decal_stage_11_cult_leader"
tt.entity_illusion = "enemy_stage_11_cult_leader_illusion"
tt.cultist_pos = v(730, 510)
tt.spawn_available_pos = {
	v(340, 476),
	v(546, 478),
	v(366, 296),
	v(648, 284),
	v(920, 390)
}
tt.config = b
tt.spawn_check_enemies_range = 150
tt.spawn_check_towers_range = 150
tt.cultist_attack_time = b.illusion.spawn_charge_time
tt.cultist_stun_time = b.stun_time
tt.illusion_delay_between = fts(24)
tt.sound_illusion_summon_cast = "Stage11MydriasIllusionSummonCast"
tt = E:register_t("controller_stage_11_portal")
b = balance.specials.stage11_portal

E:add_comps(tt, "editor", "pos", "main_script")

tt.main_script.insert = scripts.controller_stage_11_portal.insert
tt.main_script.update = scripts.controller_stage_11_portal.update
tt.entity_portal = "decal_stage_11_portal"
tt.portal_pos = v(512, 384)
tt.entity_aura = "aura_stage_11_portal"
tt.aura_pos = v(880, 580)
tt.entity_torches = "decal_stage_11_torches"
tt.torches_pos = v(512, 384)
tt.entity_crystals_prefix = "decal_stage_11_portal_crystal_"
tt.crystals_count = 8
tt.crystals_pos = v(512, 384)
tt.config = b
tt.sound_thunder = "Stage11AmbienceThunder"
tt.sound_thunder_cd_min = 8
tt.sound_thunder_cd_max = 12
tt.sound_portal_open = "Stage11PortalOpen"
tt.sound_portal_close = "Stage11PortalClose"
tt = E:register_t("controller_stage_11_cultist_leader_modes")

E:add_comps(tt, "editor", "main_script")

tt.main_script.update = scripts.controller_stage_11_cultist_leader_modes.update
tt.entity_tables = "decal_stage_11_cultist_leader_modes"
tt.entity_worker = "decal_stage_11_cultist_leader_modes_worker"
tt = E:register_t("controller_terrain_3_floating_elements")

E:add_comps(tt, "editor", "pos", "main_script")

tt.main_script.update = scripts.controller_terrain_3_floating_elements.update
tt = E:register_t("controller_terrain_3_local_glare")

E:add_comps(tt, "editor", "pos", "main_script", "glare_kr5", "render")

tt.main_script.insert = scripts.controller_terrain_3_local_glare.insert
tt.main_script.update = scripts.controller_terrain_3_local_glare.update
tt.entity_spawner_fx = "fx_terrain_3_spawner"
tt.aura_glare = "aura_glare_source"
tt.eyes_t = {
	"decal_terrain_3_glare_eye_big",
	"decal_terrain_3_glare_eye_small_1",
	"decal_terrain_3_glare_eye_small_2",
	"decal_terrain_3_glare_eye_small_3"
}
tt.decal_ground = "decal_stage_12_glare"
tt.waves = nil
tt.sid_eyes = 1
tt.sid_eyelids = 2
tt.sound_small_eye_1 = "Terrain3GlareOnSmall1"
tt.sound_small_eye_2 = "Terrain3GlareOnSmall2"
tt.sound_big_eye = "Terrain3GlareOnBig"
tt.sound_off = "Terrain3GlareOff"
tt = E:register_t("controller_terrain_3_stage_15_glare", "controller_terrain_3_local_glare")

local b = balance.specials.stage15_cult_leader_tower

function tt.main_script.insert(this, store)
	return true
end

tt.main_script.update = scripts.controller_terrain_3_stage_15_glare.update
tt = E:register_t("controller_terrain_3_stage_16_glare1", "controller_terrain_3_local_glare")

local b = balance.specials.stage16_overseer

tt.main_script.update = scripts.controller_terrain_3_stage_16_glare.update
tt.phase_config = b.glare1
tt.decal_ground = "decal_stage_16_glare_1"
tt.eyes_t = {
	"decal_stage_16_glare_eye_big",
	"decal_stage_16_glare_eye_small_1",
	"decal_stage_16_glare_eye_small_2",
	"decal_stage_16_glare_eye_small_3"
}
tt = E:register_t("controller_terrain_3_stage_16_glare2", "controller_terrain_3_local_glare")

local b = balance.specials.stage16_overseer

tt.main_script.update = scripts.controller_terrain_3_stage_16_glare.update
tt.phase_config = b.glare2
tt.decal_ground = "decal_stage_16_glare_2"

-- customization
tt = E:register_t("controller_terrain_3_stage_16_glare1_heroic", "controller_terrain_3_stage_16_glare1")
tt.main_script.insert = scripts.controller_terrain_3_local_glare.insert
tt.main_script.update = scripts.controller_terrain_3_local_glare.update
tt.phase_config = nil

tt = E:register_t("controller_terrain_3_stage_16_glare2_heroic", "controller_terrain_3_stage_16_glare2")
tt.main_script.insert = scripts.controller_terrain_3_local_glare.insert
tt.main_script.update = scripts.controller_terrain_3_local_glare.update
tt.phase_config = nil
-- customization

tt = E:register_t("controller_stage_14_amalgam")

local b = balance.specials.stage14_amalgam

E:add_comps(tt, "main_script")

tt.main_script.update = scripts.controller_stage_14_amalgam.update
tt.amalgam_t = "enemy_amalgam"
tt.amalgam_spawn_pos = v(501, 482)
tt.aura_t = "aura_controller_stage_14_amalgam"
tt.amalgam_decal_t = "decal_controller_stage_14_amalgam"
tt.sacrifices_to_show_1 = b.sacrifices_to_show_1
tt.sacrifices_to_show_2 = b.sacrifices_to_show_2
tt.sacrifices_to_spawn = b.sacrifices_to_spawn
tt.sound_1 = "Stage14BehemothPoolSpawn1"
tt.sound_2 = "Stage14BehemothPoolSpawn2"
tt.sound_spawn = "Stage14BehemothPoolSpawn3"
tt = E:register_t("controller_hero_dragon_gem_skill_floor_impact_spawner")

E:add_comps(tt, "main_script")

tt.main_script.update = scripts.controller_hero_dragon_gem_skill_floor_impact_spawner.update
tt = E:register_t("controller_stage_15_cult_leader_tower")
b = balance.specials.stage15_cult_leader_tower

E:add_comps(tt, "editor", "pos", "main_script", "render")

tt.main_script.update = scripts.controller_stage_15_cult_leader_tower.update
tt.render.sprites[1] = E:clone_c("sprite")
tt.render.sprites[1].prefix = "mydrias_finalstage_bottomDef"
tt.render.sprites[1].name = "idleup"
tt.render.sprites[1].exo = true
tt.render.sprites[1].group = "layers"
tt.render.sprites[1].z = Z_OBJECTS_COVERS + 10
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "mydrias_finalstage_topDef"
tt.render.sprites[2].name = "idleup"
tt.render.sprites[2].exo = true
tt.render.sprites[2].group = "layers"
tt.render.sprites[2].z = Z_OBJECTS_COVERS + 20
tt.render.sprites[2].offset = v(-2, -2)
tt.config_per_wave = b.config_per_wave
tt.time_to_leave_after_attack_min = 2
tt.time_to_leave_after_attack_max = 4
tt.time_before_attack_min = 2
tt.time_before_attack_max = 4
tt.distance_to_group = 100
tt.bans = bor(F_FLYING)
tt.flags = bor(F_FRIEND, F_MOD)
tt.aura = "aura_stage_15_cult_leader_tower_stun"
tt.boss_to_spawn = "boss_cult_leader"
tt = E:register_t("controller_stage_16_overseer")
b = balance.specials.stage16_overseer

E:add_comps(tt, "editor", "pos", "main_script", "render", "health", "info", "ui")

tt.main_script.update = scripts.controller_stage_16_overseer.update
tt.render.sprites[1] = E:clone_c("sprite")
tt.render.sprites[1].prefix = "overseerDef"
tt.render.sprites[1].name = "idle1_1"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = 2
tt.render.sprites[1].exo_hide_prefix = {
	"hurt2",
	"hurt1"
}
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "overseer_backDef"
tt.render.sprites[2].name = "loop"
tt.render.sprites[2].exo = true
tt.render.sprites[2].z = Z_OBJECTS
tt.render.sprites[2].sort_y_offset = 3
tt.render.sprites[2].offset = v(20, 620)
tt.config_per_wave = b.config_per_wave
tt.hit_point_template = "enemy_overseer_hit_point"
tt.hit_point_pos = {
	v(400, 440),
	v(520, 400),
	v(640, 440)
}
tt.health.armor = 0
tt.health.hp_max = b.hp
tt.health.ignore_delete_after = true
tt.info.i18n_key = "ENEMY_BOSS_OVERSEER"
tt.info.portrait_boss = "boss_health_bar_icon_0004"
tt.phase_per_hp_threshold = b.phase_per_hp_threshold
tt.phase_per_time = b.phase_per_time
tt.change_tower_cooldown = b.change_tower_cooldown
tt.change_tower_amount = b.change_tower_amount
tt.disable_tower_cooldown = b.disable_tower_cooldown
tt.holders_close = {
	"6",
	"7",
	"8",
	"9",
	"10"
}
tt.swap_delay = fts(60)
tt.disable_delay = fts(70)
tt.disable_tower_recover_price = b.disable_tower_recover_price
tt.disable_tower_mod = "mod_stage_16_overseer_tower_disable"
tt.destroy_tower_cooldown = b.destroy_tower_cooldown
tt.destroy_holder_cooldown = b.destroy_holder.cooldown
tt.holders_to_destroy = {
	"1",
	"13",
	"10",
	"2",
	"12",
	"4",
	"9",
	"5",
	"14",
	"3",
	"11",
	"6",
	"8",
	"15",
	"7"
}
tt.nav_mesh_patches = {
	["1"] = {
		[2] = {
			3,
			4
		}
	},
	["13"] = {
		[11] = {
			nil,
			12,
			10,
			14
		},
		[14] = {
			nil,
			10,
			15
		}
	},
	["10"] = {
		[9] = {
			11,
			nil,
			8,
			14
		},
		[11] = {
			nil,
			12,
			9,
			14
		},
		[14] = {
			nil,
			11,
			15
		}
	},
	["2"] = {
		[3] = {
			15,
			6
		},
		[4] = {
			6,
			5,
			nil,
			3
		}
	},
	["12"] = {
		[11] = {
			nil,
			nil,
			9,
			14
		},
		[5] = {
			6,
			nil,
			nil,
			4
		}
	},
	["4"] = {
		[5] = {
			6,
			nil,
			nil,
			3
		},
		[6] = {
			7,
			nil,
			5,
			3
		}
	},
	["9"] = {
		[8] = {
			11,
			nil,
			7,
			15
		},
		[11] = {
			nil,
			nil,
			8,
			14
		},
		[14] = {
			nil,
			11,
			15
		}
	},
	["5"] = {
		[6] = {
			7,
			nil,
			nil,
			3
		},
		[3] = {
			15,
			6
		}
	},
	["14"] = {
		[11] = {
			nil,
			nil,
			8
		},
		[15] = {
			nil,
			8,
			3
		}
	},
	["3"] = {
		[6] = {
			7
		},
		[15] = {
			nil,
			8
		}
	},
	["11"] = {
		[8] = {
			nil,
			nil,
			7,
			15
		}
	},
	["6"] = {
		[7] = {
			8,
			nil,
			nil,
			15
		}
	},
	["8"] = {
		[7] = {
			nil,
			nil,
			nil,
			15
		},
		[15] = {
			nil,
			7
		}
	},
	["15"] = {
		[7] = {}
	},
	["7"] = {}
}
tt.idle_cooldown_min = 2
tt.idle_cooldown_max = 6
tt.idle_anims = nil
tt.idle_start_anims = {
	"startidle2",
	"startidle1"
}
tt.idle_fight_anims = {
	"idle1",
	"idle2",
	"idle4",
	"idle5",
	"idle6"
}
tt.first_time_cooldown = b.first_time_cooldown
tt.life_hurt_threshold = {
	33,
	66
}
tt.destroy_holders_template = "decal_stage_16_holder_destroy_fx"
tt.destroy_holders_crater_template = "decal_stage_16_holder_destroy_crater"
tt.destroy_holders_bullet = "bullet_stage_16_overseer_destroy_holders"
tt.change_towers_template = "decal_stage_16_tower_change_fx"
tt.ui.click_rect = r(-120, -30, 240, 180)
tt.ui.can_click = true
tt.info.fn = scripts.controller_stage_16_overseer.get_info
tt.info.portrait = "gui_bottom_info_image_enemies_0043"
tt.sound_rumble = "Stage16OverseerRumble"
tt.sound_unchain_center = "Stage16OverseerUnchainCenter"
tt.sound_teleport_charge = "Stage16OverseerTeleportCharge"
tt.sound_teleport = "Stage16OverseerTeleport"
tt.sound_destroy_charge = "Stage16OverseerDestroyCharge"
tt.sound_destroy_ray = "Stage16OverseerDestroyRay"
tt.sound_destroy_explosion = "Stage16OverseerDestroyExplosion"
tt.sound_hurt = "Stage16OverseerHurt"
tt.sound_death = "Stage16OverseerDeath"
tt = E:register_t("controller_stage_16_mouth_left")
b = balance.specials.stage16_overseer.mouth_left

E:add_comps(tt, "editor", "pos", "main_script", "render")

tt.main_script.update = scripts.controller_stage_16_overseer_mouth_door.update
tt.render.sprites[1] = E:clone_c("sprite")
tt.render.sprites[1].prefix = "overseer_mouthDef"
tt.render.sprites[1].name = "closeidle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = 4
tt.check_pos = v(282, 556)
tt.check_cooldown = fts(5)
tt.check_radius = 150
tt.check_vis_flags = F_ENEMY
tt.check_vis_bans = F_BOSS
tt.config = b
tt = E:register_t("controller_stage_16_mouth_right", "controller_stage_16_mouth_left")
tt.render.sprites[1].flip_x = true
b = balance.specials.stage16_overseer.mouth_right
tt.check_pos = v(721, 553)
tt.config = b
tt = E:register_t("controller_stage_16_tentacle_left")
b = balance.specials.stage16_overseer.tentacle_left

E:add_comps(tt, "editor", "pos", "main_script", "render")

tt.main_script.update = scripts.controller_stage_16_overseer_tentacle.update
tt.render.sprites[1] = E:clone_c("sprite")
tt.render.sprites[1].prefix = "overseer_tentacleDef"
tt.render.sprites[1].name = "idletrapped"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_BACKGROUND_COVERS - 5
tt.config = b
tt.shot_delay = fts(24)
tt.bullet = "bullet_stage_16_overseer_tentacle_spawn"
tt.spawn_offset = v(90, -130)
tt.spawn_pos = {
	v(76, 332),
	v(218, 424)
}
tt.spawn_path = {
	1,
	2
}
tt.tentacle_mouth_template = "controller_stage_16_tentacle_mouth_left"
tt.first_cooldown = balance.specials.stage16_overseer.first_time_cooldown
tt.sound_rumble = "Stage16OverseerRumble"
tt.sound_unchain = "Stage16OverseerUnchainLeftRight"
tt.sound_spawn = "Stage16OverseerSpawnerCast"
tt = E:register_t("controller_stage_16_tentacle_right", "controller_stage_16_tentacle_left")
tt.render.sprites[1].flip_x = true
b = balance.specials.stage16_overseer.tentacle_right
tt.config = b
tt.is_right = true
tt.spawn_offset = v(-80, -150)
tt.spawn_pos = {
	v(850, 446),
	v(860, 206)
}
tt.spawn_path = {
	3,
	4
}
tt.tentacle_mouth_template = "controller_stage_16_tentacle_mouth_right"
tt = E:register_t("controller_stage_16_tentacle_mouth_left")

E:add_comps(tt, "editor", "pos", "main_script", "render")

tt.main_script.update = scripts.controller_stage_16_overseer_tentacle_mouth.update
tt.render.sprites[1] = E:clone_c("sprite")
tt.render.sprites[1].prefix = "overseer_tentacle2Def"
tt.render.sprites[1].name = "free"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_BACKGROUND_COVERS + 1
tt = E:register_t("controller_stage_16_tentacle_mouth_right", "controller_stage_16_tentacle_mouth_left")
tt.render.sprites[1].flip_x = true
tt = E:register_t("controller_stage_16_overseer_eye1")

E:add_comps(tt, "editor", "pos", "main_script", "render")

tt.main_script.update = scripts.controller_stage_16_overseer_eye.update
tt.render.sprites[1] = E:clone_c("sprite")
tt.render.sprites[1].prefix = "overseer_minieye1Def"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].sort_y_offset = -10
tt.blink_min_cooldown = 3
tt.blink_max_cooldown = 5
tt.idle_anims = nil
tt.idle_not_damaged = {
	"anim1",
	"anim2",
	"anim3"
}
tt.idle_damaged = {
	"eyehurttwitch"
}
tt.life_hurt_threshold = 66
tt = E:register_t("controller_stage_16_overseer_eye2", "controller_stage_16_overseer_eye1")
tt.render.sprites[1].prefix = "overseer_minieye2Def"
tt.life_hurt_threshold = 33
tt = E:register_t("controller_stage_16_overseer_eye3", "controller_stage_16_overseer_eye1")
tt.render.sprites[1].prefix = "overseer_minieye3Def"
tt.life_hurt_threshold = 33
tt = E:register_t("controller_stage_16_overseer_eye4", "controller_stage_16_overseer_eye1")
tt.render.sprites[1].prefix = "overseer_minieye4Def"
tt.life_hurt_threshold = 66
tt = E:register_t("controller_stage_16_tentacle_bottom_left")

E:add_comps(tt, "editor", "pos", "render", "main_script")

tt.main_script.update = scripts.controller_stage_16_tentacle_bottom.update
tt.render.sprites[1] = E:clone_c("sprite")
tt.render.sprites[1].prefix = "overseer_undertent1Def"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].loop = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_BACKGROUND_COVERS + 1
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "overseer_underbacktents1Def"
tt.render.sprites[2].name = "loop"
tt.render.sprites[2].loop = true
tt.render.sprites[2].exo = true
tt.render.sprites[2].z = Z_BACKGROUND_COVERS - 1
tt.render.sprites[2].offset = v(-140, 350)
tt.phase_to_free = 4
tt.sound_rumble = "Stage16OverseerRumble"
tt.sound_unchain = "Stage16OverseerUnchainDown"
tt = E:register_t("controller_stage_16_tentacle_bottom_right", "controller_stage_16_tentacle_bottom_left")
tt.render.sprites[1].prefix = "overseer_undertent2Def"
tt.render.sprites[2].prefix = "overseer_underbacktents2Def"
tt.render.sprites[2].offset = v(350, 20)
tt.phase_to_free = 5

tt = E:register_t("controller_stage_18_eridan", "decal_scripted")
b = balance.specials.stage18_eridan

E:add_comps(tt, "bullet_attack", "custom_attack", "editor", "taunts")

tt.render.sprites[1].prefix = "eridan_s18_eridan"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].z = Z_OBJECTS_COVERS + 1
tt.render.sprites[1].sort_y_offset = -10
tt.main_script.update = scripts.controller_stage_18_eridan.update
tt.bullet_attack.max_range = b.ranged_attack.range
tt.bullet_attack.bullet = "bullet_stage_18_eridan_arrow"
tt.bullet_attack.shoot_times = {
	fts(11),
	fts(17),
	fts(23)
}
tt.bullet_attack.cooldown = b.ranged_attack.cooldown
tt.bullet_attack.bullet_start_offset = {
	v(20, 30),
	v(-20, 30)
}
tt.bullet_attack.animation = "shoot"
tt.custom_attack.max_range = b.instakill.range
tt.custom_attack.shoot_time = fts(3)
tt.custom_attack.cooldown = b.instakill.cooldown
tt.custom_attack.animation_start = "dash_out"
tt.custom_attack.animation_fight = "fight_sequence"
tt.custom_attack.animation_end = "dash_in"
tt.custom_attack.hp_threshold = b.instakill.hp_threshold
tt.custom_attack.melee_slot_x = 40
tt.custom_attack.mod = "mod_stage_18_eridan_stun"
tt.custom_attack.hit_time = fts(46)
tt.custom_attack.pop = {
	"pop_crit_heroes"
}
tt.custom_attack.damage_type = b.instakill.damage_type
tt.custom_attack.vis_flags = bor(F_TELEPORT)
tt.custom_attack.vis_bans = bor(F_FLYING)
tt.sound_in_out = "Stage18EridanInOut"
tt.sound_instakill = "Stage18EridanInstakill"
tt.taunts.delay_min = 20
tt.taunts.delay_max = 30
tt.taunts.sets = {}
tt.taunts.sets.preparation = CC("taunt_set")
tt.taunts.sets.preparation.format = "LV18_ERIDAN_PREPARATION_TAUNT_%02i"
tt.taunts.sets.preparation.end_idx = 4
tt.taunts.sets.fight = CC("taunt_set")
tt.taunts.sets.fight.format = "LV18_ERIDAN_FIGHT_TAUNT_%02i"
tt.taunts.sets.fight.end_idx = 8
tt = E:register_t("controller_stage_19_mausoleum", "decal_scripted")
b = balance.specials.stage19_mausoleum

E:add_comps(tt, "editor")

tt.main_script.insert = scripts.controller_stage_19_mausoleum.insert
tt.main_script.update = scripts.controller_stage_19_mausoleum.update
tt.render.sprites[1] = E:clone_c("sprite")
tt.render.sprites[1].prefix = "spawner_mausoleumDef"
tt.render.sprites[1].exo = true
tt.render.sprites[1].animated = true
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].flip_x = true
tt.render.sprites[1].sort_y_offset = -10
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "spawner_mausoleum_lightDef"
tt.render.sprites[2].name = "idle"
tt.render.sprites[2].loop = false
tt.render.sprites[2].exo = true
tt.render.sprites[2].flip_x = true
tt.render.sprites[2].offset = v(5, 0)
tt.render.sprites[2].hidden = true
tt.render.sprites[2].sort_y_offset = -10
tt.wave_config = b.wave_config
tt = E:register_t("controller_stage_19_navira", "decal_scripted")

E:add_comps(tt, "taunts", "editor")

b = balance.enemies.undying_hatred.boss_navira
tt.main_script.insert = scripts.controller_stage_19_navira.insert
tt.main_script.update = scripts.controller_stage_19_navira.update
tt.render.sprites[1].prefix = "navira_navira"
tt.render.sprites[1].animated = true
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].z = Z_OBJECTS_COVERS + 1
tt.render.sprites[1].flip_x = true
tt.render.sprites[1].hidden = true
tt.taunts.delay_min = 20
tt.taunts.delay_max = 30
tt.taunts.sets = {}
tt.taunts.sets.pre_bossfight = CC("taunt_set")
tt.taunts.sets.pre_bossfight.format = "LV19_NAVIRA_TAUNT_%02i"
tt.taunts.sets.pre_bossfight.end_idx = 6
tt.fire_balls_count = b.fire_balls.count
tt.fire_balls_cd = b.fire_balls.cooldown
tt.fire_balls_wait_between_balls = b.fire_balls.wait_between_balls
tt.fire_balls_wait_before_shoot = b.fire_balls.wait_before_shoot
tt.fire_balls_wait_between_shots = b.fire_balls.wait_between_shots
tt.fire_ball_t = "navira_fire_ball"
tt.fire_ball_bullet_t = "bullet_stage_19_navira_fire_ball_ray"
tt.fire_ball_rotation_controller_t = "controller_stage_19_navira_ball_rotation"
tt.hands_dust_1_t = "fx_stage_19_statue_hands_dust_1"
tt.hands_dust_2_t = "fx_stage_19_statue_hands_dust_2"
tt.hands_stones_1_t = "fx_stage_19_statue_hands_stones_1"
tt.hands_stones_2_t = "fx_stage_19_statue_hands_stones_2"
tt.cape_t = "decal_stage_19_navira_cape"
tt.sound_enter = "Stage19NaviraEnter"
tt.sound_fireball_spawn = "Stage19NaviraFireballSpawn"
tt.sound_fireball_cast = "Stage19NaviraFireballCast"
tt.sound_hands_down = "Stage19NaviraHandsDown"
tt.sound_hands_up = "Stage19NaviraHandsUp"
tt = E:register_t("controller_stage_19_navira_ball_rotation")

E:add_comps(tt, "main_script")

tt.main_script.update = scripts.controller_stage_19_navira_ball_rotation.update
tt.fire_ball_rot_speed = 3 * FPS * math.pi / 180
tt.fire_ball_rot_radius = 30
tt = E:register_t("controller_terrain_4_animated_armor_achievement")

E:add_comps(tt, "main_script")

tt.main_script.update = scripts.controller_terrain_4_animated_armor_achievement.update
tt.revived = 0
tt = E:register_t("navira_fire_ball", "decal_tween")
tt.render.sprites[1].prefix = "navira_soul"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].animated = true
tt.render.sprites[1].anchor.y = 0.11666666666666667
tt.render.sprites[1].loop = false
tt.render.sprites[1].z = Z_OBJECTS_COVERS + 1
tt.tween.props[1].name = "offset"
tt.tween.props[1].keys = {
	{
		0,
		v(0, 0)
	},
	{
		0.5,
		v(0, 3)
	},
	{
		1,
		v(0, 0)
	},
	{
		1.5,
		v(0, -3)
	},
	{
		2,
		v(0, 0)
	}
}
tt.tween.props[1].loop = true
tt.tween.remove = false
tt = E:register_t("taunts_s19_controller")

E:add_comps(tt, "main_script", "taunts", "editor")

tt.load_file = "level01_taunts"
tt.main_script.insert = scripts.taunts_controller.insert
tt.taunts.delay_min = 10
tt.taunts.delay_max = 20
tt.taunts.sets = {}
tt.taunts.sets.stage_19_boss_navira_start = CC("taunt_set")
tt.taunts.sets.stage_19_boss_navira_start.format = "TAUNT_STAGE19_BOSS_NAVIRA_START_%04i"
tt.taunts.sets.stage_19_boss_navira_start.decal_name = "decal_stage19_boss_navira_shoutbox"
tt.taunts.sets.stage_19_boss_navira_start.pos = v(460, 550)
tt.taunts.sets.stage_19_boss_navira_before_bossfight = CC("taunt_set")
tt.taunts.sets.stage_19_boss_navira_before_bossfight.format = "TAUNT_STAGE19_BOSS_NAVIRA_BEFORE_BOSSFIGHT_%04i"
tt.taunts.sets.stage_19_boss_navira_before_bossfight.decal_name = "decal_stage19_boss_navira_shoutbox"
tt.taunts.sets.stage_19_boss_navira_before_bossfight.pos = v(460, 550)
tt = E:register_t("decal_stage19_boss_navira_shoutbox", "decal_tween")

E:add_comps(tt, "texts")

tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "cultist_taunt_0001"
tt.render.sprites[1].z = Z_BULLETS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "cultist_taunt_0003"
tt.render.sprites[2].z = Z_BULLETS
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].animated = false
tt.render.sprites[3].z = Z_BULLETS
tt.render.sprites[3].offset = v(13, -13)
tt.texts.list[1].text = "Hello world"
tt.texts.list[1].size = v(158, 56)
tt.texts.list[1].font_name = "taunts"
tt.texts.list[1].font_size = i18n:cjk(28, nil, 22, nil)
tt.texts.list[1].color = {
	233,
	189,
	255
}
tt.texts.list[1].line_height = i18n:cjk(0.8, 0.9, 1.1, 0.7)
tt.texts.list[1].sprite_id = 3
tt.texts.list[1].fit_height = true
tt.tween.props[1].keys = {
	{
		0,
		0
	},
	{
		0.25,
		255
	},
	{
		"this.duration-0.25",
		255
	},
	{
		"this.duration",
		0
	}
}
tt.tween.props[1].sprite_id = 1
tt.tween.props[2] = table.deepclone(tt.tween.props[1])
tt.tween.props[2].sprite_id = 2
tt.tween.props[3] = table.deepclone(tt.tween.props[1])
tt.tween.props[3].sprite_id = 3
tt.tween.props[4] = E:clone_c("tween_prop")
tt.tween.props[4].name = "scale"
tt.tween.props[4].keys = {
	{
		0,
		v(1.01, 1.01)
	},
	{
		0.4,
		v(0.99, 0.99)
	},
	{
		0.8,
		v(1.01, 1.01)
	}
}
tt.tween.props[4].sprite_id = 1
tt.tween.props[4].loop = true
tt.tween.props[5] = table.deepclone(tt.tween.props[4])
tt.tween.props[5].sprite_id = 2
tt.tween.props[6] = table.deepclone(tt.tween.props[4])
tt.tween.props[6].sprite_id = 3
tt.tween.remove = true

tt = E:register_t("controller_stage_22_boss_crocs", "decal_scripted")

E:add_comps(tt, "editor")

b = balance.enemies.crocs.boss_crocs.pre_fight_towers_destroy
tt.main_script.update = scripts.controller_stage_22_boss_crocs.update
tt.render.sprites[1].prefix = "boss_crocs_intro_bossDef"
tt.render.sprites[1].animated = true
tt.render.sprites[1].exo = true
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.render.sprites[1].name = "idle_1"
tt.render.sprites[1].sort_y_offset = 300
tt.render.sprites[1].z = Z_OBJECTS
tt.mod = "mod_boss_crocs_tower_eat"
tt.waves = b.waves
tt.first_cooldown = b.first_cooldown
tt.cooldown = b.cooldown
tt.max_casts = b.max_casts
tt.excluded_templates = {
	"tower_stage_22_arborean_mages",
	"tower_mage_1",
	"tower_mage_2",
	"tower_mage_3",
	"tower_wild_magus"
}
tt.default_idle = "idle_1"
tt.idle_anims = {
	"idle_2"
}
tt.idle_anims_min_cd = 4
tt.idle_anims_max_cd = 10
tt.taunt_keys_amount = b.taunt_keys_amount
tt.skill_anim = "skill"
tt.anim_exit = "exit"
tt.vis_bans = 0
tt.vis_flags = 0
tt.sound_set_free = "Stage22AbominorSetFree"
tt.sound_release_arm = "Stage22AbominorReleaseArm"
tt.sound_release_arm_cinematic = "Stage22AbominorReleaseArmEatTowerOneshot"
tt.sound_catch_arm = "Stage22AbominorCatchArm"

tt = E:register_t("controller_stage_29_spider_holders", "decal_scripted")

E:add_comps(tt, "editor", "ui")

b = balance.specials.stage29_holder_block
tt.main_script.update = scripts.controller_stage_29_spider_holders.update
tt.render.sprites[1].prefix = "spiderholder_spiderholder"
tt.render.sprites[1].animated = true
tt.render.sprites[1].anchor = v(0.5, 0.4)
tt.render.sprites[1].name = "climbing_up_idle"
tt.render.sprites[1].z = Z_OBJECTS_SKY
tt.waves = b.waves
tt.first_cooldown = b.first_cooldown
tt.cooldown = b.cooldown
tt.max_casts = b.max_casts
tt.game_start_blocked_holders = b.game_start_blocked_holders
tt.time_to_down = b.time_to_down
tt.time_to_up = b.time_to_up
tt.time_netting = b.time_netting
tt.taps_to_cancel = b.taps_to_cancel
tt.hand_decal_t = "decal_mod_stage_29_holder_block_hand"
tt.ui.click_rect = r(-35, -40, 70, 70)
tt.vis_bans = 0
tt.vis_flags = 0
tt.threads_separation = 38
tt.threads_amount = math.ceil(REF_H / tt.threads_separation)
tt.threads_idles = {
	"idle1",
	"idle1",
	"idle2",
	"idle3",
	"idle4",
	"idle4"
}

for i = 1, tt.threads_amount do
	local s = E:clone_c("sprite")

	s.prefix = "glarewarden_web_spiderweb"
	s.name = tt.threads_idles[1]
	s.loop = false
	s.anchor.y = 0
	s.offset.y = (i - 1) * tt.threads_separation
	s.z = Z_OBJECTS_SKY - 1
	s.hidden = true
	tt.render.sprites[i + 1] = s
end

tt.sound_loop = "EnemySpidersMechanicTowerSpiderWorkingLoop"
tt.sound_death = "EnemySpidersMechanicTowerSpiderDeath"
tt = E:register_t("tower_holder_pre_blocked_spiders", "decal_scripted")
tt.render.sprites[1].name = "terrains_holders_00017_flag"
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[1].animated = false
tt.render.sprites[1].anchor = v(0.5, 0.3)
tt = E:register_t("controller_stage_30_boss_spiders", "decal_scripted")

E:add_comps(tt, "editor")

b = balance.enemies.arachnids.boss_spider_queen
tt.main_script.update = scripts.controller_stage_30_boss_spiders.update
tt.spawn_path = b.spawn_path
tt.spawn_node = b.spawn_node
tt.render.sid_queen_podium = 1
tt.wave_spawns = b.wave_spawns
tt.wave_spawns_impossible = b.wave_spawns_impossible
tt.wave_spawns_object = "glarenwarden_thread_spawner"
tt.render.sprites[tt.render.sid_queen_podium].prefix = "spiderqueen_spider_queenDef"
tt.render.sprites[tt.render.sid_queen_podium].animated = true
tt.render.sprites[tt.render.sid_queen_podium].exo = true
tt.render.sprites[tt.render.sid_queen_podium].anchor = v(0.5, 0.5)
tt.render.sprites[tt.render.sid_queen_podium].name = "walk"
tt.render.sprites[tt.render.sid_queen_podium].z = Z_OBJECTS
tt.render.sprites[tt.render.sid_queen_podium].sort_y_offset = 0
tt.render.sid_jump = 2
tt.render.sprites[tt.render.sid_jump] = table.deepclone(tt.render.sprites[1])
tt.render.sprites[tt.render.sid_jump].prefix = "spiderqueen_queen_assetDef"
tt.render.sprites[tt.render.sid_jump].hidden = true
tt.render.sprites[tt.render.sid_jump].name = "in"
tt.render.sid_land = 3
tt.render.sprites[tt.render.sid_land] = table.deepclone(tt.render.sprites[2])
tt.render.sprites[tt.render.sid_land].prefix = "spiderqueen_spider_jumpDef"
tt.render.sid_smoke = 4
tt.render.sprites[tt.render.sid_smoke] = table.deepclone(tt.render.sprites[2])
tt.render.sprites[tt.render.sid_smoke].prefix = "spiderqueen_smokeDef"

tt = E:register_t("controller_hero_dragon_arb_passive")
b = balance.heroes.hero_dragon_arb.passive_plant_zones

E:add_comps(tt, "main_script")

tt.main_script.update = scripts.controller_hero_dragon_arb_passive.update
tt.plant_decal = "decal_hero_dragon_arb_passive_plant"
tt.aura_slow = "aura_hero_dragon_arb_passive_slow"
tt.zones_duration = b.zone_duration
tt.zones_radius = b.radius
tt.zone_expansion_cooldown = b.expansion_cooldown

tt = E:register_t("controller_stage_23_roboboots", "decal_scripted")
b = balance.specials.stage23_roboboots

E:add_comps(tt, "editor")

tt.main_script.update = scripts.controller_stage_23_roboboots.update
tt.render.sprites[1] = E:clone_c("sprite")
tt.render.sprites[1].prefix = "dclenanos_stage01_robobootDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].offset = v(0, 1)
tt.render.sprites[1].sort_y_offset = 200
tt.render.sprites[1].z = Z_OBJECTS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "dclenanos_stage01_roboboot2Def"
tt.render.sprites[2].name = "idle"
tt.render.sprites[2].exo = true
tt.render.sprites[2].offset = v(2.3, 3.1)
tt.render.sprites[2].sort_y_offset = 50
tt.render.sprites[2].z = Z_OBJECTS
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].prefix = "dclenanos_stage01_roboboot_topDef"
tt.render.sprites[3].name = "idle"
tt.render.sprites[3].exo = true
tt.render.sprites[3].offset = v(0, 0)
tt.render.sprites[3].sort_y_offset = 200
tt.render.sprites[3].z = Z_OBJECTS
tt.render.sprites[4] = E:clone_c("sprite")
tt.render.sprites[4].prefix = "dclenanos_stage01_roboboot2_topDef"
tt.render.sprites[4].name = "idle"
tt.render.sprites[4].exo = true
tt.render.sprites[4].offset = v(2.3, 2.1)
tt.render.sprites[4].sort_y_offset = 50
tt.render.sprites[4].z = Z_OBJECTS
tt.wave_config = b.wave_config
tt.sound_open = "Stage23BootOpen"
tt.sound_close = "Stage23BootClose"
tt = E:register_t("controller_stage_24_machinist")
b = balance.specials.stage24_factory

E:add_comps(tt, "main_script")

tt.main_script.update = scripts.controller_stage_24_machinist.update
tt.wave_config = b.wave_config
tt.machinist_t = "enemy_machinist"
tt = E:register_t("decal_stage24_boss_machinist_shoutbox", "decal_stage06_cultist_shoutbox")
tt = E:register_t("taunts_s24_controller")

E:add_comps(tt, "main_script", "taunts", "editor")

tt.load_file = "level01_taunts"
tt.main_script.insert = scripts.taunts_controller.insert
tt.taunts.delay_min = 10
tt.taunts.delay_max = 20
tt.taunts.sets = {}
tt.taunts.sets.stage_24_boss_machinist_before_bossfight = CC("taunt_set")
tt.taunts.sets.stage_24_boss_machinist_before_bossfight.format = "TAUNT_STAGE24_BOSS_MACHINIST_BEFORE_BOSSFIGHT_%04i"
tt.taunts.sets.stage_24_boss_machinist_before_bossfight.decal_name = "decal_stage24_boss_machinist_shoutbox"
tt.taunts.sets.stage_24_boss_machinist_before_bossfight.pos = v(460, 550)
tt = E:register_t("controller_stage_25_torso")
b = balance.specials.stage25_torso

E:add_comps(tt, "main_script")

tt.main_script.update = scripts.controller_stage_25_torso.update
tt.wave_config = b.wave_config
tt.action_duration = fts(220)
tt.fist_radius = b.fist.radius
tt.fist_damage_type = bor(DAMAGE_INSTAKILL, DAMAGE_NO_SPAWNS, DAMAGE_IGNORE_SHIELD, DAMAGE_NO_DODGE)
tt.torso_t = "decal_stage_25_torso"
tt.torso_modes_t = "decal_stage_25_torso_modes"
tt.fist_t = "decal_stage_25_fist"
tt.fist_decal_t = "decal_stage_25_fist_shadow"
tt.missile_shoot_time = fts(66)
tt.missile_mark_mod = "mod_stage_25_torso_missile_mark"
tt.missile_t = "bullet_stage_25_torso_missile"
tt.missile_spawn_pos = v(750, 585)
tt.sound_torso_open = "Stage25TorsoOpen"
tt.sound_torso_close = "Stage25TorsoClose"
tt.sound_torso_lever_1 = "Stage25TorsoOperateLever1"
tt.sound_torso_lever_2 = "Stage25TorsoOperateLever2"
tt.sound_torso_button = "Stage25TorsoButton"
tt.sound_fist = "Stage25FistSlam"
tt.sound_missile = "Stage25MissileLaunch"
tt = E:register_t("decal_stage25_machinist_shoutbox", "decal_stage06_cultist_shoutbox")
tt = E:register_t("taunts_s25_controller")

E:add_comps(tt, "main_script", "taunts", "editor")

tt.load_file = "level01_taunts"
tt.main_script.insert = scripts.taunts_controller.insert
tt.taunts.delay_min = 10
tt.taunts.delay_max = 20
tt.taunts.sets = {}
tt.taunts.sets.stage_25_machinist_end = CC("taunt_set")
tt.taunts.sets.stage_25_machinist_end.format = "TAUNT_STAGE25_MACHINIST_END_%04i"
tt.taunts.sets.stage_25_machinist_end.decal_name = "decal_stage25_machinist_shoutbox"
tt.taunts.sets.stage_25_machinist_end.pos = v(460, 550)
tt = E:register_t("controller_stage_25_tunnel_glow")

E:add_comps(tt, "main_script")

tt.main_script.update = scripts.controller_stage_25_tunnel_glow.update
tt.glow_t = "decal_stage_25_mask_2_glow"
tt = E:register_t("controller_stage_26_taunts")

E:add_comps(tt, "main_script", "taunts", "editor")

tt.main_script.update = scripts.controller_stage_26_taunts.update
tt.taunts.delay_min = 20
tt.taunts.delay_max = 30
tt.taunts.sets = {}
tt.taunts.sets.preparation = CC("taunt_set")
tt.taunts.sets.preparation.format = "LV26_GRYMBEARD_PREPARATION_TAUNT_%02i"
tt.taunts.sets.preparation.end_idx = 4
tt.taunts.sets.fight = CC("taunt_set")
tt.taunts.sets.fight.format = "LV26_GRYMBEARD_FIGHT_TAUNT_%02i"
tt.taunts.sets.fight.end_idx = 4
tt = E:register_t("controller_stage_26_spawners")
b = balance.specials.stage26_spawners

E:add_comps(tt, "main_script")

tt.main_script.update = scripts.controller_stage_26_spawners.update
tt.wave_config = b.wave_config
tt.fist_spawner_controller_t = "controller_stage_26_fist_spawner"
tt.tube_left_t = "decal_stage_26_tube_left"
tt.tube_right_t = "decal_stage_26_tube_right"
tt.clone_spawner_controller_t = "controller_stage_26_clone_spawner"
tt.clone_spawner_t = "decal_stage_26_clone_spawner"
tt.hulk_spawner_controller_t = "controller_stage_26_hulk_spawner"
tt.hulk_spawner_t = "decal_stage_26_hulk_spawner"
tt = E:register_t("controller_stage_26_fist_spawner")

E:add_comps(tt, "main_script")

tt.main_script.update = scripts.controller_stage_26_fist_spawner.update
tt.boss_t = "decal_stage_26_boss"
tt.hand_controller_t = "controller_stage_26_fist_spawner_hand"
tt = E:register_t("controller_stage_26_fist_spawner_hand")

E:add_comps(tt, "main_script")

tt.main_script.update = scripts.controller_stage_26_fist_spawner_hand.update
tt.fist_spawner_t = "decal_stage_26_fist_spawner"
tt.fist_spawner_light_t = "decal_stage_26_fist_spawner_light"
tt.sound_hand = "Stage26FistSpawnerHand"
tt.sound_open = "Stage26FistSpawnerBoothFrontDoorOpen"
tt.sound_close = "Stage26FistSpawnerBoothFrontDoorClose"
tt = E:register_t("controller_stage_26_clone_spawner")

E:add_comps(tt, "main_script")

tt.main_script.update = scripts.controller_stage_26_clone_spawner.update
tt.clone_spawner_t = "decal_stage_26_fist_spawner"
tt.tube_t = "decal_stage_26_fist_spawner_light"
tt.boss_t = "decal_stage_26_boss"
tt.sound_in = "Stage26CloneSpawnerIn"
tt.sound_out = "Stage26CloneSpawnerOut"
tt.sound_chain = "Stage26Chain"
tt = E:register_t("controller_stage_26_hulk_spawner")

E:add_comps(tt, "main_script", "events")

tt.main_script.update = scripts.controller_stage_26_hulk_spawner.update
tt.hulk_spawner_t = "decal_stage_26_hulk_spawner"
tt.hulk_t = "enemy_darksteel_hulk"
tt.hulk_spawn_delay = fts(322)
tt.path_to_spawn = 9
tt.events.list[1].name = "hulk_spawn"
tt.events.list[1].on_event = scripts.controller_stage_26_hulk_spawner.on_event
tt.sound_shot = "Stage26HulkSpawnerShotTransform"
tt = E:register_t("decal_stage26_boss_shoutbox", "decal_stage06_cultist_shoutbox")
tt = E:register_t("taunts_s26_controller")

E:add_comps(tt, "main_script", "taunts", "editor")

tt.load_file = "level01_taunts"
tt.main_script.insert = scripts.taunts_controller.insert
tt.taunts.delay_min = 10
tt.taunts.delay_max = 20
tt.taunts.sets = {}
tt.taunts.sets.stage_26_boss_before_bossfight = CC("taunt_set")
tt.taunts.sets.stage_26_boss_before_bossfight.format = "TAUNT_STAGE26_BOSS_BEFORE_BOSSFIGHT_%04i"
tt.taunts.sets.stage_26_boss_before_bossfight.decal_name = "decal_stage26_boss_shoutbox"
tt.taunts.sets.stage_26_boss_before_bossfight.pos = v(460, 550)
tt = E:register_t("decal_stage27_boss_shoutbox", "decal_stage06_cultist_shoutbox")
tt = E:register_t("controller_stage_27_platform")

E:add_comps(tt, "main_script", "events", "taunts", "editor")

tt.main_script.insert = scripts.taunts_controller.insert
tt.main_script.update = scripts.controller_stage_27_platform.update
tt.platform_t = "decal_stage_27_platform"
tt.platform_bars_t = "decal_stage_27_platform_bars"
tt.cannon_left_t = "decal_stage_27_cannon_left"
tt.cannon_right_t = "decal_stage_27_cannon_right"
tt.cannon_controller_t_l = "controller_stage_27_cannon_L"
tt.cannon_controller_t_r = "controller_stage_27_cannon_R"
tt.head_controller_t = "controller_stage_27_head"
tt.door_mask_t = "decal_stage_27_mask_3"
tt.events.list[1].name = "platform_up"
tt.events.list[1].on_event = scripts.controller_stage_27_platform.on_platform_up_event
tt.events.list[2] = E:clone_c("event")
tt.events.list[2].name = "platform_down"
tt.events.list[2].on_event = scripts.controller_stage_27_platform.on_platform_down_event
tt.events.list[3] = E:clone_c("event")
tt.events.list[3].name = "platform_destroy"
tt.events.list[3].on_event = scripts.controller_stage_27_platform.on_platform_destroy_event
tt.events.list[4] = E:clone_c("event")
tt.events.list[4].name = "cannons"
tt.events.list[4].on_event = scripts.controller_stage_27_platform.on_cannons_event
tt.events.list[5] = E:clone_c("event")
tt.events.list[5].name = "taunt"
tt.events.list[5].on_event = scripts.controller_stage_27_platform.on_taunt_event
tt.load_file = "level01_taunts"
tt.taunts.sets = {}
tt.taunts.sets.preparation = CC("taunt_set")
tt.taunts.sets.preparation.format = "LV27_GRYMBEARD_PREPARATION_TAUNT_%02i"
tt.taunts.sets.preparation.end_idx = 4
tt.taunts.sets.fight = CC("taunt_set")
tt.taunts.sets.fight.format = "LV27_GRYMBEARD_FIGHT_TAUNT_%02i"
tt.taunts.sets.fight.end_idx = 4
tt.sound_intro = "Stage27Intro"
tt.sound_platform_up = "Stage27PlatformUp"
tt.sound_platform_down = "Stage27PlatformDown"
tt.sound_platform_destroy_chains = "Stage27PlatformDestroyChains"
tt.sound_platform_destroy_impacts = "Stage27PlatformDestroyHeadImpacts"
tt.sound_cannon_alarm = "Stage27CloneCannonAlarm"
tt = E:register_t("controller_stage_27_cannon")

E:add_comps(tt, "main_script")

tt.main_script.update = scripts.controller_stage_27_cannon.update
tt.cannon_shot_fx_t = "fx_stage_27_cannon_shot"
tt.cannon_shoot_time = fts(30)
tt.bullet_clone_dead_t = "bullet_stage_27_clone_dead"
tt.bullet_clone_alive_t = "bullet_stage_27_clone_alive"
tt.sound_shot = "Stage27CloneCannonOneShot"
tt = E:register_t("controller_stage_27_cannon_L", "controller_stage_27_cannon")

E:add_comps(tt, "events")

tt.events.list[1].name = "shoot-cannons-L"
tt._decal = "decal_stage_27_cannon_left"
tt.events.list[1].on_event = scripts.controller_stage_27_cannon.on_cannons_event
tt = E:register_t("controller_stage_27_cannon_R", "controller_stage_27_cannon")

E:add_comps(tt, "events")

tt.events.list[1].name = "shoot-cannons-R"
tt._decal = "decal_stage_27_cannon_right"
tt.events.list[1].on_event = scripts.controller_stage_27_cannon.on_cannons_event
tt = E:register_t("controller_stage_27_head")
b = balance.specials.stage27_head

E:add_comps(tt, "main_script", "events", "ui", "editor")

tt.main_script.update = scripts.controller_stage_27_head.update
tt.head_t = "decal_stage_27_head"
tt.ray_t = "decal_stage_27_ray"
tt.ray_stun_mod_t = "mod_stage_27_ray_stun"
tt.ray_damage_type = bor(DAMAGE_INSTAKILL, DAMAGE_NO_SPAWNS, DAMAGE_IGNORE_SHIELD, DAMAGE_NO_DODGE)
tt.goblins_t = "decal_stage_27_goblins"
tt.smoke_back_t = "decal_stage_27_smoke_back"
tt.smoke_front_t = "decal_stage_27_smoke_front"
tt.sparks_t = "decal_stage_27_sparks"
tt.scrap_bullet_t = "bullet_stage_27_scrap"
tt.scrap_fx_t = "fx_stage_27_scrap"
tt.tower_stun_bullet_t = "bullet_stage_27_tower_stun"
tt.hand_decal_t = "decal_mod_stage_25_torso_missile_stun_hand"
tt.towers_to_stun = b.towers_to_stun
tt.events.list[1].name = "head_attack_left"
tt.events.list[1].on_event = scripts.controller_stage_27_head.on_attack_left_event
tt.events.list[2] = E:clone_c("event")
tt.events.list[2].name = "head_attack_right"
tt.events.list[2].on_event = scripts.controller_stage_27_head.on_attack_right_event
tt.events.list[3] = E:clone_c("event")
tt.events.list[3].name = "head_attack_left_cannon"
tt.events.list[3].on_event = scripts.controller_stage_27_head.on_attack_left_cannon_event
tt.events.list[4] = E:clone_c("event")
tt.events.list[4].name = "head_attack_right_cannon"
tt.events.list[4].on_event = scripts.controller_stage_27_head.on_attack_right_cannon_event
tt.events.list[5] = E:clone_c("event")
tt.events.list[5].name = "head_cannons"
tt.events.list[5].on_event = scripts.controller_stage_27_head.on_cannons_event
tt.events.list[6] = E:clone_c("event")
tt.events.list[6].name = "head_ears"
tt.events.list[6].on_event = scripts.controller_stage_27_head.on_ears_event
tt.events.list[7] = E:clone_c("event")
tt.events.list[7].name = "head_destroy"
tt.events.list[7].on_event = scripts.controller_stage_27_head.on_head_destroy_event
tt.events.list[8] = E:clone_c("event")
tt.events.list[8].name = "head_scrap"
tt.events.list[8].on_event = scripts.controller_stage_27_head.on_scrap_event
tt.ui.click_rect = r(-100, 50, 350, 250)
tt.charge_time = b.charge_time
tt.attack_duration = b.attack_duration
tt.taps_to_cancel = b.taps_to_cancel
tt.sound_ears_open = "Stage27HeadOpen"
tt.sound_ears_close = "Stage27HeadClose"
tt.sound_move = "Stage27HeadMove"
tt.sound_charge = "Stage27HeadFireblastCharge"
tt.sound_shoot = "Stage27HeadFireblastRelease"
tt.sound_cancel_tap = "Stage27HeadFireblastCancelTap"
tt.sound_interrupt = "Stage27HeadFireblastInterrupt"
tt.sound_return = "Stage27HeadReturn"

tt = RT("glarenwarden_thread_spawner", "decal_scripted")

AC(tt, "nav_path", "motion", "spawner", "sound_events")

tt.spawn = "enemy_glarenwarden"
tt.main_script.insert = scripts.glarenwarden_thread_spawner.insert
tt.main_script.update = scripts.glarenwarden_thread_spawner.update
tt.sound_events.insert = "ElvesCreepSonOfMactansLanding"
tt.render.sprites[1].prefix = "glarenwarden_creep"
tt.render.sprites[1].name = "descending_loop"
tt.render.sprites[1].offset.y = 0
tt.render.sprites[1].anchor.y = 0.5
tt.render.sprites[1].z = Z_OBJECTS_SKY
tt.threads_separation = 38
tt.threads_amount = math.ceil(REF_H / tt.threads_separation)
tt.threads_idles = {
	"idle1",
	"idle1",
	"idle2",
	"idle3",
	"idle4",
	"idle4"
}

for i = 1, tt.threads_amount do
	local s = E:clone_c("sprite")

	s.prefix = "glarewarden_web_spiderweb"
	s.name = tt.threads_idles[1]
	s.loop = false
	s.anchor.y = 0
	s.offset.y = (i - 1) * tt.threads_separation
	s.z = Z_OBJECTS_SKY - 1
	tt.render.sprites[i + 1] = s
end

tt = E:register_t("power_hero_control_custom")

E:add_comps(tt, "user_power", "pos", "main_script", "user_selection")

tt.main_script.insert = scripts.power_hero_control_custom.insert
tt.user_selection.can_select_point_fn = scripts.power_hero_control_custom.can_select_point
tt.power_cooldown_fn = scripts.power_hero_control_custom.get_cooldown
tt = E:register_t("power_hero_control_custom_1", "power_hero_control_custom")
tt.hero_id = nil
tt = E:register_t("power_hero_control_custom_2", "power_hero_control_custom")
tt.hero_id = nil
tt = E:get_template("power_reinforcements_control")

function tt.power_cooldown_fn()
	return E:get_template("re_current_1").cooldown
end

tt.main_script.insert = scripts.power_reinforcements_control_KR5.insert
tt = E:register_t("power_denas_control", "power_reinforcements_control")
tt.main_script.insert = scripts.power_stage_15_denas_control.insert
tt.denas_t = "soldier_reinforcement_stage_15_denas"

function tt.power_cooldown_fn()
	return E:get_template("soldier_reinforcement_stage_15_denas").power_cooldown
end

E:set_template("user_power_1", E:get_template("power_reinforcements_control"))
E:set_template("user_power_2", E:get_template("power_hero_control_custom_1"))
E:set_template("user_power_3", E:get_template("power_hero_control_custom_2"))

tt = E:register_t("item_control_custom")

E:add_comps(tt, "pos", "main_script", "user_selection")

tt.main_script.insert = scripts.item_control_custom.insert
tt.user_selection.can_select_point_fn = scripts.item_control_custom.can_select_point
tt = E:register_t("user_item_1", "item_control_custom")
tt.item_id = nil
tt = E:register_t("user_item_2", "item_control_custom")
tt.item_id = nil
tt = E:register_t("user_item_3", "item_control_custom")
tt.item_id = nil
tt = E:register_t("controller_item")

E:add_comps(tt, "pos", "main_script")

tt = E:register_t("controller_item_cluster_bomb", "controller_item")
tt.main_script.insert = scripts.controller_item_cluster_bomb.insert
tt.can_fire_fn = scripts.controller_item_cluster_bomb.can_fire_fn
tt.bullet = "bomb_item_cluster_bomb"
tt.spawn_height = 15
tt = E:register_t("controller_item_portable_coil", "controller_item")
tt.main_script.insert = scripts.controller_item_portable_coil.insert
tt.can_fire_fn = scripts.controller_item_portable_coil.can_fire_fn
tt.coil = "decal_item_portable_coil"
tt = E:register_t("controller_item_scroll_of_spaceshift", "controller_item")
b = balance.items.scroll_of_spaceshift
tt.main_script.update = scripts.controller_item_scroll_of_spaceshift.update
tt.can_fire_fn = scripts.controller_item_scroll_of_spaceshift.can_fire_fn
tt.teleport_decal = "decal_item_scroll_of_spaceshift"
tt.teleport_fx = "fx_item_scroll_of_spaceshift"
tt.vis_bans = bor(F_BOSS)
tt.vis_flags = bor(F_TELEPORT)
tt.radius = b.radius
tt.teleport_dist = b.teleport_dist
tt.max_targets = b.max_targets
tt.mod_mark = "mod_item_scroll_of_spaceshift_mark"
tt.mod_teleport = "mod_item_scroll_of_spaceshift_teleport"
tt.sound_cast = "ItemsScrollOfSpaceshiftCast"
tt.sound_teleport_in = "ItemsScrollOfSpaceshiftTeleportIn"
tt.sound_teleport_out = "ItemsScrollOfSpaceshiftTeleportOut"
tt = E:register_t("controller_item_second_breath", "controller_item")
tt.main_script.insert = scripts.controller_item_second_breath.insert
tt.main_script.update = scripts.controller_item_second_breath.update
tt.can_fire_fn = scripts.controller_item_second_breath.can_fire_fn
tt.decal = "decal_item_second_breath"
tt.respawn_fx = "fx_item_second_breath_respawn"
tt.tap_fx = "fx_item_second_breath_tap"
tt.mod_heal = "mod_item_second_breath_heal"
tt.sound_cast = "ItemsSecondBreathCast"
tt = E:register_t("controller_item_deaths_touch", "controller_item")
b = balance.items.deaths_touch
tt.main_script.insert = scripts.controller_item_deaths_touch.insert
tt.main_script.update = scripts.controller_item_deaths_touch.update
tt.can_fire_fn = scripts.controller_item_deaths_touch.can_fire_fn
tt.vis_bans = 0
tt.vis_flags = 0
tt.radius = b.radius
tt.allowed_templates = nil
tt.excluded_templates = {
	"enemy_machinist"
}
tt.damage_type_boss = DAMAGE_TRUE
tt.damage_boss = b.damage_boss
tt.damage_type = bor(DAMAGE_DISINTEGRATE, DAMAGE_INSTAKILL, DAMAGE_NO_SPAWNS)
tt.damage_delay = 0.35
tt.fx = "fx_item_deaths_touch"
tt.sound = "ItemsDeathsTouchCast"
tt = E:register_t("controller_item_loot_box", "controller_item")
b = balance.items.loot_box
tt.main_script.insert = scripts.controller_item_loot_box.insert
tt.can_fire_fn = scripts.controller_item_loot_box.can_fire_fn
tt.vis_bans = 0
tt.vis_flags = 0
tt.radius = b.radius
tt.damage_min = b.damage_min
tt.damage_max = b.damage_max
tt.damage_type = DAMAGE_TRUE
tt.boxes_decals = {
	"decal_item_loot_box_chest_projectile",
	"decal_item_loot_box_pig_projectile",
	"decal_item_loot_box_statue_projectile"
}
tt = E:register_t("controller_item_medical_kit", "controller_item")
b = balance.items.medical_kit
tt.can_fire_fn = scripts.controller_item_medical_kit.can_fire_fn
tt.main_script.insert = scripts.controller_item_medical_kit.insert
tt.hearts = b.hearts
tt.sound_cast = "ItemsMedicalKitCast"
tt = E:register_t("controller_item_winter_age", "controller_item")
b = balance.items.winter_age
tt.main_script.update = scripts.controller_item_winter_age.update
tt.main_script.remove = scripts.controller_item_winter_age.remove
tt.can_fire_fn = scripts.controller_item_winter_age.can_fire_fn
tt.vis_bans = 0
tt.vis_flags = 0
tt.allowed_templates = nil
tt.excluded_templates = nil
tt.mod = "mod_item_winter_age_freeze"
tt.stun_duration = b.stun_duration
tt.sound_in = "ItemsWinterAgeCast"
tt.sound_loop = "ItemsWinterAgeLoop"
tt.sound_out = "ItemsWinterAgeRelease"
tt = E:register_t("controller_item_summon_blackburn", "controller_item")
b = balance.items.summon_blackburn
tt.main_script.insert = scripts.controller_item_summon_blackburn.insert
tt.can_fire_fn = scripts.controller_item_summon_blackburn.can_fire_fn
tt.vis_bans = 0
tt.vis_flags = 0
tt.allowed_templates = nil
tt.excluded_templates = nil
tt.blackburn = "soldier_reinforcement_item_summon_blackburn"
tt.sound_cast = "ItemsBlackburnCast"
tt = E:register_t("controller_item_veznan_wrath", "controller_item")
b = balance.items.veznan_wrath
tt.main_script.update = scripts.controller_item_veznan_wrath.update
tt.can_fire_fn = scripts.controller_item_veznan_wrath.can_fire_fn
tt.vis_bans = 0
tt.vis_flags = 0
tt.allowed_templates = nil
tt.excluded_templates = nil
tt.damage_min = b.damage_min
tt.damage_max = b.damage_max
tt.controller_overlay = "controller_item_veznan_wrath_overlay"
tt.controller_explosions = "controller_item_veznan_wrath_explosions"
tt.fx_instakill_ground = "fx_item_veznan_wrath_instakill_ground"
tt.decal_instakill_ground = "decal_item_veznan_wrath_instakill_ground"
tt.fx_instakill_air = "fx_item_veznan_wrath_instakill_air"
tt.blink_duration = fts(45)
tt.sound_in = "ItemsVeznanWrathEnter"
tt.sound_initial_burst = "ItemsVeznanWrathInitialBurst"
tt.sound_explosion = "ItemsVeznanWrathExplosion"
tt = E:register_t("controller_item_veznan_wrath_overlay", "controller_item")
tt.main_script.update = scripts.controller_item_veznan_wrath_overlay.update
tt.overlay_dark = "decal_item_veznan_wrath_dark_overlay"
tt.overlay_green = "decal_item_veznan_wrath_green_overlay"
tt = E:register_t("controller_item_veznan_wrath_explosions", "controller_item")
tt.main_script.update = scripts.controller_item_veznan_wrath_explosions.update
tt.fx_explosion = "fx_item_veznan_wrath_explosion"
tt = E:register_t("trees_arborean_sages", "decal_scripted")
b = balance.specials.trees.arborean_sages

E:add_comps(tt, "bullet_attack", "editor")

tt.render.sprites[1].prefix = "trees_arborean_sages"
tt.render.sprites[1].name = "holder"
tt.main_script.update = scripts.trees_arborean_sages.update
tt.bullet_attack.max_range = b.range
tt.bullet_attack.bullet = "trees_arborean_sages_bolt"
tt.bullet_attack.shoot_time = fts(12)
tt.bullet_attack.cooldown_min = b.cooldown_min
tt.bullet_attack.cooldown_max = b.cooldown_max
tt.bullet_attack.bullet_start_offset = v(18, 38)
tt.bullet_attack.animation = "attack"
tt.spawn_wave = nil
tt.leave_wave = nil
tt.spawn_anim = "spawn"
tt.leave_anim = "disappear"
tt.gone_anim = "holder"
tt.editor.props = {
	{
		"spawn_wave",
		PT_NUMBER
	},
	{
		"leave_wave",
		PT_NUMBER
	}
}
tt = E:register_t("trees_arborean_sages_bolt", "bolt")
tt.render.sprites[1].prefix = "veznan_hero_bolt"
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.bullet.damage_type = b.damage_type
tt.bullet.damage_max = b.damage_max
tt.bullet.damage_min = b.damage_min
tt.bullet.acceleration_factor = 0.1
tt.bullet.min_speed = 30
tt.bullet.max_speed = 300
tt.sound_events.insert = "ElvesHeroVeznanRangeShoot"
tt.bullet.pop = {
	"pop_mage"
}
tt.bullet.pop_conds = DR_KILL
tt = E:register_t("trees_fruity_trees", "decal_scripted")
b = balance.specials.trees.fruity_tree

E:add_comps(tt, "custom_attack", "ui", "plant", "editor")

tt.custom_attack.cooldown = nil
tt.custom_attack.cooldown_min = b.cooldown_min
tt.custom_attack.cooldown_max = b.cooldown_max
tt.custom_attack.range = b.max_range
tt.custom_attack.distance_between_fruits = 80
tt.custom_attack.max_fruits = 3
tt.custom_attack.bullet = "trees_fruity_tree_fruit_proy"
tt.custom_attack.bullet_start_offset = v(0, 55)
tt.custom_attack.sound = "ElvesPlantMissile"
tt.custom_attack.shoot_time = fts(6)
tt.editor.props = {
	{
		"ui.nav_mesh_id",
		PT_STRING
	}
}
tt.render.sprites[1].prefix = "trees_fruity_tree"
tt.render.sprites[1].anchor.y = 0.0641025641025641
tt.main_script.insert = scripts.trees_fruity_tree.insert
tt.main_script.update = scripts.trees_fruity_tree.update
tt.ui.can_click = false
tt.ui.can_select = false
tt.ui.click_rect = r(-24, -5, 48, 65)
tt = E:register_t("trees_fruity_tree_fruit_proy", "bomb")
tt.bullet.damage_bans = F_ALL
tt.bullet.damage_flags = 0
tt.bullet.damage_max = 0
tt.bullet.damage_min = 0
tt.bullet.damage_radius = 1
tt.bullet.flight_time = fts(24)
tt.bullet.pop = nil
tt.bullet.hit_payload = "trees_fruity_tree_fruit"
tt.main_script.insert = scripts.bomb.insert
tt.main_script.update = scripts.bomb.update
tt.bullet.hit_fx = nil
tt.bullet.hit_decal = nil
tt.bullet.hide_radius = nil
tt.render.sprites[1].name = "trees_fruity_tree_fruit_proy"
tt.render.sprites[1].animated = false
tt.sound_events.insert = "HeroRiflemanMine"
tt.sound_events.hit = nil
tt.sound_events.hit_water = nil
tt = E:register_t("trees_fruity_tree_fruit", "decal_scripted")
tt.check_interval = fts(3)
tt.duration = b.duration
tt.hit_fx = "trees_fruity_tree_fruit_apply_fx"
tt.main_script.update = scripts.trees_fruity_tree_fruit.update
tt.radius = b.consume_range
tt.render.sprites[1].loop = true
tt.render.sprites[1].name = "trees_fruity_tree_fruit"
tt.render.sprites[1].z = Z_DECALS
tt.sound = "BombExplosionSound"
tt.vis_bans = 0
tt.vis_flags = 0
tt.mod = "instant_heal_mod"
tt.heal_hp = b.heal
tt = E:register_t("trees_fruity_tree_fruit_apply_fx", "fx")
tt.render.sprites[1].name = "trees_fruity_tree_fruit_apply_fx"
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("trees_guardian_tree", "decal_scripted")
b = balance.specials.trees.guardian_tree

E:add_comps(tt, "custom_attack", "cheats", "editor")

tt.tree_disabled = b.disabled
tt.wave_config = b.wave_config
tt.custom_attack.cooldown = nil
tt.custom_attack.cooldown_min = b.cooldown_min
tt.custom_attack.cooldown_max = b.cooldown_max
tt.custom_attack.max_range = b.max_range
tt.custom_attack.min_range = b.min_range
tt.custom_attack.animation = "attack"
tt.custom_attack.aura = "trees_guardian_tree_vine_aura_decal"
tt.custom_attack.sound = "ElvesPlantMissile"
tt.custom_attack.shoot_time = fts(35)
tt.custom_attack.entity = "trees_guardian_tree_wave_of_roots"
tt.custom_attack.vis_flags = bor(F_RANGED)
tt.custom_attack.vis_bans = bor(F_BOSS, F_FLYING, F_FRIEND, F_HERO)
tt.render.sprites[1] = E:clone_c("sprite")
tt.render.sprites[1].prefix = "Stage02TreePart2Def"
tt.render.sprites[1].name = "idle_sleep"
tt.render.sprites[1].exo = true
tt.render.sprites[1].group = "layers"
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].prefix = "Stage02TreeDef"
tt.render.sprites[2].name = "idle_sleep"
tt.render.sprites[2].exo = true
tt.render.sprites[2].group = "layers"
tt.render.sprites[2].sort_y_offset = -40
tt.animation_idle_sleep = "idle_sleep"
tt.animation_go_to_awake = "back_to_idle_awake"
tt.animation_idle_awake = "idle_awake"
tt.animation_go_to_sleep = "back_to_idle_sleep"
tt.main_script.insert = scripts.trees_guardian_tree.insert
tt.main_script.update = scripts.trees_guardian_tree.update
tt.editor.overrides = {
	["render.sprites[2].name"] = "idle_sleep"
}
tt.cheats.buttons[1].text = "TreeDecal"
tt.cheats.buttons[1].fn = function(button, store, e)
	function DEBUG_RIGHT_CLICK(x, y)
		local hp = E:create_entity("trees_guardian_tree_vine_aura")

		hp.pos.x, hp.pos.y = x, y

		simulation:queue_insert_entity(hp)
	end
end
tt.cheats.buttons[2] = E:clone_c("cheats_text_button")
tt.cheats.buttons[2].text = "TreeCD"
tt.cheats.buttons[2].fn = function(button, store, e)
	e.custom_attack.ts = store.tick_ts - e.custom_attack.cooldown
end
tt.cheats.buttons[3] = E:clone_c("cheats_text_button")
tt.cheats.buttons[3].text = "TreeRanges"
tt.cheats.buttons[3].fn = function(button, store, e)
	for _, range in ipairs({
		e.custom_attack.max_range,
		e.custom_attack.min_range
	}) do
		local hp = E:create_entity("decal_debug_range")

		hp.pos.x, hp.pos.y = e.pos.x, e.pos.y
		hp.radius = range

		simulation:queue_insert_entity(hp)
	end
end
tt.cheats.buttons[4] = E:clone_c("cheats_text_button")
tt.cheats.buttons[4].text = "TreeONOFF"
tt.cheats.buttons[4].fn = function(button, store, e)
	local current_wave = store.wave_group_number
	local current_config = e.wave_config[current_wave]

	e.wave_config[current_wave] = not current_config
end
tt.sound_pre_cast = "Stage02GuardianTreePreCast"
tt.sound_cast = "Stage02GuardianTreeCast"
tt.sound_roots = "Stage02GuardianTreeRoots"
tt = E:register_t("trees_guardian_tree_wave_of_roots")

E:add_comps(tt, "pos", "main_script")

b = balance.specials.trees.guardian_tree
tt.main_script.update = scripts.trees_guardian_tree_wave_of_roots.update
tt.sep_nodes_min = b.sep_nodes_min
tt.sep_nodes_max = b.sep_nodes_max
tt.show_delay_min = b.show_delay_min
tt.show_delay_max = b.show_delay_max
tt.count = b.roots_count
tt.radius = 50
tt.wave_pi = 1
tt.root_hand_L_pos = v(0, 350)
tt.root_hand_R_pos = v(250, 450)
tt.start_offset = -20
tt.root_hand_offset_path_merge = -8
tt.decal = "trees_guardian_tree_wave_of_roots_decal"
tt.vis_flags = bor(F_STUN)
tt.vis_bans = bor(F_FLYING, F_BOSS)
tt.mod = "mod_stage_guardian_tree_wave_of_roots_stun"
tt = E:register_t("trees_guardian_tree_wave_of_roots_decal", "decal_sequence")
tt.render.sprites[1].prefix = "stage_2_special_treeFX_groundFX0"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].anchor.y = 0.3181818181818182
tt.render.sprites[1].z = Z_DECALS
tt.sequence.steps = {
	"start",
	nil,
	"end"
}
tt = E:register_t("trees_heart_of_the_arborean_decal", "decal_scripted")
b = balance.specials.trees.heart_of_the_arborean

E:add_comps(tt, "custom_attack", "ui", "cheats")

tt.render.sprites[1].prefix = "heartDef"
tt.render.sprites[1].name = "idleLoading"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt.main_script.insert = scripts.trees_heart_of_the_arborean_decal.insert
tt.main_script.update = scripts.trees_heart_of_the_arborean_decal.update
tt.custom_attack.cooldown_max = b.cooldown_max
tt.custom_attack.cooldown_min = b.cooldown_min
tt.custom_attack.max_range = b.max_range
tt.custom_attack.damage_radius = b.damage_radius
tt.custom_attack.damage_max = b.damage_max
tt.custom_attack.damage_min = b.damage_min
tt.custom_attack.damage_type = b.damage_type
tt.custom_attack.max_targets = b.max_targets
tt.custom_attack.min_targets = b.min_targets
tt.custom_attack.door1Pos = v(757, 568)
tt.custom_attack.door2Pos = v(318, 566)
tt.custom_attack.cast_time = fts(21)
tt.custom_attack.wait_between_shots = b.wait_between_shots
tt.custom_attack.min_dist_between_tgts = b.min_dist_between_tgts
tt.custom_attack.node_prediction = fts(45)
tt.custom_attack.sound = nil
tt.custom_attack.bullet = "bullet_stage_03_heart_of_the_arborean"
tt.custom_attack.bullet_start_offset = v(0, 90)
tt.ui.click_rect = r(-100, -100, 200, 200)
tt.cheats.buttons[1].text = "H_CD"
tt.cheats.buttons[1].fn = function(button, store, e)
	if e.custom_attack.cooldown then
		e.custom_attack.ts = store.tick_ts - e.custom_attack.cooldown
	end
end
tt.sound_ready = "Stage03HeartOfTheForestReady"
tt.sound_cast = "Stage03HeartOfTheForestCast"
tt = E:register_t("trees_heart_of_the_arborean_decal_hit", "fx")

E:add_comps(tt, "tween")

tt.render.sprites[1].prefix = "explosiondecalDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt.tween.props[1].name = "alpha"
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		1,
		0
	}
}
tt = E:register_t("trees_heart_of_the_arborean_decal_hit_fx", "fx")
tt.render.sprites[1].prefix = "explosionDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS_COVERS - 1
tt = E:register_t("decal_stage_03_heart_back_waves", "decal")
tt.render.sprites[1].prefix = "heart_back_wavesDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].loop = true
tt = E:register_t("decal_stage_03_heart_front_waves", "decal")
tt.render.sprites[1].prefix = "heart_front_wavesDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].loop = true
tt = E:register_t("arborean_shaman_bullet", "bullet")

E:add_comps(tt, "force_motion")

tt.render.sprites[1].name = "tricannon_tower_lvl2_bomb"
tt.render.sprites[1].animated = false
tt.bullet.damage_min = 10
tt.bullet.damage_max = 10
tt.bullet.particles_name = "ps_tower_tricannon_bomb_trail"
tt.bullet.miss_decal = nil
tt.bullet.vis_flags = F_RANGED
tt.bullet.vis_bans = 0
tt.bullet.xp_gain_factor = 0.78
tt.bullet.damage_type = bor(DAMAGE_MAGICAL, DAMAGE_ONE_SHIELD_HIT)
tt.bullet.max_speed = 300
tt.bullet.min_speed = 30
tt.initial_impulse = 15000
tt.initial_impulse_duration = 0.15
tt.initial_impulse_angle = math.pi / 1.5
tt.force_motion.a_step = 5
tt.force_motion.max_a = 3000
tt.force_motion.max_v = 300
tt.main_script.update = scripts.hero_muyrn_ranged_attack_bullet.update
tt = E:register_t("trees_heart_of_the_arborean_shaman_decal", "decal_scripted")
tt.render.sprites[1].prefix = "shamanDef"
tt.render.sprites[1].name = "Idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS
tt.main_script.insert = scripts.trees_heart_of_the_arborean_shaman_decal.insert
tt.main_script.update = scripts.trees_heart_of_the_arborean_shaman_decal.update
tt = E:register_t("trees_heart_of_the_arborean_shaman_water_decal", "decal")
tt.render.sprites[1].prefix = "wavesDef"
tt.render.sprites[1].name = "Idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_stage_03_river", "decal")
tt.render.sprites[1].prefix = "riverDef"
tt.render.sprites[1].name = "riverRunning"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("tower_arborean_sentinels", "tower_KR5")
b = balance.specials.towers.arborean_sentinels

E:add_comps(tt, "vis", "barrack")

tt.tower.type = "tower_arborean_sentinels"
tt.tower.level = 1
tt.tower.kind = TOWER_KIND_BARRACK
tt.tower.can_be_sold = false
tt.tower.can_be_mod = false
tt.info.portrait = "portraits_towers_0008"
tt.info.fn = scripts.tower_barrack_mercenaries.get_info
tt.main_script.update = scripts.tower_barrack_mercenaries_KR5.update
tt.main_script.remove = scripts.tower_barrack.remove

function tt.main_script.insert(this, store, script)
	if this.render.sprites[1].flip_x == true then
		this.barrack.respawn_offset.x = this.barrack.respawn_offset.x * -1
	end

	return scripts.tower_barrack.insert(this, store, script)
end

tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "stage4_barrack_holder"
tt.render.sprites[1].offset = v(0, 8)
tt.render.sprites[2] = E:clone_c("sprite")
tt.render.sprites[2].animated = false
tt.render.sprites[2].name = "arborean_barrack_lvl1"
tt.render.sprites[2].z = Z_OBJECTS
tt.render.sprites[2].sort_y_offset = -8
tt.render.sprites[3] = E:clone_c("sprite")
tt.render.sprites[3].prefix = "arborean_barrack_lvl1_door"
tt.render.sprites[3].name = "close"
tt.render.sprites[3].loop = false
tt.render.sprites[3].z = Z_OBJECTS
tt.render.sprites[3].offset = v(3, -4)
tt.render.sprites[3].sort_y_offset = -8
tt.render.door_sid = 3
tt.barrack.soldier_type = "soldier_arborean_sentinels_spearmen"
tt.barrack.rally_range = 209.28
tt.barrack.respawn_offset = v(0, 5)
tt.sound_events.change_rally_point = "Stage04ArboreanThornspears"

tt = E:register_t("soldier_arborean_sentinels_spearmen", "soldier_militia")

E:add_comps(tt, "powers", "timed_attacks", "ranged", "nav_grid")

tt.health.armor = b.spearmen.armor
tt.health.hp_max = b.spearmen.hp_max
tt.regen.health = b.spearmen.regen_health
tt.health_bar.offset = v(0, 35)
tt.health.delete_after = 2
tt.health.dead_lifetime = b.spearmen.dead_lifetime
tt.info.portrait = "gui_bottom_info_image_soldiers_0008"
tt.info.random_name_format = "SOLDIER_ARBOREAN_SENTINELS_%i_NAME"
tt.info.random_name_count = 9
tt.main_script.insert = scripts.soldier_barrack.insert
tt.main_script.update = customScripts1.kr4_soldier_barrack.update
tt.melee.attacks[1].cooldown = b.spearmen.melee_attack.cooldown
tt.melee.attacks[1].damage_max = b.spearmen.melee_attack.damage_max
tt.melee.attacks[1].damage_min = b.spearmen.melee_attack.damage_min
tt.melee.attacks[1].hit_time = fts(10)
tt.melee.range = b.spearmen.melee_attack.range
tt.motion.max_speed = b.spearmen.max_speed
tt.ranged.attacks[1].animation = "ranged_attack"
tt.ranged.attacks[1].bullet = "arborean_sentinels_spearmen_spear"
tt.ranged.attacks[1].bullet_start_offset = {
	v(0, 25)
}
tt.ranged.attacks[1].cooldown = b.spearmen.ranged_attack.cooldown
tt.ranged.attacks[1].max_range = b.spearmen.ranged_attack.max_range
tt.ranged.attacks[1].min_range = b.spearmen.ranged_attack.min_range
tt.ranged.attacks[1].shoot_time = fts(6)
tt.render.sprites[1].prefix = "stage_4_special_arborean_sentinels_spearer_soldier"
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.soldier.melee_slot_offset = v(5, 0)
tt.unit.price = b.spearmen.price
tt.unit.fade_time_after_death = 1
tt.sound_events.insert = "Stage04ArboreanThornspears"

tt = E:register_t("arborean_sentinels_spearmen_spear", "arrow")
tt.bullet.damage_max = b.spearmen.ranged_attack.damage_max
tt.bullet.damage_min = b.spearmen.ranged_attack.damage_min
tt.bullet.damage_type = b.spearmen.ranged_attack.damage_type
tt.bullet.miss_decal = "stage_4_special_arborean_sentinels_spearer_spear_decal"
tt.bullet.flight_time = fts(14)
tt.bullet.hide_radius = 10
tt.bullet.hit_fx = "fx_arborean_sentinels_spearmen_spear_hit"
tt.render.sprites[1].name = "stage_4_special_arborean_sentinels_spearer_spear"

tt = E:register_t("soldier_arborean_sentinels_barkshield", "soldier_militia")

E:add_comps(tt, "nav_grid")

tt.info.portrait = "bottom_info_image_soldiers_0003"
tt.info.random_name_format = "SOLDIER_ARBOREAN_SENTINELS_%i_NAME"
tt.info.random_name_count = 9
tt.info.fn = scripts.soldier_barrack.get_info
tt.render.sprites[1].prefix = "stage_4_special_arborean_sentinels_barkshield_soldier"
tt.render.sprites[1].anchor = v(0.5, 0.5)
tt.soldier.melee_slot_offset = v(12, 0)
tt.regen.health = b.barkshield.regen_health
tt.health.hp_max = b.barkshield.hp_max
tt.health.armor = b.barkshield.armor
tt.health_bar.offset = v(0, 41)
tt.health_bar.type = HEALTH_BAR_SIZE_MEDIUM
tt.health.dead_lifetime = b.barkshield.dead_lifetime
tt.unit.fade_time_after_death = 5
tt.melee.attacks[1].cooldown = b.barkshield.melee_attack.cooldown
tt.melee.attacks[1].damage_min = b.barkshield.melee_attack.damage_min
tt.melee.attacks[1].damage_max = b.barkshield.melee_attack.damage_max
tt.melee.attacks[1].hit_time = fts(8)
tt.melee.attacks[1].sound = "HeroDragonArbArboreansHit"
tt.melee.range = b.barkshield.melee_attack.range
tt.motion.max_speed = b.barkshield.max_speed
tt.main_script.insert = scripts.soldier_barrack.insert
tt.main_script.update = customScripts1.kr4_soldier_barrack.update
tt.unit.price = b.barkshield.price

tt = E:register_t("bush_ladder", "decal_scripted")

E:add_comps(tt, "spawner", "tween")

tt.render.sprites[1].prefix = "elevator_cosoDef"
tt.render.sprites[1].name = "idleraise"
tt.render.sprites[1].exo = true
tt.render.sprites[1].anchor.y = 1
tt.render.sprites[1].z = Z_BACKGROUND_COVERS - 3
tt.render.sprites[1].hidden = true
tt.render.sprites[2] = CC("sprite")
tt.render.sprites[2].prefix = "elevatorDef"
tt.render.sprites[1].name = "idleraise"
tt.render.sprites[2].exo = true
tt.render.sprites[2].z = Z_BACKGROUND_COVERS - 3
tt.render.sprites[2].anchor.y = 1
tt.render.sprites[2].hidden = true
tt.animation_spawner_start = "start"
tt.animation_spawner_idle = "idleraise"
tt.main_script.update = scripts.bush_ladder_decal.update
tt.spawn_data = nil
tt.spawner.eternal = true
tt.spawner_template = "bush_spawner"
tt.break_time = fts(20)
tt.tween.remove = false
tt.tween.props[1].keys = {
	{
		0,
		255
	},
	{
		fts(9),
		255
	}
}
tt.tween.props[2] = E:clone_c("tween_prop")
tt.tween.props[2].name = "offset"
tt.tween.props[2].keys = {
	{
		0,
		v(0, 80)
	},
	{
		fts(5),
		v(0, 0)
	}
}
tt.tween.props[2].sprite_id = 1
tt.tween.props[3] = E:clone_c("tween_prop")
tt.tween.props[3].name = "offset"
tt.tween.props[3].keys = {
	{
		0,
		v(0, 100)
	},
	{
		fts(5),
		v(0, 0)
	}
}
tt.tween.props[3].sprite_id = 2
tt = E:register_t("bush_spawner", "decal_scripted")

E:add_comps(tt, "spawner", "editor")

tt.render.sprites[1].prefix = "elevatorDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].hidden = true
tt.render.sprites[1].anchor.y = 0.5
tt.render.sprites[1].z = Z_DECALS + 1
tt.animation_spawner_start = "start"
tt.animation_spawner_end = "end"
tt.animation_spawner_idle = "idle"
tt.main_script.update = scripts.bush_spawner_decal.update
tt.spawn_data = nil
tt.spawner.eternal = true
tt = E:register_t("decal_stage_05_blocked_path", "decal_scripted")
tt.render.sprites[1] = E:clone_c("sprite")
tt.render.sprites[1].prefix = "stage5TreesDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].group = "layers"
tt.render.sprites[1].z = Z_DECALS
tt.main_script.update = scripts.decal_stage_05_blocked_path.update
tt.rustle_times = 1
tt.rustle_delay = 1
tt.cut_down_delay = 1
tt = E:register_t("decal_stage_05_bear_woodcutter", "decal_scripted")
tt.render.sprites[1] = E:clone_c("sprite")
tt.render.sprites[1].prefix = "bear_woodcutterDef"
tt.render.sprites[1].name = "loop"
tt.render.sprites[1].exo = true
tt.render.sprites[1].group = "layers"
tt.render.sprites[1].z = Z_BACKGROUND_COVERS
tt.main_script.update = scripts.decal_stage_05_bear_woodcutter.update
tt.entity = "enemy_bear_woodcutter"
tt.spawn_pos = v(242, 459)
tt.waypoint_pos = v(220, 459)
tt = E:register_t("decal_stage_06_cult_leader", "decal_scripted")
tt.render.sprites[1] = E:clone_c("sprite")
tt.render.sprites[1].prefix = "mydrias_cinematic"
tt.render.sprites[1].name = "idle"
tt = E:register_t("decal_pool_party1", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "stage_6_poolparty_deco_water"
tt.render.sprites[1].z = Z_DECALS - 1
tt = E:register_t("decal_pool_party2", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1] = E:clone_c("sprite")
tt.render.sprites[1].animated = true
tt.render.sprites[1].prefix = "stage_6_poolparty_deco"
tt.render.sprites[1].z = Z_DECALS - 1
tt = E:register_t("decal_pool_party3", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1] = E:clone_c("sprite")
tt.render.sprites[1].animated = true
tt.render.sprites[1].name = "stage_6_poolparty_deco_sleeping_arborean"
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_pool_party4", "decal")

E:add_comps(tt, "editor")

for i = 1, 2 do
	tt.render.sprites[i] = E:clone_c("sprite")
	tt.render.sprites[i].prefix = "stage_6_poolparty_deco_demon_jump_layer" .. i
	tt.render.sprites[i].group = "layers"
	tt.render.sprites[i].name = "idle"
	tt.render.sprites[i].z = Z_DECALS
end

tt = E:register_t("decal_pool_party5", "decal")

E:add_comps(tt, "editor")

for i = 1, 4 do
	tt.render.sprites[i] = E:clone_c("sprite")
	tt.render.sprites[i].prefix = "stage_6_poolparty_deco_volleyball_layer" .. i
	tt.render.sprites[i].group = "layers"
	tt.render.sprites[i].name = "idle"
	tt.render.sprites[i].z = Z_DECALS
end

tt = E:register_t("decal_pool_party6", "decal")

E:add_comps(tt, "editor")

for i = 1, 2 do
	tt.render.sprites[i] = E:clone_c("sprite")
	tt.render.sprites[i].prefix = "stage_6_poolparty_deco_music_arborean_layer" .. i
	tt.render.sprites[i].group = "layers"
	tt.render.sprites[i].name = "idle"
	tt.render.sprites[i].z = Z_DECALS
end

tt = E:register_t("decal_pool_party7", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1] = E:clone_c("sprite")
tt.render.sprites[1].animated = TEXTURE_SIZE_ALIAS
tt.render.sprites[1].name = "stage_6_poolparty_deco_baby"
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_pool_party8", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1] = E:clone_c("sprite")
tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "stage_6_poolparty_deco_weapons"
tt.render.sprites[1].z = Z_DECALS
tt = E:register_t("decal_gold_mount", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "stage_06_parches_espada"
tt.render.sprites[1].z = Z_DECALS - 1
tt = E:register_t("decal_tiki_bar1", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1].animated = false
tt.render.sprites[1].name = "stage_06_parches_tiki_bottom"
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].sort_y_offset = 0
tt = E:register_t("decal_tiki_bar2", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1] = E:clone_c("sprite")
tt.render.sprites[1].animated = true
tt.render.sprites[1].prefix = "stage_06_parches_tiki_top_bebe2"
tt.render.sprites[1].name = "Idle1"
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].sort_y_offset = -2
tt = E:register_t("decal_tiki_bar3", "decal_tiki_bar2")
tt.render.sprites[1].prefix = "stage_06_parches_tiki_top_bebe1"
tt.render.sprites[1].name = "idle1"
tt = E:register_t("decal_tiki_bar4", "decal")

E:add_comps(tt, "editor")

tt.render.sprites[1] = E:clone_c("sprite")
tt.render.sprites[1].animated = true
tt.render.sprites[1].name = "stage_06_parches_tiki_top_viejo"
tt.render.sprites[1].z = Z_DECALS
tt.render.sprites[1].sort_y_offset = -2
tt = E:register_t("decal_tiki_bar5", "decal_tiki_bar2")
tt.render.sprites[1].prefix = "stage_06_parches_tiki_top_pibe"
tt.render.sprites[1].name = "Idle"
tt.render.sprites[1].sort_y_offset = 1
tt = E:register_t("decal_tiki_bar6", "decal_tiki_bar1")
tt.render.sprites[1].name = "stage_06_parches_tiki_top"
tt.render.sprites[1].sort_y_offset = -1
tt = E:register_t("soldier_elf_stage_08", "decal_scripted")
b = balance.specials.stage08_elf_rescue.elf

E:add_comps(tt, "bullet_attack", "editor")

tt.render.sprites[1].prefix = "elven_warrior"
tt.render.sprites[1].name = "idle"
tt.main_script.update = scripts.soldier_elf_stage_08.update
tt.bullet_attack.max_range = b.range
tt.bullet_attack.bullet = "arrow_soldier_elf_stage_08"
tt.bullet_attack.shoot_time = fts(3)
tt.bullet_attack.cooldown_min = b.cooldown_min
tt.bullet_attack.cooldown_max = b.cooldown_max
tt.bullet_attack.bullet_start_offset = {
	v(20, 20),
	v(-20, 20)
}
tt.bullet_attack.animation = "shoot"
tt.bullet_attack.vis_bans = bor(F_MINIBOSS, F_NIGHTMARE)
tt.idle_rest_cooldown = 2
tt = E:register_t("arrow_soldier_elf_stage_08", "arrow5_45degrees")
b = balance.specials.stage08_elf_rescue.elf
tt.bullet.damage_min = b.damage_min
tt.bullet.damage_max = b.damage_max
tt.bullet.damage_type = b.damage_type
tt.bullet.fixed_height = 50
tt.bullet.miss_decal = "elven_warrior_arrow_0002"
tt.bullet.mod = "mod_arrow_soldier_elf_stage_08"
tt.render.sprites[1].name = "elven_warrior_arrow_0001"
tt = E:register_t("decal_stage_08_elf_rescue_chains", "decal_scripted")
tt.render.sprites[1].prefix = "ChainDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_DECALS
tt.main_script.update = scripts.decal_stage_08_elf_rescue_chains.update
tt = E:register_t("decal_stage_08_elf_rescue_elf_slave", "decal_scripted")
tt.render.sprites[1].prefix = "ElfSlaveDef"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].exo = true
tt.render.sprites[1].z = Z_OBJECTS
tt.action_cooldown_min = fts(20)
tt.action_cooldown_max = fts(20)
tt.main_script.update = scripts.decal_stage_08_elf_rescue_elf_slave.update
tt.sound_rescue = "Stage08RescuedElves"

tt = E:register_t("stage_29_cocoon", "decal_scripted")

E:add_comps(tt, "spawner")

tt.render.sprites[1].prefix = "cocon_stage2_coocoon"
tt.render.sprites[1].name = "idle"
tt.render.sprites[1].z = Z_OBJECTS
tt.animation_spawner_start = "summon_in"
tt.animation_spawner_idle = "idle_anim"
tt.animation_spawner_end = "summon_out"
tt.animation_spawner_idle_broken = "idle_broken"
tt.broken_on_heroic = true
tt.broken_on_iron = true
tt.main_script.update = scripts.stage_29_cocoon.update
tt.spawn_data = nil
tt.spawner.eternal = true
tt.sound_inflate = "EnemySpidersMechanicSpawnerInflate"
tt.sound_explode = "EnemySpidersMechanicSpawnerExplode"
tt.sound_regenerate = "EnemySpidersMechanicSpawnerRegenerate"